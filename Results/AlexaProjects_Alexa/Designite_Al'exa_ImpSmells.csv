Implementation smell,Namespace,Class,File,Method,Description
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,RunSteps,The method has 118 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The method has 105 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The method has 303 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The method has 303 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The method has 213 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The method has 135 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The method has 207 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The method has 159 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has 522 lines of code.
Long Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has 335 lines of code.
Long Method,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has 622 lines of code.
Complex Method,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,WarmUp,Cyclomatic complexity of the method is 10
Complex Method,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,Finish,Cyclomatic complexity of the method is 8
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,RunSteps,Cyclomatic complexity of the method is 24
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,Cyclomatic complexity of the method is 16
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,Cyclomatic complexity of the method is 45
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,Cyclomatic complexity of the method is 45
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,Cyclomatic complexity of the method is 34
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIcon,Cyclomatic complexity of the method is 14
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,Cyclomatic complexity of the method is 22
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,Cyclomatic complexity of the method is 31
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,Cyclomatic complexity of the method is 26
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepMouseClick,Cyclomatic complexity of the method is 9
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ChangeStepBehavior,Cyclomatic complexity of the method is 8
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ClickAndInsert,Cyclomatic complexity of the method is 9
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,Cyclomatic complexity of the method is 74
Complex Method,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,Cyclomatic complexity of the method is 47
Complex Method,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,Cyclomatic complexity of the method is 87
Complex Method,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,SendEmail,Cyclomatic complexity of the method is 8
Long Parameter List,Alexa.Utilities,LogUtils,C:\repos\AlexaProjects_Alexa\Utilities\LogUtils.cs,Write,The method has 5 parameters.
Long Statement,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,Main,The length of the statement  "	if (ConfigUtils.LogFolderUserName != "" && ConfigUtils.LogFolderPassword != "" && ConfigUtils.LogFolder.IndexOf (@"\\") != -1) { " is 128.
Long Statement,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,WarmUp,The length of the statement  "				List<uint> processes = SystemUtils.ProcessUtils.GetUserProcessesByRegEx (processDomain' processUser' processToKill.InnerText); " is 126.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,RunSteps,The length of the statement  "			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "cannot find the bind attribute for the step " + GetStepNameNumber (alexaStep) + ". This step is an \"interact\" type and you have to define a bind attribute."); " is 230.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,RunSteps,The length of the statement  "			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "step type \"" + stepType + "\" of step " + GetStepNameNumber (alexaStep) + " doesn't exist."); " is 164.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The length of the statement  "			//To understand these two lines of code I do a small example: Suppose for example to run FireFox passing a new url as argument. " is 127.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The length of the statement  "			//If FireFox is already open then we will obtain a new tab and not a new istance of FireFox. So to close the page that has loaded our url we have to kill " is 153.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The length of the statement  "			//the first process of FireFox. To do this I call GetUserProcessesByName that performs a WMI query to get all processes that in their name contain  " is 146.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The length of the statement  "			//p.ProcessName. In our example I will kill all FireFox processes. Note that also Internet Explorer and other programs work like FireFox. " is 137.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The length of the statement  "					List<UInt32> executableProcesses = SystemUtils.ProcessUtils.GetUserProcessesByName (Environment.UserDomainName' Environment.UserName' processName); " is 147.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "run program: " + executable + " with argument(s): " + arguments); " is 135.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "			desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp")); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "		if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) { " is 141.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 121.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "			Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]); " is 128.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName); " is 169.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "			desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp")); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "		if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) { " is 141.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 121.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "			Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]); " is 128.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName); " is 174.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The length of the statement  "			desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp")); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The length of the statement  "		if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) { " is 141.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The length of the statement  "			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 121.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The length of the statement  "			Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]); " is 128.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The length of the statement  "					labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight)); " is 137.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName); " is 171.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName); " is 130.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIcon,The length of the statement  "			//LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + imageName); " is 123.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIcon,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugCoreFolder + "iconFound.bmp"); " is 128.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIcon,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "a similar icon was found. Icon minval is: " + iconbox.minval); " is 132.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIcon,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "icon found on x: " + iconbox.x + " and y: " + iconbox.y + "' step is " + GetStepNameNumber (alexaStep)); " is 174.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIcon,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the icon was not found (step number " + _stepNumber + ")' returned icon minval is: " + iconbox.minval); " is 175.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The length of the statement  "			desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp")); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The length of the statement  "		if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) { " is 141.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The length of the statement  "			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 121.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The length of the statement  "			Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]); " is 128.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName); " is 144.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "			desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp")); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "		if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) { " is 141.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 121.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "			Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]); " is 128.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "					//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\""); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "					//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\""); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName); " is 157.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The length of the statement  "			desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp")); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The length of the statement  "		if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) { " is 141.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The length of the statement  "			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 121.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The length of the statement  "			Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]); " is 128.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The length of the statement  "			chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The length of the statement  "			chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]); " is 127.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName); " is 146.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,UpdateRegionPoints,The length of the statement  "		desktopScreen = CropRect (desktopScreen' new Rectangle (_interruptBindPointX + _cropInterruptRegionRectX' _interruptBindPointY + _cropInterruptRegionRectY' _cropInterruptRegionRectWidth' _cropInterruptRegionRectHeight)); " is 220.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,UpdateRegionPoints,The length of the statement  "	//if (_debugLogLevel) desktopScreen.Save(Path.Combine(_debugFullPath' DateTime.Now.ToString(_debugImageDateFormat) + "_DesktopScreenshot.bmp")); " is 144.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,GetBindRegionPoints,The length of the statement  "		desktopScreen = CropRect (desktopScreen' new Rectangle (_interruptBindPointX + _cropInterruptRegionRectX' _interruptBindPointY + _cropInterruptRegionRectY' _cropInterruptRegionRectWidth' _cropInterruptRegionRectHeight)); " is 220.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ClickAndInsert,The length of the statement  "		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on x: " + x + "' y: " + y + " and insert text \"" + text + "\""); " is 141.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SelectListItem,The length of the statement  "		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on x: " + x + "' y: " + y + " and select item \"" + text + "\""); " is 141.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,checkStringByOCR,The length of the statement  "				if (Regex.IsMatch (textInImage' inputString) || Regex.IsMatch (textInImage.Replace ("m"' "rn")' inputString) || Regex.IsMatch (textInImage.Replace ("rn"' "m")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "1")' inputString) || Regex.IsMatch (textInImage.Replace ("1"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "i")' inputString) || Regex.IsMatch (textInImage.Replace ("i"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("t"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "t")' inputString) || Regex.IsMatch (textInImage.Replace ("1"' "i")' inputString) || Regex.IsMatch (textInImage.Replace ("i"' "1")' inputString) || Regex.IsMatch (textInImage.Replace ("I"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "I")' inputString) || Regex.IsMatch (textInImage.Replace ("I"' "1")' inputString) || Regex.IsMatch (textInImage.Replace ("1"' "I")' inputString) || Regex.IsMatch (textInImage.Replace ("I"' "t")' inputString) || Regex.IsMatch (textInImage.Replace ("t"' "I")' inputString) || Regex.IsMatch (textInImage.Replace ("0"' "o")' inputString) || Regex.IsMatch (textInImage.Replace ("o"' "0")' inputString) || Regex.IsMatch (textInImage.Replace ("0"' "O")' inputString) || Regex.IsMatch (textInImage.Replace ("O"' "0")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "|")' inputString) || Regex.IsMatch (textInImage.Replace ("|"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("I"' "|")' inputString) || Regex.IsMatch (textInImage.Replace ("|"' "I")' inputString) || Regex.IsMatch (textInImage.Replace ("t"' "|")' inputString) || Regex.IsMatch (textInImage.Replace ("|"' "t")' inputString) || Regex.IsMatch (textInImage.Replace ("i"' "|")' inputString) || Regex.IsMatch (textInImage.Replace ("|"' "i")' inputString) || Regex.IsMatch (textInImage.Replace ("M"' "II")' inputString) || Regex.IsMatch (textInImage.Replace ("II"' "M")' inputString) || Regex.IsMatch (textInImage.Replace ("ni"' "m")' inputString) || Regex.IsMatch (textInImage.Replace ("m"' "ni")' inputString)) { " is 2069.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		_cropInterruptRegionRectHeight = Int32.Parse (alexaStep.SelectSingleNode ("interrupt").Attributes ["region.height"].Value); " is 123.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		_cropInterruptRegionRectWidth = Int32.Parse (alexaStep.SelectSingleNode ("interrupt").Attributes ["region.width"].Value); " is 121.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "You have to add the node \"insert\" on a \"interact\" step with \"inputbox\" as bind value. The step is " + GetStepNameNumber (alexaStep)); " is 209.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "	if (_label == "" && (stepType == StepType.InteractInputBox || stepType == StepType.InteractButton || stepType == StepType.InteractDropDownList || stepType == StepType.InteractIconList)) { " is 187.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "You have to add the node \"label\" on a \"interact\" step with \"inputbox\" (or \"dropdownlist\" or \"button\" or \"iconlist\") as bind value. The step is " + GetStepNameNumber (alexaStep)); " is 260.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "You have to add the node \"select\" on a \"interact\" step with \"dropdownlist\" as bind value. The step is " + GetStepNameNumber (alexaStep)); " is 213.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "You have to add the attributes \"height\" and \"width\" on a \"interact\" step with \"genericbox\" as bind value. The step is " + GetStepNameNumber (alexaStep)); " is 231.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "You have to add the node \"text\" on a \"interact\" step with \"word\" as bind value. The step is " + GetStepNameNumber (alexaStep)); " is 203.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "			_debugPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (_stepName.Replace (" "' "_"))); " is 156.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true || stepType == StepType.Wait && StepWait (alexaStep) == true) { " is 666.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "			//How do I make the measurement of the time may seems strange' but I have to measure only the time taken by the control to appear " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "			//WITHOUT THE TIME THAT THE Alexa.Core TAKE TO ANALYZE THE IMAGES. So' this is the way that I could find to measure the time " is 124.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "				stepDuration = _stepTime.ElapsedMilliseconds - stepExecutionTime.ElapsedMilliseconds + _otherDelayTime.ElapsedMilliseconds; " is 123.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "			//LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "step " + _stepName + " method duration is: " + stepExecutionTime.ElapsedMilliseconds + "ms"); " is 163.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "		//LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "step " + _stepName + " method duration is: " + stepExecutionTime.ElapsedMilliseconds + "ms"); " is 163.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The length of the statement  "				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "a timeout has occurred with the step number " + _stepNumber); " is 131.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The length of the statement  "		gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50)); " is 187.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,RemoveIllegalChars,The length of the statement  "	return path.Replace ("<"' "").Replace (">"' "").Replace ("\""' "").Replace (":"' "").Replace ("/"' "").Replace ("\\"' "").Replace ("|"' "").Replace ("?"' "").Replace ("*"' ""); " is 176.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The length of the statement  "	if ((windowProperties.Height <= SystemUtils.ScreenHeight - 50 || windowProperties.Width <= SystemUtils.ScreenWidth - 50 || windowProperties.X > 100 || windowProperties.Y > 100) && windowProperties.X > 0) { " is 205.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "		tabSizeTollerance = Int32.Parse (alexaStep.SelectSingleNode ("window").SelectSingleNode ("tab").Attributes ["tollerance"].Value); " is 129.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "		tabTitleBrightness = Int32.Parse (alexaStep.SelectSingleNode ("window").SelectSingleNode ("tab").Attributes ["brightness"].Value); " is 130.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "		tabTitleContrast = Int32.Parse (alexaStep.SelectSingleNode ("window").SelectSingleNode ("tab").Attributes ["contrast"].Value); " is 126.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "		subtractRight = Int32.Parse (alexaStep.SelectSingleNode ("window").SelectSingleNode ("tab").Attributes ["right.subtraction"].Value); " is 132.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "		subtractLeft = Int32.Parse (alexaStep.SelectSingleNode ("window").SelectSingleNode ("tab").Attributes ["left.subtraction"].Value); " is 130.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "		clickOffsetX = Int32.Parse (alexaStep.SelectSingleNode ("window").SelectSingleNode ("tab").Attributes ["click.add.x"].Value); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "		clickOffsetY = Int32.Parse (alexaStep.SelectSingleNode ("window").SelectSingleNode ("tab").Attributes ["click.add.y"].Value); " is 125.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "			debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows"); " is 201.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) { " is 605.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "					desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp")); " is 130.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "				if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) { " is 135.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "					Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 121.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "					Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]); " is 122.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "						tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height)); " is 138.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName); " is 133.
Long Statement,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The length of the statement  "						if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) { " is 605.
Long Statement,Alexa.Utilities,CryptoUtils,C:\repos\AlexaProjects_Alexa\Utilities\CryptoUtils.cs,DecryptString,The length of the statement  "			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "The string \"" + cipherString + "\" cannot be decrypted."); " is 129.
Long Statement,Alexa.Utilities,LogUtils,C:\repos\AlexaProjects_Alexa\Utilities\LogUtils.cs,Write,The length of the statement  "				sw.WriteLine (DateTime.Now.ToString ("dd/MM/yyyy HH:mm:ss tt") + " " + errorLevel.ToString ().ToUpper () + " MESSAGE:  " + message.Replace ("\r"' "").Replace ("\n"' "") + "  CLASS: " + className + "  METHOD: " + methodName + "  LINE: " + line); " is 244.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "					WarningStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value); " is 121.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "					CriticalStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value); " is 122.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "					WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value); " is 124.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "					TimeoutStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value); " is 121.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "					WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value); " is 124.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "					CriticalStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value); " is 125.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "					nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ()); " is 142.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "				OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 155.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 160.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 158.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 124.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 122.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 161.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 158.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 163.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 125.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 122.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 127.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "								nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms"); " is 182.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "								nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms"); " is 181.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 160.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 158.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 164.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value); " is 163.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 124.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 122.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 128.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "						WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value); " is 127.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "		outString = "An internal exception has occurred. Some steps may not have been executed. Please read the Al'exa.log file' "; " is 123.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "		detailString = detailString + "CRITICAL: " + critStep.Split (';') [0] + "' duration is " + critStep.Split (';') [1] + " ms\r\n"; " is 128.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "		detailString = detailString + "WARNING: " + warningStep.Split (';') [0] + "' duration is " + warningStep.Split (';') [1] + " ms\r\n"; " is 133.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "		detailString = detailString + "TIMEOUT: " + timeoutStep.Split (';') [0] + "' duration is " + timeoutStep.Split (';') [1] + " ms\r\n"; " is 133.
Long Statement,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The length of the statement  "	if (ConfigUtils.LogFolderUserName != "" && ConfigUtils.LogFolderPassword != "" && ConfigUtils.LogFolder.IndexOf (@"\\") != -1) { " is 128.
Long Statement,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,SetDirectoryCompression,The length of the statement  "			using (ManagementObject dir = new ManagementObject ("Win32_Directory.Name=\"" + path.FullName.Replace (@"\"' @"\\") + "\"")) { " is 126.
Long Statement,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,SendEmail,The length of the statement  "			//create the process object (we have to send the e-mail with an external executable' otherwise some antivirus could generate problems) " is 134.
Long Statement,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,SendEmail,The length of the statement  "			string arguments = "\"" + ErrorScreenFolder + "\" \"" + ConfigUtils.GetSmtpServer + "\" \"" + ConfigUtils.GetSmtpPort + "\" \"" + ConfigUtils.GetSmtpFromAddress + "\" \""; " is 171.
Long Statement,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,SendEmail,The length of the statement  "			if (ConfigUtils.GetSmtpUser != null && ConfigUtils.GetSmtpUser != "" && ConfigUtils.GetSmtpPassword != null && ConfigUtils.GetSmtpPassword != "") { " is 147.
Long Statement,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,VaryQualityLevel,The length of the statement  "			EncoderParameter myEncoderParameter = new EncoderParameter (myEncoder' Int64.Parse (ConfigUtils.GetSmtpImageQuality.Replace ("%"' ""))); " is 136.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The conditional expression  "_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The conditional expression  "_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The conditional expression  "oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The conditional expression  "_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The conditional expression  "_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The conditional expression  "oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The conditional expression  "_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The conditional expression  "_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The conditional expression  "oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The conditional expression  "_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The conditional expression  "oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The conditional expression  "_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The conditional expression  "oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The conditional expression  "_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The conditional expression  "_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The conditional expression  "oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,checkStringByOCR,The conditional expression  "Regex.IsMatch (textInImage' inputString) || Regex.IsMatch (textInImage.Replace ("m"' "rn")' inputString) || Regex.IsMatch (textInImage.Replace ("rn"' "m")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "1")' inputString) || Regex.IsMatch (textInImage.Replace ("1"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "i")' inputString) || Regex.IsMatch (textInImage.Replace ("i"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("t"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "t")' inputString) || Regex.IsMatch (textInImage.Replace ("1"' "i")' inputString) || Regex.IsMatch (textInImage.Replace ("i"' "1")' inputString) || Regex.IsMatch (textInImage.Replace ("I"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "I")' inputString) || Regex.IsMatch (textInImage.Replace ("I"' "1")' inputString) || Regex.IsMatch (textInImage.Replace ("1"' "I")' inputString) || Regex.IsMatch (textInImage.Replace ("I"' "t")' inputString) || Regex.IsMatch (textInImage.Replace ("t"' "I")' inputString) || Regex.IsMatch (textInImage.Replace ("0"' "o")' inputString) || Regex.IsMatch (textInImage.Replace ("o"' "0")' inputString) || Regex.IsMatch (textInImage.Replace ("0"' "O")' inputString) || Regex.IsMatch (textInImage.Replace ("O"' "0")' inputString) || Regex.IsMatch (textInImage.Replace ("l"' "|")' inputString) || Regex.IsMatch (textInImage.Replace ("|"' "l")' inputString) || Regex.IsMatch (textInImage.Replace ("I"' "|")' inputString) || Regex.IsMatch (textInImage.Replace ("|"' "I")' inputString) || Regex.IsMatch (textInImage.Replace ("t"' "|")' inputString) || Regex.IsMatch (textInImage.Replace ("|"' "t")' inputString) || Regex.IsMatch (textInImage.Replace ("i"' "|")' inputString) || Regex.IsMatch (textInImage.Replace ("|"' "i")' inputString) || Regex.IsMatch (textInImage.Replace ("M"' "II")' inputString) || Regex.IsMatch (textInImage.Replace ("II"' "M")' inputString) || Regex.IsMatch (textInImage.Replace ("ni"' "m")' inputString) || Regex.IsMatch (textInImage.Replace ("m"' "ni")' inputString)"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The conditional expression  "_textToInsert == "" && stepType == StepType.InteractInputBox && _mouseClick == true && _mouseMove == true"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The conditional expression  "_label == "" && (stepType == StepType.InteractInputBox || stepType == StepType.InteractButton || stepType == StepType.InteractDropDownList || stepType == StepType.InteractIconList)"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The conditional expression  "stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true || stepType == StepType.Wait && StepWait (alexaStep) == true"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The conditional expression  "(windowProperties.Height <= SystemUtils.ScreenHeight - 50 || windowProperties.Width <= SystemUtils.ScreenWidth - 50 || windowProperties.X > 100 || windowProperties.Y > 100) && windowProperties.X > 0"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The conditional expression  "stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The conditional expression  "oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1"  is complex.
Complex Conditional,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The conditional expression  "stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true"  is complex.
Complex Conditional,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,SendEmail,The conditional expression  "ConfigUtils.GetSmtpUser != null && ConfigUtils.GetSmtpUser != "" && ConfigUtils.GetSmtpPassword != null && ConfigUtils.GetSmtpPassword != """  is complex.
Empty Catch Block,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,WarmUp,The method has an empty catch block.
Empty Catch Block,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,WarmUp,The method has an empty catch block.
Empty Catch Block,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,WarmUp,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,RunSteps,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepRunExe,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepWait,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepWait,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIcon,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepMouseMove,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepMouseClick,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepMouseClick,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepMouseClick,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ChangeStepBehavior,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ChangeStepBehavior,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ChangeStepBehavior,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SetCoreSourceImage,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,LogUtils,C:\repos\AlexaProjects_Alexa\Utilities\LogUtils.cs,Write,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,LogUtils,C:\repos\AlexaProjects_Alexa\Utilities\LogUtils.cs,Write,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,SendEmail,The method has an empty catch block.
Empty Catch Block,Alexa.Utilities,SystemUtils,C:\repos\AlexaProjects_Alexa\Utilities\SystemUtils.cs,VaryQualityLevel,The method has an empty catch block.
Magic Number,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,Main,The following statement contains a magic number: if (SystemUtils.ProcessUtils.CheckAlexaInstances () == true) {  	Console.WriteLine ("UNKNOWN: another instance of Al'exa is running");  	LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "Another instance of Al'exa is running");  	Environment.Exit (3);  }  
Magic Number,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,Main,The following statement contains a magic number: Environment.Exit (3);  
Magic Number,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,CheckTimeout,The following statement contains a magic number: while (true) {  	//checks if a timeout has occurred  	if (_globalTime.ElapsedMilliseconds > globalTimeout) {  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Error' "global timeout has occurred");  		//call the method that save the output and exit from the program  		Program.Finish (false);  		break;  	}  	Thread.Sleep (500);  }  
Magic Number,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,CheckTimeout,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,Finish,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,Alexa,Program,C:\repos\AlexaProjects_Alexa\Program.cs,Finish,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,RunSteps,The following statement contains a magic number: _autoIt.AutoItSetOption ("SendKeyDelay"' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the inputbox  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the inputbox  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				ClickAndInsert (mouseX' mouseY' _textToInsert);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the input box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the inputbox  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the inputbox  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	ClickAndInsert (mouseX' mouseY' _textToInsert);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	ClickAndInsert (mouseX' mouseY' _textToInsert);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the inputbox  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	ClickAndInsert (mouseX' mouseY' _textToInsert);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	ClickAndInsert (mouseX' mouseY' _textToInsert);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the inputbox  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the inputbox  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	ClickAndInsert (mouseX' mouseY' _textToInsert);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	ClickAndInsert (mouseX' mouseY' _textToInsert);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_InputBox" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	ClickAndInsert (mouseX' mouseY' _textToInsert);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	ClickAndInsert (mouseX' mouseY' _textToInsert);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all Drop Down Listes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetInputBoxes ();  	}  	else {  		boxes = _core.GetInputBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the top label  		if (_labelPosition == "top") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxHeight != 0) {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  				top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (top);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the left label  		if (_labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the dropdownlist  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the inside label  		if (_labelPosition == "" || _labelPosition == "inside") {  			//crop an image on top of the DropDownList  			inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  			//set the source image for the Alexa.Core  			SetCoreSourceImage (inside);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the Drop Down List and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				SelectListItem (mouseX' mouseY' _selectItem);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the Drop Down List was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the Drop Down List (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	if (inside != null)  		inside.Dispose ();  	if (top != null)  		top.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the top label  	if (_labelPosition == "top") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxHeight != 0) {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  			top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (top);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the left label  	if (_labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the dropdownlist  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the inside label  	if (_labelPosition == "" || _labelPosition == "inside") {  		//crop an image on top of the DropDownList  		inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the Drop Down List and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			SelectListItem (mouseX' mouseY' _selectItem);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "top") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxHeight != 0) {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  		top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (top);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Top.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxHeight != 0) {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  	top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - _labelBoxHeight)' box.width + 10' _labelBoxHeight));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: top = CropRect (desktopScreen' new Rectangle (box.x - 10' (box.y - box.height)' box.width + 10' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: top = (Bitmap)ResizeImage (top' new Size (top.Width * 3' top.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	SelectListItem (mouseX' mouseY' _selectItem);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	SelectListItem (mouseX' mouseY' _selectItem);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: left = CropRect (desktopScreen' new Rectangle ((box.x - box.width * 2)' box.y' box.width * 2' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	SelectListItem (mouseX' mouseY' _selectItem);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	SelectListItem (mouseX' mouseY' _selectItem);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the dropdownlist  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the dropdownlist  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' box.width * 2' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	SelectListItem (mouseX' mouseY' _selectItem);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	SelectListItem (mouseX' mouseY' _selectItem);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the DropDownList  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the DropDownList  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the DropDownList  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the DropDownList  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the DropDownList  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the DropDownList  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the DropDownList  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "inside") {  	//crop an image on top of the DropDownList  	inside = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_DropDownList" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the Drop Down List and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		SelectListItem (mouseX' mouseY' _selectItem);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	SelectListItem (mouseX' mouseY' _selectItem);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	SelectListItem (mouseX' mouseY' _selectItem);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	//desktopScreen = (Bitmap)ReplaceColor((Image)desktopScreen' Color.White' Color.Black' 1);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all input boxes that are present in source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetGenericBoxes (_boxHeight' _boxWidth' _boxTollerance);  	}  	else {  		boxes = _core.GetGenericBoxesV2 (_boxHeight' _boxWidth' _boxTollerance);  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region looking for the label  		//if the user has set a label related to the box' search that label  		if (_label != "") {  			//if the user has set the label box height and box width then crop a rectangle to find the label  			if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			else//else the user wants to search the label inside the box  			 {  				labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (labelImg);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the input box and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//get the coordinates of where we have to click  				if (_cropRectX != -1 && _cropRectY != -1) {  					mouseX = box.x + _cropRectX + _clickOffsetX;  					mouseY = box.y + _cropRectY + _clickOffsetY;  				}  				else {  					mouseX = box.x + _clickOffsetX;  					mouseY = box.y + _clickOffsetY;  				}  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  					// ...then update the points  					_interruptBindPointX = box.x + _cropRectX;  					_interruptBindPointY = box.y + _cropRectX;  					_updateInterruptBindPoint = false;  				}  				else if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//if user has set a text to insert into the generic box  				if (_textToInsert != "")  					//then click and insert the text  					ClickAndInsert (mouseX' mouseY' _textToInsert);  				else  					//otherwise only click  					Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		//if the user doesn't have set a label related to the box then click on the first generic box  		//that Alexa.Core has found according to the search option  		else {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		if (_label != "") {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box (with \"" + _label + "\" as label value) was not found' the step is " + _stepName);  		}  		else {  			//write the error message  			if (_warningLogLevel)  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the generic box was not found' the step is " + _stepName);  		}  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (labelImg != null)  		labelImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region looking for the label  	//if the user has set a label related to the box' search that label  	if (_label != "") {  		//if the user has set the label box height and box width then crop a rectangle to find the label  		if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		else//else the user wants to search the label inside the box  		 {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (labelImg);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	//if the user doesn't have set a label related to the box then click on the first generic box  	//that Alexa.Core has found according to the search option  	else {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region looking for the label  	//if the user has set a label related to the box' search that label  	if (_label != "") {  		//if the user has set the label box height and box width then crop a rectangle to find the label  		if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		else//else the user wants to search the label inside the box  		 {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (labelImg);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	//if the user doesn't have set a label related to the box then click on the first generic box  	//that Alexa.Core has found according to the search option  	else {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region looking for the label  	//if the user has set a label related to the box' search that label  	if (_label != "") {  		//if the user has set the label box height and box width then crop a rectangle to find the label  		if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		else//else the user wants to search the label inside the box  		 {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (labelImg);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	//if the user doesn't have set a label related to the box then click on the first generic box  	//that Alexa.Core has found according to the search option  	else {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region looking for the label  	//if the user has set a label related to the box' search that label  	if (_label != "") {  		//if the user has set the label box height and box width then crop a rectangle to find the label  		if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		else//else the user wants to search the label inside the box  		 {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (labelImg);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	//if the user doesn't have set a label related to the box then click on the first generic box  	//that Alexa.Core has found according to the search option  	else {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region looking for the label  	//if the user has set a label related to the box' search that label  	if (_label != "") {  		//if the user has set the label box height and box width then crop a rectangle to find the label  		if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		else//else the user wants to search the label inside the box  		 {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (labelImg);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	//if the user doesn't have set a label related to the box then click on the first generic box  	//that Alexa.Core has found according to the search option  	else {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region looking for the label  	//if the user has set a label related to the box' search that label  	if (_label != "") {  		//if the user has set the label box height and box width then crop a rectangle to find the label  		if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		else//else the user wants to search the label inside the box  		 {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (labelImg);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	//if the user doesn't have set a label related to the box then click on the first generic box  	//that Alexa.Core has found according to the search option  	else {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region looking for the label  	//if the user has set a label related to the box' search that label  	if (_label != "") {  		//if the user has set the label box height and box width then crop a rectangle to find the label  		if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		else//else the user wants to search the label inside the box  		 {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (labelImg);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	//if the user doesn't have set a label related to the box then click on the first generic box  	//that Alexa.Core has found according to the search option  	else {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region looking for the label  	//if the user has set a label related to the box' search that label  	if (_label != "") {  		//if the user has set the label box height and box width then crop a rectangle to find the label  		if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		else//else the user wants to search the label inside the box  		 {  			labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (labelImg);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//get the coordinates of where we have to click  			if (_cropRectX != -1 && _cropRectY != -1) {  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//if user has set a text to insert into the generic box  			if (_textToInsert != "")  				//then click and insert the text  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			else  				//otherwise only click  				Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	//if the user doesn't have set a label related to the box then click on the first generic box  	//that Alexa.Core has found according to the search option  	else {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_label != "") {  	//if the user has set the label box height and box width then crop a rectangle to find the label  	if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	else//else the user wants to search the label inside the box  	 {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (labelImg);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  //if the user doesn't have set a label related to the box then click on the first generic box  //that Alexa.Core has found according to the search option  else {  	//get the coordinates of where we have to click  	if (_cropRectX != -1 && _cropRectY != -1) {  		mouseX = box.x + _cropRectX + _clickOffsetX;  		mouseY = box.y + _cropRectY + _clickOffsetY;  	}  	else {  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  	}  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  		// ...then update the points  		_interruptBindPointX = box.x + _cropRectX;  		_interruptBindPointY = box.y + _cropRectX;  		_updateInterruptBindPoint = false;  	}  	else if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//if user has set a text to insert into the generic box  	if (_textToInsert != "")  		//then click and insert the text  		ClickAndInsert (mouseX' mouseY' _textToInsert);  	else  		//otherwise only click  		Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_label != "") {  	//if the user has set the label box height and box width then crop a rectangle to find the label  	if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	else//else the user wants to search the label inside the box  	 {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (labelImg);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  //if the user doesn't have set a label related to the box then click on the first generic box  //that Alexa.Core has found according to the search option  else {  	//get the coordinates of where we have to click  	if (_cropRectX != -1 && _cropRectY != -1) {  		mouseX = box.x + _cropRectX + _clickOffsetX;  		mouseY = box.y + _cropRectY + _clickOffsetY;  	}  	else {  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  	}  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  		// ...then update the points  		_interruptBindPointX = box.x + _cropRectX;  		_interruptBindPointY = box.y + _cropRectX;  		_updateInterruptBindPoint = false;  	}  	else if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//if user has set a text to insert into the generic box  	if (_textToInsert != "")  		//then click and insert the text  		ClickAndInsert (mouseX' mouseY' _textToInsert);  	else  		//otherwise only click  		Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_label != "") {  	//if the user has set the label box height and box width then crop a rectangle to find the label  	if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	else//else the user wants to search the label inside the box  	 {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (labelImg);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  //if the user doesn't have set a label related to the box then click on the first generic box  //that Alexa.Core has found according to the search option  else {  	//get the coordinates of where we have to click  	if (_cropRectX != -1 && _cropRectY != -1) {  		mouseX = box.x + _cropRectX + _clickOffsetX;  		mouseY = box.y + _cropRectY + _clickOffsetY;  	}  	else {  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  	}  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  		// ...then update the points  		_interruptBindPointX = box.x + _cropRectX;  		_interruptBindPointY = box.y + _cropRectX;  		_updateInterruptBindPoint = false;  	}  	else if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//if user has set a text to insert into the generic box  	if (_textToInsert != "")  		//then click and insert the text  		ClickAndInsert (mouseX' mouseY' _textToInsert);  	else  		//otherwise only click  		Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_label != "") {  	//if the user has set the label box height and box width then crop a rectangle to find the label  	if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	else//else the user wants to search the label inside the box  	 {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (labelImg);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  //if the user doesn't have set a label related to the box then click on the first generic box  //that Alexa.Core has found according to the search option  else {  	//get the coordinates of where we have to click  	if (_cropRectX != -1 && _cropRectY != -1) {  		mouseX = box.x + _cropRectX + _clickOffsetX;  		mouseY = box.y + _cropRectY + _clickOffsetY;  	}  	else {  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  	}  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  		// ...then update the points  		_interruptBindPointX = box.x + _cropRectX;  		_interruptBindPointY = box.y + _cropRectX;  		_updateInterruptBindPoint = false;  	}  	else if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//if user has set a text to insert into the generic box  	if (_textToInsert != "")  		//then click and insert the text  		ClickAndInsert (mouseX' mouseY' _textToInsert);  	else  		//otherwise only click  		Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_label != "") {  	//if the user has set the label box height and box width then crop a rectangle to find the label  	if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	else//else the user wants to search the label inside the box  	 {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (labelImg);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  //if the user doesn't have set a label related to the box then click on the first generic box  //that Alexa.Core has found according to the search option  else {  	//get the coordinates of where we have to click  	if (_cropRectX != -1 && _cropRectY != -1) {  		mouseX = box.x + _cropRectX + _clickOffsetX;  		mouseY = box.y + _cropRectY + _clickOffsetY;  	}  	else {  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  	}  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  		// ...then update the points  		_interruptBindPointX = box.x + _cropRectX;  		_interruptBindPointY = box.y + _cropRectX;  		_updateInterruptBindPoint = false;  	}  	else if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//if user has set a text to insert into the generic box  	if (_textToInsert != "")  		//then click and insert the text  		ClickAndInsert (mouseX' mouseY' _textToInsert);  	else  		//otherwise only click  		Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_label != "") {  	//if the user has set the label box height and box width then crop a rectangle to find the label  	if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	else//else the user wants to search the label inside the box  	 {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (labelImg);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  //if the user doesn't have set a label related to the box then click on the first generic box  //that Alexa.Core has found according to the search option  else {  	//get the coordinates of where we have to click  	if (_cropRectX != -1 && _cropRectY != -1) {  		mouseX = box.x + _cropRectX + _clickOffsetX;  		mouseY = box.y + _cropRectY + _clickOffsetY;  	}  	else {  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  	}  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  		// ...then update the points  		_interruptBindPointX = box.x + _cropRectX;  		_interruptBindPointY = box.y + _cropRectX;  		_updateInterruptBindPoint = false;  	}  	else if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//if user has set a text to insert into the generic box  	if (_textToInsert != "")  		//then click and insert the text  		ClickAndInsert (mouseX' mouseY' _textToInsert);  	else  		//otherwise only click  		Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_label != "") {  	//if the user has set the label box height and box width then crop a rectangle to find the label  	if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	else//else the user wants to search the label inside the box  	 {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (labelImg);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  //if the user doesn't have set a label related to the box then click on the first generic box  //that Alexa.Core has found according to the search option  else {  	//get the coordinates of where we have to click  	if (_cropRectX != -1 && _cropRectY != -1) {  		mouseX = box.x + _cropRectX + _clickOffsetX;  		mouseY = box.y + _cropRectY + _clickOffsetY;  	}  	else {  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  	}  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  		// ...then update the points  		_interruptBindPointX = box.x + _cropRectX;  		_interruptBindPointY = box.y + _cropRectX;  		_updateInterruptBindPoint = false;  	}  	else if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//if user has set a text to insert into the generic box  	if (_textToInsert != "")  		//then click and insert the text  		ClickAndInsert (mouseX' mouseY' _textToInsert);  	else  		//otherwise only click  		Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_label != "") {  	//if the user has set the label box height and box width then crop a rectangle to find the label  	if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	else//else the user wants to search the label inside the box  	 {  		labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (labelImg);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_GenericBox_Label_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//get the coordinates of where we have to click  		if (_cropRectX != -1 && _cropRectY != -1) {  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//if user has set a text to insert into the generic box  		if (_textToInsert != "")  			//then click and insert the text  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		else  			//otherwise only click  			Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  //if the user doesn't have set a label related to the box then click on the first generic box  //that Alexa.Core has found according to the search option  else {  	//get the coordinates of where we have to click  	if (_cropRectX != -1 && _cropRectY != -1) {  		mouseX = box.x + _cropRectX + _clickOffsetX;  		mouseY = box.y + _cropRectY + _clickOffsetY;  	}  	else {  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  	}  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  		// ...then update the points  		_interruptBindPointX = box.x + _cropRectX;  		_interruptBindPointY = box.y + _cropRectX;  		_updateInterruptBindPoint = false;  	}  	else if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//if user has set a text to insert into the generic box  	if (_textToInsert != "")  		//then click and insert the text  		ClickAndInsert (mouseX' mouseY' _textToInsert);  	else  		//otherwise only click  		Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  	labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  	labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  }  else//else the user wants to search the label inside the box   {  	labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  	labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  	labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  }  else//else the user wants to search the label inside the box   {  	labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  	labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  	labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  }  else//else the user wants to search the label inside the box   {  	labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_labelBoxHeight != 0 && _labelBoxWidth != 0) {  	labelImg = CropRect (desktopScreen' new Rectangle (box.x + _labelBoxOffsetX' box.y + _labelBoxOffsetY' _labelBoxWidth' _labelBoxHeight));  	labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  }  else//else the user wants to search the label inside the box   {  	labelImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: labelImg = (Bitmap)ResizeImage (labelImg' new Size (labelImg.Width * 3' labelImg.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//binarize the image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//binarize the image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//binarize the image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//binarize the image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all buttons that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetButtons ();  	}  	else {  		boxes = _core.GetButtonsV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the inside label  		//crop an image on top of the inputbox  		inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  		inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (inside);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the input box and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the button \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (inside != null)  		inside.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the inside label  	//crop an image on top of the inputbox  	inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  	inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (inside);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Inside.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the input box and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: inside = CropRect (desktopScreen' new Rectangle (box.x + 3' box.y + 3' box.width - 6' box.height - 6));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: inside = (Bitmap)ResizeImage (inside' new Size (inside.Width * 3' inside.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractButton,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: try {  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-100' 85);  	}  	//get all List Menu Itemes that are present into the Alexa.Core source image  	List<Alexa.Core.Box> boxes;  	if (_binarizeImage) {  		boxes = _core.GetIconListBoxes ();  	}  	else {  		boxes = _core.GetIconListBoxesV2 ();  	}  	boxes.Reverse ();  	//looking for the label  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in boxes) {  		#region check the left label  		if (_labelPosition == "" || _labelPosition == "left") {  			//if we are in top position and user has set labelBoxHeight  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  				left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (left);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + (box.width / 2) + _clickOffsetX;  				mouseY = box.y + (box.height / 2) + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		#region check the right label  		if (_labelPosition == "" || _labelPosition == "right") {  			if (_labelBoxWidth != 0) {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			else {  				//crop an image on top of the ListMenuItem  				right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  				right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  			}  			//set the source image for the Alexa.Core  			SetCoreSourceImage (right);  			if (_binarizeLabel) {  				//if user has set brightness and contrast value then change it  				if (_labelBrightness != -999 && _labelContrast != -999)  					_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-70' 100);  				//Binarize the Alexa.Core source image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  				_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click on the List Menu Item and insert the text  			if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  				//if this step must update the interrupt region origin point...  				if (_updateInterruptBindPoint == true) {  					// ...then update the points  					_interruptBindPointX = box.x;  					_interruptBindPointY = box.y;  					_updateInterruptBindPoint = false;  				}  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  				#region debug message  				//if we are in debug then write debug message  				//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  				#endregion  				Click (mouseX' mouseY);  				_found = true;  				//exit from the foreach loop  				break;  			}  		}  		#endregion  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the List Menu Item was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "The Icon List Menu Item \"" + _label + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (right != null)  		right.Dispose ();  	if (left != null)  		left.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-100' 85);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: foreach (Alexa.Core.Box box in boxes) {  	#region check the left label  	if (_labelPosition == "" || _labelPosition == "left") {  		//if we are in top position and user has set labelBoxHeight  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  			left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (left);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + (box.width / 2) + _clickOffsetX;  			mouseY = box.y + (box.height / 2) + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	#region check the right label  	if (_labelPosition == "" || _labelPosition == "right") {  		if (_labelBoxWidth != 0) {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		else {  			//crop an image on top of the ListMenuItem  			right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  			right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  		}  		//set the source image for the Alexa.Core  		SetCoreSourceImage (right);  		if (_binarizeLabel) {  			//if user has set brightness and contrast value then change it  			if (_labelBrightness != -999 && _labelContrast != -999)  				_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click on the List Menu Item and insert the text  		if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  			#region debug message  			//if we are in debug then write debug message  			//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  			#endregion  			Click (mouseX' mouseY);  			_found = true;  			//exit from the foreach loop  			break;  		}  	}  	#endregion  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "left") {  	//if we are in top position and user has set labelBoxHeight  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  		left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (left);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_Left.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + (box.width / 2) + _clickOffsetX;  		mouseY = box.y + (box.height / 2) + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - _labelBoxWidth)' box.y' _labelBoxWidth' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  	left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: left = CropRect (desktopScreen' new Rectangle ((box.x - 160)' box.y' 160' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: left = (Bitmap)ResizeImage (left' new Size (left.Width * 3' left.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	#region debug message  	//if we are in debug then write debug message  	//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  	#endregion  	Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  	//if this step must update the interrupt region origin point...  	if (_updateInterruptBindPoint == true) {  		// ...then update the points  		_interruptBindPointX = box.x;  		_interruptBindPointY = box.y;  		_updateInterruptBindPoint = false;  	}  	//get the coordinates of where we have to click  	mouseX = box.x + (box.width / 2) + _clickOffsetX;  	mouseY = box.y + (box.height / 2) + _clickOffsetY;  	#region debug message  	//if we are in debug then write debug message  	//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  	#endregion  	Click (mouseX' mouseY);  	_found = true;  	//exit from the foreach loop  	break;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: mouseX = box.x + (box.width / 2) + _clickOffsetX;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: mouseY = box.y + (box.height / 2) + _clickOffsetY;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelPosition == "" || _labelPosition == "right") {  	if (_labelBoxWidth != 0) {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	else {  		//crop an image on top of the ListMenuItem  		right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  		right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  	}  	//set the source image for the Alexa.Core  	SetCoreSourceImage (right);  	if (_binarizeLabel) {  		//if user has set brightness and contrast value then change it  		if (_labelBrightness != -999 && _labelContrast != -999)  			_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + "_LabelPos_right.bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click on the List Menu Item and insert the text  	if (checkStringByOCR (_core.GetSourceImage ()' _label) == true && _found == false) {  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		//get the coordinates of where we have to click  		mouseX = box.x + _clickOffsetX;  		mouseY = box.y + _clickOffsetY;  		#region debug message  		//if we are in debug then write debug message  		//if (_debugLogLevel) LogUtils.Write(new StackFrame(0' true)' LogUtils.ErrorLevel.Debug' "insert text \"" + textToInsert + "\"");  		#endregion  		Click (mouseX' mouseY);  		_found = true;  		//exit from the foreach loop  		break;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBoxWidth != 0) {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' _labelBoxWidth' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  else {  	//crop an image on top of the ListMenuItem  	right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  	right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: right = CropRect (desktopScreen' new Rectangle ((box.x + box.width)' box.y' 160' box.height));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: right = (Bitmap)ResizeImage (right' new Size (right.Width * 3' right.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_binarizeLabel) {  	//if user has set brightness and contrast value then change it  	if (_labelBrightness != -999 && _labelContrast != -999)  		_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: if (_labelBrightness != -999 && _labelContrast != -999)  	_core.SetBrightnessContrast (_labelBrightness' _labelContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractIconListItem,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: try {  	//if user has set all crop rectangle attributes then crop the rectangle from the desktop screenshot  	if (_cropRectHeight >= 0 && _cropRectWidth >= 0 && _cropRectX >= 0 && _cropRectY >= 0) {  		//Alexa.Core will analyze the cropped image  		desktopScreen = CropRect (desktopScreen' new Rectangle (_cropRectX' _cropRectY' _cropRectWidth' _cropRectHeight));  	}  	//save the screenshot of the desktop  	if (_debugLogLevel)  		desktopScreen.Save (Path.Combine (_debugFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  	}  	//get all chars that are present into the Alexa.Core source image  	List<Alexa.Core.Box> chars;  	//get all words that are present into the Alexa.Core source image.  	//Call this method only after GetChars().  	List<Alexa.Core.Box> words;  	if (_binarizeImage) {  		chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	else {  		chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  		words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  	}  	words.Reverse ();  	//looking for the text  	int boxCnt = 0;  	foreach (Alexa.Core.Box box in words) {  		//crop an image on top of the Text  		textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  		//set the source image for the Alexa.Core  		SetCoreSourceImage (textImage);  		if (_binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (_boxBrightness != -999 && _boxContrast != -999)  				_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-70' 100);  			//Binarize the Alexa.Core source image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  		}  		#endregion  		//check if we have found the text  		if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  			if (_cropRectX != -1 && _cropRectY != -1) {  				//get the coordinates of where we have to click  				mouseX = box.x + _cropRectX + _clickOffsetX;  				mouseY = box.y + _cropRectY + _clickOffsetY;  			}  			else {  				//get the coordinates of where we have to click  				mouseX = box.x + _clickOffsetX;  				mouseY = box.y + _clickOffsetY;  			}  			//if this step must update the interrupt region origin point...  			if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  				// ...then update the points  				_interruptBindPointX = box.x + _cropRectX;  				_interruptBindPointY = box.y + _cropRectX;  				_updateInterruptBindPoint = false;  			}  			else if (_updateInterruptBindPoint == true) {  				// ...then update the points  				_interruptBindPointX = box.x;  				_interruptBindPointY = box.y;  				_updateInterruptBindPoint = false;  			}  			if (_textToInsert == "")  				Click (mouseX' mouseY);  			else  				ClickAndInsert (mouseX' mouseY' _textToInsert);  			_found = true;  			//exit from the foreach loop  			break;  		}  		boxCnt++;  		#region check interrupt region image  		if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  			int boxesEquals = 0;  			List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  			foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  				foreach (Alexa.Core.Box newBox in BindRegionPoints) {  					if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  						boxesEquals++;  					}  				}  			}  			if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			else if (boxesEquals < _BindRegionOldPoints.Count) {  				UpdateRegionPoints ();  				return false;  			}  			UpdateRegionPoints ();  		}  		#endregion  	}  	//if the input box was not found save the error message  	if (_found == false) {  		//write the error message  		if (_warningLogLevel)  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Warning' "the text \"" + _textValue + "\" was not found' the step is " + _stepName);  		//exit from the method and return false  		return false;  	}  	else  		return true;  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  	return false;  }  finally {  	//release all images  	desktopScreen.Dispose ();  	if (textImage != null)  		textImage.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_oldColor [0] != -1 && _oldColor [1] != -1 && _oldColor [2] != -1 && _newColor [0] != -1 && _newColor [1] != -1 && _newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' _oldColor [0]' _oldColor [1]' _oldColor [2]' _newColor [0]' _newColor [1]' _newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  	words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  }  else {  	chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  	words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  	words = _core.GetWords (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  }  else {  	chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  	words = _core.GetWordsV2 (_charRectMinHeight' _charRectMaxHeight' _charRectMinWidth' _charRectMaxWidth);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: chars = _core.GetChars (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: chars = _core.GetCharsV2 (_charRectThickness' _charRectExtendLeft' _charRectColor [0]' _charRectColor [1]' _charRectColor [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: foreach (Alexa.Core.Box box in words) {  	//crop an image on top of the Text  	textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (textImage);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//check if we have found the text  	if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  		if (_cropRectX != -1 && _cropRectY != -1) {  			//get the coordinates of where we have to click  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		if (_textToInsert == "")  			Click (mouseX' mouseY);  		else  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: foreach (Alexa.Core.Box box in words) {  	//crop an image on top of the Text  	textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (textImage);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//check if we have found the text  	if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  		if (_cropRectX != -1 && _cropRectY != -1) {  			//get the coordinates of where we have to click  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		if (_textToInsert == "")  			Click (mouseX' mouseY);  		else  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: foreach (Alexa.Core.Box box in words) {  	//crop an image on top of the Text  	textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (textImage);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//check if we have found the text  	if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  		if (_cropRectX != -1 && _cropRectY != -1) {  			//get the coordinates of where we have to click  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		if (_textToInsert == "")  			Click (mouseX' mouseY);  		else  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: foreach (Alexa.Core.Box box in words) {  	//crop an image on top of the Text  	textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (textImage);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//check if we have found the text  	if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  		if (_cropRectX != -1 && _cropRectY != -1) {  			//get the coordinates of where we have to click  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		if (_textToInsert == "")  			Click (mouseX' mouseY);  		else  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: foreach (Alexa.Core.Box box in words) {  	//crop an image on top of the Text  	textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (textImage);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//check if we have found the text  	if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  		if (_cropRectX != -1 && _cropRectY != -1) {  			//get the coordinates of where we have to click  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		if (_textToInsert == "")  			Click (mouseX' mouseY);  		else  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: foreach (Alexa.Core.Box box in words) {  	//crop an image on top of the Text  	textImage = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  	//set the source image for the Alexa.Core  	SetCoreSourceImage (textImage);  	if (_binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (_boxBrightness != -999 && _boxContrast != -999)  			_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-70' 100);  		//Binarize the Alexa.Core source image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		_debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Word_" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (_debugFullPath' _debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + _debugPath + "\\" + _debugImageName);  	}  	#endregion  	//check if we have found the text  	if (checkStringByOCR (_core.GetSourceImage ()' _textValue) == true && _found == false) {  		if (_cropRectX != -1 && _cropRectY != -1) {  			//get the coordinates of where we have to click  			mouseX = box.x + _cropRectX + _clickOffsetX;  			mouseY = box.y + _cropRectY + _clickOffsetY;  		}  		else {  			//get the coordinates of where we have to click  			mouseX = box.x + _clickOffsetX;  			mouseY = box.y + _clickOffsetY;  		}  		//if this step must update the interrupt region origin point...  		if (_updateInterruptBindPoint == true && _cropRectX != -1 && _cropRectY != -1) {  			// ...then update the points  			_interruptBindPointX = box.x + _cropRectX;  			_interruptBindPointY = box.y + _cropRectX;  			_updateInterruptBindPoint = false;  		}  		else if (_updateInterruptBindPoint == true) {  			// ...then update the points  			_interruptBindPointX = box.x;  			_interruptBindPointY = box.y;  			_updateInterruptBindPoint = false;  		}  		if (_textToInsert == "")  			Click (mouseX' mouseY);  		else  			ClickAndInsert (mouseX' mouseY' _textToInsert);  		_found = true;  		//exit from the foreach loop  		break;  	}  	boxCnt++;  	#region check interrupt region image  	if (_mustCheckInterruptRegion == true && _interruptBindPointX >= 0 && _interruptBindPointY >= 0) {  		int boxesEquals = 0;  		List<Core.Box> BindRegionPoints = GetBindRegionPoints ();  		foreach (Alexa.Core.Box oldBox in _BindRegionOldPoints) {  			foreach (Alexa.Core.Box newBox in BindRegionPoints) {  				if (oldBox.height == newBox.height && oldBox.width == newBox.width && oldBox.x == newBox.x && oldBox.y == newBox.y) {  					boxesEquals++;  				}  			}  		}  		if (_BindRegionOldPoints.Count < BindRegionPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		else if (boxesEquals < _BindRegionOldPoints.Count) {  			UpdateRegionPoints ();  			return false;  		}  		UpdateRegionPoints ();  	}  	#endregion  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: textImage = (Bitmap)ResizeImage (textImage' new Size (textImage.Width * 3' textImage.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (_boxBrightness != -999 && _boxContrast != -999)  		_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-70' 100);  	//Binarize the Alexa.Core source image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: if (_boxBrightness != -999 && _boxContrast != -999)  	_core.SetBrightnessContrast (_boxBrightness' _boxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractText,The following statement contains a magic number: _core.SetBrightnessContrast (-70' 100);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepMouseMove,The following statement contains a magic number: try {  	//Create a new StepTiming object' it will be used by OutputUtils to write  	//current step info to the output file  	OutputUtils.StepTiming stepTiming = new OutputUtils.StepTiming ();  	//save start date  	stepTiming.startTime = DateTime.Now;  	//create a stopwatch to mesea the elapsed time of this step  	Stopwatch stopWatch = new Stopwatch ();  	stopWatch.Start ();  	int x = 0;  	int y = 0;  	int speed = 10;  	x = Int32.Parse (alexaStep.Attributes ["x"].Value);  	y = Int32.Parse (alexaStep.Attributes ["y"].Value);  	try {  		speed = Int32.Parse (alexaStep.Attributes ["speed"].Value);  	}  	catch {  	}  	_autoIt.MouseMove (x' y' speed);  	stopWatch.Stop ();  	//save all info that will be used by OutputUtils to write current  	//step info to the output file  	stepTiming.stepNumber = _stepNumber;  	stepTiming.stepNode = alexaStep;  	stepTiming.endTime = DateTime.Now;  	stepTiming.stepDuration = stopWatch.ElapsedMilliseconds;  	//add above info to StepTimingsCollection  	OutputUtils.StepTimingsCollection.Add (stepTiming);  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepMouseClick,The following statement contains a magic number: try {  	//Create a new StepTiming object' it will be used by OutputUtils to write  	//current step info to the output file  	OutputUtils.StepTiming stepTiming = new OutputUtils.StepTiming ();  	//save start date  	stepTiming.startTime = DateTime.Now;  	//create a stopwatch to mesea the elapsed time of this step  	Stopwatch stopWatch = new Stopwatch ();  	stopWatch.Start ();  	bool doubleClick = false;  	bool rightClick = false;  	int delay = 80;  	try {  		if (alexaStep.Attributes ["double.click"].Value == "enable") {  			doubleClick = true;  		}  	}  	catch {  	}  	try {  		if (alexaStep.Attributes ["right.click"].Value == "enable") {  			rightClick = true;  		}  	}  	catch {  	}  	try {  		delay = Int32.Parse (alexaStep.Attributes ["double.click.delay"].Value);  	}  	catch {  	}  	if (rightClick == true) {  		_autoIt.MouseClick ("RIGHT");  		Thread.Sleep (_afterClickDelay);  	}  	else if (doubleClick) {  		_autoIt.MouseClick ("LEFT");  		Thread.Sleep (delay);  		_autoIt.MouseClick ("LEFT");  		Thread.Sleep (_afterClickDelay);  	}  	else {  		_autoIt.MouseClick ("LEFT");  		Thread.Sleep (_afterClickDelay);  	}  	stopWatch.Stop ();  	//save all info that will be used by OutputUtils to write current  	//step info to the output file  	stepTiming.stepNumber = _stepNumber;  	stepTiming.stepNode = alexaStep;  	stepTiming.endTime = DateTime.Now;  	stepTiming.stepDuration = stopWatch.ElapsedMilliseconds;  	//add above info to StepTimingsCollection  	OutputUtils.StepTimingsCollection.Add (stepTiming);  }  catch (Exception ex) {  	//write the error  	LogUtils.Write (ex);  	Program.Finish (true);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,TestMemoryLeak,The following statement contains a magic number: try {  	_core.SetSourceImage (desktopScreen2);  	//_core.SetBrightnessContrast(-100' 85);  	_core.EnableDebug (false);  	_core.SetDebugFolder ("c:\\work\\");  	//get all input boxes that are present in source image  	//List<Alexa.Core.Box> boxes = _core.GetGenericBoxes(50'1000'10);  	//List<Alexa.Core.Box> boxes = _core.GetInputBoxes();  	Alexa.Core.IconBox iconbox = _core.FindIcon (icon' 0.05);  	//_core.Release();  	return false;  }  catch {  	return false;  }  finally {  	desktopScreen2.Dispose ();  	icon.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,UpdateRegionPoints,The following statement contains a magic number: if (_interruptBrightness != -999 && _interruptContrast != -999)  	_core.SetBrightnessContrast (_interruptBrightness' _interruptContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,UpdateRegionPoints,The following statement contains a magic number: if (_interruptBrightness != -999 && _interruptContrast != -999)  	_core.SetBrightnessContrast (_interruptBrightness' _interruptContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,UpdateRegionPoints,The following statement contains a magic number: if (_interruptBrightness != -999 && _interruptContrast != -999)  	_core.SetBrightnessContrast (_interruptBrightness' _interruptContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,UpdateRegionPoints,The following statement contains a magic number: if (_interruptBrightness != -999 && _interruptContrast != -999)  	_core.SetBrightnessContrast (_interruptBrightness' _interruptContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,UpdateRegionPoints,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,UpdateRegionPoints,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,GetBindRegionPoints,The following statement contains a magic number: if (_interruptBrightness != -999 && _interruptContrast != -999)  	_core.SetBrightnessContrast (_interruptBrightness' _interruptContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,GetBindRegionPoints,The following statement contains a magic number: if (_interruptBrightness != -999 && _interruptContrast != -999)  	_core.SetBrightnessContrast (_interruptBrightness' _interruptContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,GetBindRegionPoints,The following statement contains a magic number: if (_interruptBrightness != -999 && _interruptContrast != -999)  	_core.SetBrightnessContrast (_interruptBrightness' _interruptContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,GetBindRegionPoints,The following statement contains a magic number: if (_interruptBrightness != -999 && _interruptContrast != -999)  	_core.SetBrightnessContrast (_interruptBrightness' _interruptContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,GetBindRegionPoints,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,GetBindRegionPoints,The following statement contains a magic number: _core.SetBrightnessContrast (-100' 85);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,CropRect,The following statement contains a magic number: if (rectX + rectWidth > SystemUtils.ScreenWidth) {  	rectWidth = SystemUtils.ScreenWidth - rectX - 5;  	if (rectWidth <= 0)  		rectWidth = 1;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,CropRect,The following statement contains a magic number: rectWidth = SystemUtils.ScreenWidth - rectX - 5;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ResizeImage,The following statement contains a magic number: if (_binarizeLabel == true || _binarizeImage == true) {  	newImage = CropRect ((Bitmap)newImage' new Rectangle (0' 0' newWidth' newHeight - 2));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ResizeImage,The following statement contains a magic number: newImage = CropRect ((Bitmap)newImage' new Rectangle (0' 0' newWidth' newHeight - 2));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _boxBrightness = -999;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _boxContrast = -999;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _labelBrightness = -999;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _labelContrast = -999;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectMinHeight = 6;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectMaxHeight = 50;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectMinWidth = 50;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectMaxWidth = 300;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectThickness = 2;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectExtendLeft = 2;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectColor [0] = 255;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectColor [1] = _charRectColor [2] = 0;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _scrollLastdelay = 2000;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _oldColor [0] = _oldColor [1] = _oldColor [2] = -1;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _newColor [0] = _newColor [1] = _newColor [2] = -1;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	//this is not a mandatory option  	_boxBrightness = Int32.Parse (alexaStep.Attributes ["brightness"].Value);  }  catch {  	_boxBrightness = -999;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _boxBrightness = -999;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	//this is not a mandatory option  	_boxContrast = Int32.Parse (alexaStep.Attributes ["contrast"].Value);  }  catch {  	_boxContrast = -999;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _boxContrast = -999;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	//this is not a mandatory option  	_labelBrightness = Int32.Parse (alexaStep.SelectSingleNode ("label").Attributes ["brightness"].Value);  }  catch {  	_labelBrightness = -999;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _labelBrightness = -999;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	//this is not a mandatory option  	_labelContrast = Int32.Parse (alexaStep.SelectSingleNode ("label").Attributes ["contrast"].Value);  }  catch {  	_labelContrast = -999;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _labelContrast = -999;  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	//they are not a mandatory options  	_charRectMinHeight = Int32.Parse (alexaStep.Attributes ["rectbound.min.height"].Value);  	_charRectMaxHeight = Int32.Parse (alexaStep.Attributes ["rectbound.max.height"].Value) + (_charRectThickness * 2);  	_charRectMinWidth = Int32.Parse (alexaStep.Attributes ["rectbound.min.width"].Value);  	_charRectMaxWidth = Int32.Parse (alexaStep.Attributes ["rectbound.max.width"].Value) + (_charRectThickness * 2);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	//they are not a mandatory options  	_charRectMinHeight = Int32.Parse (alexaStep.Attributes ["rectbound.min.height"].Value);  	_charRectMaxHeight = Int32.Parse (alexaStep.Attributes ["rectbound.max.height"].Value) + (_charRectThickness * 2);  	_charRectMinWidth = Int32.Parse (alexaStep.Attributes ["rectbound.min.width"].Value);  	_charRectMaxWidth = Int32.Parse (alexaStep.Attributes ["rectbound.max.width"].Value) + (_charRectThickness * 2);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectMaxHeight = Int32.Parse (alexaStep.Attributes ["rectbound.max.height"].Value) + (_charRectThickness * 2);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectMaxWidth = Int32.Parse (alexaStep.Attributes ["rectbound.max.width"].Value) + (_charRectThickness * 2);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	string rectColor = alexaStep.Attributes ["rectbound.color"].Value.Replace (" "' "");  	rectColor = rectColor.Replace ("("' "");  	rectColor = rectColor.Replace (")"' "");  	string[] colorArr = rectColor.Split (''');  	_charRectColor [0] = Int32.Parse (colorArr [0]);  	_charRectColor [1] = Int32.Parse (colorArr [1]);  	_charRectColor [2] = Int32.Parse (colorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	string rectColor = alexaStep.Attributes ["rectbound.color"].Value.Replace (" "' "");  	rectColor = rectColor.Replace ("("' "");  	rectColor = rectColor.Replace (")"' "");  	string[] colorArr = rectColor.Split (''');  	_charRectColor [0] = Int32.Parse (colorArr [0]);  	_charRectColor [1] = Int32.Parse (colorArr [1]);  	_charRectColor [2] = Int32.Parse (colorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectColor [2] = Int32.Parse (colorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _charRectColor [2] = Int32.Parse (colorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	string replaceColor = alexaStep.Attributes ["color.replace"].Value.Replace (" "' "");  	string oldColorStr = replaceColor.Split (')') [0];  	oldColorStr = oldColorStr.Replace ("(("' "");  	string[] oldColorArr = oldColorStr.Split (''');  	_oldColor [0] = Int32.Parse (oldColorArr [0]);  	_oldColor [1] = Int32.Parse (oldColorArr [1]);  	_oldColor [2] = Int32.Parse (oldColorArr [2]);  	string newColorStr = oldColorStr = replaceColor.Split (')') [1];  	newColorStr = newColorStr.Replace ("'("' "");  	string[] newColorArr = newColorStr.Split (''');  	_newColor [0] = Int32.Parse (newColorArr [0]);  	_newColor [1] = Int32.Parse (newColorArr [1]);  	_newColor [2] = Int32.Parse (newColorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	string replaceColor = alexaStep.Attributes ["color.replace"].Value.Replace (" "' "");  	string oldColorStr = replaceColor.Split (')') [0];  	oldColorStr = oldColorStr.Replace ("(("' "");  	string[] oldColorArr = oldColorStr.Split (''');  	_oldColor [0] = Int32.Parse (oldColorArr [0]);  	_oldColor [1] = Int32.Parse (oldColorArr [1]);  	_oldColor [2] = Int32.Parse (oldColorArr [2]);  	string newColorStr = oldColorStr = replaceColor.Split (')') [1];  	newColorStr = newColorStr.Replace ("'("' "");  	string[] newColorArr = newColorStr.Split (''');  	_newColor [0] = Int32.Parse (newColorArr [0]);  	_newColor [1] = Int32.Parse (newColorArr [1]);  	_newColor [2] = Int32.Parse (newColorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	string replaceColor = alexaStep.Attributes ["color.replace"].Value.Replace (" "' "");  	string oldColorStr = replaceColor.Split (')') [0];  	oldColorStr = oldColorStr.Replace ("(("' "");  	string[] oldColorArr = oldColorStr.Split (''');  	_oldColor [0] = Int32.Parse (oldColorArr [0]);  	_oldColor [1] = Int32.Parse (oldColorArr [1]);  	_oldColor [2] = Int32.Parse (oldColorArr [2]);  	string newColorStr = oldColorStr = replaceColor.Split (')') [1];  	newColorStr = newColorStr.Replace ("'("' "");  	string[] newColorArr = newColorStr.Split (''');  	_newColor [0] = Int32.Parse (newColorArr [0]);  	_newColor [1] = Int32.Parse (newColorArr [1]);  	_newColor [2] = Int32.Parse (newColorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: try {  	string replaceColor = alexaStep.Attributes ["color.replace"].Value.Replace (" "' "");  	string oldColorStr = replaceColor.Split (')') [0];  	oldColorStr = oldColorStr.Replace ("(("' "");  	string[] oldColorArr = oldColorStr.Split (''');  	_oldColor [0] = Int32.Parse (oldColorArr [0]);  	_oldColor [1] = Int32.Parse (oldColorArr [1]);  	_oldColor [2] = Int32.Parse (oldColorArr [2]);  	string newColorStr = oldColorStr = replaceColor.Split (')') [1];  	newColorStr = newColorStr.Replace ("'("' "");  	string[] newColorArr = newColorStr.Split (''');  	_newColor [0] = Int32.Parse (newColorArr [0]);  	_newColor [1] = Int32.Parse (newColorArr [1]);  	_newColor [2] = Int32.Parse (newColorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _oldColor [2] = Int32.Parse (oldColorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _oldColor [2] = Int32.Parse (oldColorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _newColor [2] = Int32.Parse (newColorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,ExecStepMethod,The following statement contains a magic number: _newColor [2] = Int32.Parse (newColorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: if (ConfigUtils.LogIsEnabled == true) {  	sendEmail = true;  	DirectoryInfo dir = new DirectoryInfo (Path.Combine (_debugHomeFolder' @"..\Error_Screenshots"));  	if (!Directory.Exists (dir.FullName))  		dir.Create ();  	Bitmap desktopScreen;  	//capture desktop image  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//--  	var newImage = new Bitmap (desktopScreen.Width' desktopScreen.Height + 50);  	var gr = Graphics.FromImage (newImage);  	gr.FillRectangle (new SolidBrush (Color.Black)' 0' 0' desktopScreen.Width' desktopScreen.Height + 50);  	gr.DrawImageUnscaled (desktopScreen' 0' 50);  	Font TextFont = new Font ("Tahoma"' 15);  	SolidBrush TextBrush = new SolidBrush (Color.GreenYellow);  	gr.TextRenderingHint = TextRenderingHint.AntiAlias;  	gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  	newImage.Save (dir + "\\" + _stepNumber + ".bmp");  	newImage.Dispose ();  	gr.Dispose ();  	//--  	//desktopScreen.Save(dir + "\\step_" + RemoveIllegalChars(GetStepNameNumber(alexaStep)).Replace(" "' "_") + ".bmp");  	desktopScreen.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: if (ConfigUtils.LogIsEnabled == true) {  	sendEmail = true;  	DirectoryInfo dir = new DirectoryInfo (Path.Combine (_debugHomeFolder' @"..\Error_Screenshots"));  	if (!Directory.Exists (dir.FullName))  		dir.Create ();  	Bitmap desktopScreen;  	//capture desktop image  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//--  	var newImage = new Bitmap (desktopScreen.Width' desktopScreen.Height + 50);  	var gr = Graphics.FromImage (newImage);  	gr.FillRectangle (new SolidBrush (Color.Black)' 0' 0' desktopScreen.Width' desktopScreen.Height + 50);  	gr.DrawImageUnscaled (desktopScreen' 0' 50);  	Font TextFont = new Font ("Tahoma"' 15);  	SolidBrush TextBrush = new SolidBrush (Color.GreenYellow);  	gr.TextRenderingHint = TextRenderingHint.AntiAlias;  	gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  	newImage.Save (dir + "\\" + _stepNumber + ".bmp");  	newImage.Dispose ();  	gr.Dispose ();  	//--  	//desktopScreen.Save(dir + "\\step_" + RemoveIllegalChars(GetStepNameNumber(alexaStep)).Replace(" "' "_") + ".bmp");  	desktopScreen.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: if (ConfigUtils.LogIsEnabled == true) {  	sendEmail = true;  	DirectoryInfo dir = new DirectoryInfo (Path.Combine (_debugHomeFolder' @"..\Error_Screenshots"));  	if (!Directory.Exists (dir.FullName))  		dir.Create ();  	Bitmap desktopScreen;  	//capture desktop image  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//--  	var newImage = new Bitmap (desktopScreen.Width' desktopScreen.Height + 50);  	var gr = Graphics.FromImage (newImage);  	gr.FillRectangle (new SolidBrush (Color.Black)' 0' 0' desktopScreen.Width' desktopScreen.Height + 50);  	gr.DrawImageUnscaled (desktopScreen' 0' 50);  	Font TextFont = new Font ("Tahoma"' 15);  	SolidBrush TextBrush = new SolidBrush (Color.GreenYellow);  	gr.TextRenderingHint = TextRenderingHint.AntiAlias;  	gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  	newImage.Save (dir + "\\" + _stepNumber + ".bmp");  	newImage.Dispose ();  	gr.Dispose ();  	//--  	//desktopScreen.Save(dir + "\\step_" + RemoveIllegalChars(GetStepNameNumber(alexaStep)).Replace(" "' "_") + ".bmp");  	desktopScreen.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: if (ConfigUtils.LogIsEnabled == true) {  	sendEmail = true;  	DirectoryInfo dir = new DirectoryInfo (Path.Combine (_debugHomeFolder' @"..\Error_Screenshots"));  	if (!Directory.Exists (dir.FullName))  		dir.Create ();  	Bitmap desktopScreen;  	//capture desktop image  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//--  	var newImage = new Bitmap (desktopScreen.Width' desktopScreen.Height + 50);  	var gr = Graphics.FromImage (newImage);  	gr.FillRectangle (new SolidBrush (Color.Black)' 0' 0' desktopScreen.Width' desktopScreen.Height + 50);  	gr.DrawImageUnscaled (desktopScreen' 0' 50);  	Font TextFont = new Font ("Tahoma"' 15);  	SolidBrush TextBrush = new SolidBrush (Color.GreenYellow);  	gr.TextRenderingHint = TextRenderingHint.AntiAlias;  	gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  	newImage.Save (dir + "\\" + _stepNumber + ".bmp");  	newImage.Dispose ();  	gr.Dispose ();  	//--  	//desktopScreen.Save(dir + "\\step_" + RemoveIllegalChars(GetStepNameNumber(alexaStep)).Replace(" "' "_") + ".bmp");  	desktopScreen.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: if (ConfigUtils.LogIsEnabled == true) {  	sendEmail = true;  	DirectoryInfo dir = new DirectoryInfo (Path.Combine (_debugHomeFolder' @"..\Error_Screenshots"));  	if (!Directory.Exists (dir.FullName))  		dir.Create ();  	Bitmap desktopScreen;  	//capture desktop image  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//--  	var newImage = new Bitmap (desktopScreen.Width' desktopScreen.Height + 50);  	var gr = Graphics.FromImage (newImage);  	gr.FillRectangle (new SolidBrush (Color.Black)' 0' 0' desktopScreen.Width' desktopScreen.Height + 50);  	gr.DrawImageUnscaled (desktopScreen' 0' 50);  	Font TextFont = new Font ("Tahoma"' 15);  	SolidBrush TextBrush = new SolidBrush (Color.GreenYellow);  	gr.TextRenderingHint = TextRenderingHint.AntiAlias;  	gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  	newImage.Save (dir + "\\" + _stepNumber + ".bmp");  	newImage.Dispose ();  	gr.Dispose ();  	//--  	//desktopScreen.Save(dir + "\\step_" + RemoveIllegalChars(GetStepNameNumber(alexaStep)).Replace(" "' "_") + ".bmp");  	desktopScreen.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: if (ConfigUtils.LogIsEnabled == true) {  	sendEmail = true;  	DirectoryInfo dir = new DirectoryInfo (Path.Combine (_debugHomeFolder' @"..\Error_Screenshots"));  	if (!Directory.Exists (dir.FullName))  		dir.Create ();  	Bitmap desktopScreen;  	//capture desktop image  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//--  	var newImage = new Bitmap (desktopScreen.Width' desktopScreen.Height + 50);  	var gr = Graphics.FromImage (newImage);  	gr.FillRectangle (new SolidBrush (Color.Black)' 0' 0' desktopScreen.Width' desktopScreen.Height + 50);  	gr.DrawImageUnscaled (desktopScreen' 0' 50);  	Font TextFont = new Font ("Tahoma"' 15);  	SolidBrush TextBrush = new SolidBrush (Color.GreenYellow);  	gr.TextRenderingHint = TextRenderingHint.AntiAlias;  	gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  	newImage.Save (dir + "\\" + _stepNumber + ".bmp");  	newImage.Dispose ();  	gr.Dispose ();  	//--  	//desktopScreen.Save(dir + "\\step_" + RemoveIllegalChars(GetStepNameNumber(alexaStep)).Replace(" "' "_") + ".bmp");  	desktopScreen.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: if (ConfigUtils.LogIsEnabled == true) {  	sendEmail = true;  	DirectoryInfo dir = new DirectoryInfo (Path.Combine (_debugHomeFolder' @"..\Error_Screenshots"));  	if (!Directory.Exists (dir.FullName))  		dir.Create ();  	Bitmap desktopScreen;  	//capture desktop image  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//--  	var newImage = new Bitmap (desktopScreen.Width' desktopScreen.Height + 50);  	var gr = Graphics.FromImage (newImage);  	gr.FillRectangle (new SolidBrush (Color.Black)' 0' 0' desktopScreen.Width' desktopScreen.Height + 50);  	gr.DrawImageUnscaled (desktopScreen' 0' 50);  	Font TextFont = new Font ("Tahoma"' 15);  	SolidBrush TextBrush = new SolidBrush (Color.GreenYellow);  	gr.TextRenderingHint = TextRenderingHint.AntiAlias;  	gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  	newImage.Save (dir + "\\" + _stepNumber + ".bmp");  	newImage.Dispose ();  	gr.Dispose ();  	//--  	//desktopScreen.Save(dir + "\\step_" + RemoveIllegalChars(GetStepNameNumber(alexaStep)).Replace(" "' "_") + ".bmp");  	desktopScreen.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: gr.FillRectangle (new SolidBrush (Color.Black)' 0' 0' desktopScreen.Width' desktopScreen.Height + 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: gr.DrawImageUnscaled (desktopScreen' 0' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,SaveScreenshotAfterTimeOut,The following statement contains a magic number: gr.DrawString ("Step number " + _stepNumber + ". Step name: " + RemoveIllegalChars (GetStepNameNumber (alexaStep))' TextFont' TextBrush' new RectangleF (15' 12' desktopScreen.Width' 50));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The following statement contains a magic number: if ((windowProperties.Height <= SystemUtils.ScreenHeight - 50 || windowProperties.Width <= SystemUtils.ScreenWidth - 50 || windowProperties.X > 100 || windowProperties.Y > 100) && windowProperties.X > 0) {  	_autoIt.MouseClick ("left"' windowProperties.X + windowProperties.Width - 50' windowProperties.Y + 15);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The following statement contains a magic number: if ((windowProperties.Height <= SystemUtils.ScreenHeight - 50 || windowProperties.Width <= SystemUtils.ScreenWidth - 50 || windowProperties.X > 100 || windowProperties.Y > 100) && windowProperties.X > 0) {  	_autoIt.MouseClick ("left"' windowProperties.X + windowProperties.Width - 50' windowProperties.Y + 15);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The following statement contains a magic number: if ((windowProperties.Height <= SystemUtils.ScreenHeight - 50 || windowProperties.Width <= SystemUtils.ScreenWidth - 50 || windowProperties.X > 100 || windowProperties.Y > 100) && windowProperties.X > 0) {  	_autoIt.MouseClick ("left"' windowProperties.X + windowProperties.Width - 50' windowProperties.Y + 15);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The following statement contains a magic number: if ((windowProperties.Height <= SystemUtils.ScreenHeight - 50 || windowProperties.Width <= SystemUtils.ScreenWidth - 50 || windowProperties.X > 100 || windowProperties.Y > 100) && windowProperties.X > 0) {  	_autoIt.MouseClick ("left"' windowProperties.X + windowProperties.Width - 50' windowProperties.Y + 15);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The following statement contains a magic number: if ((windowProperties.Height <= SystemUtils.ScreenHeight - 50 || windowProperties.Width <= SystemUtils.ScreenWidth - 50 || windowProperties.X > 100 || windowProperties.Y > 100) && windowProperties.X > 0) {  	_autoIt.MouseClick ("left"' windowProperties.X + windowProperties.Width - 50' windowProperties.Y + 15);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The following statement contains a magic number: if ((windowProperties.Height <= SystemUtils.ScreenHeight - 50 || windowProperties.Width <= SystemUtils.ScreenWidth - 50 || windowProperties.X > 100 || windowProperties.Y > 100) && windowProperties.X > 0) {  	_autoIt.MouseClick ("left"' windowProperties.X + windowProperties.Width - 50' windowProperties.Y + 15);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The following statement contains a magic number: _autoIt.MouseClick ("left"' windowProperties.X + windowProperties.Width - 50' windowProperties.Y + 15);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,MaximizeWindow,The following statement contains a magic number: _autoIt.MouseClick ("left"' windowProperties.X + windowProperties.Width - 50' windowProperties.Y + 15);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	string replaceColor = alexaStep.SelectSingleNode ("window").Attributes ["color.replace"].Value.Replace (" "' "");  	string oldColorStr = replaceColor.Split (')') [0];  	oldColorStr = oldColorStr.Replace ("(("' "");  	string[] oldColorArr = oldColorStr.Split (''');  	oldColor [0] = Int32.Parse (oldColorArr [0]);  	oldColor [1] = Int32.Parse (oldColorArr [1]);  	oldColor [2] = Int32.Parse (oldColorArr [2]);  	string newColorStr = oldColorStr = replaceColor.Split (')') [1];  	newColorStr = newColorStr.Replace ("'("' "");  	string[] newColorArr = newColorStr.Split (''');  	newColor [0] = Int32.Parse (newColorArr [0]);  	newColor [1] = Int32.Parse (newColorArr [1]);  	newColor [2] = Int32.Parse (newColorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	string replaceColor = alexaStep.SelectSingleNode ("window").Attributes ["color.replace"].Value.Replace (" "' "");  	string oldColorStr = replaceColor.Split (')') [0];  	oldColorStr = oldColorStr.Replace ("(("' "");  	string[] oldColorArr = oldColorStr.Split (''');  	oldColor [0] = Int32.Parse (oldColorArr [0]);  	oldColor [1] = Int32.Parse (oldColorArr [1]);  	oldColor [2] = Int32.Parse (oldColorArr [2]);  	string newColorStr = oldColorStr = replaceColor.Split (')') [1];  	newColorStr = newColorStr.Replace ("'("' "");  	string[] newColorArr = newColorStr.Split (''');  	newColor [0] = Int32.Parse (newColorArr [0]);  	newColor [1] = Int32.Parse (newColorArr [1]);  	newColor [2] = Int32.Parse (newColorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	string replaceColor = alexaStep.SelectSingleNode ("window").Attributes ["color.replace"].Value.Replace (" "' "");  	string oldColorStr = replaceColor.Split (')') [0];  	oldColorStr = oldColorStr.Replace ("(("' "");  	string[] oldColorArr = oldColorStr.Split (''');  	oldColor [0] = Int32.Parse (oldColorArr [0]);  	oldColor [1] = Int32.Parse (oldColorArr [1]);  	oldColor [2] = Int32.Parse (oldColorArr [2]);  	string newColorStr = oldColorStr = replaceColor.Split (')') [1];  	newColorStr = newColorStr.Replace ("'("' "");  	string[] newColorArr = newColorStr.Split (''');  	newColor [0] = Int32.Parse (newColorArr [0]);  	newColor [1] = Int32.Parse (newColorArr [1]);  	newColor [2] = Int32.Parse (newColorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	string replaceColor = alexaStep.SelectSingleNode ("window").Attributes ["color.replace"].Value.Replace (" "' "");  	string oldColorStr = replaceColor.Split (')') [0];  	oldColorStr = oldColorStr.Replace ("(("' "");  	string[] oldColorArr = oldColorStr.Split (''');  	oldColor [0] = Int32.Parse (oldColorArr [0]);  	oldColor [1] = Int32.Parse (oldColorArr [1]);  	oldColor [2] = Int32.Parse (oldColorArr [2]);  	string newColorStr = oldColorStr = replaceColor.Split (')') [1];  	newColorStr = newColorStr.Replace ("'("' "");  	string[] newColorArr = newColorStr.Split (''');  	newColor [0] = Int32.Parse (newColorArr [0]);  	newColor [1] = Int32.Parse (newColorArr [1]);  	newColor [2] = Int32.Parse (newColorArr [2]);  }  catch {  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: oldColor [2] = Int32.Parse (oldColorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: oldColor [2] = Int32.Parse (oldColorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: newColor [2] = Int32.Parse (newColorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: newColor [2] = Int32.Parse (newColorArr [2]);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: try {  	if (_debugLogLevel) {  		//get the log folder for the genericbox step type  		debugWindowPath = Path.Combine (_debugHomeFolder' DateTime.Now.ToString (_debugFolderDateFormat) + "_Step_" + RemoveIllegalChars (GetStepNameNumber (alexaStep)).Replace (" "' "_") + "_AnalyzeWindows");  		debugWindowFullPath = debugWindowPath;  		//get the full path (otherwise the method Image.Save does not work)  		DirectoryInfo dir = new DirectoryInfo (debugWindowFullPath);  		debugWindowFullPath = dir.FullName;  		//if log folder doesn't exist then create it  		if (!Directory.Exists (dir.FullName))  			dir.Create ();  	}  	//loop through all windows that matches our regular expression  	foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  		//brings the window to the foreground  		SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  		Thread.Sleep (1500);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  		if (tabTitle != "") {  			desktopScreen = ScreenUtils.CaptureDesktop ();  			//save the screenshot of the desktop  			if (_debugLogLevel) {  				//set the debug folder for the core  				_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  				desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  			}  			//set the source image for the core  			SetCoreSourceImage (desktopScreen);  			//check if we have to change the color  			if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  				Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  				using (Graphics gr = Graphics.FromImage (clone)) {  					gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  				}  				Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  				clone.Dispose ();  				_core.SetSourceImage (c);  				c.Dispose ();  			}  			if (binarizeImage) {  				//if user has set brightness and contrast value then change it  				if (tabBoxBrightness != -999 && tabBoxContrast != -999)  					_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (-60' 50);  			}  			//get the boxes  			List<Alexa.Core.Box> tabBoxes;  			if (binarizeImage) {  				tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  			}  			else {  				tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  			}  			int boxCnt = 0;  			foreach (Core.Box box in tabBoxes) {  				if (subtractLeft != 0 || subtractRight != 0) {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				else {  					tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  					tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  				}  				//set Alexa.Core source image  				SetCoreSourceImage (tabTitleImg);  				if (binarizeTab) {  					//if user has set brightness and contrast value then change it  					if (tabTitleBrightness != -999 && tabTitleContrast != -999)  						_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  					else  						//otherwise use a value that is ok for almost all application  						_core.SetBrightnessContrast (0' 50);  					//binarize the image  					_core.BinarizeImage ();  				}  				#region debug message  				//save the binarized image if we are in debug  				if (_debugLogLevel) {  					debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  					_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  				}  				#endregion  				//if the OCR engine has found the label text then click  				if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  					//get the coordinates of where we have to click  					mouseX = box.x + clickOffsetX;  					mouseY = box.y + clickOffsetY;  					#region debug message  					if (_debugLogLevel)  						//if we are in debug write the message  						LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  					#endregion  					if (_mouseClick == false) {  						wasClickOff = true;  						_mouseClick = true;  					}  					if (_mouseMove == false) {  						wasMouseMoveOff = true;  						_mouseMove = true;  					}  					//click  					Click (mouseX' mouseY);  					if (wasClickOff == true) {  						wasClickOff = false;  						_mouseClick = false;  					}  					if (wasMouseMoveOff == true) {  						wasMouseMoveOff = false;  						_mouseMove = false;  					}  					Thread.Sleep (1000);  					if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  						return true;  					}  				}  				boxCnt++;  			}  			desktopScreen.Dispose ();  		}  		else {  			//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  			//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  			//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  			//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  			//    stepType == StepType.InteractButton && StepInteractButton() == true ||  			//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  			//    stepType == StepType.InteractText && StepInteractText() == true ||  			//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  			//{  			//    return true;  			//}  		}  		//desktopScreen.Dispose();  	}  	//brings the original window to the foreground  	SystemUtils.User32.ShowWindowOnTop (currHandle' maximizeWindow);  	Thread.Sleep (1500);  	return false;  }  catch (Exception ex) {  	return false;  }  finally {  	if (desktopScreen != null)  		desktopScreen.Dispose ();  	if (tabTitleImg != null)  		tabTitleImg.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (IntPtr windowHandle in SystemUtils.User32.GetWindowsCollection (windowRegEx)) {  	//brings the window to the foreground  	SystemUtils.User32.ShowWindowOnTop (windowHandle' maximizeWindow);  	Thread.Sleep (1500);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  	if (tabTitle != "") {  		desktopScreen = ScreenUtils.CaptureDesktop ();  		//save the screenshot of the desktop  		if (_debugLogLevel) {  			//set the debug folder for the core  			_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  			desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  		}  		//set the source image for the core  		SetCoreSourceImage (desktopScreen);  		//check if we have to change the color  		if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  			Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  			using (Graphics gr = Graphics.FromImage (clone)) {  				gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  			}  			Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  			clone.Dispose ();  			_core.SetSourceImage (c);  			c.Dispose ();  		}  		if (binarizeImage) {  			//if user has set brightness and contrast value then change it  			if (tabBoxBrightness != -999 && tabBoxContrast != -999)  				_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (-60' 50);  		}  		//get the boxes  		List<Alexa.Core.Box> tabBoxes;  		if (binarizeImage) {  			tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  		}  		else {  			tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  		}  		int boxCnt = 0;  		foreach (Core.Box box in tabBoxes) {  			if (subtractLeft != 0 || subtractRight != 0) {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			else {  				tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  				tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  			}  			//set Alexa.Core source image  			SetCoreSourceImage (tabTitleImg);  			if (binarizeTab) {  				//if user has set brightness and contrast value then change it  				if (tabTitleBrightness != -999 && tabTitleContrast != -999)  					_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  				else  					//otherwise use a value that is ok for almost all application  					_core.SetBrightnessContrast (0' 50);  				//binarize the image  				_core.BinarizeImage ();  			}  			#region debug message  			//save the binarized image if we are in debug  			if (_debugLogLevel) {  				debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  				_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  			}  			#endregion  			//if the OCR engine has found the label text then click  			if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  				//get the coordinates of where we have to click  				mouseX = box.x + clickOffsetX;  				mouseY = box.y + clickOffsetY;  				#region debug message  				if (_debugLogLevel)  					//if we are in debug write the message  					LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  				#endregion  				if (_mouseClick == false) {  					wasClickOff = true;  					_mouseClick = true;  				}  				if (_mouseMove == false) {  					wasMouseMoveOff = true;  					_mouseMove = true;  				}  				//click  				Click (mouseX' mouseY);  				if (wasClickOff == true) {  					wasClickOff = false;  					_mouseClick = false;  				}  				if (wasMouseMoveOff == true) {  					wasMouseMoveOff = false;  					_mouseMove = false;  				}  				Thread.Sleep (1000);  				if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  					return true;  				}  			}  			boxCnt++;  		}  		desktopScreen.Dispose ();  	}  	else {  		//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  		//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  		//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  		//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  		//    stepType == StepType.InteractButton && StepInteractButton() == true ||  		//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  		//    stepType == StepType.InteractText && StepInteractText() == true ||  		//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  		//{  		//    return true;  		//}  	}  	//desktopScreen.Dispose();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: Thread.Sleep (1500);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitle != "") {  	desktopScreen = ScreenUtils.CaptureDesktop ();  	//save the screenshot of the desktop  	if (_debugLogLevel) {  		//set the debug folder for the core  		_core.SetDebugFolder (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_"));  		desktopScreen.Save (Path.Combine (debugWindowFullPath' DateTime.Now.ToString (_debugImageDateFormat) + "_DesktopScreenshot.bmp"));  	}  	//set the source image for the core  	SetCoreSourceImage (desktopScreen);  	//check if we have to change the color  	if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  		Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  		using (Graphics gr = Graphics.FromImage (clone)) {  			gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  		}  		Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  		clone.Dispose ();  		_core.SetSourceImage (c);  		c.Dispose ();  	}  	if (binarizeImage) {  		//if user has set brightness and contrast value then change it  		if (tabBoxBrightness != -999 && tabBoxContrast != -999)  			_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (-60' 50);  	}  	//get the boxes  	List<Alexa.Core.Box> tabBoxes;  	if (binarizeImage) {  		tabBoxes = _core.GetGenericBoxes (tabHeight' tabWidth' tabSizeTollerance);  	}  	else {  		tabBoxes = _core.GetGenericBoxesV2 (tabHeight' tabWidth' tabSizeTollerance);  	}  	int boxCnt = 0;  	foreach (Core.Box box in tabBoxes) {  		if (subtractLeft != 0 || subtractRight != 0) {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		else {  			tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  			tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  		}  		//set Alexa.Core source image  		SetCoreSourceImage (tabTitleImg);  		if (binarizeTab) {  			//if user has set brightness and contrast value then change it  			if (tabTitleBrightness != -999 && tabTitleContrast != -999)  				_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  			else  				//otherwise use a value that is ok for almost all application  				_core.SetBrightnessContrast (0' 50);  			//binarize the image  			_core.BinarizeImage ();  		}  		#region debug message  		//save the binarized image if we are in debug  		if (_debugLogLevel) {  			debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  			_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  		}  		#endregion  		//if the OCR engine has found the label text then click  		if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  			//get the coordinates of where we have to click  			mouseX = box.x + clickOffsetX;  			mouseY = box.y + clickOffsetY;  			#region debug message  			if (_debugLogLevel)  				//if we are in debug write the message  				LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  			#endregion  			if (_mouseClick == false) {  				wasClickOff = true;  				_mouseClick = true;  			}  			if (_mouseMove == false) {  				wasMouseMoveOff = true;  				_mouseMove = true;  			}  			//click  			Click (mouseX' mouseY);  			if (wasClickOff == true) {  				wasClickOff = false;  				_mouseClick = false;  			}  			if (wasMouseMoveOff == true) {  				wasMouseMoveOff = false;  				_mouseMove = false;  			}  			Thread.Sleep (1000);  			if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  				return true;  			}  		}  		boxCnt++;  	}  	desktopScreen.Dispose ();  }  else {  	//if (stepType == StepType.InteractInputBox && StepInteractInputBox() == true ||  	//    stepType == StepType.InteractGenericBox && StepInteractGenericBox() == true ||  	//    stepType == StepType.InteractIcon && StepInteractIcon(alexaStep) == true ||  	//    stepType == StepType.RunExe && StepRunExe(alexaStep) == true ||  	//    stepType == StepType.InteractButton && StepInteractButton() == true ||  	//    stepType == StepType.InteractIconList && StepInteractIconListItem() == true ||  	//    stepType == StepType.InteractText && StepInteractText() == true ||  	//    stepType == StepType.InteractDropDownList && StepInteractDropDownList() == true)  	//{  	//    return true;  	//}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (oldColor [0] != -1 && oldColor [1] != -1 && oldColor [2] != -1 && newColor [0] != -1 && newColor [1] != -1 && newColor [2] != -1) {  	Bitmap clone = new Bitmap (desktopScreen.Width' desktopScreen.Height' System.Drawing.Imaging.PixelFormat.Format24bppRgb);  	using (Graphics gr = Graphics.FromImage (clone)) {  		gr.DrawImage (desktopScreen' new Rectangle (0' 0' clone.Width' clone.Height));  	}  	Bitmap c = _core.ReplaceColor (clone' oldColor [0]' oldColor [1]' oldColor [2]' newColor [0]' newColor [1]' newColor [2]);  	clone.Dispose ();  	_core.SetSourceImage (c);  	c.Dispose ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (tabBoxBrightness != -999 && tabBoxContrast != -999)  		_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-60' 50);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (tabBoxBrightness != -999 && tabBoxContrast != -999)  		_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-60' 50);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (tabBoxBrightness != -999 && tabBoxContrast != -999)  		_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-60' 50);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (binarizeImage) {  	//if user has set brightness and contrast value then change it  	if (tabBoxBrightness != -999 && tabBoxContrast != -999)  		_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (-60' 50);  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabBoxBrightness != -999 && tabBoxContrast != -999)  	_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-60' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabBoxBrightness != -999 && tabBoxContrast != -999)  	_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-60' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabBoxBrightness != -999 && tabBoxContrast != -999)  	_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-60' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabBoxBrightness != -999 && tabBoxContrast != -999)  	_core.SetBrightnessContrast (tabBoxBrightness' tabBoxContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (-60' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: _core.SetBrightnessContrast (-60' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: _core.SetBrightnessContrast (-60' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (Core.Box box in tabBoxes) {  	if (subtractLeft != 0 || subtractRight != 0) {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	else {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (tabTitleImg);  	if (binarizeTab) {  		//if user has set brightness and contrast value then change it  		if (tabTitleBrightness != -999 && tabTitleContrast != -999)  			_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (0' 50);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click  	if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  		//get the coordinates of where we have to click  		mouseX = box.x + clickOffsetX;  		mouseY = box.y + clickOffsetY;  		#region debug message  		if (_debugLogLevel)  			//if we are in debug write the message  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  		#endregion  		if (_mouseClick == false) {  			wasClickOff = true;  			_mouseClick = true;  		}  		if (_mouseMove == false) {  			wasMouseMoveOff = true;  			_mouseMove = true;  		}  		//click  		Click (mouseX' mouseY);  		if (wasClickOff == true) {  			wasClickOff = false;  			_mouseClick = false;  		}  		if (wasMouseMoveOff == true) {  			wasMouseMoveOff = false;  			_mouseMove = false;  		}  		Thread.Sleep (1000);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  	}  	boxCnt++;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (Core.Box box in tabBoxes) {  	if (subtractLeft != 0 || subtractRight != 0) {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	else {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (tabTitleImg);  	if (binarizeTab) {  		//if user has set brightness and contrast value then change it  		if (tabTitleBrightness != -999 && tabTitleContrast != -999)  			_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (0' 50);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click  	if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  		//get the coordinates of where we have to click  		mouseX = box.x + clickOffsetX;  		mouseY = box.y + clickOffsetY;  		#region debug message  		if (_debugLogLevel)  			//if we are in debug write the message  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  		#endregion  		if (_mouseClick == false) {  			wasClickOff = true;  			_mouseClick = true;  		}  		if (_mouseMove == false) {  			wasMouseMoveOff = true;  			_mouseMove = true;  		}  		//click  		Click (mouseX' mouseY);  		if (wasClickOff == true) {  			wasClickOff = false;  			_mouseClick = false;  		}  		if (wasMouseMoveOff == true) {  			wasMouseMoveOff = false;  			_mouseMove = false;  		}  		Thread.Sleep (1000);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  	}  	boxCnt++;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (Core.Box box in tabBoxes) {  	if (subtractLeft != 0 || subtractRight != 0) {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	else {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (tabTitleImg);  	if (binarizeTab) {  		//if user has set brightness and contrast value then change it  		if (tabTitleBrightness != -999 && tabTitleContrast != -999)  			_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (0' 50);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click  	if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  		//get the coordinates of where we have to click  		mouseX = box.x + clickOffsetX;  		mouseY = box.y + clickOffsetY;  		#region debug message  		if (_debugLogLevel)  			//if we are in debug write the message  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  		#endregion  		if (_mouseClick == false) {  			wasClickOff = true;  			_mouseClick = true;  		}  		if (_mouseMove == false) {  			wasMouseMoveOff = true;  			_mouseMove = true;  		}  		//click  		Click (mouseX' mouseY);  		if (wasClickOff == true) {  			wasClickOff = false;  			_mouseClick = false;  		}  		if (wasMouseMoveOff == true) {  			wasMouseMoveOff = false;  			_mouseMove = false;  		}  		Thread.Sleep (1000);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  	}  	boxCnt++;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (Core.Box box in tabBoxes) {  	if (subtractLeft != 0 || subtractRight != 0) {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	else {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (tabTitleImg);  	if (binarizeTab) {  		//if user has set brightness and contrast value then change it  		if (tabTitleBrightness != -999 && tabTitleContrast != -999)  			_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (0' 50);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click  	if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  		//get the coordinates of where we have to click  		mouseX = box.x + clickOffsetX;  		mouseY = box.y + clickOffsetY;  		#region debug message  		if (_debugLogLevel)  			//if we are in debug write the message  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  		#endregion  		if (_mouseClick == false) {  			wasClickOff = true;  			_mouseClick = true;  		}  		if (_mouseMove == false) {  			wasMouseMoveOff = true;  			_mouseMove = true;  		}  		//click  		Click (mouseX' mouseY);  		if (wasClickOff == true) {  			wasClickOff = false;  			_mouseClick = false;  		}  		if (wasMouseMoveOff == true) {  			wasMouseMoveOff = false;  			_mouseMove = false;  		}  		Thread.Sleep (1000);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  	}  	boxCnt++;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (Core.Box box in tabBoxes) {  	if (subtractLeft != 0 || subtractRight != 0) {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	else {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (tabTitleImg);  	if (binarizeTab) {  		//if user has set brightness and contrast value then change it  		if (tabTitleBrightness != -999 && tabTitleContrast != -999)  			_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (0' 50);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click  	if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  		//get the coordinates of where we have to click  		mouseX = box.x + clickOffsetX;  		mouseY = box.y + clickOffsetY;  		#region debug message  		if (_debugLogLevel)  			//if we are in debug write the message  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  		#endregion  		if (_mouseClick == false) {  			wasClickOff = true;  			_mouseClick = true;  		}  		if (_mouseMove == false) {  			wasMouseMoveOff = true;  			_mouseMove = true;  		}  		//click  		Click (mouseX' mouseY);  		if (wasClickOff == true) {  			wasClickOff = false;  			_mouseClick = false;  		}  		if (wasMouseMoveOff == true) {  			wasMouseMoveOff = false;  			_mouseMove = false;  		}  		Thread.Sleep (1000);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  	}  	boxCnt++;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (Core.Box box in tabBoxes) {  	if (subtractLeft != 0 || subtractRight != 0) {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	else {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (tabTitleImg);  	if (binarizeTab) {  		//if user has set brightness and contrast value then change it  		if (tabTitleBrightness != -999 && tabTitleContrast != -999)  			_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (0' 50);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click  	if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  		//get the coordinates of where we have to click  		mouseX = box.x + clickOffsetX;  		mouseY = box.y + clickOffsetY;  		#region debug message  		if (_debugLogLevel)  			//if we are in debug write the message  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  		#endregion  		if (_mouseClick == false) {  			wasClickOff = true;  			_mouseClick = true;  		}  		if (_mouseMove == false) {  			wasMouseMoveOff = true;  			_mouseMove = true;  		}  		//click  		Click (mouseX' mouseY);  		if (wasClickOff == true) {  			wasClickOff = false;  			_mouseClick = false;  		}  		if (wasMouseMoveOff == true) {  			wasMouseMoveOff = false;  			_mouseMove = false;  		}  		Thread.Sleep (1000);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  	}  	boxCnt++;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (Core.Box box in tabBoxes) {  	if (subtractLeft != 0 || subtractRight != 0) {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	else {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (tabTitleImg);  	if (binarizeTab) {  		//if user has set brightness and contrast value then change it  		if (tabTitleBrightness != -999 && tabTitleContrast != -999)  			_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (0' 50);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click  	if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  		//get the coordinates of where we have to click  		mouseX = box.x + clickOffsetX;  		mouseY = box.y + clickOffsetY;  		#region debug message  		if (_debugLogLevel)  			//if we are in debug write the message  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  		#endregion  		if (_mouseClick == false) {  			wasClickOff = true;  			_mouseClick = true;  		}  		if (_mouseMove == false) {  			wasMouseMoveOff = true;  			_mouseMove = true;  		}  		//click  		Click (mouseX' mouseY);  		if (wasClickOff == true) {  			wasClickOff = false;  			_mouseClick = false;  		}  		if (wasMouseMoveOff == true) {  			wasMouseMoveOff = false;  			_mouseMove = false;  		}  		Thread.Sleep (1000);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  	}  	boxCnt++;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: foreach (Core.Box box in tabBoxes) {  	if (subtractLeft != 0 || subtractRight != 0) {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	else {  		tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  		tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  	}  	//set Alexa.Core source image  	SetCoreSourceImage (tabTitleImg);  	if (binarizeTab) {  		//if user has set brightness and contrast value then change it  		if (tabTitleBrightness != -999 && tabTitleContrast != -999)  			_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  		else  			//otherwise use a value that is ok for almost all application  			_core.SetBrightnessContrast (0' 50);  		//binarize the image  		_core.BinarizeImage ();  	}  	#region debug message  	//save the binarized image if we are in debug  	if (_debugLogLevel) {  		debugImageName = DateTime.Now.ToString (_debugImageDateFormat) + "_Box" + boxCnt + ".bmp";  		_core.GetSourceImage ().Save (Path.Combine (debugWindowFullPath' debugImageName));  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "save debug image: " + debugWindowPath + "\\" + debugImageName);  	}  	#endregion  	//if the OCR engine has found the label text then click  	if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  		//get the coordinates of where we have to click  		mouseX = box.x + clickOffsetX;  		mouseY = box.y + clickOffsetY;  		#region debug message  		if (_debugLogLevel)  			//if we are in debug write the message  			LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  		#endregion  		if (_mouseClick == false) {  			wasClickOff = true;  			_mouseClick = true;  		}  		if (_mouseMove == false) {  			wasMouseMoveOff = true;  			_mouseMove = true;  		}  		//click  		Click (mouseX' mouseY);  		if (wasClickOff == true) {  			wasClickOff = false;  			_mouseClick = false;  		}  		if (wasMouseMoveOff == true) {  			wasMouseMoveOff = false;  			_mouseMove = false;  		}  		Thread.Sleep (1000);  		if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  			return true;  		}  	}  	boxCnt++;  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (subtractLeft != 0 || subtractRight != 0) {  	tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  	tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  }  else {  	tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (subtractLeft != 0 || subtractRight != 0) {  	tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  	tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  }  else {  	tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (subtractLeft != 0 || subtractRight != 0) {  	tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  	tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  }  else {  	tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (subtractLeft != 0 || subtractRight != 0) {  	tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x + subtractLeft' box.y' box.width - subtractRight - subtractLeft' box.height));  	tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  }  else {  	tabTitleImg = CropRect (desktopScreen' new Rectangle (box.x' box.y' box.width' box.height));  	tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: tabTitleImg = (Bitmap)ResizeImage (tabTitleImg' new Size (tabTitleImg.Width * 3' tabTitleImg.Height * 3));  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (binarizeTab) {  	//if user has set brightness and contrast value then change it  	if (tabTitleBrightness != -999 && tabTitleContrast != -999)  		_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (0' 50);  	//binarize the image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (binarizeTab) {  	//if user has set brightness and contrast value then change it  	if (tabTitleBrightness != -999 && tabTitleContrast != -999)  		_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (0' 50);  	//binarize the image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (binarizeTab) {  	//if user has set brightness and contrast value then change it  	if (tabTitleBrightness != -999 && tabTitleContrast != -999)  		_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  	else  		//otherwise use a value that is ok for almost all application  		_core.SetBrightnessContrast (0' 50);  	//binarize the image  	_core.BinarizeImage ();  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitleBrightness != -999 && tabTitleContrast != -999)  	_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (0' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitleBrightness != -999 && tabTitleContrast != -999)  	_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (0' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (tabTitleBrightness != -999 && tabTitleContrast != -999)  	_core.SetBrightnessContrast (tabTitleBrightness' tabTitleContrast);  else  	//otherwise use a value that is ok for almost all application  	_core.SetBrightnessContrast (0' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: _core.SetBrightnessContrast (0' 50);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: if (checkStringByOCR (_core.GetSourceImage ()' tabTitle) == true) {  	//get the coordinates of where we have to click  	mouseX = box.x + clickOffsetX;  	mouseY = box.y + clickOffsetY;  	#region debug message  	if (_debugLogLevel)  		//if we are in debug write the message  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "click on the generic box");  	#endregion  	if (_mouseClick == false) {  		wasClickOff = true;  		_mouseClick = true;  	}  	if (_mouseMove == false) {  		wasMouseMoveOff = true;  		_mouseMove = true;  	}  	//click  	Click (mouseX' mouseY);  	if (wasClickOff == true) {  		wasClickOff = false;  		_mouseClick = false;  	}  	if (wasMouseMoveOff == true) {  		wasMouseMoveOff = false;  		_mouseMove = false;  	}  	Thread.Sleep (1000);  	if (stepType == StepType.InteractInputBox && StepInteractInputBox () == true || stepType == StepType.InteractGenericBox && StepInteractGenericBox () == true || stepType == StepType.InteractIcon && StepInteractIcon (alexaStep) == true || stepType == StepType.RunExe && StepRunExe (alexaStep) == true || stepType == StepType.InteractButton && StepInteractButton () == true || stepType == StepType.InteractIconList && StepInteractIconListItem () == true || stepType == StepType.InteractText && StepInteractText () == true || stepType == StepType.InteractDropDownList && StepInteractDropDownList () == true) {  		return true;  	}  }  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,AnalyzeWindow,The following statement contains a magic number: Thread.Sleep (1500);  
Magic Number,Alexa.Utilities,CryptoUtils,C:\repos\AlexaProjects_Alexa\Utilities\CryptoUtils.cs,DecryptString,The following statement contains a magic number: try {  	aesObj = new RijndaelManaged ();  	System.Text.Encoding enc = System.Text.Encoding.ASCII;  	byte[] cipherText = Convert.FromBase64String (cipherString);  	// create the secret key  	_secretKey = new PasswordDeriveBytes (_decryptKey' _salt);  	//declare the decryptor  	ICryptoTransform decryptor = aesObj.CreateDecryptor (_secretKey.GetBytes (32)' _secretKey.GetBytes (16));  	// Create the streams used for decryption.  	using (MemoryStream msDecrypt = new MemoryStream (cipherText)) {  		using (CryptoStream csDecrypt = new CryptoStream (msDecrypt' decryptor' CryptoStreamMode.Read)) {  			using (StreamReader srDecrypt = new StreamReader (csDecrypt))  				//get the plain text  				plaintext = srDecrypt.ReadToEnd ();  		}  	}  }  catch {  	if (_debugLogLevel)  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "The string \"" + cipherString + "\" cannot be decrypted.");  }  finally {  	// Dispose the aesObj object.  	if (aesObj != null)  		aesObj.Clear ();  }  
Magic Number,Alexa.Utilities,CryptoUtils,C:\repos\AlexaProjects_Alexa\Utilities\CryptoUtils.cs,DecryptString,The following statement contains a magic number: try {  	aesObj = new RijndaelManaged ();  	System.Text.Encoding enc = System.Text.Encoding.ASCII;  	byte[] cipherText = Convert.FromBase64String (cipherString);  	// create the secret key  	_secretKey = new PasswordDeriveBytes (_decryptKey' _salt);  	//declare the decryptor  	ICryptoTransform decryptor = aesObj.CreateDecryptor (_secretKey.GetBytes (32)' _secretKey.GetBytes (16));  	// Create the streams used for decryption.  	using (MemoryStream msDecrypt = new MemoryStream (cipherText)) {  		using (CryptoStream csDecrypt = new CryptoStream (msDecrypt' decryptor' CryptoStreamMode.Read)) {  			using (StreamReader srDecrypt = new StreamReader (csDecrypt))  				//get the plain text  				plaintext = srDecrypt.ReadToEnd ();  		}  	}  }  catch {  	if (_debugLogLevel)  		LogUtils.Write (new StackFrame (0' true)' LogUtils.ErrorLevel.Debug' "The string \"" + cipherString + "\" cannot be decrypted.");  }  finally {  	// Dispose the aesObj object.  	if (aesObj != null)  		aesObj.Clear ();  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (enableGlobalOutput) {  	//declare the global node (and its child node) that will be written to the output file  	XmlElement global = outputFile.CreateElement ("global");  	XmlElement globalPerformance = outputFile.CreateElement ("performance");  	//globalPerformance.SetAttribute("start"' DateTimeToUnixTimestamp(Global.startTime).ToString());d_MM_yyyy_HH.mm.ss  	globalPerformance.SetAttribute ("start"' Global.startTime.ToString ("HH:mm:ss"));  	//globalPerformance.SetAttribute("end"' DateTimeToUnixTimestamp(Global.endTime).ToString());  	globalPerformance.SetAttribute ("end"' Global.endTime.ToString ("HH:mm:ss"));  	globalPerformance.SetAttribute ("duration"' Global.duration.ToString ());  	XmlElement globalDate = outputFile.CreateElement ("date");  	globalDate.InnerText = Global.startTime.ToString ("dd/MM/yyyy");  	//set the exit code of the global node  	XmlElement globalExitcode = outputFile.CreateElement ("exitcode");  	globalExitcode.InnerText = "0";  	try {  		//set the name of global node  		string globalName = Global.xmlNode.SelectSingleNode ("name").InnerText;  		global.SetAttribute ("name"' globalName);  		serviceName = Global.xmlNode.SelectSingleNode ("name").InnerText;  		outString = "'" + serviceName + "' service is ok' all steps are ok";  		//add the duration of global step to the nagios performance string  		nagiosPerformance = nagiosPerformance + globalName + "=" + Global.duration.ToString () + "ms";  	}  	catch {  		//add the duration of global step to the nagios performance string  		nagiosPerformance = nagiosPerformance + "Global=" + Global.duration.ToString () + "ms";  	}  	try {  		//set the description of global node  		string description = Global.xmlNode.SelectSingleNode ("description").InnerText;  		global.SetAttribute ("description"' description);  	}  	catch {  	}  	//add current step to the OkStep Array  	try {  		OkStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  	}  	catch {  		OkStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  	}  	try {  		//set global warning value into the output file  		long warningValue = long.Parse (Global.xmlNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  		globalPerformance.SetAttribute ("warning"' warningValue.ToString ());  		//add warning threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + warningValue.ToString ();  		//check if the global step has exceeded the warning threshold  		if (Global.duration >= warningValue) {  			//change global exit code  			globalExitcode.InnerText = "1";  			//change the standard output exit code  			standardOutputExitCode = 1;  			//add this step to the warning steps  			try {  				WarningStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			}  			catch {  				WarningStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global critical value into the output file  		long criticalValue = long.Parse (Global.xmlNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  		globalPerformance.SetAttribute ("critical"' criticalValue.ToString ());  		//add critical threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + criticalValue.ToString ();  		//check if the global step has exceeded the critical threshold  		if (Global.duration >= criticalValue) {  			//change global exit code  			globalExitcode.InnerText = "2";  			//set the standard output exit code  			standardOutputExitCode = 2;  			//add this step to the critical steps  			try {  				CriticalStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			}  			catch {  				CriticalStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  				WarningStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global timeout value into the output file  		long timeout = long.Parse (Global.xmlNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  		globalPerformance.SetAttribute ("timeout"' timeout.ToString ());  		//check if the global step has exceeded the timeout value  		if (Global.duration >= timeout) {  			//change global exit code  			globalExitcode.InnerText = "3";  			//set the standard output exit code  			standardOutputExitCode = 3;  			try {  				//check if user has set different exit code for the timeout  				globalExitcode.InnerText = Global.xmlNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  				standardOutputExitCode = Int32.Parse (globalExitcode.InnerText);  				globalTimeoutOccurred = true;  				globalTimeoutExitCode = standardOutputExitCode;  			}  			catch {  			}  			//add this step to the unknown steps  			try {  				TimeoutStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				CriticalStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			}  			catch {  				TimeoutStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  				WarningStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  				CriticalStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			}  		}  	}  	catch {  	}  	//we don't have a min or max value for the performance data.  	//So we I to add two semicolon to avoid any kind of error on the graph  	nagiosPerformance = nagiosPerformance + ";;";  	//put together global node and global child nodes  	global.AppendChild (globalDate);  	global.AppendChild (globalPerformance);  	global.AppendChild (globalExitcode);  	xRoot.AppendChild (global);  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (enableGlobalOutput) {  	//declare the global node (and its child node) that will be written to the output file  	XmlElement global = outputFile.CreateElement ("global");  	XmlElement globalPerformance = outputFile.CreateElement ("performance");  	//globalPerformance.SetAttribute("start"' DateTimeToUnixTimestamp(Global.startTime).ToString());d_MM_yyyy_HH.mm.ss  	globalPerformance.SetAttribute ("start"' Global.startTime.ToString ("HH:mm:ss"));  	//globalPerformance.SetAttribute("end"' DateTimeToUnixTimestamp(Global.endTime).ToString());  	globalPerformance.SetAttribute ("end"' Global.endTime.ToString ("HH:mm:ss"));  	globalPerformance.SetAttribute ("duration"' Global.duration.ToString ());  	XmlElement globalDate = outputFile.CreateElement ("date");  	globalDate.InnerText = Global.startTime.ToString ("dd/MM/yyyy");  	//set the exit code of the global node  	XmlElement globalExitcode = outputFile.CreateElement ("exitcode");  	globalExitcode.InnerText = "0";  	try {  		//set the name of global node  		string globalName = Global.xmlNode.SelectSingleNode ("name").InnerText;  		global.SetAttribute ("name"' globalName);  		serviceName = Global.xmlNode.SelectSingleNode ("name").InnerText;  		outString = "'" + serviceName + "' service is ok' all steps are ok";  		//add the duration of global step to the nagios performance string  		nagiosPerformance = nagiosPerformance + globalName + "=" + Global.duration.ToString () + "ms";  	}  	catch {  		//add the duration of global step to the nagios performance string  		nagiosPerformance = nagiosPerformance + "Global=" + Global.duration.ToString () + "ms";  	}  	try {  		//set the description of global node  		string description = Global.xmlNode.SelectSingleNode ("description").InnerText;  		global.SetAttribute ("description"' description);  	}  	catch {  	}  	//add current step to the OkStep Array  	try {  		OkStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  	}  	catch {  		OkStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  	}  	try {  		//set global warning value into the output file  		long warningValue = long.Parse (Global.xmlNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  		globalPerformance.SetAttribute ("warning"' warningValue.ToString ());  		//add warning threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + warningValue.ToString ();  		//check if the global step has exceeded the warning threshold  		if (Global.duration >= warningValue) {  			//change global exit code  			globalExitcode.InnerText = "1";  			//change the standard output exit code  			standardOutputExitCode = 1;  			//add this step to the warning steps  			try {  				WarningStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			}  			catch {  				WarningStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global critical value into the output file  		long criticalValue = long.Parse (Global.xmlNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  		globalPerformance.SetAttribute ("critical"' criticalValue.ToString ());  		//add critical threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + criticalValue.ToString ();  		//check if the global step has exceeded the critical threshold  		if (Global.duration >= criticalValue) {  			//change global exit code  			globalExitcode.InnerText = "2";  			//set the standard output exit code  			standardOutputExitCode = 2;  			//add this step to the critical steps  			try {  				CriticalStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			}  			catch {  				CriticalStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  				WarningStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global timeout value into the output file  		long timeout = long.Parse (Global.xmlNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  		globalPerformance.SetAttribute ("timeout"' timeout.ToString ());  		//check if the global step has exceeded the timeout value  		if (Global.duration >= timeout) {  			//change global exit code  			globalExitcode.InnerText = "3";  			//set the standard output exit code  			standardOutputExitCode = 3;  			try {  				//check if user has set different exit code for the timeout  				globalExitcode.InnerText = Global.xmlNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  				standardOutputExitCode = Int32.Parse (globalExitcode.InnerText);  				globalTimeoutOccurred = true;  				globalTimeoutExitCode = standardOutputExitCode;  			}  			catch {  			}  			//add this step to the unknown steps  			try {  				TimeoutStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  				CriticalStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			}  			catch {  				TimeoutStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  				OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  				WarningStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  				CriticalStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			}  		}  	}  	catch {  	}  	//we don't have a min or max value for the performance data.  	//So we I to add two semicolon to avoid any kind of error on the graph  	nagiosPerformance = nagiosPerformance + ";;";  	//put together global node and global child nodes  	global.AppendChild (globalDate);  	global.AppendChild (globalPerformance);  	global.AppendChild (globalExitcode);  	xRoot.AppendChild (global);  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: try {  	//set global critical value into the output file  	long criticalValue = long.Parse (Global.xmlNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  	globalPerformance.SetAttribute ("critical"' criticalValue.ToString ());  	//add critical threshold to the nagios performance string  	nagiosPerformance = nagiosPerformance + ";" + criticalValue.ToString ();  	//check if the global step has exceeded the critical threshold  	if (Global.duration >= criticalValue) {  		//change global exit code  		globalExitcode.InnerText = "2";  		//set the standard output exit code  		standardOutputExitCode = 2;  		//add this step to the critical steps  		try {  			CriticalStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  		}  		catch {  			CriticalStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  			OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			WarningStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  		}  	}  }  catch {  	//if no warning threshold is set then add only a semicolon to the nagios performance string  	nagiosPerformance = nagiosPerformance + ";";  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (Global.duration >= criticalValue) {  	//change global exit code  	globalExitcode.InnerText = "2";  	//set the standard output exit code  	standardOutputExitCode = 2;  	//add this step to the critical steps  	try {  		CriticalStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  		OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  		WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  	}  	catch {  		CriticalStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  		OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  		WarningStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: standardOutputExitCode = 2;  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: try {  	//set global timeout value into the output file  	long timeout = long.Parse (Global.xmlNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  	globalPerformance.SetAttribute ("timeout"' timeout.ToString ());  	//check if the global step has exceeded the timeout value  	if (Global.duration >= timeout) {  		//change global exit code  		globalExitcode.InnerText = "3";  		//set the standard output exit code  		standardOutputExitCode = 3;  		try {  			//check if user has set different exit code for the timeout  			globalExitcode.InnerText = Global.xmlNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  			standardOutputExitCode = Int32.Parse (globalExitcode.InnerText);  			globalTimeoutOccurred = true;  			globalTimeoutExitCode = standardOutputExitCode;  		}  		catch {  		}  		//add this step to the unknown steps  		try {  			TimeoutStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  			CriticalStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  		}  		catch {  			TimeoutStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  			OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			WarningStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  			CriticalStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  		}  	}  }  catch {  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (Global.duration >= timeout) {  	//change global exit code  	globalExitcode.InnerText = "3";  	//set the standard output exit code  	standardOutputExitCode = 3;  	try {  		//check if user has set different exit code for the timeout  		globalExitcode.InnerText = Global.xmlNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  		standardOutputExitCode = Int32.Parse (globalExitcode.InnerText);  		globalTimeoutOccurred = true;  		globalTimeoutExitCode = standardOutputExitCode;  	}  	catch {  	}  	//add this step to the unknown steps  	try {  		TimeoutStep.Add (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  		OkStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  		WarningStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  		CriticalStep.Remove (global.Attributes ["name"].Value + " (global step);" + globalPerformance.Attributes ["duration"].Value);  	}  	catch {  		TimeoutStep.Add ("global step;" + globalPerformance.Attributes ["duration"].Value);  		OkStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  		WarningStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  		CriticalStep.Remove ("global step;" + globalPerformance.Attributes ["duration"].Value);  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: standardOutputExitCode = 3;  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: foreach (StepTiming stepTiming in StepTimingsCollection) {  	//variable to enable the output  	bool enableOutput = false;  	//variable to enable the data source group  	string groupName = "";  	string groupName2 = "";  	string groupName3 = "";  	bool groupEnable = false;  	try {  		//check if we have to write the output of current step into the output file  		if (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["output"].Value.ToLower () == "yes")  			enableOutput = true;  	}  	catch {  	}  	try {  		//check if we have to group the datasource  		groupName = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["group"].Value.ToLower ();  		//check if we have to write the output of current step into the output file  		if (groupName != "") {  			groupName2 = "' group is " + groupName;  			groupName3 = " (group is " + groupName + ")";  			groupEnable = true;  		}  	}  	catch {  	}  	if (enableOutput == true)//&& groupEnable == false)  	 {  		//declare the step node (and its child node) that will be written to the output file  		XmlElement step = outputFile.CreateElement ("step");  		XmlElement performance = outputFile.CreateElement ("performance");  		XmlElement exitcode = outputFile.CreateElement ("exitcode");  		long duration = stepTiming.stepDuration;  		performance.SetAttribute ("start"' stepTiming.startTime.ToString ("HH:mm:ss"));  		performance.SetAttribute ("end"' stepTiming.endTime.ToString ("HH:mm:ss"));  		performance.SetAttribute ("duration"' duration.ToString ());  		//set the exit code of the step  		exitcode.InnerText = "0";  		//set the step number  		step.SetAttribute ("number"' stepTiming.stepNumber.ToString ());  		string stepName = "";  		try {  			//set the step name  			stepName = stepTiming.stepNode.Attributes ["name"].Value;  			step.SetAttribute ("name"' stepName);  		}  		catch {  			stepName = "Step " + stepTiming.stepNumber.ToString ();  		}  		if (groupEnable == false) {  			//add the duration of current step to the nagios performance string  			nagiosPerformance = nagiosPerformance + " " + stepName + "=" + duration.ToString () + "ms";  		}  		else {  			//get the duration of the group  			string durationOfGroupString = "";  			int durationOfGroup = 0;  			try {  				durationOfGroupString = Regex.Split (nagiosPerformance' groupName + "=") [1];  				durationOfGroupString = Regex.Split (durationOfGroupString' "ms") [0];  				durationOfGroup = Int32.Parse (durationOfGroupString);  				nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ());  				// + " " + groupName + "=" + (duration + durationOfGroup).ToString() + "ms";  			}  			catch//group data source is not present' so create it  			 {  				//add the duration of current step to the nagios performance string  				nagiosPerformance = nagiosPerformance + " " + groupName + "=" + duration.ToString () + "ms";  			}  		}  		try {  			//set the description for the current step  			step.SetAttribute ("description"' stepTiming.stepNode.Attributes ["description"].Value);  		}  		catch {  		}  		//add current step to the OkStep Array  		try {  			OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		}  		catch {  			OkStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		}  		try {  			//set warning value into the output file for the current step  			long warningLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  			performance.SetAttribute ("warning"' warningLevel.ToString ());  			if (groupEnable == false) {  				//add warning threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  			}  			else {  				if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  					nagiosPerformance = nagiosPerformance + ";";  				}  			}  			//check if the current step has exceeded the warning threshold  			if (duration >= warningLevel) {  				//change the exit code of current step  				exitcode.InnerText = "1";  				//add this step to the warning steps  				try {  					WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				if (standardOutputExitCode <= 1) {  					//set the standard output exit code  					standardOutputExitCode = 1;  				}  			}  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set global critical value into the output file fo the current step  			long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  			performance.SetAttribute ("critical"' errorLevel.ToString ());  			if (groupEnable == false) {  				//add critical threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  			}  			else {  				if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  					nagiosPerformance = nagiosPerformance + ";";  				}  			}  			//check if the current step has exceeded the critical threshold  			if (duration >= errorLevel) {  				//change the exit code of current step  				exitcode.InnerText = "2";  				//add this step to the critical steps  				try {  					CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				if (standardOutputExitCode <= 2) {  					//set the standard output exit code  					standardOutputExitCode = 2;  				}  			}  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set the timeout value into the output file for the current step  			long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  			performance.SetAttribute ("timeout"' timeout.ToString ());  			//check if the global step has exceeded the timeout value  			if (duration >= timeout) {  				if (groupEnable == false) {  					if (ConfigUtils.OutputTimeoutHandler == 1) {  						try {  							//set the step name  							stepName = stepTiming.stepNode.Attributes ["name"].Value;  							nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  						}  						catch {  							nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  						}  					}  					else if (ConfigUtils.OutputTimeoutHandler == 2) {  						try {  							//set the step name  							stepName = stepTiming.stepNode.Attributes ["name"].Value;  							nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  						}  						catch {  							nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  						}  					}  				}  				//add this step to the timeout steps  				try {  					TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				//performance.SetAttribute("duration"' duration.ToString());  				//change global exit code  				exitcode.InnerText = "3";  				//set the standard output exit code  				standardOutputExitCode = 3;  				try {  					//check if user has set different exit code for the timeout  					exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  					standardOutputExitCode = Int32.Parse (exitcode.InnerText);  				}  				catch {  				}  			}  		}  		catch {  		}  		//we don't have a min or max value for the performance data.  		//So we I to add two semicolon to avoid any kind of error on the graph  		if (groupEnable == false)  			nagiosPerformance = nagiosPerformance + ";;";  		//put together step node and step child nodes  		step.AppendChild (performance);  		step.AppendChild (exitcode);  		steps.AppendChild (step);  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: foreach (StepTiming stepTiming in StepTimingsCollection) {  	//variable to enable the output  	bool enableOutput = false;  	//variable to enable the data source group  	string groupName = "";  	string groupName2 = "";  	string groupName3 = "";  	bool groupEnable = false;  	try {  		//check if we have to write the output of current step into the output file  		if (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["output"].Value.ToLower () == "yes")  			enableOutput = true;  	}  	catch {  	}  	try {  		//check if we have to group the datasource  		groupName = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["group"].Value.ToLower ();  		//check if we have to write the output of current step into the output file  		if (groupName != "") {  			groupName2 = "' group is " + groupName;  			groupName3 = " (group is " + groupName + ")";  			groupEnable = true;  		}  	}  	catch {  	}  	if (enableOutput == true)//&& groupEnable == false)  	 {  		//declare the step node (and its child node) that will be written to the output file  		XmlElement step = outputFile.CreateElement ("step");  		XmlElement performance = outputFile.CreateElement ("performance");  		XmlElement exitcode = outputFile.CreateElement ("exitcode");  		long duration = stepTiming.stepDuration;  		performance.SetAttribute ("start"' stepTiming.startTime.ToString ("HH:mm:ss"));  		performance.SetAttribute ("end"' stepTiming.endTime.ToString ("HH:mm:ss"));  		performance.SetAttribute ("duration"' duration.ToString ());  		//set the exit code of the step  		exitcode.InnerText = "0";  		//set the step number  		step.SetAttribute ("number"' stepTiming.stepNumber.ToString ());  		string stepName = "";  		try {  			//set the step name  			stepName = stepTiming.stepNode.Attributes ["name"].Value;  			step.SetAttribute ("name"' stepName);  		}  		catch {  			stepName = "Step " + stepTiming.stepNumber.ToString ();  		}  		if (groupEnable == false) {  			//add the duration of current step to the nagios performance string  			nagiosPerformance = nagiosPerformance + " " + stepName + "=" + duration.ToString () + "ms";  		}  		else {  			//get the duration of the group  			string durationOfGroupString = "";  			int durationOfGroup = 0;  			try {  				durationOfGroupString = Regex.Split (nagiosPerformance' groupName + "=") [1];  				durationOfGroupString = Regex.Split (durationOfGroupString' "ms") [0];  				durationOfGroup = Int32.Parse (durationOfGroupString);  				nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ());  				// + " " + groupName + "=" + (duration + durationOfGroup).ToString() + "ms";  			}  			catch//group data source is not present' so create it  			 {  				//add the duration of current step to the nagios performance string  				nagiosPerformance = nagiosPerformance + " " + groupName + "=" + duration.ToString () + "ms";  			}  		}  		try {  			//set the description for the current step  			step.SetAttribute ("description"' stepTiming.stepNode.Attributes ["description"].Value);  		}  		catch {  		}  		//add current step to the OkStep Array  		try {  			OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		}  		catch {  			OkStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		}  		try {  			//set warning value into the output file for the current step  			long warningLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  			performance.SetAttribute ("warning"' warningLevel.ToString ());  			if (groupEnable == false) {  				//add warning threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  			}  			else {  				if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  					nagiosPerformance = nagiosPerformance + ";";  				}  			}  			//check if the current step has exceeded the warning threshold  			if (duration >= warningLevel) {  				//change the exit code of current step  				exitcode.InnerText = "1";  				//add this step to the warning steps  				try {  					WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				if (standardOutputExitCode <= 1) {  					//set the standard output exit code  					standardOutputExitCode = 1;  				}  			}  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set global critical value into the output file fo the current step  			long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  			performance.SetAttribute ("critical"' errorLevel.ToString ());  			if (groupEnable == false) {  				//add critical threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  			}  			else {  				if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  					nagiosPerformance = nagiosPerformance + ";";  				}  			}  			//check if the current step has exceeded the critical threshold  			if (duration >= errorLevel) {  				//change the exit code of current step  				exitcode.InnerText = "2";  				//add this step to the critical steps  				try {  					CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				if (standardOutputExitCode <= 2) {  					//set the standard output exit code  					standardOutputExitCode = 2;  				}  			}  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set the timeout value into the output file for the current step  			long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  			performance.SetAttribute ("timeout"' timeout.ToString ());  			//check if the global step has exceeded the timeout value  			if (duration >= timeout) {  				if (groupEnable == false) {  					if (ConfigUtils.OutputTimeoutHandler == 1) {  						try {  							//set the step name  							stepName = stepTiming.stepNode.Attributes ["name"].Value;  							nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  						}  						catch {  							nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  						}  					}  					else if (ConfigUtils.OutputTimeoutHandler == 2) {  						try {  							//set the step name  							stepName = stepTiming.stepNode.Attributes ["name"].Value;  							nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  						}  						catch {  							nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  						}  					}  				}  				//add this step to the timeout steps  				try {  					TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				//performance.SetAttribute("duration"' duration.ToString());  				//change global exit code  				exitcode.InnerText = "3";  				//set the standard output exit code  				standardOutputExitCode = 3;  				try {  					//check if user has set different exit code for the timeout  					exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  					standardOutputExitCode = Int32.Parse (exitcode.InnerText);  				}  				catch {  				}  			}  		}  		catch {  		}  		//we don't have a min or max value for the performance data.  		//So we I to add two semicolon to avoid any kind of error on the graph  		if (groupEnable == false)  			nagiosPerformance = nagiosPerformance + ";;";  		//put together step node and step child nodes  		step.AppendChild (performance);  		step.AppendChild (exitcode);  		steps.AppendChild (step);  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: foreach (StepTiming stepTiming in StepTimingsCollection) {  	//variable to enable the output  	bool enableOutput = false;  	//variable to enable the data source group  	string groupName = "";  	string groupName2 = "";  	string groupName3 = "";  	bool groupEnable = false;  	try {  		//check if we have to write the output of current step into the output file  		if (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["output"].Value.ToLower () == "yes")  			enableOutput = true;  	}  	catch {  	}  	try {  		//check if we have to group the datasource  		groupName = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["group"].Value.ToLower ();  		//check if we have to write the output of current step into the output file  		if (groupName != "") {  			groupName2 = "' group is " + groupName;  			groupName3 = " (group is " + groupName + ")";  			groupEnable = true;  		}  	}  	catch {  	}  	if (enableOutput == true)//&& groupEnable == false)  	 {  		//declare the step node (and its child node) that will be written to the output file  		XmlElement step = outputFile.CreateElement ("step");  		XmlElement performance = outputFile.CreateElement ("performance");  		XmlElement exitcode = outputFile.CreateElement ("exitcode");  		long duration = stepTiming.stepDuration;  		performance.SetAttribute ("start"' stepTiming.startTime.ToString ("HH:mm:ss"));  		performance.SetAttribute ("end"' stepTiming.endTime.ToString ("HH:mm:ss"));  		performance.SetAttribute ("duration"' duration.ToString ());  		//set the exit code of the step  		exitcode.InnerText = "0";  		//set the step number  		step.SetAttribute ("number"' stepTiming.stepNumber.ToString ());  		string stepName = "";  		try {  			//set the step name  			stepName = stepTiming.stepNode.Attributes ["name"].Value;  			step.SetAttribute ("name"' stepName);  		}  		catch {  			stepName = "Step " + stepTiming.stepNumber.ToString ();  		}  		if (groupEnable == false) {  			//add the duration of current step to the nagios performance string  			nagiosPerformance = nagiosPerformance + " " + stepName + "=" + duration.ToString () + "ms";  		}  		else {  			//get the duration of the group  			string durationOfGroupString = "";  			int durationOfGroup = 0;  			try {  				durationOfGroupString = Regex.Split (nagiosPerformance' groupName + "=") [1];  				durationOfGroupString = Regex.Split (durationOfGroupString' "ms") [0];  				durationOfGroup = Int32.Parse (durationOfGroupString);  				nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ());  				// + " " + groupName + "=" + (duration + durationOfGroup).ToString() + "ms";  			}  			catch//group data source is not present' so create it  			 {  				//add the duration of current step to the nagios performance string  				nagiosPerformance = nagiosPerformance + " " + groupName + "=" + duration.ToString () + "ms";  			}  		}  		try {  			//set the description for the current step  			step.SetAttribute ("description"' stepTiming.stepNode.Attributes ["description"].Value);  		}  		catch {  		}  		//add current step to the OkStep Array  		try {  			OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		}  		catch {  			OkStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		}  		try {  			//set warning value into the output file for the current step  			long warningLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  			performance.SetAttribute ("warning"' warningLevel.ToString ());  			if (groupEnable == false) {  				//add warning threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  			}  			else {  				if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  					nagiosPerformance = nagiosPerformance + ";";  				}  			}  			//check if the current step has exceeded the warning threshold  			if (duration >= warningLevel) {  				//change the exit code of current step  				exitcode.InnerText = "1";  				//add this step to the warning steps  				try {  					WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				if (standardOutputExitCode <= 1) {  					//set the standard output exit code  					standardOutputExitCode = 1;  				}  			}  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set global critical value into the output file fo the current step  			long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  			performance.SetAttribute ("critical"' errorLevel.ToString ());  			if (groupEnable == false) {  				//add critical threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  			}  			else {  				if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  					nagiosPerformance = nagiosPerformance + ";";  				}  			}  			//check if the current step has exceeded the critical threshold  			if (duration >= errorLevel) {  				//change the exit code of current step  				exitcode.InnerText = "2";  				//add this step to the critical steps  				try {  					CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				if (standardOutputExitCode <= 2) {  					//set the standard output exit code  					standardOutputExitCode = 2;  				}  			}  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set the timeout value into the output file for the current step  			long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  			performance.SetAttribute ("timeout"' timeout.ToString ());  			//check if the global step has exceeded the timeout value  			if (duration >= timeout) {  				if (groupEnable == false) {  					if (ConfigUtils.OutputTimeoutHandler == 1) {  						try {  							//set the step name  							stepName = stepTiming.stepNode.Attributes ["name"].Value;  							nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  						}  						catch {  							nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  						}  					}  					else if (ConfigUtils.OutputTimeoutHandler == 2) {  						try {  							//set the step name  							stepName = stepTiming.stepNode.Attributes ["name"].Value;  							nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  						}  						catch {  							nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  						}  					}  				}  				//add this step to the timeout steps  				try {  					TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				//performance.SetAttribute("duration"' duration.ToString());  				//change global exit code  				exitcode.InnerText = "3";  				//set the standard output exit code  				standardOutputExitCode = 3;  				try {  					//check if user has set different exit code for the timeout  					exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  					standardOutputExitCode = Int32.Parse (exitcode.InnerText);  				}  				catch {  				}  			}  		}  		catch {  		}  		//we don't have a min or max value for the performance data.  		//So we I to add two semicolon to avoid any kind of error on the graph  		if (groupEnable == false)  			nagiosPerformance = nagiosPerformance + ";;";  		//put together step node and step child nodes  		step.AppendChild (performance);  		step.AppendChild (exitcode);  		steps.AppendChild (step);  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: foreach (StepTiming stepTiming in StepTimingsCollection) {  	//variable to enable the output  	bool enableOutput = false;  	//variable to enable the data source group  	string groupName = "";  	string groupName2 = "";  	string groupName3 = "";  	bool groupEnable = false;  	try {  		//check if we have to write the output of current step into the output file  		if (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["output"].Value.ToLower () == "yes")  			enableOutput = true;  	}  	catch {  	}  	try {  		//check if we have to group the datasource  		groupName = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["group"].Value.ToLower ();  		//check if we have to write the output of current step into the output file  		if (groupName != "") {  			groupName2 = "' group is " + groupName;  			groupName3 = " (group is " + groupName + ")";  			groupEnable = true;  		}  	}  	catch {  	}  	if (enableOutput == true)//&& groupEnable == false)  	 {  		//declare the step node (and its child node) that will be written to the output file  		XmlElement step = outputFile.CreateElement ("step");  		XmlElement performance = outputFile.CreateElement ("performance");  		XmlElement exitcode = outputFile.CreateElement ("exitcode");  		long duration = stepTiming.stepDuration;  		performance.SetAttribute ("start"' stepTiming.startTime.ToString ("HH:mm:ss"));  		performance.SetAttribute ("end"' stepTiming.endTime.ToString ("HH:mm:ss"));  		performance.SetAttribute ("duration"' duration.ToString ());  		//set the exit code of the step  		exitcode.InnerText = "0";  		//set the step number  		step.SetAttribute ("number"' stepTiming.stepNumber.ToString ());  		string stepName = "";  		try {  			//set the step name  			stepName = stepTiming.stepNode.Attributes ["name"].Value;  			step.SetAttribute ("name"' stepName);  		}  		catch {  			stepName = "Step " + stepTiming.stepNumber.ToString ();  		}  		if (groupEnable == false) {  			//add the duration of current step to the nagios performance string  			nagiosPerformance = nagiosPerformance + " " + stepName + "=" + duration.ToString () + "ms";  		}  		else {  			//get the duration of the group  			string durationOfGroupString = "";  			int durationOfGroup = 0;  			try {  				durationOfGroupString = Regex.Split (nagiosPerformance' groupName + "=") [1];  				durationOfGroupString = Regex.Split (durationOfGroupString' "ms") [0];  				durationOfGroup = Int32.Parse (durationOfGroupString);  				nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ());  				// + " " + groupName + "=" + (duration + durationOfGroup).ToString() + "ms";  			}  			catch//group data source is not present' so create it  			 {  				//add the duration of current step to the nagios performance string  				nagiosPerformance = nagiosPerformance + " " + groupName + "=" + duration.ToString () + "ms";  			}  		}  		try {  			//set the description for the current step  			step.SetAttribute ("description"' stepTiming.stepNode.Attributes ["description"].Value);  		}  		catch {  		}  		//add current step to the OkStep Array  		try {  			OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		}  		catch {  			OkStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		}  		try {  			//set warning value into the output file for the current step  			long warningLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  			performance.SetAttribute ("warning"' warningLevel.ToString ());  			if (groupEnable == false) {  				//add warning threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  			}  			else {  				if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  					nagiosPerformance = nagiosPerformance + ";";  				}  			}  			//check if the current step has exceeded the warning threshold  			if (duration >= warningLevel) {  				//change the exit code of current step  				exitcode.InnerText = "1";  				//add this step to the warning steps  				try {  					WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				if (standardOutputExitCode <= 1) {  					//set the standard output exit code  					standardOutputExitCode = 1;  				}  			}  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set global critical value into the output file fo the current step  			long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  			performance.SetAttribute ("critical"' errorLevel.ToString ());  			if (groupEnable == false) {  				//add critical threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  			}  			else {  				if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  					nagiosPerformance = nagiosPerformance + ";";  				}  			}  			//check if the current step has exceeded the critical threshold  			if (duration >= errorLevel) {  				//change the exit code of current step  				exitcode.InnerText = "2";  				//add this step to the critical steps  				try {  					CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				if (standardOutputExitCode <= 2) {  					//set the standard output exit code  					standardOutputExitCode = 2;  				}  			}  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set the timeout value into the output file for the current step  			long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  			performance.SetAttribute ("timeout"' timeout.ToString ());  			//check if the global step has exceeded the timeout value  			if (duration >= timeout) {  				if (groupEnable == false) {  					if (ConfigUtils.OutputTimeoutHandler == 1) {  						try {  							//set the step name  							stepName = stepTiming.stepNode.Attributes ["name"].Value;  							nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  						}  						catch {  							nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  						}  					}  					else if (ConfigUtils.OutputTimeoutHandler == 2) {  						try {  							//set the step name  							stepName = stepTiming.stepNode.Attributes ["name"].Value;  							nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  						}  						catch {  							nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  						}  					}  				}  				//add this step to the timeout steps  				try {  					TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  					WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				}  				catch {  					TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  					WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				}  				//performance.SetAttribute("duration"' duration.ToString());  				//change global exit code  				exitcode.InnerText = "3";  				//set the standard output exit code  				standardOutputExitCode = 3;  				try {  					//check if user has set different exit code for the timeout  					exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  					standardOutputExitCode = Int32.Parse (exitcode.InnerText);  				}  				catch {  				}  			}  		}  		catch {  		}  		//we don't have a min or max value for the performance data.  		//So we I to add two semicolon to avoid any kind of error on the graph  		if (groupEnable == false)  			nagiosPerformance = nagiosPerformance + ";;";  		//put together step node and step child nodes  		step.AppendChild (performance);  		step.AppendChild (exitcode);  		steps.AppendChild (step);  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (enableOutput == true)//&& groupEnable == false)   {  	//declare the step node (and its child node) that will be written to the output file  	XmlElement step = outputFile.CreateElement ("step");  	XmlElement performance = outputFile.CreateElement ("performance");  	XmlElement exitcode = outputFile.CreateElement ("exitcode");  	long duration = stepTiming.stepDuration;  	performance.SetAttribute ("start"' stepTiming.startTime.ToString ("HH:mm:ss"));  	performance.SetAttribute ("end"' stepTiming.endTime.ToString ("HH:mm:ss"));  	performance.SetAttribute ("duration"' duration.ToString ());  	//set the exit code of the step  	exitcode.InnerText = "0";  	//set the step number  	step.SetAttribute ("number"' stepTiming.stepNumber.ToString ());  	string stepName = "";  	try {  		//set the step name  		stepName = stepTiming.stepNode.Attributes ["name"].Value;  		step.SetAttribute ("name"' stepName);  	}  	catch {  		stepName = "Step " + stepTiming.stepNumber.ToString ();  	}  	if (groupEnable == false) {  		//add the duration of current step to the nagios performance string  		nagiosPerformance = nagiosPerformance + " " + stepName + "=" + duration.ToString () + "ms";  	}  	else {  		//get the duration of the group  		string durationOfGroupString = "";  		int durationOfGroup = 0;  		try {  			durationOfGroupString = Regex.Split (nagiosPerformance' groupName + "=") [1];  			durationOfGroupString = Regex.Split (durationOfGroupString' "ms") [0];  			durationOfGroup = Int32.Parse (durationOfGroupString);  			nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ());  			// + " " + groupName + "=" + (duration + durationOfGroup).ToString() + "ms";  		}  		catch//group data source is not present' so create it  		 {  			//add the duration of current step to the nagios performance string  			nagiosPerformance = nagiosPerformance + " " + groupName + "=" + duration.ToString () + "ms";  		}  	}  	try {  		//set the description for the current step  		step.SetAttribute ("description"' stepTiming.stepNode.Attributes ["description"].Value);  	}  	catch {  	}  	//add current step to the OkStep Array  	try {  		OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  	}  	catch {  		OkStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  	}  	try {  		//set warning value into the output file for the current step  		long warningLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  		performance.SetAttribute ("warning"' warningLevel.ToString ());  		if (groupEnable == false) {  			//add warning threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  		}  		else {  			if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  				nagiosPerformance = nagiosPerformance + ";";  			}  		}  		//check if the current step has exceeded the warning threshold  		if (duration >= warningLevel) {  			//change the exit code of current step  			exitcode.InnerText = "1";  			//add this step to the warning steps  			try {  				WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			if (standardOutputExitCode <= 1) {  				//set the standard output exit code  				standardOutputExitCode = 1;  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global critical value into the output file fo the current step  		long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  		performance.SetAttribute ("critical"' errorLevel.ToString ());  		if (groupEnable == false) {  			//add critical threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  		}  		else {  			if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  				nagiosPerformance = nagiosPerformance + ";";  			}  		}  		//check if the current step has exceeded the critical threshold  		if (duration >= errorLevel) {  			//change the exit code of current step  			exitcode.InnerText = "2";  			//add this step to the critical steps  			try {  				CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			if (standardOutputExitCode <= 2) {  				//set the standard output exit code  				standardOutputExitCode = 2;  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set the timeout value into the output file for the current step  		long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  		performance.SetAttribute ("timeout"' timeout.ToString ());  		//check if the global step has exceeded the timeout value  		if (duration >= timeout) {  			if (groupEnable == false) {  				if (ConfigUtils.OutputTimeoutHandler == 1) {  					try {  						//set the step name  						stepName = stepTiming.stepNode.Attributes ["name"].Value;  						nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  					}  					catch {  						nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  					}  				}  				else if (ConfigUtils.OutputTimeoutHandler == 2) {  					try {  						//set the step name  						stepName = stepTiming.stepNode.Attributes ["name"].Value;  						nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  					}  					catch {  						nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  					}  				}  			}  			//add this step to the timeout steps  			try {  				TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			//performance.SetAttribute("duration"' duration.ToString());  			//change global exit code  			exitcode.InnerText = "3";  			//set the standard output exit code  			standardOutputExitCode = 3;  			try {  				//check if user has set different exit code for the timeout  				exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  				standardOutputExitCode = Int32.Parse (exitcode.InnerText);  			}  			catch {  			}  		}  	}  	catch {  	}  	//we don't have a min or max value for the performance data.  	//So we I to add two semicolon to avoid any kind of error on the graph  	if (groupEnable == false)  		nagiosPerformance = nagiosPerformance + ";;";  	//put together step node and step child nodes  	step.AppendChild (performance);  	step.AppendChild (exitcode);  	steps.AppendChild (step);  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (enableOutput == true)//&& groupEnable == false)   {  	//declare the step node (and its child node) that will be written to the output file  	XmlElement step = outputFile.CreateElement ("step");  	XmlElement performance = outputFile.CreateElement ("performance");  	XmlElement exitcode = outputFile.CreateElement ("exitcode");  	long duration = stepTiming.stepDuration;  	performance.SetAttribute ("start"' stepTiming.startTime.ToString ("HH:mm:ss"));  	performance.SetAttribute ("end"' stepTiming.endTime.ToString ("HH:mm:ss"));  	performance.SetAttribute ("duration"' duration.ToString ());  	//set the exit code of the step  	exitcode.InnerText = "0";  	//set the step number  	step.SetAttribute ("number"' stepTiming.stepNumber.ToString ());  	string stepName = "";  	try {  		//set the step name  		stepName = stepTiming.stepNode.Attributes ["name"].Value;  		step.SetAttribute ("name"' stepName);  	}  	catch {  		stepName = "Step " + stepTiming.stepNumber.ToString ();  	}  	if (groupEnable == false) {  		//add the duration of current step to the nagios performance string  		nagiosPerformance = nagiosPerformance + " " + stepName + "=" + duration.ToString () + "ms";  	}  	else {  		//get the duration of the group  		string durationOfGroupString = "";  		int durationOfGroup = 0;  		try {  			durationOfGroupString = Regex.Split (nagiosPerformance' groupName + "=") [1];  			durationOfGroupString = Regex.Split (durationOfGroupString' "ms") [0];  			durationOfGroup = Int32.Parse (durationOfGroupString);  			nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ());  			// + " " + groupName + "=" + (duration + durationOfGroup).ToString() + "ms";  		}  		catch//group data source is not present' so create it  		 {  			//add the duration of current step to the nagios performance string  			nagiosPerformance = nagiosPerformance + " " + groupName + "=" + duration.ToString () + "ms";  		}  	}  	try {  		//set the description for the current step  		step.SetAttribute ("description"' stepTiming.stepNode.Attributes ["description"].Value);  	}  	catch {  	}  	//add current step to the OkStep Array  	try {  		OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  	}  	catch {  		OkStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  	}  	try {  		//set warning value into the output file for the current step  		long warningLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  		performance.SetAttribute ("warning"' warningLevel.ToString ());  		if (groupEnable == false) {  			//add warning threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  		}  		else {  			if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  				nagiosPerformance = nagiosPerformance + ";";  			}  		}  		//check if the current step has exceeded the warning threshold  		if (duration >= warningLevel) {  			//change the exit code of current step  			exitcode.InnerText = "1";  			//add this step to the warning steps  			try {  				WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			if (standardOutputExitCode <= 1) {  				//set the standard output exit code  				standardOutputExitCode = 1;  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global critical value into the output file fo the current step  		long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  		performance.SetAttribute ("critical"' errorLevel.ToString ());  		if (groupEnable == false) {  			//add critical threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  		}  		else {  			if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  				nagiosPerformance = nagiosPerformance + ";";  			}  		}  		//check if the current step has exceeded the critical threshold  		if (duration >= errorLevel) {  			//change the exit code of current step  			exitcode.InnerText = "2";  			//add this step to the critical steps  			try {  				CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			if (standardOutputExitCode <= 2) {  				//set the standard output exit code  				standardOutputExitCode = 2;  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set the timeout value into the output file for the current step  		long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  		performance.SetAttribute ("timeout"' timeout.ToString ());  		//check if the global step has exceeded the timeout value  		if (duration >= timeout) {  			if (groupEnable == false) {  				if (ConfigUtils.OutputTimeoutHandler == 1) {  					try {  						//set the step name  						stepName = stepTiming.stepNode.Attributes ["name"].Value;  						nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  					}  					catch {  						nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  					}  				}  				else if (ConfigUtils.OutputTimeoutHandler == 2) {  					try {  						//set the step name  						stepName = stepTiming.stepNode.Attributes ["name"].Value;  						nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  					}  					catch {  						nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  					}  				}  			}  			//add this step to the timeout steps  			try {  				TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			//performance.SetAttribute("duration"' duration.ToString());  			//change global exit code  			exitcode.InnerText = "3";  			//set the standard output exit code  			standardOutputExitCode = 3;  			try {  				//check if user has set different exit code for the timeout  				exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  				standardOutputExitCode = Int32.Parse (exitcode.InnerText);  			}  			catch {  			}  		}  	}  	catch {  	}  	//we don't have a min or max value for the performance data.  	//So we I to add two semicolon to avoid any kind of error on the graph  	if (groupEnable == false)  		nagiosPerformance = nagiosPerformance + ";;";  	//put together step node and step child nodes  	step.AppendChild (performance);  	step.AppendChild (exitcode);  	steps.AppendChild (step);  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (enableOutput == true)//&& groupEnable == false)   {  	//declare the step node (and its child node) that will be written to the output file  	XmlElement step = outputFile.CreateElement ("step");  	XmlElement performance = outputFile.CreateElement ("performance");  	XmlElement exitcode = outputFile.CreateElement ("exitcode");  	long duration = stepTiming.stepDuration;  	performance.SetAttribute ("start"' stepTiming.startTime.ToString ("HH:mm:ss"));  	performance.SetAttribute ("end"' stepTiming.endTime.ToString ("HH:mm:ss"));  	performance.SetAttribute ("duration"' duration.ToString ());  	//set the exit code of the step  	exitcode.InnerText = "0";  	//set the step number  	step.SetAttribute ("number"' stepTiming.stepNumber.ToString ());  	string stepName = "";  	try {  		//set the step name  		stepName = stepTiming.stepNode.Attributes ["name"].Value;  		step.SetAttribute ("name"' stepName);  	}  	catch {  		stepName = "Step " + stepTiming.stepNumber.ToString ();  	}  	if (groupEnable == false) {  		//add the duration of current step to the nagios performance string  		nagiosPerformance = nagiosPerformance + " " + stepName + "=" + duration.ToString () + "ms";  	}  	else {  		//get the duration of the group  		string durationOfGroupString = "";  		int durationOfGroup = 0;  		try {  			durationOfGroupString = Regex.Split (nagiosPerformance' groupName + "=") [1];  			durationOfGroupString = Regex.Split (durationOfGroupString' "ms") [0];  			durationOfGroup = Int32.Parse (durationOfGroupString);  			nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ());  			// + " " + groupName + "=" + (duration + durationOfGroup).ToString() + "ms";  		}  		catch//group data source is not present' so create it  		 {  			//add the duration of current step to the nagios performance string  			nagiosPerformance = nagiosPerformance + " " + groupName + "=" + duration.ToString () + "ms";  		}  	}  	try {  		//set the description for the current step  		step.SetAttribute ("description"' stepTiming.stepNode.Attributes ["description"].Value);  	}  	catch {  	}  	//add current step to the OkStep Array  	try {  		OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  	}  	catch {  		OkStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  	}  	try {  		//set warning value into the output file for the current step  		long warningLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  		performance.SetAttribute ("warning"' warningLevel.ToString ());  		if (groupEnable == false) {  			//add warning threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  		}  		else {  			if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  				nagiosPerformance = nagiosPerformance + ";";  			}  		}  		//check if the current step has exceeded the warning threshold  		if (duration >= warningLevel) {  			//change the exit code of current step  			exitcode.InnerText = "1";  			//add this step to the warning steps  			try {  				WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			if (standardOutputExitCode <= 1) {  				//set the standard output exit code  				standardOutputExitCode = 1;  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global critical value into the output file fo the current step  		long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  		performance.SetAttribute ("critical"' errorLevel.ToString ());  		if (groupEnable == false) {  			//add critical threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  		}  		else {  			if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  				nagiosPerformance = nagiosPerformance + ";";  			}  		}  		//check if the current step has exceeded the critical threshold  		if (duration >= errorLevel) {  			//change the exit code of current step  			exitcode.InnerText = "2";  			//add this step to the critical steps  			try {  				CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			if (standardOutputExitCode <= 2) {  				//set the standard output exit code  				standardOutputExitCode = 2;  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set the timeout value into the output file for the current step  		long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  		performance.SetAttribute ("timeout"' timeout.ToString ());  		//check if the global step has exceeded the timeout value  		if (duration >= timeout) {  			if (groupEnable == false) {  				if (ConfigUtils.OutputTimeoutHandler == 1) {  					try {  						//set the step name  						stepName = stepTiming.stepNode.Attributes ["name"].Value;  						nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  					}  					catch {  						nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  					}  				}  				else if (ConfigUtils.OutputTimeoutHandler == 2) {  					try {  						//set the step name  						stepName = stepTiming.stepNode.Attributes ["name"].Value;  						nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  					}  					catch {  						nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  					}  				}  			}  			//add this step to the timeout steps  			try {  				TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			//performance.SetAttribute("duration"' duration.ToString());  			//change global exit code  			exitcode.InnerText = "3";  			//set the standard output exit code  			standardOutputExitCode = 3;  			try {  				//check if user has set different exit code for the timeout  				exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  				standardOutputExitCode = Int32.Parse (exitcode.InnerText);  			}  			catch {  			}  		}  	}  	catch {  	}  	//we don't have a min or max value for the performance data.  	//So we I to add two semicolon to avoid any kind of error on the graph  	if (groupEnable == false)  		nagiosPerformance = nagiosPerformance + ";;";  	//put together step node and step child nodes  	step.AppendChild (performance);  	step.AppendChild (exitcode);  	steps.AppendChild (step);  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (enableOutput == true)//&& groupEnable == false)   {  	//declare the step node (and its child node) that will be written to the output file  	XmlElement step = outputFile.CreateElement ("step");  	XmlElement performance = outputFile.CreateElement ("performance");  	XmlElement exitcode = outputFile.CreateElement ("exitcode");  	long duration = stepTiming.stepDuration;  	performance.SetAttribute ("start"' stepTiming.startTime.ToString ("HH:mm:ss"));  	performance.SetAttribute ("end"' stepTiming.endTime.ToString ("HH:mm:ss"));  	performance.SetAttribute ("duration"' duration.ToString ());  	//set the exit code of the step  	exitcode.InnerText = "0";  	//set the step number  	step.SetAttribute ("number"' stepTiming.stepNumber.ToString ());  	string stepName = "";  	try {  		//set the step name  		stepName = stepTiming.stepNode.Attributes ["name"].Value;  		step.SetAttribute ("name"' stepName);  	}  	catch {  		stepName = "Step " + stepTiming.stepNumber.ToString ();  	}  	if (groupEnable == false) {  		//add the duration of current step to the nagios performance string  		nagiosPerformance = nagiosPerformance + " " + stepName + "=" + duration.ToString () + "ms";  	}  	else {  		//get the duration of the group  		string durationOfGroupString = "";  		int durationOfGroup = 0;  		try {  			durationOfGroupString = Regex.Split (nagiosPerformance' groupName + "=") [1];  			durationOfGroupString = Regex.Split (durationOfGroupString' "ms") [0];  			durationOfGroup = Int32.Parse (durationOfGroupString);  			nagiosPerformance = nagiosPerformance.Replace (groupName + "=" + durationOfGroup' groupName + "=" + (duration + durationOfGroup).ToString ());  			// + " " + groupName + "=" + (duration + durationOfGroup).ToString() + "ms";  		}  		catch//group data source is not present' so create it  		 {  			//add the duration of current step to the nagios performance string  			nagiosPerformance = nagiosPerformance + " " + groupName + "=" + duration.ToString () + "ms";  		}  	}  	try {  		//set the description for the current step  		step.SetAttribute ("description"' stepTiming.stepNode.Attributes ["description"].Value);  	}  	catch {  	}  	//add current step to the OkStep Array  	try {  		OkStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  	}  	catch {  		OkStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  	}  	try {  		//set warning value into the output file for the current step  		long warningLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["warning"].Value);  		performance.SetAttribute ("warning"' warningLevel.ToString ());  		if (groupEnable == false) {  			//add warning threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  		}  		else {  			if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  				nagiosPerformance = nagiosPerformance + ";";  			}  		}  		//check if the current step has exceeded the warning threshold  		if (duration >= warningLevel) {  			//change the exit code of current step  			exitcode.InnerText = "1";  			//add this step to the warning steps  			try {  				WarningStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				WarningStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			if (standardOutputExitCode <= 1) {  				//set the standard output exit code  				standardOutputExitCode = 1;  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global critical value into the output file fo the current step  		long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  		performance.SetAttribute ("critical"' errorLevel.ToString ());  		if (groupEnable == false) {  			//add critical threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  		}  		else {  			if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  				nagiosPerformance = nagiosPerformance + ";";  			}  		}  		//check if the current step has exceeded the critical threshold  		if (duration >= errorLevel) {  			//change the exit code of current step  			exitcode.InnerText = "2";  			//add this step to the critical steps  			try {  				CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			if (standardOutputExitCode <= 2) {  				//set the standard output exit code  				standardOutputExitCode = 2;  			}  		}  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set the timeout value into the output file for the current step  		long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  		performance.SetAttribute ("timeout"' timeout.ToString ());  		//check if the global step has exceeded the timeout value  		if (duration >= timeout) {  			if (groupEnable == false) {  				if (ConfigUtils.OutputTimeoutHandler == 1) {  					try {  						//set the step name  						stepName = stepTiming.stepNode.Attributes ["name"].Value;  						nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  					}  					catch {  						nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  					}  				}  				else if (ConfigUtils.OutputTimeoutHandler == 2) {  					try {  						//set the step name  						stepName = stepTiming.stepNode.Attributes ["name"].Value;  						nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  					}  					catch {  						nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  					}  				}  			}  			//add this step to the timeout steps  			try {  				TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  				WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			}  			catch {  				TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  				WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			}  			//performance.SetAttribute("duration"' duration.ToString());  			//change global exit code  			exitcode.InnerText = "3";  			//set the standard output exit code  			standardOutputExitCode = 3;  			try {  				//check if user has set different exit code for the timeout  				exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  				standardOutputExitCode = Int32.Parse (exitcode.InnerText);  			}  			catch {  			}  		}  	}  	catch {  	}  	//we don't have a min or max value for the performance data.  	//So we I to add two semicolon to avoid any kind of error on the graph  	if (groupEnable == false)  		nagiosPerformance = nagiosPerformance + ";;";  	//put together step node and step child nodes  	step.AppendChild (performance);  	step.AppendChild (exitcode);  	steps.AppendChild (step);  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: try {  	//set global critical value into the output file fo the current step  	long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  	performance.SetAttribute ("critical"' errorLevel.ToString ());  	if (groupEnable == false) {  		//add critical threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  	}  	else {  		if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  			nagiosPerformance = nagiosPerformance + ";";  		}  	}  	//check if the current step has exceeded the critical threshold  	if (duration >= errorLevel) {  		//change the exit code of current step  		exitcode.InnerText = "2";  		//add this step to the critical steps  		try {  			CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		}  		catch {  			CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		}  		if (standardOutputExitCode <= 2) {  			//set the standard output exit code  			standardOutputExitCode = 2;  		}  	}  }  catch {  	//if no warning threshold is set then add only a semicolon to the nagios performance string  	nagiosPerformance = nagiosPerformance + ";";  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: try {  	//set global critical value into the output file fo the current step  	long errorLevel = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["critical"].Value);  	performance.SetAttribute ("critical"' errorLevel.ToString ());  	if (groupEnable == false) {  		//add critical threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  	}  	else {  		if (Regex.IsMatch (nagiosPerformance' groupName + "=.*;;;;") == false) {  			nagiosPerformance = nagiosPerformance + ";";  		}  	}  	//check if the current step has exceeded the critical threshold  	if (duration >= errorLevel) {  		//change the exit code of current step  		exitcode.InnerText = "2";  		//add this step to the critical steps  		try {  			CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		}  		catch {  			CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		}  		if (standardOutputExitCode <= 2) {  			//set the standard output exit code  			standardOutputExitCode = 2;  		}  	}  }  catch {  	//if no warning threshold is set then add only a semicolon to the nagios performance string  	nagiosPerformance = nagiosPerformance + ";";  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (duration >= errorLevel) {  	//change the exit code of current step  	exitcode.InnerText = "2";  	//add this step to the critical steps  	try {  		CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  	}  	catch {  		CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  	}  	if (standardOutputExitCode <= 2) {  		//set the standard output exit code  		standardOutputExitCode = 2;  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (duration >= errorLevel) {  	//change the exit code of current step  	exitcode.InnerText = "2";  	//add this step to the critical steps  	try {  		CriticalStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  	}  	catch {  		CriticalStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  	}  	if (standardOutputExitCode <= 2) {  		//set the standard output exit code  		standardOutputExitCode = 2;  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode <= 2) {  	//set the standard output exit code  	standardOutputExitCode = 2;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode <= 2) {  	//set the standard output exit code  	standardOutputExitCode = 2;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: standardOutputExitCode = 2;  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: try {  	//set the timeout value into the output file for the current step  	long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  	performance.SetAttribute ("timeout"' timeout.ToString ());  	//check if the global step has exceeded the timeout value  	if (duration >= timeout) {  		if (groupEnable == false) {  			if (ConfigUtils.OutputTimeoutHandler == 1) {  				try {  					//set the step name  					stepName = stepTiming.stepNode.Attributes ["name"].Value;  					nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  				}  				catch {  					nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  				}  			}  			else if (ConfigUtils.OutputTimeoutHandler == 2) {  				try {  					//set the step name  					stepName = stepTiming.stepNode.Attributes ["name"].Value;  					nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  				}  				catch {  					nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  				}  			}  		}  		//add this step to the timeout steps  		try {  			TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		}  		catch {  			TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		}  		//performance.SetAttribute("duration"' duration.ToString());  		//change global exit code  		exitcode.InnerText = "3";  		//set the standard output exit code  		standardOutputExitCode = 3;  		try {  			//check if user has set different exit code for the timeout  			exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  			standardOutputExitCode = Int32.Parse (exitcode.InnerText);  		}  		catch {  		}  	}  }  catch {  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: try {  	//set the timeout value into the output file for the current step  	long timeout = long.Parse (stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  	performance.SetAttribute ("timeout"' timeout.ToString ());  	//check if the global step has exceeded the timeout value  	if (duration >= timeout) {  		if (groupEnable == false) {  			if (ConfigUtils.OutputTimeoutHandler == 1) {  				try {  					//set the step name  					stepName = stepTiming.stepNode.Attributes ["name"].Value;  					nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  				}  				catch {  					nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  				}  			}  			else if (ConfigUtils.OutputTimeoutHandler == 2) {  				try {  					//set the step name  					stepName = stepTiming.stepNode.Attributes ["name"].Value;  					nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  				}  				catch {  					nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  				}  			}  		}  		//add this step to the timeout steps  		try {  			TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  			WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		}  		catch {  			TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  			WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		}  		//performance.SetAttribute("duration"' duration.ToString());  		//change global exit code  		exitcode.InnerText = "3";  		//set the standard output exit code  		standardOutputExitCode = 3;  		try {  			//check if user has set different exit code for the timeout  			exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  			standardOutputExitCode = Int32.Parse (exitcode.InnerText);  		}  		catch {  		}  	}  }  catch {  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (duration >= timeout) {  	if (groupEnable == false) {  		if (ConfigUtils.OutputTimeoutHandler == 1) {  			try {  				//set the step name  				stepName = stepTiming.stepNode.Attributes ["name"].Value;  				nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  			}  			catch {  				nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  			}  		}  		else if (ConfigUtils.OutputTimeoutHandler == 2) {  			try {  				//set the step name  				stepName = stepTiming.stepNode.Attributes ["name"].Value;  				nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  			}  			catch {  				nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  			}  		}  	}  	//add this step to the timeout steps  	try {  		TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  	}  	catch {  		TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  	}  	//performance.SetAttribute("duration"' duration.ToString());  	//change global exit code  	exitcode.InnerText = "3";  	//set the standard output exit code  	standardOutputExitCode = 3;  	try {  		//check if user has set different exit code for the timeout  		exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  		standardOutputExitCode = Int32.Parse (exitcode.InnerText);  	}  	catch {  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (duration >= timeout) {  	if (groupEnable == false) {  		if (ConfigUtils.OutputTimeoutHandler == 1) {  			try {  				//set the step name  				stepName = stepTiming.stepNode.Attributes ["name"].Value;  				nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  			}  			catch {  				nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  			}  		}  		else if (ConfigUtils.OutputTimeoutHandler == 2) {  			try {  				//set the step name  				stepName = stepTiming.stepNode.Attributes ["name"].Value;  				nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  			}  			catch {  				nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  			}  		}  	}  	//add this step to the timeout steps  	try {  		TimeoutStep.Add (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		OkStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		CriticalStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  		WarningStep.Remove (step.Attributes ["name"].Value + " (step " + step.Attributes ["number"].Value + groupName2 + ");" + performance.Attributes ["duration"].Value);  	}  	catch {  		TimeoutStep.Add ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		OkStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		CriticalStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  		WarningStep.Remove ("Step " + step.Attributes ["number"].Value + groupName3 + ";" + performance.Attributes ["duration"].Value);  	}  	//performance.SetAttribute("duration"' duration.ToString());  	//change global exit code  	exitcode.InnerText = "3";  	//set the standard output exit code  	standardOutputExitCode = 3;  	try {  		//check if user has set different exit code for the timeout  		exitcode.InnerText = stepTiming.stepNode.SelectSingleNode ("performance").Attributes ["timeout.exitcode"].Value;  		standardOutputExitCode = Int32.Parse (exitcode.InnerText);  	}  	catch {  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (groupEnable == false) {  	if (ConfigUtils.OutputTimeoutHandler == 1) {  		try {  			//set the step name  			stepName = stepTiming.stepNode.Attributes ["name"].Value;  			nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  		}  		catch {  			nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  		}  	}  	else if (ConfigUtils.OutputTimeoutHandler == 2) {  		try {  			//set the step name  			stepName = stepTiming.stepNode.Attributes ["name"].Value;  			nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  		}  		catch {  			nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  		}  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (ConfigUtils.OutputTimeoutHandler == 1) {  	try {  		//set the step name  		stepName = stepTiming.stepNode.Attributes ["name"].Value;  		nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=0ms");  	}  	catch {  		nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=0ms");  	}  }  else if (ConfigUtils.OutputTimeoutHandler == 2) {  	try {  		//set the step name  		stepName = stepTiming.stepNode.Attributes ["name"].Value;  		nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  	}  	catch {  		nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (ConfigUtils.OutputTimeoutHandler == 2) {  	try {  		//set the step name  		stepName = stepTiming.stepNode.Attributes ["name"].Value;  		nagiosPerformance = nagiosPerformance.Replace (stepName + "=" + duration.ToString () + "ms"' stepName + "=ms");  	}  	catch {  		nagiosPerformance = nagiosPerformance.Replace ("Step " + stepTiming.stepNumber.ToString () + "=" + duration.ToString () + "ms"' "Step " + stepTiming.stepNumber.ToString () + "=ms");  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: standardOutputExitCode = 3;  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: foreach (XmlNode notExecutedStep in ConfigUtils.AlexaSteps) {  	UnknownStepStruct unknownStepStruct = new UnknownStepStruct ();  	if (cnt < executedStepCounter) {  		cnt++;  		continue;  	}  	else {  		bool enableOutput = false;  		try {  			//check if we have to write the output of current step into the output file  			if (notExecutedStep.SelectSingleNode ("performance").Attributes ["output"].Value.ToLower () == "yes")  				enableOutput = true;  		}  		catch {  		}  		if (enableOutput) {  			//standardOutputExitCode = 3;  			if (globalTimeoutOccurred == true)  				standardOutputExitCode = globalTimeoutExitCode;  			//declare the step node (and its child node) that will be written to the output file  			XmlElement step = outputFile.CreateElement ("step");  			XmlElement performance = outputFile.CreateElement ("performance");  			XmlElement exitcode = outputFile.CreateElement ("exitcode");  			performance.SetAttribute ("start"' "n.a.");  			performance.SetAttribute ("end"' "n.a.");  			performance.SetAttribute ("duration"' "n.a.");  			//set the exit code of the step  			exitcode.InnerText = "3";  			//set the step number  			step.SetAttribute ("number"' (cnt + 1).ToString ());  			try {  				//set the step name  				string stepName = notExecutedStep.Attributes ["name"].Value;  				step.SetAttribute ("name"' stepName);  				unknownStepStruct.stepName = stepName + " (Step " + (cnt + 1).ToString () + ")";  				//add the duration of current step to the nagios performance string  				if (ConfigUtils.OutputTimeoutHandler == 2) {  					nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  				}  				else {  					nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  				}  			}  			catch {  				//add the duration of current step to the nagios performance string  				if (ConfigUtils.OutputTimeoutHandler == 2) {  					nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  				}  				else {  					nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  				}  				unknownStepStruct.stepName = "Step " + (cnt + 1).ToString ();  			}  			try {  				//set warning value into the output file for the current step  				long warningLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["warning"].Value);  				performance.SetAttribute ("warning"' warningLevel.ToString ());  				//add warning threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  			}  			catch {  				//if no warning threshold is set then add only a semicolon to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";";  			}  			try {  				//set global critical value into the output file fo the current step  				long errorLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["critical"].Value);  				performance.SetAttribute ("critical"' errorLevel.ToString ());  				//add critical threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  			}  			catch {  				//if no warning threshold is set then add only a semicolon to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";";  			}  			try {  				//set the timeout value into the output file for the current step  				long timeout = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  				performance.SetAttribute ("timeout"' timeout.ToString ());  			}  			catch {  			}  			//we don't have a min or max value for the performance data.  			//So we I to add two semicolon to avoid any kind of error on the graph  			nagiosPerformance = nagiosPerformance + ";;";  			//add current unknownStepStruct element to the unknownStepList  			unknownStepList.Add (unknownStepStruct);  			//put together step node and step child nodes  			step.AppendChild (performance);  			step.AppendChild (exitcode);  			steps.AppendChild (step);  			cnt++;  		}  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: foreach (XmlNode notExecutedStep in ConfigUtils.AlexaSteps) {  	UnknownStepStruct unknownStepStruct = new UnknownStepStruct ();  	if (cnt < executedStepCounter) {  		cnt++;  		continue;  	}  	else {  		bool enableOutput = false;  		try {  			//check if we have to write the output of current step into the output file  			if (notExecutedStep.SelectSingleNode ("performance").Attributes ["output"].Value.ToLower () == "yes")  				enableOutput = true;  		}  		catch {  		}  		if (enableOutput) {  			//standardOutputExitCode = 3;  			if (globalTimeoutOccurred == true)  				standardOutputExitCode = globalTimeoutExitCode;  			//declare the step node (and its child node) that will be written to the output file  			XmlElement step = outputFile.CreateElement ("step");  			XmlElement performance = outputFile.CreateElement ("performance");  			XmlElement exitcode = outputFile.CreateElement ("exitcode");  			performance.SetAttribute ("start"' "n.a.");  			performance.SetAttribute ("end"' "n.a.");  			performance.SetAttribute ("duration"' "n.a.");  			//set the exit code of the step  			exitcode.InnerText = "3";  			//set the step number  			step.SetAttribute ("number"' (cnt + 1).ToString ());  			try {  				//set the step name  				string stepName = notExecutedStep.Attributes ["name"].Value;  				step.SetAttribute ("name"' stepName);  				unknownStepStruct.stepName = stepName + " (Step " + (cnt + 1).ToString () + ")";  				//add the duration of current step to the nagios performance string  				if (ConfigUtils.OutputTimeoutHandler == 2) {  					nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  				}  				else {  					nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  				}  			}  			catch {  				//add the duration of current step to the nagios performance string  				if (ConfigUtils.OutputTimeoutHandler == 2) {  					nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  				}  				else {  					nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  				}  				unknownStepStruct.stepName = "Step " + (cnt + 1).ToString ();  			}  			try {  				//set warning value into the output file for the current step  				long warningLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["warning"].Value);  				performance.SetAttribute ("warning"' warningLevel.ToString ());  				//add warning threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  			}  			catch {  				//if no warning threshold is set then add only a semicolon to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";";  			}  			try {  				//set global critical value into the output file fo the current step  				long errorLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["critical"].Value);  				performance.SetAttribute ("critical"' errorLevel.ToString ());  				//add critical threshold to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  			}  			catch {  				//if no warning threshold is set then add only a semicolon to the nagios performance string  				nagiosPerformance = nagiosPerformance + ";";  			}  			try {  				//set the timeout value into the output file for the current step  				long timeout = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  				performance.SetAttribute ("timeout"' timeout.ToString ());  			}  			catch {  			}  			//we don't have a min or max value for the performance data.  			//So we I to add two semicolon to avoid any kind of error on the graph  			nagiosPerformance = nagiosPerformance + ";;";  			//add current unknownStepStruct element to the unknownStepList  			unknownStepList.Add (unknownStepStruct);  			//put together step node and step child nodes  			step.AppendChild (performance);  			step.AppendChild (exitcode);  			steps.AppendChild (step);  			cnt++;  		}  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (cnt < executedStepCounter) {  	cnt++;  	continue;  }  else {  	bool enableOutput = false;  	try {  		//check if we have to write the output of current step into the output file  		if (notExecutedStep.SelectSingleNode ("performance").Attributes ["output"].Value.ToLower () == "yes")  			enableOutput = true;  	}  	catch {  	}  	if (enableOutput) {  		//standardOutputExitCode = 3;  		if (globalTimeoutOccurred == true)  			standardOutputExitCode = globalTimeoutExitCode;  		//declare the step node (and its child node) that will be written to the output file  		XmlElement step = outputFile.CreateElement ("step");  		XmlElement performance = outputFile.CreateElement ("performance");  		XmlElement exitcode = outputFile.CreateElement ("exitcode");  		performance.SetAttribute ("start"' "n.a.");  		performance.SetAttribute ("end"' "n.a.");  		performance.SetAttribute ("duration"' "n.a.");  		//set the exit code of the step  		exitcode.InnerText = "3";  		//set the step number  		step.SetAttribute ("number"' (cnt + 1).ToString ());  		try {  			//set the step name  			string stepName = notExecutedStep.Attributes ["name"].Value;  			step.SetAttribute ("name"' stepName);  			unknownStepStruct.stepName = stepName + " (Step " + (cnt + 1).ToString () + ")";  			//add the duration of current step to the nagios performance string  			if (ConfigUtils.OutputTimeoutHandler == 2) {  				nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  			}  			else {  				nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  			}  		}  		catch {  			//add the duration of current step to the nagios performance string  			if (ConfigUtils.OutputTimeoutHandler == 2) {  				nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  			}  			else {  				nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  			}  			unknownStepStruct.stepName = "Step " + (cnt + 1).ToString ();  		}  		try {  			//set warning value into the output file for the current step  			long warningLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["warning"].Value);  			performance.SetAttribute ("warning"' warningLevel.ToString ());  			//add warning threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set global critical value into the output file fo the current step  			long errorLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["critical"].Value);  			performance.SetAttribute ("critical"' errorLevel.ToString ());  			//add critical threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set the timeout value into the output file for the current step  			long timeout = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  			performance.SetAttribute ("timeout"' timeout.ToString ());  		}  		catch {  		}  		//we don't have a min or max value for the performance data.  		//So we I to add two semicolon to avoid any kind of error on the graph  		nagiosPerformance = nagiosPerformance + ";;";  		//add current unknownStepStruct element to the unknownStepList  		unknownStepList.Add (unknownStepStruct);  		//put together step node and step child nodes  		step.AppendChild (performance);  		step.AppendChild (exitcode);  		steps.AppendChild (step);  		cnt++;  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (cnt < executedStepCounter) {  	cnt++;  	continue;  }  else {  	bool enableOutput = false;  	try {  		//check if we have to write the output of current step into the output file  		if (notExecutedStep.SelectSingleNode ("performance").Attributes ["output"].Value.ToLower () == "yes")  			enableOutput = true;  	}  	catch {  	}  	if (enableOutput) {  		//standardOutputExitCode = 3;  		if (globalTimeoutOccurred == true)  			standardOutputExitCode = globalTimeoutExitCode;  		//declare the step node (and its child node) that will be written to the output file  		XmlElement step = outputFile.CreateElement ("step");  		XmlElement performance = outputFile.CreateElement ("performance");  		XmlElement exitcode = outputFile.CreateElement ("exitcode");  		performance.SetAttribute ("start"' "n.a.");  		performance.SetAttribute ("end"' "n.a.");  		performance.SetAttribute ("duration"' "n.a.");  		//set the exit code of the step  		exitcode.InnerText = "3";  		//set the step number  		step.SetAttribute ("number"' (cnt + 1).ToString ());  		try {  			//set the step name  			string stepName = notExecutedStep.Attributes ["name"].Value;  			step.SetAttribute ("name"' stepName);  			unknownStepStruct.stepName = stepName + " (Step " + (cnt + 1).ToString () + ")";  			//add the duration of current step to the nagios performance string  			if (ConfigUtils.OutputTimeoutHandler == 2) {  				nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  			}  			else {  				nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  			}  		}  		catch {  			//add the duration of current step to the nagios performance string  			if (ConfigUtils.OutputTimeoutHandler == 2) {  				nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  			}  			else {  				nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  			}  			unknownStepStruct.stepName = "Step " + (cnt + 1).ToString ();  		}  		try {  			//set warning value into the output file for the current step  			long warningLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["warning"].Value);  			performance.SetAttribute ("warning"' warningLevel.ToString ());  			//add warning threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set global critical value into the output file fo the current step  			long errorLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["critical"].Value);  			performance.SetAttribute ("critical"' errorLevel.ToString ());  			//add critical threshold to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  		}  		catch {  			//if no warning threshold is set then add only a semicolon to the nagios performance string  			nagiosPerformance = nagiosPerformance + ";";  		}  		try {  			//set the timeout value into the output file for the current step  			long timeout = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  			performance.SetAttribute ("timeout"' timeout.ToString ());  		}  		catch {  		}  		//we don't have a min or max value for the performance data.  		//So we I to add two semicolon to avoid any kind of error on the graph  		nagiosPerformance = nagiosPerformance + ";;";  		//add current unknownStepStruct element to the unknownStepList  		unknownStepList.Add (unknownStepStruct);  		//put together step node and step child nodes  		step.AppendChild (performance);  		step.AppendChild (exitcode);  		steps.AppendChild (step);  		cnt++;  	}  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (enableOutput) {  	//standardOutputExitCode = 3;  	if (globalTimeoutOccurred == true)  		standardOutputExitCode = globalTimeoutExitCode;  	//declare the step node (and its child node) that will be written to the output file  	XmlElement step = outputFile.CreateElement ("step");  	XmlElement performance = outputFile.CreateElement ("performance");  	XmlElement exitcode = outputFile.CreateElement ("exitcode");  	performance.SetAttribute ("start"' "n.a.");  	performance.SetAttribute ("end"' "n.a.");  	performance.SetAttribute ("duration"' "n.a.");  	//set the exit code of the step  	exitcode.InnerText = "3";  	//set the step number  	step.SetAttribute ("number"' (cnt + 1).ToString ());  	try {  		//set the step name  		string stepName = notExecutedStep.Attributes ["name"].Value;  		step.SetAttribute ("name"' stepName);  		unknownStepStruct.stepName = stepName + " (Step " + (cnt + 1).ToString () + ")";  		//add the duration of current step to the nagios performance string  		if (ConfigUtils.OutputTimeoutHandler == 2) {  			nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  		}  		else {  			nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  		}  	}  	catch {  		//add the duration of current step to the nagios performance string  		if (ConfigUtils.OutputTimeoutHandler == 2) {  			nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  		}  		else {  			nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  		}  		unknownStepStruct.stepName = "Step " + (cnt + 1).ToString ();  	}  	try {  		//set warning value into the output file for the current step  		long warningLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["warning"].Value);  		performance.SetAttribute ("warning"' warningLevel.ToString ());  		//add warning threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global critical value into the output file fo the current step  		long errorLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["critical"].Value);  		performance.SetAttribute ("critical"' errorLevel.ToString ());  		//add critical threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set the timeout value into the output file for the current step  		long timeout = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  		performance.SetAttribute ("timeout"' timeout.ToString ());  	}  	catch {  	}  	//we don't have a min or max value for the performance data.  	//So we I to add two semicolon to avoid any kind of error on the graph  	nagiosPerformance = nagiosPerformance + ";;";  	//add current unknownStepStruct element to the unknownStepList  	unknownStepList.Add (unknownStepStruct);  	//put together step node and step child nodes  	step.AppendChild (performance);  	step.AppendChild (exitcode);  	steps.AppendChild (step);  	cnt++;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (enableOutput) {  	//standardOutputExitCode = 3;  	if (globalTimeoutOccurred == true)  		standardOutputExitCode = globalTimeoutExitCode;  	//declare the step node (and its child node) that will be written to the output file  	XmlElement step = outputFile.CreateElement ("step");  	XmlElement performance = outputFile.CreateElement ("performance");  	XmlElement exitcode = outputFile.CreateElement ("exitcode");  	performance.SetAttribute ("start"' "n.a.");  	performance.SetAttribute ("end"' "n.a.");  	performance.SetAttribute ("duration"' "n.a.");  	//set the exit code of the step  	exitcode.InnerText = "3";  	//set the step number  	step.SetAttribute ("number"' (cnt + 1).ToString ());  	try {  		//set the step name  		string stepName = notExecutedStep.Attributes ["name"].Value;  		step.SetAttribute ("name"' stepName);  		unknownStepStruct.stepName = stepName + " (Step " + (cnt + 1).ToString () + ")";  		//add the duration of current step to the nagios performance string  		if (ConfigUtils.OutputTimeoutHandler == 2) {  			nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  		}  		else {  			nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  		}  	}  	catch {  		//add the duration of current step to the nagios performance string  		if (ConfigUtils.OutputTimeoutHandler == 2) {  			nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  		}  		else {  			nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  		}  		unknownStepStruct.stepName = "Step " + (cnt + 1).ToString ();  	}  	try {  		//set warning value into the output file for the current step  		long warningLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["warning"].Value);  		performance.SetAttribute ("warning"' warningLevel.ToString ());  		//add warning threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + warningLevel.ToString ();  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set global critical value into the output file fo the current step  		long errorLevel = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["critical"].Value);  		performance.SetAttribute ("critical"' errorLevel.ToString ());  		//add critical threshold to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";" + errorLevel.ToString ();  	}  	catch {  		//if no warning threshold is set then add only a semicolon to the nagios performance string  		nagiosPerformance = nagiosPerformance + ";";  	}  	try {  		//set the timeout value into the output file for the current step  		long timeout = long.Parse (notExecutedStep.SelectSingleNode ("performance").Attributes ["timeout.value"].Value);  		performance.SetAttribute ("timeout"' timeout.ToString ());  	}  	catch {  	}  	//we don't have a min or max value for the performance data.  	//So we I to add two semicolon to avoid any kind of error on the graph  	nagiosPerformance = nagiosPerformance + ";;";  	//add current unknownStepStruct element to the unknownStepList  	unknownStepList.Add (unknownStepStruct);  	//put together step node and step child nodes  	step.AppendChild (performance);  	step.AppendChild (exitcode);  	steps.AppendChild (step);  	cnt++;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: try {  	//set the step name  	string stepName = notExecutedStep.Attributes ["name"].Value;  	step.SetAttribute ("name"' stepName);  	unknownStepStruct.stepName = stepName + " (Step " + (cnt + 1).ToString () + ")";  	//add the duration of current step to the nagios performance string  	if (ConfigUtils.OutputTimeoutHandler == 2) {  		nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  	}  	else {  		nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  	}  }  catch {  	//add the duration of current step to the nagios performance string  	if (ConfigUtils.OutputTimeoutHandler == 2) {  		nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  	}  	else {  		nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  	}  	unknownStepStruct.stepName = "Step " + (cnt + 1).ToString ();  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: try {  	//set the step name  	string stepName = notExecutedStep.Attributes ["name"].Value;  	step.SetAttribute ("name"' stepName);  	unknownStepStruct.stepName = stepName + " (Step " + (cnt + 1).ToString () + ")";  	//add the duration of current step to the nagios performance string  	if (ConfigUtils.OutputTimeoutHandler == 2) {  		nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  	}  	else {  		nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  	}  }  catch {  	//add the duration of current step to the nagios performance string  	if (ConfigUtils.OutputTimeoutHandler == 2) {  		nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  	}  	else {  		nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  	}  	unknownStepStruct.stepName = "Step " + (cnt + 1).ToString ();  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (ConfigUtils.OutputTimeoutHandler == 2) {  	nagiosPerformance = nagiosPerformance + " " + stepName + "=ms";  }  else {  	nagiosPerformance = nagiosPerformance + " " + stepName + "=0ms";  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (ConfigUtils.OutputTimeoutHandler == 2) {  	nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=ms";  }  else {  	nagiosPerformance = nagiosPerformance + " Step " + (cnt + 1).ToString () + "=0ms";  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (exception == true) {  	outString = "An internal exception has occurred. Some steps may not have been executed. Please read the Al'exa.log file' ";  	standardOutputExitCode = 3;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: standardOutputExitCode = 3;  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode != 0)  	outString = outString.Remove (outString.Length - 2);  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: outString = outString.Remove (outString.Length - 2);  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode == 0) {  	outString = "OK: " + outString;  }  else if (standardOutputExitCode == 1) {  	if (serviceName != "")  		outString = "WARNING: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "WARNING: " + outString;  }  else if (standardOutputExitCode == 2) {  	if (serviceName != "")  		outString = "CRITICAL: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "CRITICAL: " + outString;  }  else if (standardOutputExitCode == 3) {  	if (serviceName != "")  		outString = "UNKNOWN: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "UNKNOWN: " + outString;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode == 0) {  	outString = "OK: " + outString;  }  else if (standardOutputExitCode == 1) {  	if (serviceName != "")  		outString = "WARNING: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "WARNING: " + outString;  }  else if (standardOutputExitCode == 2) {  	if (serviceName != "")  		outString = "CRITICAL: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "CRITICAL: " + outString;  }  else if (standardOutputExitCode == 3) {  	if (serviceName != "")  		outString = "UNKNOWN: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "UNKNOWN: " + outString;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode == 1) {  	if (serviceName != "")  		outString = "WARNING: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "WARNING: " + outString;  }  else if (standardOutputExitCode == 2) {  	if (serviceName != "")  		outString = "CRITICAL: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "CRITICAL: " + outString;  }  else if (standardOutputExitCode == 3) {  	if (serviceName != "")  		outString = "UNKNOWN: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "UNKNOWN: " + outString;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode == 1) {  	if (serviceName != "")  		outString = "WARNING: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "WARNING: " + outString;  }  else if (standardOutputExitCode == 2) {  	if (serviceName != "")  		outString = "CRITICAL: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "CRITICAL: " + outString;  }  else if (standardOutputExitCode == 3) {  	if (serviceName != "")  		outString = "UNKNOWN: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "UNKNOWN: " + outString;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode == 2) {  	if (serviceName != "")  		outString = "CRITICAL: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "CRITICAL: " + outString;  }  else if (standardOutputExitCode == 3) {  	if (serviceName != "")  		outString = "UNKNOWN: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "UNKNOWN: " + outString;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode == 2) {  	if (serviceName != "")  		outString = "CRITICAL: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "CRITICAL: " + outString;  }  else if (standardOutputExitCode == 3) {  	if (serviceName != "")  		outString = "UNKNOWN: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "UNKNOWN: " + outString;  }  
Magic Number,Alexa.Utilities,OutputUtils,C:\repos\AlexaProjects_Alexa\Utilities\OutputUtils.cs,Finish,The following statement contains a magic number: if (standardOutputExitCode == 3) {  	if (serviceName != "")  		outString = "UNKNOWN: '" + serviceName + "' service has some problems: " + outString;  	else  		outString = "UNKNOWN: " + outString;  }  
Duplicate Code,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractInputBox,The method contains a code clone-set at the following line numbers (starting from the method definition): ((81' 103)' (133' 155)' (184' 206)' (228' 250))
Duplicate Code,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractDropDownList,The method contains a code clone-set at the following line numbers (starting from the method definition): ((81' 103)' (133' 155)' (184' 206)' (228' 250))
Duplicate Code,Alexa.Utilities,CoreUtils,C:\repos\AlexaProjects_Alexa\Utilities\CoreUtils.cs,StepInteractGenericBox,The method contains a code clone-set at the following line numbers (starting from the method definition): ((88' 120)' (125' 157))
