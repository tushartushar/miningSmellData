Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gendarme.Rules.Security.Cas,AddMissingTypeInheritanceDemandRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\AddMissingTypeInheritanceDemandRule.cs,CheckType,Cyclomatic complexity of the method is 9
Missing Default,Gendarme.Rules.Security.Cas,AddMissingTypeInheritanceDemandRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\AddMissingTypeInheritanceDemandRule.cs,CheckType,The following switch statement is missing a default case: switch (declsec.Action) {  				case Mono.Cecil.SecurityAction.LinkDemand:  				case Mono.Cecil.SecurityAction.NonCasLinkDemand:  					link = declsec.ToPermissionSet ();  					break;  				case Mono.Cecil.SecurityAction.InheritDemand:  				case Mono.Cecil.SecurityAction.NonCasInheritance:  					inherit = declsec.ToPermissionSet ();  					break;  				}
Missing Default,Gendarme.Rules.Security.Cas,DoNotExposeFieldsInSecuredTypeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\DoNotExposeFieldsInSecuredTypeRule.cs,CheckType,The following switch statement is missing a default case: switch (declsec.Action) {  				case Mono.Cecil.SecurityAction.Demand:  				case Mono.Cecil.SecurityAction.LinkDemand:  					demand = true;  					break;  				}
Missing Default,Gendarme.Rules.Security.Cas,DoNotExposeMethodsProtectedByLinkDemandRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\DoNotExposeMethodsProtectedByLinkDemandRule.cs,GetLinkDemand,The following switch statement is missing a default case: switch (declsec.Action) {  				case Mono.Cecil.SecurityAction.LinkDemand:  				case Mono.Cecil.SecurityAction.NonCasLinkDemand:  					return declsec.ToPermissionSet ();  				}
Missing Default,Gendarme.Rules.Security.Cas,DoNotExposeMethodsProtectedByLinkDemandRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\DoNotExposeMethodsProtectedByLinkDemandRule.cs,CheckMethod,The following switch statement is missing a default case: switch (ins.OpCode.Code) {  				case Code.Call:  				case Code.Callvirt:  					MethodDefinition callee = (ins.Operand as MethodDefinition);  					if (callee == null)  						continue;    					// 4 - and if it has security' ensure we don't reduce it's strength  					if (callee.HasSecurityDeclarations && !Check (method' callee)) {  						Runner.Report (method' ins' Severity.High' Confidence.High);  					}  					break;  				}
Missing Default,Gendarme.Rules.Security.Cas,DoNotReduceTypeSecurityOnMethodsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\DoNotReduceTypeSecurityOnMethodsRule.cs,RuleDoesAppliesToType,The following switch statement is missing a default case: switch (declsec.Action) {  				case Mono.Cecil.SecurityAction.Assert:  					assert = declsec.ToPermissionSet ();  					apply = true;  					break;  				case Mono.Cecil.SecurityAction.Deny:  					deny = declsec.ToPermissionSet ();  					apply = true;  					break;  				case Mono.Cecil.SecurityAction.PermitOnly:  					permitonly = declsec.ToPermissionSet ();  					apply = true;  					break;  				case Mono.Cecil.SecurityAction.Demand:  					demand = declsec.ToPermissionSet ();  					apply = true;  					break;  				}
Missing Default,Gendarme.Rules.Security.Cas,DoNotReduceTypeSecurityOnMethodsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\DoNotReduceTypeSecurityOnMethodsRule.cs,CheckType,The following switch statement is missing a default case: switch (declsec.Action) {  					case Mono.Cecil.SecurityAction.Assert:  						if (assert == null)  							continue;  						if (!assert.IsSubsetOf (declsec.ToPermissionSet ()))  							Runner.Report (method' Severity.High' Confidence.Total' "Assert");  						break;  					case Mono.Cecil.SecurityAction.Deny:  						if (deny == null)  							continue;  						if (!deny.IsSubsetOf (declsec.ToPermissionSet ()))  							Runner.Report (method' Severity.High' Confidence.Total' "Deny");  						break;  					case Mono.Cecil.SecurityAction.PermitOnly:  						if (permitonly == null)  							continue;  						if (!permitonly.IsSubsetOf (declsec.ToPermissionSet ()))  							Runner.Report (method' Severity.High' Confidence.Total' "PermitOnly");  						break;  					case Mono.Cecil.SecurityAction.Demand:  					case Mono.Cecil.SecurityAction.NonCasDemand:  						if (demand == null)  							continue;  						if (!demand.IsSubsetOf (declsec.ToPermissionSet ()))  							Runner.Report (method' Severity.High' Confidence.Total' "Demand");  						break;  					}
Missing Default,Gendarme.Rules.Security.Cas,ReviewNonVirtualMethodWithInheritanceDemandRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\ReviewNonVirtualMethodWithInheritanceDemandRule.cs,CheckMethod,The following switch statement is missing a default case: switch (declsec.Action) {  				case SecurityAction.InheritDemand:  				case SecurityAction.NonCasInheritance:  					inherit = true;  					break;  				}
Missing Default,Gendarme.Rules.Security.Cas,SecureGetObjectDataOverridesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Security.Cas\SecureGetObjectDataOverridesRule.cs,CheckType,The following switch statement is missing a default case: switch (declsec.Action) {  				case Mono.Cecil.SecurityAction.Demand:  				case Mono.Cecil.SecurityAction.NonCasDemand:  				case Mono.Cecil.SecurityAction.LinkDemand:  				case Mono.Cecil.SecurityAction.NonCasLinkDemand:  					demand = true;  					if (!RuleSet.IsSubsetOf (declsec.ToPermissionSet ())) {  						string message = String.Format (CultureInfo.InvariantCulture'  							"{0} is not a subset of {1} permission set"'  							"SerializationFormatter"' declsec.Action);  						Runner.Report (method' Severity.High' Confidence.Total' message);  					}  					break;  				}
