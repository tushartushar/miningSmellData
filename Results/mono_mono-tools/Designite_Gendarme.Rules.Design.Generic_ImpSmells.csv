Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gendarme.Rules.Design.Generic,AvoidDeclaringCustomDelegatesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\AvoidDeclaringCustomDelegatesRule.cs,CheckType,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Design.Generic,AvoidMethodWithUnusedGenericTypeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\AvoidMethodWithUnusedGenericTypeRule.cs,CheckMethod,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Design.Generic,DoNotDeclareStaticMembersOnGenericTypesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\DoNotDeclareStaticMembersOnGenericTypesRule.cs,CheckType,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Design.Generic,DoNotExposeGenericListsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\DoNotExposeGenericListsRule.cs,CheckType,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Design.Generic,UseGenericEventHandlerRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\UseGenericEventHandlerRule.cs,CheckType,Cyclomatic complexity of the method is 8
Complex Conditional,Gendarme.Rules.Design.Generic,DoNotExposeGenericListsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\DoNotExposeGenericListsRule.cs,CheckType,The conditional expression  "!type.IsClass || type.IsEnum || type.IsInterface || type.IsDelegate ()"  is complex.
Magic Number,Gendarme.Rules.Design.Generic,AvoidDeclaringCustomDelegatesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\AvoidDeclaringCustomDelegatesRule.cs,CheckType,The following statement contains a magic number: if (invoke.HasParameters) {  				IList<ParameterDefinition> pdc = invoke.Parameters;  				n = pdc.Count;  				// too many parameters to directly use Action/Func  				// so we lower severity and suggest grouping them  				if (n > ((type.Module.Runtime >= TargetRuntime.Net_4_0) ? 16 : 4)) {  					severity = Severity.Low;  					n = 1;  					use_structure = true;  				}    				// special cases not directly usable with Action/Func  				foreach (ParameterDefinition pd in pdc) {  					if (pd.IsOut || pd.ParameterType.IsByReference || pd.IsParams ())  						return RuleResult.Success;  				}  			}
Magic Number,Gendarme.Rules.Design.Generic,AvoidDeclaringCustomDelegatesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\AvoidDeclaringCustomDelegatesRule.cs,CheckType,The following statement contains a magic number: if (invoke.HasParameters) {  				IList<ParameterDefinition> pdc = invoke.Parameters;  				n = pdc.Count;  				// too many parameters to directly use Action/Func  				// so we lower severity and suggest grouping them  				if (n > ((type.Module.Runtime >= TargetRuntime.Net_4_0) ? 16 : 4)) {  					severity = Severity.Low;  					n = 1;  					use_structure = true;  				}    				// special cases not directly usable with Action/Func  				foreach (ParameterDefinition pd in pdc) {  					if (pd.IsOut || pd.ParameterType.IsByReference || pd.IsParams ())  						return RuleResult.Success;  				}  			}
Magic Number,Gendarme.Rules.Design.Generic,AvoidExcessiveParametersOnGenericTypesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\AvoidExcessiveParametersOnGenericTypesRule.cs,CheckType,The following statement contains a magic number: if (type.GenericParameters.Count > 2)  				Runner.Report (type' Severity.Medium' Confidence.Total);
Magic Number,Gendarme.Rules.Design.Generic,UseGenericEventHandlerRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design.Generic\UseGenericEventHandlerRule.cs,CheckType,The following statement contains a magic number: if (pdc.Count != 2)  				return RuleResult.Success;
