Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gendarme.Rules.Smells,AvoidMessageChainsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidMessageChainsRule.cs,CheckMethod,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Smells,InstructionMatcher,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\InstructionMatcher.cs,AreEquivalent,Cyclomatic complexity of the method is 12
Long Statement,Gendarme.Rules.Smells,AvoidSpeculativeGeneralityRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidSpeculativeGeneralityRule.cs,CheckAbstractClassWithoutResponsability,The length of the statement  "					Runner.Report (type' Severity.Medium' Confidence.Normal' "This abstract class has only one class inheritting from.  Abstract classes without responsability are a sign for the Speculative Generality smell."); " is 207.
Long Statement,Gendarme.Rules.Smells,AvoidSpeculativeGeneralityRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidSpeculativeGeneralityRule.cs,CheckUnnecesaryDelegation,The length of the statement  "				Runner.Report (type' Severity.Medium' Confidence.Normal' "This class contains a lot of methods that only delegates the call to other.  This kind of Delegation could be a sign for Speculative Generality"); " is 204.
Complex Conditional,Gendarme.Rules.Smells,InstructionMatcher,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\InstructionMatcher.cs,AreEquivalent,The conditional expression  "source.OpCode.Code == Code.Ret && source.Previous != null &&  				(source.Previous.OpCode.StackBehaviourPush == StackBehaviour.Pushi ||  				source.Previous.OpCode.Code == Code.Ldnull ||  				source.Previous.OpCode.StackBehaviourPush == StackBehaviour.Push1)"  is complex.
Magic Number,Gendarme.Rules.Smells,AvoidCodeDuplicatedInSiblingClassesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidCodeDuplicatedInSiblingClassesRule.cs,CheckType,The following statement contains a magic number: if (siblingClasses.Count >= 2) {  				codeDuplicatedLocator.Clear ();    				foreach (TypeDefinition sibling in siblingClasses) {  					FindCodeDuplicated (sibling);  					codeDuplicatedLocator.CheckedTypes.AddIfNew (sibling.Name);  				}  			}
Magic Number,Gendarme.Rules.Smells,AvoidLargeClassesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidLargeClassesRule.cs,GetIndexOfFirstDash,The following statement contains a magic number: if (value.IndexOf ('_') == 1) {  				value = value.Substring (2' value.Length - 2);  				valueTruncated = true;  			}
Magic Number,Gendarme.Rules.Smells,AvoidLargeClassesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidLargeClassesRule.cs,GetIndexOfFirstDash,The following statement contains a magic number: if (value.IndexOf ('_') == 1) {  				value = value.Substring (2' value.Length - 2);  				valueTruncated = true;  			}
Magic Number,Gendarme.Rules.Smells,AvoidLargeClassesRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidLargeClassesRule.cs,GetIndexOfFirstDash,The following statement contains a magic number: foreach (char character in value) {  				if (character.Equals ('_'))  					return value.IndexOf (character) + (valueTruncated? 2 : 0);  			}
Magic Number,Gendarme.Rules.Smells,AvoidLongMethodsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidLongMethodsRule.cs,AvoidLongMethodsRule,The following statement contains a magic number: MaxInstructions = 165;
Magic Number,Gendarme.Rules.Smells,AvoidLongMethodsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidLongMethodsRule.cs,AvoidLongMethodsRule,The following statement contains a magic number: MaxSourceLineOfCode = 40;
Magic Number,Gendarme.Rules.Smells,AvoidSpeculativeGeneralityRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidSpeculativeGeneralityRule.cs,MostlyMethodsDelegatesCall,The following statement contains a magic number: return methodCount / 2 + 1 <= delegationCounter;
Missing Default,Gendarme.Rules.Smells,AvoidLongMethodsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidLongMethodsRule.cs,IsAutogeneratedByTools,The following switch statement is missing a default case: switch (name) {  			case "Build":  				if (nspace != "Gtk")  					return false;  				return (tname == "Bin" || tname == "Window" || tname == "Dialog");  			case "InitializeComponent":  				switch (nspace) {  				case "System.Windows.Forms":  					return tname == "Form";  				case "System.Workflow.Activities":  					return tname == "SequentialWorkflowActivity" || tname == "StateMachineWorkflowActivity";  				case "System.Windows.Controls":  					return tname == "UserControl";  				}  				break;  			}
Missing Default,Gendarme.Rules.Smells,AvoidLongMethodsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Smells\AvoidLongMethodsRule.cs,IsAutogeneratedByTools,The following switch statement is missing a default case: switch (nspace) {  				case "System.Windows.Forms":  					return tname == "Form";  				case "System.Workflow.Activities":  					return tname == "SequentialWorkflowActivity" || tname == "StateMachineWorkflowActivity";  				case "System.Windows.Controls":  					return tname == "UserControl";  				}
