Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gendarme.Rules.Exceptions,AvoidArgumentExceptionDefaultConstructorRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\AvoidArgumentExceptionDefaultConstructorRule.cs,CheckMethod,Cyclomatic complexity of the method is 9
Complex Method,Gendarme.Rules.Exceptions,DoNotDestroyStackTraceRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\DoNotDestroyStackTraceRule.cs,ProcessCatchBlock,Cyclomatic complexity of the method is 13
Complex Method,Gendarme.Rules.Exceptions,DoNotThrowInUnexpectedLocationRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\DoNotThrowInUnexpectedLocationRule.cs,PreflightSpecialNameMethod,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Exceptions,DoNotThrowInUnexpectedLocationRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\DoNotThrowInUnexpectedLocationRule.cs,PreflightVirtualMethod,Cyclomatic complexity of the method is 9
Complex Method,Gendarme.Rules.Exceptions,DoNotThrowInUnexpectedLocationRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\DoNotThrowInUnexpectedLocationRule.cs,ProcessMethod,Cyclomatic complexity of the method is 20
Complex Method,Gendarme.Rules.Exceptions,InstantiateArgumentExceptionCorrectlyRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\InstantiateArgumentExceptionCorrectlyRule.cs,CheckMethod,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Exceptions,MissingExceptionConstructorsRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\MissingExceptionConstructorsRule.cs,CheckType,Cyclomatic complexity of the method is 14
Complex Method,Gendarme.Rules.Exceptions,UseObjectDisposedExceptionRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\UseObjectDisposedExceptionRule.cs,CheckBody,Cyclomatic complexity of the method is 16
Complex Method,Gendarme.Rules.Exceptions,UseObjectDisposedExceptionRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\UseObjectDisposedExceptionRule.cs,AllowedToThrow,Cyclomatic complexity of the method is 10
Long Parameter List,Gendarme.Rules.Exceptions,DoNotDestroyStackTraceRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\DoNotDestroyStackTraceRule.cs,ProcessCatchBlock,The method has 5 parameters. Parameters: first' last' method' exStackPos' localVarPos
Long Statement,Gendarme.Rules.Exceptions,DoNotSwallowErrorsCatchingNonSpecificExceptionsRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\DontSwallowErrorsCatchingNonspecificExceptionsRule.cs,ThrowsGeneralException,The length of the statement  "			for (Instruction currentInstruction = exceptionHandler.HandlerStart; currentInstruction != exceptionHandler.HandlerEnd && currentInstruction != null; currentInstruction = currentInstruction.Next) { " is 197.
Magic Number,Gendarme.Rules.Exceptions,InstantiateArgumentExceptionCorrectlyRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\InstantiateArgumentExceptionCorrectlyRule.cs,MatchesAnyParameter,The following statement contains a magic number: String.Compare (method.Name' 4' operand' 0' operand.Length' StringComparison.Ordinal) == 0
Magic Number,Gendarme.Rules.Exceptions,InstantiateArgumentExceptionCorrectlyRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\InstantiateArgumentExceptionCorrectlyRule.cs,CheckArgumentException,The following statement contains a magic number: pdc.Count < 2
Magic Number,Gendarme.Rules.Exceptions,InstantiateArgumentExceptionCorrectlyRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\InstantiateArgumentExceptionCorrectlyRule.cs,CheckOtherExceptions,The following statement contains a magic number: (pdc.Count == 2) && !pdc [1].ParameterType.IsNamed ("System"' "String")
Magic Number,Gendarme.Rules.Exceptions,MissingExceptionConstructorsRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\MissingExceptionConstructorsRule.cs,CheckType,The following statement contains a magic number: switch (ctor.Parameters.Count) {  				case 1:  					string_ctor |= CheckForStringConstructor (ctor);  					break;  				case 2:  					if (ctor.IsPublic) {  						if (!inner_exception_ctor) {  							inner_exception_ctor = CheckForInnerExceptionConstructor (ctor);  							if (inner_exception_ctor)  								break;  						}    						string_ctor |= CheckForStringConstructor (ctor);  					} else {  						serialization_ctor |= CheckForSerializationConstructor (ctor);  					}  					break;  				default:  					inner_exception_ctor |= CheckForInnerExceptionConstructor (ctor);  					break;  				}
Missing Default,Gendarme.Rules.Exceptions,AvoidArgumentExceptionDefaultConstructorRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\AvoidArgumentExceptionDefaultConstructorRule.cs,CheckMethod,The following switch statement is missing a default case: switch (name) {  					case "ArgumentException":  					case "ArgumentNullException":  					case "ArgumentOutOfRangeException":  					case "DuplicateWaitObjectException":  						Runner.Report (method' ins' Severity.Medium' Confidence.Total' type.GetFullName ());  						continue;  					}
Missing Default,Gendarme.Rules.Exceptions,InstantiateArgumentExceptionCorrectlyRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\InstantiateArgumentExceptionCorrectlyRule.cs,CheckMethod,The following switch statement is missing a default case: switch (type.Name) {  				case "ArgumentException":  					CheckArgumentException (ctor' current' method);  					break;  				case "ArgumentNullException":  				case "ArgumentOutOfRangeException":  				case "DuplicateWaitObjectException":  					CheckOtherExceptions (ctor' current' method);  					break;  				}
Missing Default,Gendarme.Rules.Exceptions,UseObjectDisposedExceptionRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\UseObjectDisposedExceptionRule.cs,CheckBody,The following switch statement is missing a default case: switch (ins.OpCode.Code) {  				case Code.Call:  				case Code.Callvirt:  					MethodReference target = (MethodReference) ins.Operand;  					if (!call_using_this) {  						MethodDefinition callee = target.Resolve ();  						if (callee != null) {  							if (!callee.IsPublic && !callee.IsStatic) {  								if (callee.DeclaringType.IsNamed (nspace' name)) {  									Instruction instance = ins.TraceBack (method);  									if (instance != null && instance.OpCode.Code == Code.Ldarg_0) {  										Log.WriteLine (this' "found non-public this call at {0:X4}"' ins.Offset);  										call_using_this = true;  									}  								}  							}  						}  					}  					  					// Special case for helper methods like CheckIfClosedThrowDisposed or  					// CheckObjectDisposedException.  					if (!has_dispose_check) {  						string tname = target.Name;  						if (tname.Contains ("Check") && tname.Contains ("Dispose")) {  							Log.WriteLine (this' "found dispose check at {0:X4}"' ins.Offset);  							has_dispose_check = true;  						}  					}  					break;  				  				case Code.Ldfld:  				case Code.Stfld:  				case Code.Ldflda:  					if (!field_access_using_this) {  						FieldReference field = (FieldReference) ins.Operand;  						if (field.DeclaringType.IsNamed (nspace' name)) {  							Instruction instance = ins.TraceBack (method);  							if (instance != null && instance.OpCode.Code == Code.Ldarg_0) {  								Log.WriteLine (this' "found field access at {0:X4}"' ins.Offset);  								field_access_using_this = true;  							}  						}  					}  					break;  				  				case Code.Newobj:  					if (!creates_exception) {  						MethodReference ctor = (MethodReference) ins.Operand;  						if (ctor.DeclaringType.IsNamed ("System"' "ObjectDisposedException")) {  							Log.WriteLine (this' "creates exception at {0:X4}"' ins.Offset);  							creates_exception = true;  						}  					}  					break;  				}
Missing Default,Gendarme.Rules.Exceptions.Impl,ExecutionPathFactory,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Exceptions\Impl\ExecutionPathFactory.cs,CreatePathHelper,The following switch statement is missing a default case: switch (cur.OpCode.FlowControl) {  				case FlowControl.Branch:  				case FlowControl.Cond_Branch:  					if (cur.OpCode == OpCodes.Switch) {  						Instruction[] targetOffsets = (Instruction[])cur.Operand;  						foreach (Instruction target in targetOffsets) {  							if (!path.Contains (target)) {  								curBlock.Last = cur;  								path.Add (curBlock);  								CreatePathHelper (target'   										end'   										path.Clone ()'  										completedPaths);  							}  						}  						stop = true;  					} else if (cur.OpCode == OpCodes.Leave ||   							   cur.OpCode == OpCodes.Leave_S) {  						curBlock.Last = cur;  						path.Add (curBlock);  						completedPaths.Add (path);  						stop = true;  						break;  					} else {  						Instruction target = (Instruction)cur.Operand;  						if (!path.Contains (target)) {  							curBlock.Last = cur;  							path.Add (curBlock);  							CreatePathHelper (target'   									end'   									path.Clone ()'  									completedPaths);  						}   						if (!path.Contains (cur.Next)) {  							curBlock = new ExecutionBlock ();  							curBlock.First = cur.Next;  						} else {  							stop = true;  						}  					}  					break;  				case FlowControl.Throw:  				case FlowControl.Return:  					curBlock.Last = cur;  					path.Add (curBlock);  					completedPaths.Add (path);  					stop = true;  					break;  				}
