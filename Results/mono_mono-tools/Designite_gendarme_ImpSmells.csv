Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gendarme,Settings,C:\repos\mono_mono-tools\gendarme\console\Settings.cs,LoadRulesFromAssembly,Cyclomatic complexity of the method is 8
Complex Method,Gendarme,Settings,C:\repos\mono_mono-tools\gendarme\console\Settings.cs,SetCustomParameters,Cyclomatic complexity of the method is 8
Complex Method,Gendarme,ConsoleRunner,C:\repos\mono_mono-tools\gendarme\console\ConsoleRunner.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,Gendarme,IgnoreFileList,C:\repos\mono_mono-tools\gendarme\console\IgnoreFileList.cs,Resolve,Cyclomatic complexity of the method is 10
Complex Method,NDesk.Options,Option,C:\repos\mono_mono-tools\gendarme\console\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,Gendarme,Settings,C:\repos\mono_mono-tools\gendarme\console\Settings.cs,SetCustomParameters,The length of the statement  "					throw GetException ("The value '{2}' could not be converted into the property {1} type for rule {0}"' ruleName' propertyName' value); " is 133.
Long Statement,Gendarme,ConsoleRunner,C:\repos\mono_mono-tools\gendarme\console\ConsoleRunner.cs,Help,The length of the statement  "			Console.WriteLine ("  --v\t\t\tWhen present additional progress information is written to stdout (can be used multiple times)."); " is 129.
Complex Conditional,Gendarme,ConsoleRunner,C:\repos\mono_mono-tools\gendarme\console\ConsoleRunner.cs,Report,The conditional expression  "console || (log_file != null) || ((xml_file == null) && (html_file == null))"  is complex.
Complex Conditional,NDesk.Options,Option,C:\repos\mono_mono-tools\gendarme\console\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Magic Number,Gendarme,ConsoleRunner,C:\repos\mono_mono-tools\gendarme\console\ConsoleRunner.cs,Execute,The following statement contains a magic number: try {  				byte result = Parse (args);  				Header ();  				if (version)  					return 0;    				if ((result != 0) || help) {  					Help ();  					return help ? (byte) 0 : result;  				}    				// load configuration' including rules  				Settings config = new Settings (this' config_file' rule_set);  				// and continue if there's at least one rule to execute  				if (!config.Load () || (Rules.Count < 1)) {  					int validationErrorsCounter = 0;  					foreach (string error in config.ValidationErrors) {  						Console.WriteLine (error);  						validationErrorsCounter++;  					}  					if (validationErrorsCounter == 0)  						Console.WriteLine ("Configuration parameters does not match any known rule.");  					return 3;  				}    				foreach (string name in assembly_names) {  					result = AddFiles (name);  					if (result != 0)  						return result;  				}    				IgnoreList = new IgnoreFileList (this' ignore_file);    				// now that all rules and assemblies are know' time to initialize  				Initialize ();  				// before analyzing the assemblies with the rules  				Run ();  				// and winding down properly  				TearDown ();    				return Report ();    			} catch (IOException e) {  				if (0 == VerbosityLevel) {  					Console.Error.WriteLine ("ERROR: {0}"' e.Message);  					return 2;  				} else {  					WriteUnhandledExceptionMessage (e);  					return 4;  				}    			} catch (Exception e) {  				WriteUnhandledExceptionMessage (e);  				return 4;  			}
Magic Number,Gendarme,ConsoleRunner,C:\repos\mono_mono-tools\gendarme\console\ConsoleRunner.cs,Execute,The following statement contains a magic number: try {  				byte result = Parse (args);  				Header ();  				if (version)  					return 0;    				if ((result != 0) || help) {  					Help ();  					return help ? (byte) 0 : result;  				}    				// load configuration' including rules  				Settings config = new Settings (this' config_file' rule_set);  				// and continue if there's at least one rule to execute  				if (!config.Load () || (Rules.Count < 1)) {  					int validationErrorsCounter = 0;  					foreach (string error in config.ValidationErrors) {  						Console.WriteLine (error);  						validationErrorsCounter++;  					}  					if (validationErrorsCounter == 0)  						Console.WriteLine ("Configuration parameters does not match any known rule.");  					return 3;  				}    				foreach (string name in assembly_names) {  					result = AddFiles (name);  					if (result != 0)  						return result;  				}    				IgnoreList = new IgnoreFileList (this' ignore_file);    				// now that all rules and assemblies are know' time to initialize  				Initialize ();  				// before analyzing the assemblies with the rules  				Run ();  				// and winding down properly  				TearDown ();    				return Report ();    			} catch (IOException e) {  				if (0 == VerbosityLevel) {  					Console.Error.WriteLine ("ERROR: {0}"' e.Message);  					return 2;  				} else {  					WriteUnhandledExceptionMessage (e);  					return 4;  				}    			} catch (Exception e) {  				WriteUnhandledExceptionMessage (e);  				return 4;  			}
Magic Number,Gendarme,ConsoleRunner,C:\repos\mono_mono-tools\gendarme\console\ConsoleRunner.cs,Execute,The following statement contains a magic number: try {  				byte result = Parse (args);  				Header ();  				if (version)  					return 0;    				if ((result != 0) || help) {  					Help ();  					return help ? (byte) 0 : result;  				}    				// load configuration' including rules  				Settings config = new Settings (this' config_file' rule_set);  				// and continue if there's at least one rule to execute  				if (!config.Load () || (Rules.Count < 1)) {  					int validationErrorsCounter = 0;  					foreach (string error in config.ValidationErrors) {  						Console.WriteLine (error);  						validationErrorsCounter++;  					}  					if (validationErrorsCounter == 0)  						Console.WriteLine ("Configuration parameters does not match any known rule.");  					return 3;  				}    				foreach (string name in assembly_names) {  					result = AddFiles (name);  					if (result != 0)  						return result;  				}    				IgnoreList = new IgnoreFileList (this' ignore_file);    				// now that all rules and assemblies are know' time to initialize  				Initialize ();  				// before analyzing the assemblies with the rules  				Run ();  				// and winding down properly  				TearDown ();    				return Report ();    			} catch (IOException e) {  				if (0 == VerbosityLevel) {  					Console.Error.WriteLine ("ERROR: {0}"' e.Message);  					return 2;  				} else {  					WriteUnhandledExceptionMessage (e);  					return 4;  				}    			} catch (Exception e) {  				WriteUnhandledExceptionMessage (e);  				return 4;  			}
Magic Number,Gendarme,ConsoleRunner,C:\repos\mono_mono-tools\gendarme\console\ConsoleRunner.cs,Execute,The following statement contains a magic number: try {  				byte result = Parse (args);  				Header ();  				if (version)  					return 0;    				if ((result != 0) || help) {  					Help ();  					return help ? (byte) 0 : result;  				}    				// load configuration' including rules  				Settings config = new Settings (this' config_file' rule_set);  				// and continue if there's at least one rule to execute  				if (!config.Load () || (Rules.Count < 1)) {  					int validationErrorsCounter = 0;  					foreach (string error in config.ValidationErrors) {  						Console.WriteLine (error);  						validationErrorsCounter++;  					}  					if (validationErrorsCounter == 0)  						Console.WriteLine ("Configuration parameters does not match any known rule.");  					return 3;  				}    				foreach (string name in assembly_names) {  					result = AddFiles (name);  					if (result != 0)  						return result;  				}    				IgnoreList = new IgnoreFileList (this' ignore_file);    				// now that all rules and assemblies are know' time to initialize  				Initialize ();  				// before analyzing the assemblies with the rules  				Run ();  				// and winding down properly  				TearDown ();    				return Report ();    			} catch (IOException e) {  				if (0 == VerbosityLevel) {  					Console.Error.WriteLine ("ERROR: {0}"' e.Message);  					return 2;  				} else {  					WriteUnhandledExceptionMessage (e);  					return 4;  				}    			} catch (Exception e) {  				WriteUnhandledExceptionMessage (e);  				return 4;  			}
Magic Number,Gendarme,ConsoleRunner,C:\repos\mono_mono-tools\gendarme\console\ConsoleRunner.cs,TimeToString,The following statement contains a magic number: if (time >= TimeSpan.FromMilliseconds (100))  				return String.Format (CultureInfo.CurrentCulture' "{0:0.0} seconds"' time.TotalSeconds);  			else  				return "<0.1 seconds";
Magic Number,Gendarme,IgnoreFileList,C:\repos\mono_mono-tools\gendarme\console\IgnoreFileList.cs,Parse,The following statement contains a magic number: char [] buffer = new char [4096];
Magic Number,Gendarme,IgnoreFileList,C:\repos\mono_mono-tools\gendarme\console\IgnoreFileList.cs,GetString,The following statement contains a magic number: int start = 2;
Magic Number,Gendarme,TextResultWriter,C:\repos\mono_mono-tools\gendarme\console\TextResultWriter.cs,Write,The following statement contains a magic number: if (query.Any ()) {				  				string name = string.Empty;  				string delimiter = new string ('-'' 60);  				foreach (Defect defect in query) {  					string rname = defect.Rule.Name;  					if (rname != name) {  						writer.WriteLine (delimiter);  						name = rname;  					}  					  					WriteEntry (++num' defect);  				}  			}
Magic Number,Gendarme,TextResultWriter,C:\repos\mono_mono-tools\gendarme\console\TextResultWriter.cs,BeginColor,The following statement contains a magic number: switch (color_scheme) {  			case ColorScheme.Dark:  				Console.ForegroundColor = color;  				break;  			case ColorScheme.Light:  				Console.ForegroundColor = (ConsoleColor) color + 8;  				break;  			}
Magic Number,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;  				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				List<string> lines = GetLines (localizer (GetDescription (p.Description)));  				o.WriteLine (lines [0]);  				string prefix = new string (' '' OptionWidth+2);  				for (int i = 1; i < lines.Count; ++i) {  					o.Write (prefix);  					o.WriteLine (lines [i]);  				}  			}
Magic Number,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Missing Default,Gendarme,Settings,C:\repos\mono_mono-tools\gendarme\console\Settings.cs,SetCustomParameters,The following switch statement is missing a default case: switch (Type.GetTypeCode (property.PropertyType)) {  				case TypeCode.Int32:  					int i;  					if (Int32.TryParse (value' out i))  						values [0] = i;  					break;  				case TypeCode.Double:  					double d;  					if (Double.TryParse (value' out d))  						values [0] = d;  					break;  				case TypeCode.String:  					values [0] = value;  					break;  				}
Missing Default,Gendarme,TextResultWriter,C:\repos\mono_mono-tools\gendarme\console\TextResultWriter.cs,BeginColor,The following switch statement is missing a default case: switch (color_scheme) {  			case ColorScheme.Dark:  				Console.ForegroundColor = color;  				break;  			case ColorScheme.Light:  				Console.ForegroundColor = (ConsoleColor) color + 8;  				break;  			}
Missing Default,Gendarme,TextResultWriter,C:\repos\mono_mono-tools\gendarme\console\TextResultWriter.cs,EndColor,The following switch statement is missing a default case: switch (color_scheme) {  			case ColorScheme.Dark:  			case ColorScheme.Light:  				Console.ResetColor ();  				break;  			}
Missing Default,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
Missing Default,NDesk.Options,OptionSet,C:\repos\mono_mono-tools\gendarme\console\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description [i]) {  					case ' ':  					case '\t':  					case '\v':  					case '-':  					case ''':  					case '.':  					case ';':  						sep = i;  						break;  					case '\n':  						return i;  				}
