Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test14,Cyclomatic complexity of the method is 8
Complex Method,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test27,Cyclomatic complexity of the method is 8
Long Parameter List,Test.Rules.Maintainability,PreferStringIsNullOrEmptyTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\PreferStringIsNullOrEmptyTest.cs,MuchoArgumentNullAndLengthCheck,The method has 5 parameters. Parameters: a' b' c' d' s
Complex Conditional,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test27,The conditional expression  "val.GetType () == typeof (int)/*4*/  				|| val.GetType () == typeof (uint)/*5*/  				|| val.GetType () == typeof (float)/*6*/  				|| val.GetType () == typeof (double)/*7*/  				|| val.GetType () == typeof (byte)/*8*/  				|| val.GetType () == typeof (sbyte)/*9*/  				|| val.GetType () == typeof (short)/*10*/  				|| val.GetType () == typeof (ushort)/*11*/  				|| val.GetType () == typeof (long)/*12*/  				|| val.GetType () == typeof (ulong)/*13*/  				|| val.GetType () == typeof (void)/*14*/  				|| val.GetType () == typeof (IntPtr)/*15*/  				|| val.GetType () == typeof (UIntPtr)/*16*/  				|| val.GetType () == typeof (char)"  is complex.
Complex Conditional,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TooManyIf,The conditional expression  "(c == 'a') || (c == 'b') || (c == 'c') || (c == 'd') || (c == 'e') ||  				(c == 'f') || (c == 'g') || (c == 'h') || (c == 'i') ||	(c == 'j') ||  				(c == 'k') || (c == 'l') || (c == 'm') || (c == 'n') || (c == 'o') ||  				(c == 'p') || (c == 'q') || (c == 'r') || (c == 's') ||	(c == 't') ||  				(c == 'u') || (c == 'v') || (c == 'w') || (c == 'x') ||	(c == 'y') ||  				(c == 'z') || (c == 'A') || (c == 'B') || (c == 'C') ||	(c == 'D') ||  				(c == 'E') || (c == 'F') || (c == 'G') || (c == 'H') || (c == 'I') ||  				(c == 'J') || (c == 'K') || (c == 'L') || (c == 'M') || (c == 'N') ||  				(c == 'O') || (c == 'P') || (c == 'Q') || (c == 'R') ||	(c == 'S') ||  				(c == 'T') || (c == 'U') || (c == 'V') || (c == 'W') ||	(c == 'X') ||  				(c == 'Y') || (c == 'Z')"  is complex.
Complex Conditional,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Generated15,The conditional expression  "val.GetType () == typeof (int)/*4*/  				  || val.GetType () == typeof (uint)/*5*/  				  || val.GetType () == typeof (float)/*6*/  				  || val.GetType () == typeof (double)/*7*/  				  || val.GetType () == typeof (byte)/*8*/  				  || val.GetType () == typeof (long)/*9*/  				  || val.GetType () == typeof (ulong)/*10*/  				  || val.GetType () == typeof (char)"  is complex.
Empty Catch Block,Test.Rules.Maintainability,TestCase690057,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidUnnecessarySpecializationTest.cs,WyslijMaile,The method has an empty catch block.
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{3} {2} {1} {0}"' x' x+2' (x+2>y)' y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{3} {2} {1} {0}"' x' x+2' (x+2>y)' y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{0} {2} {1} {3}"' x' x+3' (x+3>y)' y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{0} {2} {1} {3}"' x' x+3' (x+3>y)' y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{0} {1} {3} {2}"' x' x+4' (x+4>y)' y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{0} {1} {3} {2}"' x' x+4' (x+4>y)' y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{3} {1} {2} {0}"' x' x+5' (x+5>y)' y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{3} {1} {2} {0}"' x' x+5' (x+5>y)' y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{3} {1} {2} {0}"' x*x' (x+5)*x' (((x+5)*x)>y)' y*y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestLong1,The following statement contains a magic number: Console.Write("{3} {1} {2} {0}"' x*x' (x+5)*x' (((x+5)*x)>y)' y*y);
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch5,The following statement contains a magic number: switch (x)  			{  				case 1:  				case 2:  				case 3:  					Console.Write("abc");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch5,The following statement contains a magic number: switch (x)  			{  				case 1:  				case 2:  				case 3:  					Console.Write("abc");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch5,The following statement contains a magic number: switch (x)  			{  				case 1:  				case 2:  				case 3:  					Console.Write("abc");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch5,The following statement contains a magic number: switch (x)  			{  				case 1:  				case 2:  				case 3:  					Console.Write("abc");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch6,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch6,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch6,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch6,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch7,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch7,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch7,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch7,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test6,The following statement contains a magic number: return (val == this) ? 1/*3*/ : 2/*4*/;
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test14,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:/*7*/  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test14,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:/*7*/  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test14,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:/*7*/  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test14,The following statement contains a magic number: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  				default:/*7*/  					Console.Write("default");  					break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test14,The following statement contains a magic number: y = (x == 32) ? x/*10*/ : y/*11*/;
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test14,The following statement contains a magic number: Math.Min(x' y) > 0/*8*/ && Math.Min(x'y) < 42
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Test27,The following statement contains a magic number: i > 0/*22*/ && i < 42
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,GetOperandType,The following statement contains a magic number: switch (self.OpCode.Code) {  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Starg:  			case Code.Starg_S:  				i = 1;  				Console.WriteLine ("arguments");  				break;  			case Code.Conv_R4:  			case Code.Ldc_R4:  			case Code.Ldelem_R4:  			case Code.Ldind_R4:  			case Code.Stelem_R4:  			case Code.Stind_R4:  				i = 2;  				Console.WriteLine ("singles");  				break;  			case Code.Conv_R8:  			case Code.Ldc_R8:  			case Code.Ldelem_R8:  			case Code.Ldind_R8:  			case Code.Stelem_R8:  				i = 3;  				Console.WriteLine ("doubles");  				break;  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloca:  			case Code.Ldloca_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  			case Code.Stloc:  			case Code.Stloc_S:  				i = 4;  				Console.WriteLine ("locals");  				break;  			case Code.Ldfld:  			case Code.Ldflda:  			case Code.Ldsfld:  			case Code.Ldsflda:  			case Code.Stfld:  			case Code.Stsfld:  				i = 5;  				Console.WriteLine ("fields");  				break;  			case Code.Call:  			case Code.Callvirt:  			case Code.Newobj:  				i = 6;  				Console.WriteLine ("calls");  				break;  			default:  				i = 7;  				Console.WriteLine ("default");  				break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,GetOperandType,The following statement contains a magic number: switch (self.OpCode.Code) {  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Starg:  			case Code.Starg_S:  				i = 1;  				Console.WriteLine ("arguments");  				break;  			case Code.Conv_R4:  			case Code.Ldc_R4:  			case Code.Ldelem_R4:  			case Code.Ldind_R4:  			case Code.Stelem_R4:  			case Code.Stind_R4:  				i = 2;  				Console.WriteLine ("singles");  				break;  			case Code.Conv_R8:  			case Code.Ldc_R8:  			case Code.Ldelem_R8:  			case Code.Ldind_R8:  			case Code.Stelem_R8:  				i = 3;  				Console.WriteLine ("doubles");  				break;  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloca:  			case Code.Ldloca_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  			case Code.Stloc:  			case Code.Stloc_S:  				i = 4;  				Console.WriteLine ("locals");  				break;  			case Code.Ldfld:  			case Code.Ldflda:  			case Code.Ldsfld:  			case Code.Ldsflda:  			case Code.Stfld:  			case Code.Stsfld:  				i = 5;  				Console.WriteLine ("fields");  				break;  			case Code.Call:  			case Code.Callvirt:  			case Code.Newobj:  				i = 6;  				Console.WriteLine ("calls");  				break;  			default:  				i = 7;  				Console.WriteLine ("default");  				break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,GetOperandType,The following statement contains a magic number: switch (self.OpCode.Code) {  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Starg:  			case Code.Starg_S:  				i = 1;  				Console.WriteLine ("arguments");  				break;  			case Code.Conv_R4:  			case Code.Ldc_R4:  			case Code.Ldelem_R4:  			case Code.Ldind_R4:  			case Code.Stelem_R4:  			case Code.Stind_R4:  				i = 2;  				Console.WriteLine ("singles");  				break;  			case Code.Conv_R8:  			case Code.Ldc_R8:  			case Code.Ldelem_R8:  			case Code.Ldind_R8:  			case Code.Stelem_R8:  				i = 3;  				Console.WriteLine ("doubles");  				break;  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloca:  			case Code.Ldloca_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  			case Code.Stloc:  			case Code.Stloc_S:  				i = 4;  				Console.WriteLine ("locals");  				break;  			case Code.Ldfld:  			case Code.Ldflda:  			case Code.Ldsfld:  			case Code.Ldsflda:  			case Code.Stfld:  			case Code.Stsfld:  				i = 5;  				Console.WriteLine ("fields");  				break;  			case Code.Call:  			case Code.Callvirt:  			case Code.Newobj:  				i = 6;  				Console.WriteLine ("calls");  				break;  			default:  				i = 7;  				Console.WriteLine ("default");  				break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,GetOperandType,The following statement contains a magic number: switch (self.OpCode.Code) {  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Starg:  			case Code.Starg_S:  				i = 1;  				Console.WriteLine ("arguments");  				break;  			case Code.Conv_R4:  			case Code.Ldc_R4:  			case Code.Ldelem_R4:  			case Code.Ldind_R4:  			case Code.Stelem_R4:  			case Code.Stind_R4:  				i = 2;  				Console.WriteLine ("singles");  				break;  			case Code.Conv_R8:  			case Code.Ldc_R8:  			case Code.Ldelem_R8:  			case Code.Ldind_R8:  			case Code.Stelem_R8:  				i = 3;  				Console.WriteLine ("doubles");  				break;  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloca:  			case Code.Ldloca_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  			case Code.Stloc:  			case Code.Stloc_S:  				i = 4;  				Console.WriteLine ("locals");  				break;  			case Code.Ldfld:  			case Code.Ldflda:  			case Code.Ldsfld:  			case Code.Ldsflda:  			case Code.Stfld:  			case Code.Stsfld:  				i = 5;  				Console.WriteLine ("fields");  				break;  			case Code.Call:  			case Code.Callvirt:  			case Code.Newobj:  				i = 6;  				Console.WriteLine ("calls");  				break;  			default:  				i = 7;  				Console.WriteLine ("default");  				break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,GetOperandType,The following statement contains a magic number: switch (self.OpCode.Code) {  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Starg:  			case Code.Starg_S:  				i = 1;  				Console.WriteLine ("arguments");  				break;  			case Code.Conv_R4:  			case Code.Ldc_R4:  			case Code.Ldelem_R4:  			case Code.Ldind_R4:  			case Code.Stelem_R4:  			case Code.Stind_R4:  				i = 2;  				Console.WriteLine ("singles");  				break;  			case Code.Conv_R8:  			case Code.Ldc_R8:  			case Code.Ldelem_R8:  			case Code.Ldind_R8:  			case Code.Stelem_R8:  				i = 3;  				Console.WriteLine ("doubles");  				break;  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloca:  			case Code.Ldloca_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  			case Code.Stloc:  			case Code.Stloc_S:  				i = 4;  				Console.WriteLine ("locals");  				break;  			case Code.Ldfld:  			case Code.Ldflda:  			case Code.Ldsfld:  			case Code.Ldsflda:  			case Code.Stfld:  			case Code.Stsfld:  				i = 5;  				Console.WriteLine ("fields");  				break;  			case Code.Call:  			case Code.Callvirt:  			case Code.Newobj:  				i = 6;  				Console.WriteLine ("calls");  				break;  			default:  				i = 7;  				Console.WriteLine ("default");  				break;  			}
Magic Number,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,GetOperandType,The following statement contains a magic number: switch (self.OpCode.Code) {  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Starg:  			case Code.Starg_S:  				i = 1;  				Console.WriteLine ("arguments");  				break;  			case Code.Conv_R4:  			case Code.Ldc_R4:  			case Code.Ldelem_R4:  			case Code.Ldind_R4:  			case Code.Stelem_R4:  			case Code.Stind_R4:  				i = 2;  				Console.WriteLine ("singles");  				break;  			case Code.Conv_R8:  			case Code.Ldc_R8:  			case Code.Ldelem_R8:  			case Code.Ldind_R8:  			case Code.Stelem_R8:  				i = 3;  				Console.WriteLine ("doubles");  				break;  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloca:  			case Code.Ldloca_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  			case Code.Stloc:  			case Code.Stloc_S:  				i = 4;  				Console.WriteLine ("locals");  				break;  			case Code.Ldfld:  			case Code.Ldflda:  			case Code.Ldsfld:  			case Code.Ldsflda:  			case Code.Stfld:  			case Code.Stsfld:  				i = 5;  				Console.WriteLine ("fields");  				break;  			case Code.Call:  			case Code.Callvirt:  			case Code.Newobj:  				i = 6;  				Console.WriteLine ("calls");  				break;  			default:  				i = 7;  				Console.WriteLine ("default");  				break;  			}
Magic Number,Test.Rules.Maintainability,AvoidComplexMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Custom,The following statement contains a magic number: Rule.SuccessThreshold = 10;
Magic Number,Test.Rules.Maintainability,AvoidComplexMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Custom,The following statement contains a magic number: Rule.LowThreshold = 15;
Magic Number,Test.Rules.Maintainability,AvoidComplexMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Custom,The following statement contains a magic number: Rule.MediumThreshold = 25;
Magic Number,Test.Rules.Maintainability,AvoidComplexMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,Custom,The following statement contains a magic number: Rule.HighThreshold = 50;
Magic Number,Test.Rules.Maintainability,PerfectCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoBarYX,The following statement contains a magic number: y = 2;
Magic Number,Test.Rules.Maintainability,GoodCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoFooX,The following statement contains a magic number: x = 2;
Magic Number,Test.Rules.Maintainability,GoodCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoFooY,The following statement contains a magic number: y = 4;
Magic Number,Test.Rules.Maintainability,AverageCohesionNotBadBecauseOfLowNumberOfMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomething,The following statement contains a magic number: x = 2;
Magic Number,Test.Rules.Maintainability,AverageCohesionNotBadBecauseOfLowNumberOfMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingElse,The following statement contains a magic number: y = 2;
Magic Number,Test.Rules.Maintainability,AverageCohesionLimitBecauseOfHighNumberOfMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomething,The following statement contains a magic number: x = 2;
Magic Number,Test.Rules.Maintainability,AverageCohesionLimitBecauseOfHighNumberOfMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingElse,The following statement contains a magic number: y = 2;
Magic Number,Test.Rules.Maintainability,AverageCohesionLimitBecauseOfHighNumberOfMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingCrazy,The following statement contains a magic number: y = 4;
Magic Number,Test.Rules.Maintainability,AverageCohesionLimitBecauseOfHighNumberOfMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingSmart,The following statement contains a magic number: x = 4;
Magic Number,Test.Rules.Maintainability,BadCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomething,The following statement contains a magic number: x = 2;
Magic Number,Test.Rules.Maintainability,BadCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingElse,The following statement contains a magic number: y = 2;
Magic Number,Test.Rules.Maintainability,BadCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingDifferent,The following statement contains a magic number: z = 2;
Magic Number,Test.Rules.Maintainability,VeryBadCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingX,The following statement contains a magic number: x = 2;
Magic Number,Test.Rules.Maintainability,VeryBadCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingY,The following statement contains a magic number: y = 2;
Magic Number,Test.Rules.Maintainability,VeryBadCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingZ,The following statement contains a magic number: z = 2;
Magic Number,Test.Rules.Maintainability,VeryBadCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingU,The following statement contains a magic number: u = 2;
Magic Number,Test.Rules.Maintainability,VeryBadCohesion,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingV,The following statement contains a magic number: v = 4;
Magic Number,Test.Rules.Maintainability,BadCohesionNotVeryBadBecauseOfInheritance,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingU,The following statement contains a magic number: u = 2;
Magic Number,Test.Rules.Maintainability,BadCohesionNotVeryBadBecauseOfInheritance,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingV,The following statement contains a magic number: v = 2;
Magic Number,Test.Rules.Maintainability,BadCohesionNotVeryBadBecauseOfInheritance,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidLackOfCohesionOfMethodsTest.cs,DoSomethingW,The following statement contains a magic number: w = 2;
Magic Number,Test.Rules.Maintainability,GeneralizedClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidUnnecessarySpecializationTest.cs,DerivedDerivedSpecificCouldNotBeGeneralized,The following statement contains a magic number: specific.Bar (999' "bar");
Magic Number,Test.Rules.Maintainability,SpecializedClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidUnnecessarySpecializationTest.cs,BarAndFooCouldBeGeneralized,The following statement contains a magic number: bar.Bar (42' "hash");
Magic Number,Test.Rules.Maintainability,SpecializedClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidUnnecessarySpecializationTest.cs,BarCouldBeGeneralizedButNotFoo,The following statement contains a magic number: bar.Bar (42' "hash");
Magic Number,Test.Rules.Maintainability,AvoidUnnecessarySpecializationTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidUnnecessarySpecializationTest.cs,BarAndFooCouldBeGeneralized,The following statement contains a magic number: AssertRuleFailure<SpecializedClass> ("BarAndFooCouldBeGeneralized"' 2);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff1,The following statement contains a magic number: DateTime baseTime = new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff1,The following statement contains a magic number: DateTime baseTime = new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff2,The following statement contains a magic number: DateTime baseTime = new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff2,The following statement contains a magic number: DateTime baseTime = new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff3,The following statement contains a magic number: TimeSpan diff = DateTime.Now - new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff3,The following statement contains a magic number: TimeSpan diff = DateTime.Now - new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff4,The following statement contains a magic number: return new DateTime(2008' 1' 1) - new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff4,The following statement contains a magic number: return new DateTime(2008' 1' 1) - new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,DateDiff4,The following statement contains a magic number: return new DateTime(2008' 1' 1) - new DateTime(2000' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,ManyLocals,The following statement contains a magic number: DateTime dummy1 = new DateTime(2001' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,ManyLocals,The following statement contains a magic number: DateTime dummy1 = new DateTime(2001' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,ManyLocals,The following statement contains a magic number: DateTime dummy2 = new DateTime(2002' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,ManyLocals,The following statement contains a magic number: DateTime dummy2 = new DateTime(2002' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,ManyLocals,The following statement contains a magic number: DateTime dummy3 = new DateTime(2003' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,ManyLocals,The following statement contains a magic number: DateTime dummy3 = new DateTime(2003' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,ManyLocals,The following statement contains a magic number: DateTime dummy4 = new DateTime(2004' 12' 1);
Magic Number,Test.Rules.Maintainability,TestClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,ManyLocals,The following statement contains a magic number: DateTime dummy4 = new DateTime(2004' 12' 1);
Magic Number,Test.Rules.Maintainability,ConsiderUsingStopwatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,Double,The following statement contains a magic number: AssertRuleFailure<TestClass> ("Double"' 2);
Magic Number,Test.Rules.Maintainability,ConsiderUsingStopwatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ConsiderUsingStopwatchTest.cs,Triple,The following statement contains a magic number: AssertRuleFailure<TestClass> ("Triple"' 3);
Magic Number,Test.Rules.Maintainability,PreferStringIsNullOrEmptyTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\PreferStringIsNullOrEmptyTest.cs,Locals,The following statement contains a magic number: AssertRuleFailure<PreferStringIsNullOrEmptyTest> ("MuchoLocalNullAndLengthCheck"' 5);
Magic Number,Test.Rules.Maintainability,ReviewMisleadingFieldNamesTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\ReviewMisleadingFieldNamesTest.cs,Bad,The following statement contains a magic number: AssertRuleFailure<Bad2> (2);
Magic Number,Test.Rules.Maintainability,VariableNamesShouldNotMatchFieldNamesTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\VariableNamesShouldNotMatchFieldNamesTest.cs,Ignores,The following statement contains a magic number: int expected = assembly.MainModule.HasSymbols ? 2 : 1;
Magic Number,Tests.Rules.Maintainability,RemoveDependenceOnObsoleteCodeTypeTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\RemoveDependenceOnObsoleteCodeTest.cs,ObsoleteMembers,The following statement contains a magic number: AssertRuleFailure<TypeWithEnumFields> (2);
Magic Number,Tests.Rules.Maintainability,RemoveDependenceOnObsoleteCodeTypeTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\RemoveDependenceOnObsoleteCodeTest.cs,ObsoleteMembers,The following statement contains a magic number: AssertRuleFailure<TypeWithObsoletePropertiesType> (6);
Magic Number,Tests.Rules.Maintainability,RemoveDependenceOnObsoleteCodeTypeTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\RemoveDependenceOnObsoleteCodeTest.cs,ObsoleteMembers,The following statement contains a magic number: AssertRuleFailure<StructWithObsoleteEventsType> (2);
Magic Number,Tests.Rules.Maintainability,RemoveDependenceOnObsoleteCodeMethodTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\RemoveDependenceOnObsoleteCodeTest.cs,ObsoleteMethods,The following statement contains a magic number: AssertRuleFailure<TypeWithObsoleteMethods> ("Main"' 2);
Magic Number,Tests.Rules.Maintainability,RemoveDependenceOnObsoleteCodeMethodTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\RemoveDependenceOnObsoleteCodeTest.cs,ObsoleteFields,The following statement contains a magic number: AssertRuleFailure<TypeWithObsoleteFields> ("Structure"' 3);
Missing Default,Test.Rules.Maintainability,MethodsWithExpectedCC,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Maintainability\Test\AvoidComplexMethodsTest.cs,TestSwitch6,The following switch statement is missing a default case: switch (x)  			{  				case 1:  					Console.Write("a");  					break;  				case 2:  					Console.Write("b");  					break;  				case 3:  					Console.Write("c");  					break;  				case 4:  					Console.Write("d");  					break;  				case 5:  					Console.Write("e");  					break;  			}
