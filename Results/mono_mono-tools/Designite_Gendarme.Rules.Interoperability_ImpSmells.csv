Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,CheckMethodUnsafe,Cyclomatic complexity of the method is 14
Complex Method,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyCallbackSafety,Cyclomatic complexity of the method is 13
Complex Method,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,GetDelegatePointers,Cyclomatic complexity of the method is 13
Complex Method,Gendarme.Rules.Interoperability,DoNotAssumeIntPtrSizeRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DoNotCastIntPtrToInt32Rule.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Interoperability,DoNotAssumeIntPtrSizeRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DoNotCastIntPtrToInt32Rule.cs,CheckMethod,Cyclomatic complexity of the method is 9
Complex Method,Gendarme.Rules.Interoperability,GetLastErrorMustBeCalledRightAfterPInvokeRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\GetLastErrorMustBeCalledRightAfterPInvokeRule.cs,CheckPInvoke,Cyclomatic complexity of the method is 16
Complex Method,Gendarme.Rules.Interoperability,GetLastErrorMustBeCalledRightAfterPInvokeRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\GetLastErrorMustBeCalledRightAfterPInvokeRule.cs,CheckMethod,Cyclomatic complexity of the method is 9
Long Parameter List,Gendarme.Rules.Interoperability,DoNotAssumeIntPtrSizeRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DoNotCastIntPtrToInt32Rule.cs,CheckCastOnIntPtr,The method has 5 parameters. Parameters: method' ins' mr' intptr' uintptr
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,CheckMethod,The length of the statement  "				// http://groups.google.com/group/gendarme/browse_frm/thread/c37d157ae0c9682/57f89f3abf14f2fd?tvc=1&q=Gendarme+2.6+Preview+1+is+ready+for+download#57f89f3abf14f2fd " is 163.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,CheckMethodUnsafe,The length of the statement  "				Log.WriteLine (this' " HandlerType: {6}' TryStart: {3:X}' TryEnd: {4:X}' HandlerStart: {0:X}' HandlerEnd: {1:X}' FilterStart: {2:X}' CatchType: {5}"'  " is 149.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,CheckMethodUnsafe,The length of the statement  "				Log.WriteLine (this' " {0:X} {5} prev stack: {1}' pop: {2}' push: {3}' post stack: {4}"' ins.Offset' stack_count' pop' push' stack_count + push - pop' ins.OpCode.Name); " is 168.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyStoreLocalInstruction,The length of the statement  "			Log.WriteLine (this' " Reached a local variable store at offset {2:X}. index {0}' there are {1} pointers here."' index' pointers == null ? 0 : pointers.Count' ins.Offset); " is 171.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyStoreFieldInstruction,The length of the statement  "			Log.WriteLine (this' " Reached a field variable store to the field {0}' there are {1} unsafe pointers here."' field.Name' pointers == null ? 0 : pointers.Count); " is 161.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyCallbackSafety,The length of the statement  "			Log.WriteLine (this' " Verifying: {0} with code size: {1} instruction count: {2}"' callback.Name' callback.Body.CodeSize' callback.Body.Instructions.Count); " is 156.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyCallbackSafety,The length of the statement  "			// 1) An exception is thrown which does not inherit from System.Exception (not valid in C# nor VB' but it is valid in C++/CIL and IL) " is 133.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyCallbackSafety,The length of the statement  "			// 2) The assembly where the exception handler resides has the System.Runtime.CompilerServices.RuntimeCompatibility attribute set with WrapNonExceptionThrows = true. " is 165.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyCallbackSafety,The length of the statement  "			// If 2) is not true' the runtime will wrap the exception in a RuntimeWrappedException object' which is handled by case b) above. " is 129.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyCallbackSafety,The length of the statement  "			// Given that this is the normal case (otherwise you'd have to put the attribute in the assembly)' we accept 2) as safe too. " is 124.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyCallbackSafety,The length of the statement  "					Log.WriteLine (this' " Catch all block found' marking instruction at index {0} to index {1} (included) as safe."' start_index' end_index - 1); " is 142.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,VerifyCallbackSafety,The length of the statement  "				Log.WriteLine (this' " HandlerType: {6}' TryStart: {3}' TryEnd: {4}' HandlerStart: {0}' HandlerEnd: {1}' FilterStart: {2}' CatchType: {5}"'  " is 139.
Long Statement,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,GetDelegatePointers,The length of the statement  "			if (range.First != range.Last && range.Last.OpCode.Code == Code.Newobj && range.Last.Previous.OpCode.Code == Code.Ldftn) { " is 122.
Long Statement,Gendarme.Rules.Interoperability,GetLastErrorMustBeCalledRightAfterPInvokeRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\GetLastErrorMustBeCalledRightAfterPInvokeRule.cs,CheckPInvoke,The length of the statement  "						if (mDef != null && mDef.IsPInvokeImpl) { //check if another pinvoke method is called' this counts as "GetLastError not called" " is 127.
Long Statement,Gendarme.Rules.Interoperability,MarshalStringsInPInvokeDeclarationsRule,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\MarshalStringsInPInvokeDeclarationsRule.cs,CheckMethod,The length of the statement  "						"Parameter '{0}'' of type '{1}'' does not have [MarshalAs] attribute' yet no [DllImport CharSet=] is set for the method '{2}'."' " is 128.
Magic Number,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRuleHelper,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,GetLoadIndex,The following statement contains a magic number: switch (ins.OpCode.Code) {  			case Code.Ldloc_0: return 0;  			case Code.Ldloc_1: return 1;  			case Code.Ldloc_2: return 2;  			case Code.Ldloc_3: return 3;  			case Code.Ldloc:  // Untested   			case Code.Ldloca: // Untested  			case Code.Ldloca_S:  			case Code.Ldloc_S: return ((VariableDefinition) ins.Operand).Index;  			default:  				string msg = String.Format (CultureInfo.InvariantCulture' "Invalid opcode: {0}"' ins.OpCode.Name);  				throw new ArgumentException (msg);  			}
Magic Number,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRuleHelper,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,GetLoadIndex,The following statement contains a magic number: switch (ins.OpCode.Code) {  			case Code.Ldloc_0: return 0;  			case Code.Ldloc_1: return 1;  			case Code.Ldloc_2: return 2;  			case Code.Ldloc_3: return 3;  			case Code.Ldloc:  // Untested   			case Code.Ldloca: // Untested  			case Code.Ldloca_S:  			case Code.Ldloc_S: return ((VariableDefinition) ins.Operand).Index;  			default:  				string msg = String.Format (CultureInfo.InvariantCulture' "Invalid opcode: {0}"' ins.OpCode.Name);  				throw new ArgumentException (msg);  			}
Magic Number,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRuleHelper,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,GetStoreIndex,The following statement contains a magic number: switch (ins.OpCode.Code) {  			case Code.Stloc_0: return 0;  			case Code.Stloc_1: return 1;  			case Code.Stloc_2: return 2;  			case Code.Stloc_3: return 3;  			case Code.Stloc: // Untested for stloc  			case Code.Stloc_S: return ((VariableDefinition) ins.Operand).Index;  			default:  				string msg = String.Format (CultureInfo.InvariantCulture' "Invalid opcode: {0}"' ins.OpCode.Name);  				throw new ArgumentException (msg);  			}
Magic Number,Gendarme.Rules.Interoperability,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRuleHelper,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Interoperability\DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule.cs,GetStoreIndex,The following statement contains a magic number: switch (ins.OpCode.Code) {  			case Code.Stloc_0: return 0;  			case Code.Stloc_1: return 1;  			case Code.Stloc_2: return 2;  			case Code.Stloc_3: return 3;  			case Code.Stloc: // Untested for stloc  			case Code.Stloc_S: return ((VariableDefinition) ins.Operand).Index;  			default:  				string msg = String.Format (CultureInfo.InvariantCulture' "Invalid opcode: {0}"' ins.OpCode.Name);  				throw new ArgumentException (msg);  			}
