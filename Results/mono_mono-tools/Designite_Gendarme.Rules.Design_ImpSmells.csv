Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gendarme.Rules.Design,AvoidRefAndOutParametersRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\AvoidRefAndOutParametersRule.cs,IsSignatureDictatedByInterface,Cyclomatic complexity of the method is 9
Complex Method,Gendarme.Rules.Design,AvoidSmallNamespaceRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\AvoidSmallNamespaceRule.cs,CheckAssembly,Cyclomatic complexity of the method is 9
Complex Method,Gendarme.Rules.Design,ConsiderConvertingMethodToPropertyRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderConvertingMethodToPropertyRule.cs,CheckMethod,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Design,ConsiderUsingStaticTypeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderUsingStaticTypeRule.cs,IsAllStatic,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Design,DisposableTypesShouldHaveFinalizerRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\DisposableTypesShouldHaveFinalizerRule.cs,CheckType,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Design,PreferUriOverStringRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\PreferUriOverStringRule.cs,CheckParameters,Cyclomatic complexity of the method is 9
Complex Method,Gendarme.Rules.Design,ImplementIComparableCorrectlyRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ImplementIComparableCorreclyRule.cs,CheckType,Cyclomatic complexity of the method is 12
Complex Method,Gendarme.Rules.Design,StronglyTypedRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\StronglyTypedRule.cs,CheckType,Cyclomatic complexity of the method is 11
Complex Method,Gendarme.Rules.Design,StronglyTypedRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\StronglyTypedRule.cs,ProcessMethods,Cyclomatic complexity of the method is 9
Complex Method,Gendarme.Rules.Design,UseFlagsAttributeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\UseFlagsAttributeRule.cs,CheckType,Cyclomatic complexity of the method is 8
Complex Method,Gendarme.Rules.Design,ConsiderAddingInterfaceRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderAddingInterfaceRule.cs,DoesTypeStealthilyImplementInterface,Cyclomatic complexity of the method is 14
Long Statement,Gendarme.Rules.Design,AttributeArgumentsShouldHaveAccessorsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\AttributeArgumentsShouldHaveAccessorsRule.cs,CheckType,The length of the statement  "					string correspondingPropertyName = Char.ToUpper (param.Name [0]' CultureInfo.InvariantCulture).ToString (CultureInfo.InvariantCulture) + " is 136.
Long Statement,Gendarme.Rules.Design,AttributeArgumentsShouldHaveAccessorsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\AttributeArgumentsShouldHaveAccessorsRule.cs,CheckType,The length of the statement  "						allProperties.Add (correspondingPropertyName); // to avoid double catching same property (e.g. from different constructors) " is 123.
Long Statement,Gendarme.Rules.Design,AvoidVisibleFieldsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\AvoidPublicInstanceFieldsRule.cs,CheckType,The length of the statement  "						name' Char.ToUpper (name [0]' CultureInfo.InvariantCulture).ToString (CultureInfo.InvariantCulture)' name.Substring (1)); " is 121.
Long Statement,Gendarme.Rules.Design,DeclareEventHandlersCorrectlyRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\DeclareEventHandlersCorrectlyRule.cs,CheckParameterTypes,The length of the statement  "					Runner.Report (eventType' Severity.Medium' Confidence.High' "The second parameter should be a subclass of System.EventArgs"); " is 125.
Long Statement,Gendarme.Rules.Design,ImplementEqualsAndGetHashCodeInPairRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ImplementEqualsAndGetHashCodeInPairRule.cs,CheckType,The length of the statement  "				string text = String.Format (CultureInfo.InvariantCulture' Message' MethodSignatures.Equals' MethodSignatures.GetHashCode); " is 123.
Long Statement,Gendarme.Rules.Design,ImplementEqualsAndGetHashCodeInPairRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ImplementEqualsAndGetHashCodeInPairRule.cs,CheckType,The length of the statement  "				string text = String.Format (CultureInfo.InvariantCulture' Message' MethodSignatures.GetHashCode' MethodSignatures.Equals); " is 123.
Long Statement,Gendarme.Rules.Design,OperatorEqualsShouldBeOverloadedRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\OperatorEqualsShouldBeOverloadedRule.cs,CheckType,The length of the statement  "					Runner.Report (type' Severity.Low' Confidence.High' "This type implements the addition (+) and subtraction (-) operators. It should also implement the equality (==) operator."); " is 177.
Long Statement,Gendarme.Rules.Design,OperatorEqualsShouldBeOverloadedRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\OperatorEqualsShouldBeOverloadedRule.cs,CheckType,The length of the statement  "					Runner.Report (type' Severity.Medium' Confidence.High' "This type overrides Object.Equals. It should also implement the equality (==) operator."); " is 146.
Long Statement,Gendarme.Rules.Design,ProvideAlternativeNamesForOperatorOverloadsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ProvideAlternativeNamesForOperatorOverloadsRule.cs,CheckType,The length of the statement  "						"This type implements the '{0}' operator. Some languages do not support overloaded operators so an alternative '{1}' method should be provided."' " is 145.
Complex Conditional,Gendarme.Rules.Design,AvoidVisibleFieldsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\AvoidPublicInstanceFieldsRule.cs,CheckType,The conditional expression  "type.IsEnum || type.IsInterface || !type.HasFields || type.IsDelegate () || type.IsGeneratedCode ()"  is complex.
Complex Conditional,Gendarme.Rules.Design,AvoidVisibleFieldsRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\AvoidPublicInstanceFieldsRule.cs,CheckType,The conditional expression  "!fd.IsVisible () || fd.IsSpecialName || fd.HasConstant || fd.IsInitOnly"  is complex.
Complex Conditional,Gendarme.Rules.Design,ConsiderConvertingFieldToNullableRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderConvertingFieldToNullableRule.cs,CheckType,The conditional expression  "!fd.FieldType.IsValueType || fd.IsSpecialName || fd.HasConstant || fd.IsInitOnly"  is complex.
Complex Conditional,Gendarme.Rules.Design,ConsiderConvertingMethodToPropertyRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderConvertingMethodToPropertyRule.cs,CheckMethod,The conditional expression  "(get || isp || has) && !method.HasParameters && !return_type.IsNamed ("System"' "Void")"  is complex.
Complex Conditional,Gendarme.Rules.Design,ConsiderUsingStaticTypeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderUsingStaticTypeRule.cs,CheckType,The conditional expression  "type.IsEnum || type.IsInterface || type.IsValueType || type.IsDelegate () || type.IsGeneratedCode ()   				|| type.BaseType != null && !type.BaseType.IsNamed ("System"' "Object")"  is complex.
Complex Conditional,Gendarme.Rules.Design,DoNotDeclareVirtualMethodsInSealedTypeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\DoNotDeclareVirtualMethodsInSealedTypeRule.cs,CheckType,The conditional expression  "!type.IsSealed || type.IsEnum || type.IsValueType || type.IsDelegate ()"  is complex.
Complex Conditional,Gendarme.Rules.Design,DoNotDeclareProtectedMembersInSealedTypeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\DontDeclareProtectedFieldsInSealedClassRule.cs,CheckType,The conditional expression  "!type.IsSealed || type.IsEnum || type.IsValueType || type.IsDelegate ()"  is complex.
Complex Conditional,Gendarme.Rules.Design,ImplementIComparableCorrectlyRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ImplementIComparableCorreclyRule.cs,CheckType,The conditional expression  "!equality || !inequality || !less_than || !greater_than"  is complex.
Complex Conditional,Gendarme.Rules.Design,ConsiderAddingInterfaceRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderAddingInterfaceRule.cs,DoesTypeStealthilyImplementInterface,The conditional expression  "type == iface || type.IsEnum || type.IsValueType || type.IsStatic ()"  is complex.
Magic Number,Gendarme.Rules.Design,ConsiderConvertingFieldToNullableRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderConvertingFieldToNullableRule.cs,IsHasField,The following statement contains a magic number: if (name.Length < 4)  				return false;
Magic Number,Gendarme.Rules.Design,ConsiderConvertingMethodToPropertyRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\ConsiderConvertingMethodToPropertyRule.cs,ReportAssociatedSetter,The following statement contains a magic number: string name = "Set" + getter.Name.Substring (3);
Magic Number,Gendarme.Rules.Design,DeclareEventHandlersCorrectlyRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\DeclareEventHandlersCorrectlyRule.cs,CheckAmountOfParameters,The following statement contains a magic number: if (invoke.HasParameters && (invoke.Parameters.Count == 2))  				return true;
Magic Number,Gendarme.Rules.Design,DeclareEventHandlersCorrectlyRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\DeclareEventHandlersCorrectlyRule.cs,CheckParameterTypes,The following statement contains a magic number: if (count >= 2) {  				if (!pdc [1].ParameterType.Inherits ("System"' "EventArgs")) {  					Runner.Report (eventType' Severity.Medium' Confidence.High' "The second parameter should be a subclass of System.EventArgs");  					ok = false;  				}  			}
Magic Number,Gendarme.Rules.Design,PreferUriOverStringRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\PreferUriOverStringRule.cs,IsUri,The following statement contains a magic number: while ((index = FindTokenStart(memberName' "ur"' index)) != -1){  				if (memberName.Length <= index + 2)  					break;  				if (url_enders.Contains(Char.ToLower(memberName[index + 2]' CultureInfo.InvariantCulture)))  					return true;  				index += 2;  			}
Magic Number,Gendarme.Rules.Design,PreferUriOverStringRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\PreferUriOverStringRule.cs,IsUri,The following statement contains a magic number: while ((index = FindTokenStart(memberName' "ur"' index)) != -1){  				if (memberName.Length <= index + 2)  					break;  				if (url_enders.Contains(Char.ToLower(memberName[index + 2]' CultureInfo.InvariantCulture)))  					return true;  				index += 2;  			}
Magic Number,Gendarme.Rules.Design,PreferUriOverStringRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\PreferUriOverStringRule.cs,IsUri,The following statement contains a magic number: while ((index = FindTokenStart(memberName' "ur"' index)) != -1){  				if (memberName.Length <= index + 2)  					break;  				if (url_enders.Contains(Char.ToLower(memberName[index + 2]' CultureInfo.InvariantCulture)))  					return true;  				index += 2;  			}
Magic Number,Gendarme.Rules.Design,UseFlagsAttributeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\UseFlagsAttributeRule.cs,CheckType,The following statement contains a magic number: if (values.Count < 3)  				return RuleResult.Success;
Magic Number,Gendarme.Rules.Design,UseFlagsAttributeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\UseFlagsAttributeRule.cs,CheckType,The following statement contains a magic number: if (numFlags + numMasks == values.Count) {  				values.Sort ();		// sometimes enums are all sequential but not in order  				  				int numSequential = CountSequential ();				  				Log.WriteLine (this' "numSequential: {0}"' numSequential);    				// and there are not too many sequential values (so we don't  				// complain about stuff like 1' 2' 3' 4' 5' 6).  				if (numSequential < 3) {  					Confidence confidence = values.Count >= 4 && numMasks == 0 ? Confidence.High : Confidence.Normal;  					Runner.Report (type' Severity.Medium' confidence);  				}  			}
Magic Number,Gendarme.Rules.Design,UseFlagsAttributeRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\UseFlagsAttributeRule.cs,CheckType,The following statement contains a magic number: if (numFlags + numMasks == values.Count) {  				values.Sort ();		// sometimes enums are all sequential but not in order  				  				int numSequential = CountSequential ();				  				Log.WriteLine (this' "numSequential: {0}"' numSequential);    				// and there are not too many sequential values (so we don't  				// complain about stuff like 1' 2' 3' 4' 5' 6).  				if (numSequential < 3) {  					Confidence confidence = values.Count >= 4 && numMasks == 0 ? Confidence.High : Confidence.Normal;  					Runner.Report (type' Severity.Medium' confidence);  				}  			}
Missing Default,Gendarme.Rules.Design,EnumeratorsShouldBeStronglyTypedRule,C:\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.Design\EnumeratorsShouldBeStronglyTypedRule.cs,CheckType,The following switch statement is missing a default case: switch (baseType.Name) {  					case "CollectionBase":  					case "DictionaryBase":  					case "ReadOnlyCollectionBase":  						return RuleResult.DoesNotApply;  					}
