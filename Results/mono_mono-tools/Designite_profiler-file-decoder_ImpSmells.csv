Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The method has 203 lines of code.
Complex Method,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,Cyclomatic complexity of the method is 9
Complex Method,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,Cyclomatic complexity of the method is 44
Long Parameter List,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintMethodAllocationsPerClass,The method has 5 parameters. Parameters: writer' allocationsPerMethod' JitTime' printStackTraces' stackTraceTreshold
Long Parameter List,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintExecutionTimeByCallStack,The method has 5 parameters. Parameters: writer' data' stackFrame' callerSeconds' indentationLevel
Long Identifier,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintMethodAllocationsPerClass,The length of the parameter cumulativeAllocatedBytesPerStackTrace is 37.
Long Identifier,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,The length of the parameter cumulativeAllocatedBytesPerMethod is 33.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintMethodAllocationsPerClass,The length of the statement  "				writer.WriteLine ("        {0} bytes ({1} instances) from {2}.{3}"' allocationsPerMethod.AllocatedBytes' allocationsPerMethod.AllocatedInstances' allocationsPerMethod.Method.Class.Name' allocationsPerMethod.Method.Name); " is 220.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintMethodAllocationsPerClass,The length of the statement  "				writer.WriteLine ("                {0} bytes ({1} instances) at JIT time in {2}.{3}"' allocationsPerMethod.AllocatedBytes' allocationsPerMethod.AllocatedInstances' allocationsPerMethod.Method.Class.Name' allocationsPerMethod.Method.Name); " is 238.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,The length of the statement  "			writer.WriteLine ("{0'5:F2}% ({1} bytes) {2}"' ((allocatedBytesPerClass / totalAllocatedBytes) * 100)' c.AllocatedBytes' c.Name); " is 129.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,The length of the statement  "					LoadedClass.AllocationsPerMethod[] totalAllocationsPerMethod = new LoadedClass.AllocationsPerMethod [allocationsPerMethodArray.Length + allocationsPerMethodAtJitTime.Length]; " is 174.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,The length of the statement  "					Array.Copy (allocationsPerMethodAtJitTime' 0' totalAllocationsPerMethod' allocationsPerMethodArray.Length' allocationsPerMethodAtJitTime.Length); " is 145.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,The length of the statement  "						PrintMethodAllocationsPerClass (writer' allocationsPerMethod' false' cumulativeAllocatedBytesPerMethod < allocatedBytesPerClass * 0.7' 0.7); " is 140.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintExecutionTimeByCallStack,The length of the statement  "			writer.WriteLine ("{0'5:F2}% ({1:F6}s' {2} calls) {3}.{4}"' ((currentSeconds / callerSeconds) * 100)' currentSeconds' stackFrame.Calls' currentMethod.Class.Name' currentMethod.Name); " is 182.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The length of the statement  "							writer.WriteLine ("{0'5:F2}% ({1:F6}s) {2}.{3}"' ((((double)m.Clicks) / totalExecutionClicks) * 100)' data.ClicksToSeconds (m.Clicks)' m.Class.Name' m.Name); " is 157.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The length of the statement  "									writer.WriteLine ("        {0} calls from {1}.{2}"' callsPerCallerMethod.Calls' callsPerCallerMethod.Callees.Class.Name' callsPerCallerMethod.Callees.Name); " is 156.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The length of the statement  "							writer.WriteLine ("{0'5:F2}% ({1:F3}ms) {2}.{3}"' ((((double)m.JitClicks) / totalJitClicks) * 100)' data.ClicksToSeconds (m.JitClicks) * 1000' m.Class.Name' m.Name); " is 165.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The length of the statement  "				writer.WriteLine ("Reporting GC statistics for {0} collections (total {1:F3}ms' {2'5:F2}% of total time' mark {3'5:F2}%' sweep {4'5:F2}%)"' " is 139.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The length of the statement  "						writer.WriteLine ("[{0}] Collection starting at {1:F3}s (generation {2}): duration {3:F3}ms' mark {4:F3}ms' sweep {5:F3}ms"' " is 124.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The length of the statement  "								writer.WriteLine ("    {0'5:F2}% {1} {2} bytes ({3} freed)"' ((((double)s.AllocatedBytes) / totalAllocatedBytes) * 100)' s.Class.Name' s.AllocatedBytes' s.FreedBytes); " is 167.
Long Statement,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,Main,The length of the statement  "					Console.WriteLine ("Stopping decoding after a DecodingException in block of code {0}' length {1}' file offset {2}' block offset {3}: {4}"' e.FailingData.Code' e.FailingData.Length' e.FailingData.FileOffset' e.OffsetInBlock' e.Message); " is 235.
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,The following statement contains a magic number: writer.WriteLine ("{0'5:F2}% ({1} bytes) {2}"' ((allocatedBytesPerClass / totalAllocatedBytes) * 100)' c.AllocatedBytes' c.Name);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,The following statement contains a magic number: PrintMethodAllocationsPerClass (writer' allocationsPerMethod' false' cumulativeAllocatedBytesPerMethod < allocatedBytesPerClass * 0.7' 0.7);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintClassAllocationData,The following statement contains a magic number: PrintMethodAllocationsPerClass (writer' allocationsPerMethod' false' cumulativeAllocatedBytesPerMethod < allocatedBytesPerClass * 0.7' 0.7);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintExecutionTimeByCallStack,The following statement contains a magic number: writer.WriteLine ("{0'5:F2}% ({1:F6}s' {2} calls) {3}.{4}"' ((currentSeconds / callerSeconds) * 100)' currentSeconds' stackFrame.Calls' currentMethod.Class.Name' currentMethod.Name);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("{0'5:F2}% ({1:F6}s) {2}.{3}"' ((((double)m.Clicks) / totalExecutionClicks) * 100)' data.ClicksToSeconds (m.Clicks)' m.Class.Name' m.Name);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("{0'5:F2}% ({1:F3}ms) {2}.{3}"' ((((double)m.JitClicks) / totalJitClicks) * 100)' data.ClicksToSeconds (m.JitClicks) * 1000' m.Class.Name' m.Name);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("{0'5:F2}% ({1:F3}ms) {2}.{3}"' ((((double)m.JitClicks) / totalJitClicks) * 100)' data.ClicksToSeconds (m.JitClicks) * 1000' m.Class.Name' m.Name);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("{0'5:F2}% ({1}) {2}"' ((((double)s.StatisticalHits) / totalHits) * 100)' s.StatisticalHits' s.Name);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("Reporting GC statistics for {0} collections (total {1:F3}ms' {2'5:F2}% of total time' mark {3'5:F2}%' sweep {4'5:F2}%)"'  				                  collections'  				                  gcTime * 1000'  				                  (gcTime / totalTime) * 100'  				                  (gcMarkTime / gcTime) * 100'  				                  (gcSweepTime / gcTime) * 100);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("Reporting GC statistics for {0} collections (total {1:F3}ms' {2'5:F2}% of total time' mark {3'5:F2}%' sweep {4'5:F2}%)"'  				                  collections'  				                  gcTime * 1000'  				                  (gcTime / totalTime) * 100'  				                  (gcMarkTime / gcTime) * 100'  				                  (gcSweepTime / gcTime) * 100);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("Reporting GC statistics for {0} collections (total {1:F3}ms' {2'5:F2}% of total time' mark {3'5:F2}%' sweep {4'5:F2}%)"'  				                  collections'  				                  gcTime * 1000'  				                  (gcTime / totalTime) * 100'  				                  (gcMarkTime / gcTime) * 100'  				                  (gcSweepTime / gcTime) * 100);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("Reporting GC statistics for {0} collections (total {1:F3}ms' {2'5:F2}% of total time' mark {3'5:F2}%' sweep {4'5:F2}%)"'  				                  collections'  				                  gcTime * 1000'  				                  (gcTime / totalTime) * 100'  				                  (gcMarkTime / gcTime) * 100'  				                  (gcSweepTime / gcTime) * 100);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("[{0}] Collection starting at {1:F3}s (generation {2}): duration {3:F3}ms' mark {4:F3}ms' sweep {5:F3}ms"'  						                  gcs.Collection'  						                  data.ClicksToSeconds (gcStartClicks)'  						                  gcs.Generation'  						                  gcs.Duration * 1000'  						                  gcs.MarkDuration * 1000'  						                  gcs.SweepDuration * 1000);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("[{0}] Collection starting at {1:F3}s (generation {2}): duration {3:F3}ms' mark {4:F3}ms' sweep {5:F3}ms"'  						                  gcs.Collection'  						                  data.ClicksToSeconds (gcStartClicks)'  						                  gcs.Generation'  						                  gcs.Duration * 1000'  						                  gcs.MarkDuration * 1000'  						                  gcs.SweepDuration * 1000);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("[{0}] Collection starting at {1:F3}s (generation {2}): duration {3:F3}ms' mark {4:F3}ms' sweep {5:F3}ms"'  						                  gcs.Collection'  						                  data.ClicksToSeconds (gcStartClicks)'  						                  gcs.Generation'  						                  gcs.Duration * 1000'  						                  gcs.MarkDuration * 1000'  						                  gcs.SweepDuration * 1000);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("Data for collection {0} written {1:F3}s since the application started"'  					                  allocationSummary.Collection' ((double) (allocationSummary.StartTime - data.StartTime).Milliseconds) / 1000);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("Heap data collection {0} started at {1} (duration {2:F3}ms)"'  					                  heapSnapshot.Collection'  					                  data.CounterToDateTime (heapSnapshot.StartCounter)'  					                  data.ClicksToSeconds (heapSnapshot.EndCounter - heapSnapshot.StartCounter) * 1000);
Magic Number,Mono.Profiler,ConsoleDecoder,C:\research\architectureSmells\repos\mono_mono-tools\Mono.Profiler\profiler-file-decoder\Main.cs,PrintData,The following statement contains a magic number: writer.WriteLine ("    {0'5:F2}% {1} {2} bytes ({3} freed)"' ((((double)s.AllocatedBytes) / totalAllocatedBytes) * 100)' s.Class.Name' s.AllocatedBytes' s.FreedBytes);
