Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithInvokeMemberWithPrivateFlagsCall,The length of the statement  "			this.GetType ().InvokeMember ("Foo"' BindingFlags.NonPublic | BindingFlags.Static' null' null' Type.EmptyTypes' CultureInfo.CurrentCulture); " is 140.
Long Statement,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithInvokeMemberWithPrivateFlagsCall,The length of the statement  "			this.GetType ().InvokeMember ("Foo"' BindingFlags.NonPublic | BindingFlags.Instance' null' null' Type.EmptyTypes' null' CultureInfo.CurrentCulture' null); " is 154.
Long Statement,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithInvokeMemberWithoutPrivateFlagsCall,The length of the statement  "			this.GetType ().InvokeMember ("Foo"' BindingFlags.Public | BindingFlags.Instance' null' null' Type.EmptyTypes' CultureInfo.CurrentCulture); " is 139.
Long Statement,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithInvokeMemberWithoutPrivateFlagsCall,The length of the statement  "			this.GetType ().InvokeMember ("Foo"' BindingFlags.Public | BindingFlags.DeclaredOnly' null' null' Type.EmptyTypes' null' CultureInfo.CurrentCulture' null); " is 155.
Long Statement,Test.Rules.BadPractice,DoNotUseGetInterfaceToCheckAssignabilityTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\DoNotUseGetInterfaceToCheckAssignabilityTest.cs,Bad_LowConfidence,The length of the statement  "			Assert.IsTrue (IsAssignableUsingGetInterfaceNotConstantCase (typeof (Convertible)' "IConvertible"' false)' "my.IConvertible-false"); " is 132.
Long Statement,Test.Rules.BadPractice,GetEntryAssemblyMayReturnNullTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\GetEntryAssemblyMayReturnNullTest.cs,TestGetEntryAssemblyCallFromExecutable,The length of the statement  "				MethodDefinition method = GetTest<ClassCallingGetEntryAssembly> (assembly).Methods.FirstOrDefault (m => m.Name == "ThreeCalls"); " is 128.
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassWithStaticCtor,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassWithStaticCtor,The constructor "ClassWithStaticCtor" calls a virtual method "Method".
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassWithInstanceOfItself,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassWithInstanceOfItself,The constructor "ClassWithInstanceOfItself" calls a virtual method "Method".
Virtual Method Call from Constructor,Test.Rules.BadPractice,SealedClassWithVirtualCall,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,SealedClassWithVirtualCall,The constructor "SealedClassWithVirtualCall" calls a virtual method "VirtualMethod".
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassWithRecursiveVirtualCall,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassWithRecursiveVirtualCall,The constructor "ClassWithRecursiveVirtualCall" calls a virtual method "VirtualMethod".
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassCallingVirtualMethodOnce,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassCallingVirtualMethodOnce,The constructor "ClassCallingVirtualMethodOnce" calls a virtual method "VirtualMethod".
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassCallingVirtualMethodThreeTimes,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassCallingVirtualMethodThreeTimes,The constructor "ClassCallingVirtualMethodThreeTimes" calls a virtual method "VirtualMethod".
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassCallingVirtualMethodThreeTimes,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassCallingVirtualMethodThreeTimes,The constructor "ClassCallingVirtualMethodThreeTimes" calls a virtual method "VirtualMethod2".
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassCallingVirtualMethodThreeTimes,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassCallingVirtualMethodThreeTimes,The constructor "ClassCallingVirtualMethodThreeTimes" calls a virtual method "VirtualMethod".
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassCallingVirtualMethodFromBaseClass,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassCallingVirtualMethodFromBaseClass,The constructor "ClassCallingVirtualMethodFromBaseClass" calls a virtual method "VirtualMethod".
Virtual Method Call from Constructor,Test.Rules.BadPractice,ClassCallingVirtualMethodFromOtherClasses,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassCallingVirtualMethodFromOtherClasses,The constructor "ClassCallingVirtualMethodFromOtherClasses" calls a virtual method "VirtualMethod".
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (2' 2' 0' 9);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (2' 2' 0' 9);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (2' 2' 0' 9);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (2' 2' 9' 0);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (2' 2' 9' 0);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (2' 2' 9' 0);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (2' 9' 0' 0);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (2' 9' 0' 0);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (9' 2' 0' 0);
Magic Number,Test.Rules.BadPractice,AvoidAssemblyVersionMismatchTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidAssemblyVersionMismatchTest.cs,VersionMismatch,The following statement contains a magic number: assembly.Name.Version = new Version (9' 2' 0' 0);
Magic Number,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithGCCallTest,The following statement contains a magic number: AssertRuleFailure<AvoidCallingProblematicMethodsTest> ("MethodWithGCCall"' 2);
Magic Number,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithInvokeMemberWithPrivateFlagsCallTest,The following statement contains a magic number: AssertRuleFailure<AvoidCallingProblematicMethodsTest> ("MethodWithInvokeMemberWithPrivateFlagsCall"' 3);
Magic Number,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithAssemblyLoadFromCallTest,The following statement contains a magic number: AssertRuleFailure<AvoidCallingProblematicMethodsTest> ("MethodWithAssemblyLoadFromCall"' 3);
Magic Number,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithAssemblyLoadFileCallTest,The following statement contains a magic number: AssertRuleFailure<AvoidCallingProblematicMethodsTest> ("MethodWithAssemblyLoadFileCall"' 2);
Magic Number,Test.Rules.BadPractice,AvoidCallingProblematicMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidCallingProblematicMethodsTest.cs,MethodWithAssemblyLoadWithPartialNameCallTest,The following statement contains a magic number: AssertRuleFailure<AvoidCallingProblematicMethodsTest> ("MethodWithAssemblyLoadWithPartialNameCall"' 2);
Magic Number,Test.Rules.BadPractice,AvoidVisibleConstantFieldTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\AvoidVisibleConstantFieldTest.cs,PublicType,The following statement contains a magic number: AssertRuleFailure<PublicBad> (3);
Magic Number,Test.Rules.BadPractice,CheckNewExceptionWithoutThrowingTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\CheckNewExceptionWithoutThrowingTest.cs,LocalVariable,The following statement contains a magic number: c += i * 2;
Magic Number,Test.Rules.BadPractice,CheckNewExceptionWithoutThrowingTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\CheckNewExceptionWithoutThrowingTest.cs,LocalVariable,The following statement contains a magic number: i < 10
Magic Number,Test.Rules.BadPractice,CheckNewThreadWithoutStartTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\CheckNewThreadWithoutStartTest.cs,LocalVariable,The following statement contains a magic number: c += i * 2;
Magic Number,Test.Rules.BadPractice,CheckNewThreadWithoutStartTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\CheckNewThreadWithoutStartTest.cs,LocalVariable,The following statement contains a magic number: i < 10
Magic Number,Test.Rules.BadPractice,CloneReturningNullInSomeConditions,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\CloneMethodShouldNotReturnNullTest.cs,test,The following statement contains a magic number: j > 10
Magic Number,Test.Rules.BadPractice,CloneReturningNullInSomeConditions,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\CloneMethodShouldNotReturnNullTest.cs,Clone,The following statement contains a magic number: test (11)
Magic Number,Test.Rules.BadPractice,ClassWithRecursiveVirtualCall,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,ClassWithRecursiveVirtualCall,The following statement contains a magic number: VirtualMethod (5);
Magic Number,Test.Rules.BadPractice,ConstructorShouldNotCallVirtualMethodsTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ConstructorShouldNotCallVirtualMethodsTest.cs,TestClassCallingVirtualMethodThreeTimes,The following statement contains a magic number: Assert.AreEqual (3' runner.Defects.Count' "Count");
Magic Number,Test.Rules.BadPractice,ImplementedOrNotMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\DoNotForgetNotImplementedMethodsTest.cs,NotFullyImplemented_Long,The following statement contains a magic number: switch (x) {  			case 0:  				break;  			case 1:  				Implemented1 ();  				break;  			case 2:  				Implemented2 ();  				break;  			case 3:  				Implemented3 ();  				break;  			case 4:  				Implemented4 ();  				break;  			default:  				throw new NotImplementedException ("only basic checks are done");  			}
Magic Number,Test.Rules.BadPractice,ImplementedOrNotMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\DoNotForgetNotImplementedMethodsTest.cs,NotFullyImplemented_Long,The following statement contains a magic number: switch (x) {  			case 0:  				break;  			case 1:  				Implemented1 ();  				break;  			case 2:  				Implemented2 ();  				break;  			case 3:  				Implemented3 ();  				break;  			case 4:  				Implemented4 ();  				break;  			default:  				throw new NotImplementedException ("only basic checks are done");  			}
Magic Number,Test.Rules.BadPractice,ImplementedOrNotMethods,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\DoNotForgetNotImplementedMethodsTest.cs,NotFullyImplemented_Long,The following statement contains a magic number: switch (x) {  			case 0:  				break;  			case 1:  				Implemented1 ();  				break;  			case 2:  				Implemented2 ();  				break;  			case 3:  				Implemented3 ();  				break;  			case 4:  				Implemented4 ();  				break;  			default:  				throw new NotImplementedException ("only basic checks are done");  			}
Magic Number,Test.Rules.BadPractice,ClassCallingGetEntryAssembly,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\GetEntryAssemblyMayReturnNullTest.cs,ThreeCalls,The following statement contains a magic number: int x = 2 + 2;
Magic Number,Test.Rules.BadPractice,ClassCallingGetEntryAssembly,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\GetEntryAssemblyMayReturnNullTest.cs,ThreeCalls,The following statement contains a magic number: int x = 2 + 2;
Magic Number,Test.Rules.BadPractice,ClassCallingGetEntryAssembly,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\GetEntryAssemblyMayReturnNullTest.cs,NoCalls,The following statement contains a magic number: int x = 42;
Magic Number,Test.Rules.BadPractice,ClassCallingGetEntryAssembly,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\GetEntryAssemblyMayReturnNullTest.cs,NoCalls,The following statement contains a magic number: int y = x * 42;
Magic Number,Test.Rules.BadPractice,ClassCallingGetEntryAssembly,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\GetEntryAssemblyMayReturnNullTest.cs,NoCalls,The following statement contains a magic number: x = x * y.CompareTo (42);
Magic Number,Test.Rules.BadPractice,GetEntryAssemblyMayReturnNullTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\GetEntryAssemblyMayReturnNullTest.cs,TestMethodCallingGetEntryAssemblyThreeTimes,The following statement contains a magic number: AssertRuleFailure<ClassCallingGetEntryAssembly> ("ThreeCalls"' 3);
Magic Number,Test.Rules.BadPractice,ObsoleteMessagesShouldNotBeEmptyTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ObsoleteMessagesShouldNotBeEmptyTest.cs,Class,The following statement contains a magic number: AssertRuleFailure<ClassWithObsoleteEmptyStuff> (7);
Magic Number,Test.Rules.BadPractice,ObsoleteMessagesShouldNotBeEmptyTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ObsoleteMessagesShouldNotBeEmptyTest.cs,Interface,The following statement contains a magic number: AssertRuleFailure<ObsoleteEmptyInterface> (3);
Magic Number,Test.Rules.BadPractice,OnlyUseDisposeForIDisposableTypesTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\OnlyUseDisposeForIDisposableTypesTest.cs,Cases,The following statement contains a magic number: AssertRuleFailure<Bad6> (2);
Magic Number,Test.Rules.BadPractice,PreferEmptyInstanceOverNullTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,Failure,The following statement contains a magic number: AssertRuleFailure<FailureCases> ("String3"' 2);
Magic Number,Test.Rules.BadPractice,SuccessCases,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,Collection,The following statement contains a magic number: list.Add (4);
Magic Number,Test.Rules.BadPractice,SuccessCases,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,Collection,The following statement contains a magic number: list.Add (8);
Magic Number,Test.Rules.BadPractice,SuccessCases,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,GenericCollection,The following statement contains a magic number: list.Add (4);
Magic Number,Test.Rules.BadPractice,SuccessCases,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,GenericCollection,The following statement contains a magic number: list.Add (8);
Magic Number,Test.Rules.BadPractice,FailureCases,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,Collection,The following statement contains a magic number: list.Add (4);
Magic Number,Test.Rules.BadPractice,FailureCases,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,Collection,The following statement contains a magic number: list.Add (8);
Magic Number,Test.Rules.BadPractice,FailureCases,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,GenericCollection,The following statement contains a magic number: list.Add (4);
Magic Number,Test.Rules.BadPractice,FailureCases,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferEmptyInstanceOverNullTest.cs,GenericCollection,The following statement contains a magic number: list.Add (8);
Magic Number,Test.Rules.BadPractice,PreferTryParseTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferTryParseTest.cs,Bad,The following statement contains a magic number: AssertRuleFailure<ParseWithTryCatch> ("Int32Parse"' 2);
Magic Number,Test.Rules.BadPractice,PreferTryParseTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\PreferTryParseTest.cs,Worse,The following statement contains a magic number: AssertRuleFailure<ParseWithoutTryCatch> ("Int32Parse"' 2);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,IsIntOddBad,The following statement contains a magic number: return ((x % 2) == 1);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,IsLongOddBad,The following statement contains a magic number: return ((x % 2) == 1);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,Bad,The following statement contains a magic number: Assert.IsFalse (IsIntOddBad (2)' "2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,Bad,The following statement contains a magic number: Assert.IsFalse (IsIntOddBad (-2)' "-2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,IsUnsignedByteOddBad,The following statement contains a magic number: return ((x % 2) == 1);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,IsUnsignedLongOddBad,The following statement contains a magic number: return ((x % 2) == 1);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,IsOddGood,The following statement contains a magic number: return ((x % 2) != 0);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,Good,The following statement contains a magic number: Assert.IsFalse (IsOddGood (2)' "2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,Good,The following statement contains a magic number: Assert.IsFalse (IsOddGood (-2)' "-2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,Best,The following statement contains a magic number: Assert.IsFalse (IsOddBest (2)' "2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,Best,The following statement contains a magic number: Assert.IsFalse (IsOddBest (-2)' "-2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,IsEvenGood,The following statement contains a magic number: return ((x % 2) == 0);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,EvenGood,The following statement contains a magic number: Assert.IsTrue (IsEvenGood (2)' "2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,EvenGood,The following statement contains a magic number: Assert.IsTrue (IsEvenGood (-2)' "-2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,IsEvenBad,The following statement contains a magic number: return ((x % 2) != 1);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,EvenBad,The following statement contains a magic number: Assert.IsTrue (IsEvenBad (2)' "2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,EvenBad,The following statement contains a magic number: Assert.IsTrue (IsEvenBad (-2)' "-2");
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,ModuloThree,The following statement contains a magic number: return ((x % 3) == 0);
Magic Number,Test.Rules.BadPractice,ReplaceIncompleteOddnessCheckTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ReplaceIncompleteOddnessCheckTest.cs,Compare,The following statement contains a magic number: return ((x % 2) >= 1);
Magic Number,Test.Rules.BadPractice,ToStringReturningNewString,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ToStringReturnsNullTest.cs,ToString,The following statement contains a magic number: return new string ('!'' 2);
Magic Number,Test.Rules.BadPractice,ToStringReturningStringFormat,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\ToStringReturnsNullTest.cs,ToString,The following statement contains a magic number: return String.Format ("{0}-{1}"' 1' 2);
Magic Number,Test.Rules.BadPractice,UseFileOpenOnlyWithFileAccessTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\UseFileOpenOnlyWithFileAccessTest.cs,BadMethod2,The following statement contains a magic number: a.Length == 42
Magic Number,Test.Rules.BadPractice,UseFileOpenOnlyWithFileAccessTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\UseFileOpenOnlyWithFileAccessTest.cs,GoodMethod,The following statement contains a magic number: var i = new FileStream ("HelloWorld.cs"' FileMode.Open' FileSystemRights.Read'  					FileShare.Read' 8' FileOptions.None);
Magic Number,Test.Rules.BadPractice,UseFileOpenOnlyWithFileAccessTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\UseFileOpenOnlyWithFileAccessTest.cs,Bad,The following statement contains a magic number: AssertRuleFailure<UseFileOpenOnlyWithFileAccessTest> ("BadMethod2"' 2);
Magic Number,Test.Rules.BadPractice,UseFileOpenOnlyWithFileAccessTest,C:\research\architectureSmells\repos\mono_mono-tools\gendarme\rules\Gendarme.Rules.BadPractice\Test\UseFileOpenOnlyWithFileAccessTest.cs,Bad,The following statement contains a magic number: AssertRuleFailure<UseFileOpenOnlyWithFileAccessTest> ("BadMethod3"' 3);
