Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,Cyclomatic complexity of the method is 11
Complex Method,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,Cyclomatic complexity of the method is 17
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The length of the statement  "							callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ())); " is 197.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The length of the statement  "							callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ())); " is 197.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,ReverseBytes,The length of the statement  "	return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24; " is 123.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendInitRequest,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendInitRequest,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendReadDeviceMode,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendReadDeviceMode,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(Response)' responseCode)' responseCode.ToHex ()); " is 120.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareRequest,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareRequest,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareAnticollisionRequest,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareAnticollisionRequest,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendLedRequest,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendLedRequest,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendBeepRequest,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendBeepRequest,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareSelect,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareSelect,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareSelect,The length of the statement  "	//byte checksum = readBuffer [readBuffer.Length-1]; // Hov... skal da ikke lave checksum indtil hele længden af bufferen' kun den del hvor vi har data i?! " is 154.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendHalt,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendHalt,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendHalt,The length of the statement  "	//byte checksum = readBuffer [readBuffer.Length-1]; // Hov... skal da ikke lave checksum indtil hele længden af bufferen' kun den del hvor vi har data i?! " is 154.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendAuth,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendAuth,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendRead,The length of the statement  "	//Console.WriteLine ("Command: {0} ( {1})"' Enum.GetName (typeof(CommandCode)' commandCode)' readBuffer.Subset (6' 2).ToHex ()); " is 128.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendRead,The length of the statement  "	//Console.WriteLine ("Response Code: {0} ( {1})"' Enum.GetName (typeof(ResponseCode)' responseCode)' responseCode.ToHex ()); " is 124.
Long Statement,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,validateChecksum,The length of the statement  "		throw new InvalidChecksumException (String.Format ("Invalid checksum' expected {0} but got {1}"' checksum' calculatedChecksum)); " is 128.
Complex Conditional,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The conditional expression  "buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff"  is complex.
Empty Catch Block,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,startCardDetectionLoop,The method has an empty catch block.
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ReverseInPairs,The following statement contains a magic number: for (int i = 0; i < array.Length; i += 2) {  	reversedPairs [array.Length - i - 1] = array [i + 1];  	reversedPairs [array.Length - i - 2] = array [i];  }  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ReverseInPairs,The following statement contains a magic number: for (int i = 0; i < array.Length; i += 2) {  	reversedPairs [array.Length - i - 1] = array [i + 1];  	reversedPairs [array.Length - i - 2] = array [i];  }  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ReverseInPairs,The following statement contains a magic number: i += 2
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ReverseInPairs,The following statement contains a magic number: reversedPairs [array.Length - i - 2] = array [i];  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,WriteLine,The following statement contains a magic number: foreach (byte value in data) {  	Console.Write ("0x" + Convert.ToString (value' 16) + " ");  }  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,WriteLine,The following statement contains a magic number: Console.Write ("0x" + Convert.ToString (value' 16) + " ");  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ToHex,The following statement contains a magic number: foreach (byte value in data) {  	stringBuilder.Append (Convert.ToString (value' 16).PadLeft ((value < 16) ? 2 : 1' '0') + separator);  }  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ToHex,The following statement contains a magic number: foreach (byte value in data) {  	stringBuilder.Append (Convert.ToString (value' 16).PadLeft ((value < 16) ? 2 : 1' '0') + separator);  }  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ToHex,The following statement contains a magic number: foreach (byte value in data) {  	stringBuilder.Append (Convert.ToString (value' 16).PadLeft ((value < 16) ? 2 : 1' '0') + separator);  }  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ToHex,The following statement contains a magic number: stringBuilder.Append (Convert.ToString (value' 16).PadLeft ((value < 16) ? 2 : 1' '0') + separator);  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ToHex,The following statement contains a magic number: stringBuilder.Append (Convert.ToString (value' 16).PadLeft ((value < 16) ? 2 : 1' '0') + separator);  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,ToHex,The following statement contains a magic number: stringBuilder.Append (Convert.ToString (value' 16).PadLeft ((value < 16) ? 2 : 1' '0') + separator);  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xef && buffer [1] == 0xbb && buffer [2] == 0xbf)  	encoding = Encoding.UTF8;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xef && buffer [1] == 0xbb && buffer [2] == 0xbf)  	encoding = Encoding.UTF8;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xef && buffer [1] == 0xbb && buffer [2] == 0xbf)  	encoding = Encoding.UTF8;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xef && buffer [1] == 0xbb && buffer [2] == 0xbf)  	encoding = Encoding.UTF8;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0xfe && buffer [1] == 0xff)  	encoding = Encoding.BigEndianUnicode;  // utf-16be  else if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0 && buffer [1] == 0 && buffer [2] == 0xfe && buffer [3] == 0xff)  	encoding = Encoding.UTF32;  else if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteArrayExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteArrayExtensions.cs,GetStringAutoDecode,The following statement contains a magic number: if (buffer [0] == 0x2b && buffer [1] == 0x2f && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,BangBits.ER301.Driver,ByteExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteUtils.cs,ToHex,The following statement contains a magic number: return "0x" + Convert.ToString (value' 16).PadLeft (2' '0');  
Magic Number,BangBits.ER301.Driver,ByteExtensions,C:\repos\casperbang_ER301.NET\Driver\ByteUtils.cs,ToHex,The following statement contains a magic number: return "0x" + Convert.ToString (value' 16).PadLeft (2' '0');  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getSectorIndexByBlockIndex,The following statement contains a magic number: return (blockIndex < 128) ? (int)blockIndex / 4 : 32 + ((int)(blockIndex - 128) / 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getSectorIndexByBlockIndex,The following statement contains a magic number: return (blockIndex < 128) ? (int)blockIndex / 4 : 32 + ((int)(blockIndex - 128) / 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getSectorIndexByBlockIndex,The following statement contains a magic number: return (blockIndex < 128) ? (int)blockIndex / 4 : 32 + ((int)(blockIndex - 128) / 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getSectorIndexByBlockIndex,The following statement contains a magic number: return (blockIndex < 128) ? (int)blockIndex / 4 : 32 + ((int)(blockIndex - 128) / 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getSectorIndexByBlockIndex,The following statement contains a magic number: return (blockIndex < 128) ? (int)blockIndex / 4 : 32 + ((int)(blockIndex - 128) / 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,openPort,The following statement contains a magic number: port.BaudRate = 115200;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,openPort,The following statement contains a magic number: port.DataBits = 8;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,openPort,The following statement contains a magic number: port.WriteTimeout = 50;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,openPort,The following statement contains a magic number: port.ReadTimeout = 50;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,openPort,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,initPort,The following statement contains a magic number: try {  	// Let's initialize the port with highest possible bandwidth  	MifareResponse request = sendInitRequest (speed);  	if (request.Response != Response.OK) {  		return false;  	}  	// Let's find out what hardware we're dealing with  	MifareDeviceResponse deviceModeResponse = sendReadDeviceMode ();  	if (deviceModeResponse.Response != Response.OK) {  		return false;  	}  	Console.WriteLine ("Communicating with device name {0}"' deviceModeResponse.DeviceName);  	// Turn LED off so we can actively use it to give visual feedback  	//Console.WriteLine (sendLedRequest (LEDColor.ALL_LED_OFF));  	//Console.WriteLine ();  	sendLedRequest (LEDColor.BLUE_ON_RED_OFF);  	Thread.Sleep (500);  	sendLedRequest (LEDColor.ALL_LED_OFF);  	return true;  }  catch (System.TimeoutException exception) {  	return false;  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,initPort,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,startCardDetectionLoop,The following statement contains a magic number: try {  	callback.status ("Connected to ER301 hardware' waiting for card...");  	// Wait for Ok detection of card  	MifareTypeResponse requestResponse = null;  	do {  		//requestResponse = sendMifareRequest (MifareRequestCode.IDLE_CARD);  		requestResponse = sendMifareRequest (MifareRequestCode.ALL_TYPE_A);  		Thread.Sleep (50);  		if (cancellationToken.IsCancellationRequested) {  			// Clean up here' then...  			//cancellationToken.ThrowIfCancellationRequested();  			callback.status ("Reading of card interupted by user!");  			callback.error ();  			return;  		}  	}  	while (requestResponse.Response != Response.OK);  	StartConversation (requestResponse' callback);  }  catch (Exception e) {  	Console.WriteLine (e.Message);  	callback.status ("Connection interupted!");  	callback.error ();  	try {  		sendLedRequest (LEDColor.RED_ON_BLUE_OFF);  		sendBeepRequest (BeepType.LONG_600MS);  		Thread.Sleep (300);  		sendLedRequest (LEDColor.ALL_LED_OFF);  	}  	catch (Exception e2) {  		// Ignore whatever happens when exercising LED's  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,startCardDetectionLoop,The following statement contains a magic number: try {  	callback.status ("Connected to ER301 hardware' waiting for card...");  	// Wait for Ok detection of card  	MifareTypeResponse requestResponse = null;  	do {  		//requestResponse = sendMifareRequest (MifareRequestCode.IDLE_CARD);  		requestResponse = sendMifareRequest (MifareRequestCode.ALL_TYPE_A);  		Thread.Sleep (50);  		if (cancellationToken.IsCancellationRequested) {  			// Clean up here' then...  			//cancellationToken.ThrowIfCancellationRequested();  			callback.status ("Reading of card interupted by user!");  			callback.error ();  			return;  		}  	}  	while (requestResponse.Response != Response.OK);  	StartConversation (requestResponse' callback);  }  catch (Exception e) {  	Console.WriteLine (e.Message);  	callback.status ("Connection interupted!");  	callback.error ();  	try {  		sendLedRequest (LEDColor.RED_ON_BLUE_OFF);  		sendBeepRequest (BeepType.LONG_600MS);  		Thread.Sleep (300);  		sendLedRequest (LEDColor.ALL_LED_OFF);  	}  	catch (Exception e2) {  		// Ignore whatever happens when exercising LED's  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,startCardDetectionLoop,The following statement contains a magic number: do {  	//requestResponse = sendMifareRequest (MifareRequestCode.IDLE_CARD);  	requestResponse = sendMifareRequest (MifareRequestCode.ALL_TYPE_A);  	Thread.Sleep (50);  	if (cancellationToken.IsCancellationRequested) {  		// Clean up here' then...  		//cancellationToken.ThrowIfCancellationRequested();  		callback.status ("Reading of card interupted by user!");  		callback.error ();  		return;  	}  }  while (requestResponse.Response != Response.OK);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,startCardDetectionLoop,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,startCardDetectionLoop,The following statement contains a magic number: try {  	sendLedRequest (LEDColor.RED_ON_BLUE_OFF);  	sendBeepRequest (BeepType.LONG_600MS);  	Thread.Sleep (300);  	sendLedRequest (LEDColor.ALL_LED_OFF);  }  catch (Exception e2) {  	// Ignore whatever happens when exercising LED's  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,startCardDetectionLoop,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (collisionResponse.Response == Response.OK) {  	uint serialNo = ReverseBytes (collisionResponse.SerialNo);  	Console.WriteLine ("Card detected' type={0}' serialNo={1}"' requestResponse.MifareType' serialNo);  	SelectResponse selectResponse = sendMifareSelect (collisionResponse.SerialNo);  	if (selectResponse.Response != Response.OK) {  		throw new Exception ("Mifare select error!");  	}  	Console.WriteLine ("Card {0} selected and active"' serialNo);  	//callback.status(BitConverter.GetBytes(collisionResponse.SerialNo).ToHex());  	DateTime before = DateTime.Now;  	Console.WriteLine ();  	callback.status (String.Format ("Reading card {0} with serialno. {1}"' requestResponse.MifareType' serialNo));  	int lastAuthorizedSectorIndex = -1;  	for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  		if (cancellationToken.IsCancellationRequested) {  			// Clean up here' then...  			//cancellationToken.ThrowIfCancellationRequested();  			callback.status ("Reading of card interupted by user!");  			callback.error ();  			return;  		}  		int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  		// If we haven't authorized for this sector before  		if (sectorIndex != lastAuthorizedSectorIndex) {  			lastAuthorizedSectorIndex = sectorIndex;  			//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  			if (callback.getAuthByKeyA ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  			if (callback.getAuthByKeyB ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  		}  		{  			ReadResponse read = sendRead ((byte)blockIndex);  			// If this block is a sector trailer  			if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  				// If keys are supposed to be included in data  				if (callback.getInclKeys ()) {  					// If authorizing with key A is enabled  					if (callback.getAuthByKeyA ()) {  						Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  					}  					// If authorizing with key B is enabled  					if (callback.getAuthByKeyB ()) {  						Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  					}  				}  			}  			callback.completeBlock (blockIndex' read.Data);  			//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  			Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  		}  	}  	DateTime after = DateTime.Now;  	TimeSpan span = after - before;  	//Console.WriteLine ("Auth took {0} ms"' span.TotalMilliseconds);  	// Done with card' halt session  	if (sendHalt ().Response == Response.OK) {  		// Turn BLUE LED on to signal All OK  		//sendLedRequest (LEDColor.BLUE_ON_RED_OFF);  		sendBeepRequest (BeepType.SHORT_60MS);  		//Thread.Sleep (500);  		// Revert to normal LED state off  		sendLedRequest (LEDColor.ALL_LED_OFF);  		callback.status (String.Format ("Card read in {0}'{1} sec."' span.Seconds' span.Milliseconds));  	}  	else {  		//sendLedRequest(LEDColor.RED_ON_BLUE_OFF);  	}  	MD5 md5 = System.Security.Cryptography.MD5.Create ();  	string hash = md5.ComputeHash (buffer).ToHex ();  	callback.success (serialNo' hash);  	return;  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (collisionResponse.Response == Response.OK) {  	uint serialNo = ReverseBytes (collisionResponse.SerialNo);  	Console.WriteLine ("Card detected' type={0}' serialNo={1}"' requestResponse.MifareType' serialNo);  	SelectResponse selectResponse = sendMifareSelect (collisionResponse.SerialNo);  	if (selectResponse.Response != Response.OK) {  		throw new Exception ("Mifare select error!");  	}  	Console.WriteLine ("Card {0} selected and active"' serialNo);  	//callback.status(BitConverter.GetBytes(collisionResponse.SerialNo).ToHex());  	DateTime before = DateTime.Now;  	Console.WriteLine ();  	callback.status (String.Format ("Reading card {0} with serialno. {1}"' requestResponse.MifareType' serialNo));  	int lastAuthorizedSectorIndex = -1;  	for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  		if (cancellationToken.IsCancellationRequested) {  			// Clean up here' then...  			//cancellationToken.ThrowIfCancellationRequested();  			callback.status ("Reading of card interupted by user!");  			callback.error ();  			return;  		}  		int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  		// If we haven't authorized for this sector before  		if (sectorIndex != lastAuthorizedSectorIndex) {  			lastAuthorizedSectorIndex = sectorIndex;  			//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  			if (callback.getAuthByKeyA ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  			if (callback.getAuthByKeyB ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  		}  		{  			ReadResponse read = sendRead ((byte)blockIndex);  			// If this block is a sector trailer  			if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  				// If keys are supposed to be included in data  				if (callback.getInclKeys ()) {  					// If authorizing with key A is enabled  					if (callback.getAuthByKeyA ()) {  						Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  					}  					// If authorizing with key B is enabled  					if (callback.getAuthByKeyB ()) {  						Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  					}  				}  			}  			callback.completeBlock (blockIndex' read.Data);  			//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  			Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  		}  	}  	DateTime after = DateTime.Now;  	TimeSpan span = after - before;  	//Console.WriteLine ("Auth took {0} ms"' span.TotalMilliseconds);  	// Done with card' halt session  	if (sendHalt ().Response == Response.OK) {  		// Turn BLUE LED on to signal All OK  		//sendLedRequest (LEDColor.BLUE_ON_RED_OFF);  		sendBeepRequest (BeepType.SHORT_60MS);  		//Thread.Sleep (500);  		// Revert to normal LED state off  		sendLedRequest (LEDColor.ALL_LED_OFF);  		callback.status (String.Format ("Card read in {0}'{1} sec."' span.Seconds' span.Milliseconds));  	}  	else {  		//sendLedRequest(LEDColor.RED_ON_BLUE_OFF);  	}  	MD5 md5 = System.Security.Cryptography.MD5.Create ();  	string hash = md5.ComputeHash (buffer).ToHex ();  	callback.success (serialNo' hash);  	return;  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (collisionResponse.Response == Response.OK) {  	uint serialNo = ReverseBytes (collisionResponse.SerialNo);  	Console.WriteLine ("Card detected' type={0}' serialNo={1}"' requestResponse.MifareType' serialNo);  	SelectResponse selectResponse = sendMifareSelect (collisionResponse.SerialNo);  	if (selectResponse.Response != Response.OK) {  		throw new Exception ("Mifare select error!");  	}  	Console.WriteLine ("Card {0} selected and active"' serialNo);  	//callback.status(BitConverter.GetBytes(collisionResponse.SerialNo).ToHex());  	DateTime before = DateTime.Now;  	Console.WriteLine ();  	callback.status (String.Format ("Reading card {0} with serialno. {1}"' requestResponse.MifareType' serialNo));  	int lastAuthorizedSectorIndex = -1;  	for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  		if (cancellationToken.IsCancellationRequested) {  			// Clean up here' then...  			//cancellationToken.ThrowIfCancellationRequested();  			callback.status ("Reading of card interupted by user!");  			callback.error ();  			return;  		}  		int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  		// If we haven't authorized for this sector before  		if (sectorIndex != lastAuthorizedSectorIndex) {  			lastAuthorizedSectorIndex = sectorIndex;  			//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  			if (callback.getAuthByKeyA ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  			if (callback.getAuthByKeyB ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  		}  		{  			ReadResponse read = sendRead ((byte)blockIndex);  			// If this block is a sector trailer  			if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  				// If keys are supposed to be included in data  				if (callback.getInclKeys ()) {  					// If authorizing with key A is enabled  					if (callback.getAuthByKeyA ()) {  						Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  					}  					// If authorizing with key B is enabled  					if (callback.getAuthByKeyB ()) {  						Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  					}  				}  			}  			callback.completeBlock (blockIndex' read.Data);  			//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  			Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  		}  	}  	DateTime after = DateTime.Now;  	TimeSpan span = after - before;  	//Console.WriteLine ("Auth took {0} ms"' span.TotalMilliseconds);  	// Done with card' halt session  	if (sendHalt ().Response == Response.OK) {  		// Turn BLUE LED on to signal All OK  		//sendLedRequest (LEDColor.BLUE_ON_RED_OFF);  		sendBeepRequest (BeepType.SHORT_60MS);  		//Thread.Sleep (500);  		// Revert to normal LED state off  		sendLedRequest (LEDColor.ALL_LED_OFF);  		callback.status (String.Format ("Card read in {0}'{1} sec."' span.Seconds' span.Milliseconds));  	}  	else {  		//sendLedRequest(LEDColor.RED_ON_BLUE_OFF);  	}  	MD5 md5 = System.Security.Cryptography.MD5.Create ();  	string hash = md5.ComputeHash (buffer).ToHex ();  	callback.success (serialNo' hash);  	return;  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (collisionResponse.Response == Response.OK) {  	uint serialNo = ReverseBytes (collisionResponse.SerialNo);  	Console.WriteLine ("Card detected' type={0}' serialNo={1}"' requestResponse.MifareType' serialNo);  	SelectResponse selectResponse = sendMifareSelect (collisionResponse.SerialNo);  	if (selectResponse.Response != Response.OK) {  		throw new Exception ("Mifare select error!");  	}  	Console.WriteLine ("Card {0} selected and active"' serialNo);  	//callback.status(BitConverter.GetBytes(collisionResponse.SerialNo).ToHex());  	DateTime before = DateTime.Now;  	Console.WriteLine ();  	callback.status (String.Format ("Reading card {0} with serialno. {1}"' requestResponse.MifareType' serialNo));  	int lastAuthorizedSectorIndex = -1;  	for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  		if (cancellationToken.IsCancellationRequested) {  			// Clean up here' then...  			//cancellationToken.ThrowIfCancellationRequested();  			callback.status ("Reading of card interupted by user!");  			callback.error ();  			return;  		}  		int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  		// If we haven't authorized for this sector before  		if (sectorIndex != lastAuthorizedSectorIndex) {  			lastAuthorizedSectorIndex = sectorIndex;  			//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  			if (callback.getAuthByKeyA ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  			if (callback.getAuthByKeyB ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  		}  		{  			ReadResponse read = sendRead ((byte)blockIndex);  			// If this block is a sector trailer  			if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  				// If keys are supposed to be included in data  				if (callback.getInclKeys ()) {  					// If authorizing with key A is enabled  					if (callback.getAuthByKeyA ()) {  						Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  					}  					// If authorizing with key B is enabled  					if (callback.getAuthByKeyB ()) {  						Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  					}  				}  			}  			callback.completeBlock (blockIndex' read.Data);  			//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  			Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  		}  	}  	DateTime after = DateTime.Now;  	TimeSpan span = after - before;  	//Console.WriteLine ("Auth took {0} ms"' span.TotalMilliseconds);  	// Done with card' halt session  	if (sendHalt ().Response == Response.OK) {  		// Turn BLUE LED on to signal All OK  		//sendLedRequest (LEDColor.BLUE_ON_RED_OFF);  		sendBeepRequest (BeepType.SHORT_60MS);  		//Thread.Sleep (500);  		// Revert to normal LED state off  		sendLedRequest (LEDColor.ALL_LED_OFF);  		callback.status (String.Format ("Card read in {0}'{1} sec."' span.Seconds' span.Milliseconds));  	}  	else {  		//sendLedRequest(LEDColor.RED_ON_BLUE_OFF);  	}  	MD5 md5 = System.Security.Cryptography.MD5.Create ();  	string hash = md5.ComputeHash (buffer).ToHex ();  	callback.success (serialNo' hash);  	return;  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (collisionResponse.Response == Response.OK) {  	uint serialNo = ReverseBytes (collisionResponse.SerialNo);  	Console.WriteLine ("Card detected' type={0}' serialNo={1}"' requestResponse.MifareType' serialNo);  	SelectResponse selectResponse = sendMifareSelect (collisionResponse.SerialNo);  	if (selectResponse.Response != Response.OK) {  		throw new Exception ("Mifare select error!");  	}  	Console.WriteLine ("Card {0} selected and active"' serialNo);  	//callback.status(BitConverter.GetBytes(collisionResponse.SerialNo).ToHex());  	DateTime before = DateTime.Now;  	Console.WriteLine ();  	callback.status (String.Format ("Reading card {0} with serialno. {1}"' requestResponse.MifareType' serialNo));  	int lastAuthorizedSectorIndex = -1;  	for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  		if (cancellationToken.IsCancellationRequested) {  			// Clean up here' then...  			//cancellationToken.ThrowIfCancellationRequested();  			callback.status ("Reading of card interupted by user!");  			callback.error ();  			return;  		}  		int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  		// If we haven't authorized for this sector before  		if (sectorIndex != lastAuthorizedSectorIndex) {  			lastAuthorizedSectorIndex = sectorIndex;  			//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  			if (callback.getAuthByKeyA ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  			if (callback.getAuthByKeyB ()) {  				MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  				if (auth.Response == Response.ERR_AUTH_FAILURE) {  					var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  					callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  					callback.error ();  					return;  				}  			}  		}  		{  			ReadResponse read = sendRead ((byte)blockIndex);  			// If this block is a sector trailer  			if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  				// If keys are supposed to be included in data  				if (callback.getInclKeys ()) {  					// If authorizing with key A is enabled  					if (callback.getAuthByKeyA ()) {  						Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  					}  					// If authorizing with key B is enabled  					if (callback.getAuthByKeyB ()) {  						Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  					}  				}  			}  			callback.completeBlock (blockIndex' read.Data);  			//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  			Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  		}  	}  	DateTime after = DateTime.Now;  	TimeSpan span = after - before;  	//Console.WriteLine ("Auth took {0} ms"' span.TotalMilliseconds);  	// Done with card' halt session  	if (sendHalt ().Response == Response.OK) {  		// Turn BLUE LED on to signal All OK  		//sendLedRequest (LEDColor.BLUE_ON_RED_OFF);  		sendBeepRequest (BeepType.SHORT_60MS);  		//Thread.Sleep (500);  		// Revert to normal LED state off  		sendLedRequest (LEDColor.ALL_LED_OFF);  		callback.status (String.Format ("Card read in {0}'{1} sec."' span.Seconds' span.Milliseconds));  	}  	else {  		//sendLedRequest(LEDColor.RED_ON_BLUE_OFF);  	}  	MD5 md5 = System.Security.Cryptography.MD5.Create ();  	string hash = md5.ComputeHash (buffer).ToHex ();  	callback.success (serialNo' hash);  	return;  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  	if (cancellationToken.IsCancellationRequested) {  		// Clean up here' then...  		//cancellationToken.ThrowIfCancellationRequested();  		callback.status ("Reading of card interupted by user!");  		callback.error ();  		return;  	}  	int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  	// If we haven't authorized for this sector before  	if (sectorIndex != lastAuthorizedSectorIndex) {  		lastAuthorizedSectorIndex = sectorIndex;  		//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  		if (callback.getAuthByKeyA ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  		if (callback.getAuthByKeyB ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  	}  	{  		ReadResponse read = sendRead ((byte)blockIndex);  		// If this block is a sector trailer  		if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  			// If keys are supposed to be included in data  			if (callback.getInclKeys ()) {  				// If authorizing with key A is enabled  				if (callback.getAuthByKeyA ()) {  					Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  				}  				// If authorizing with key B is enabled  				if (callback.getAuthByKeyB ()) {  					Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  				}  			}  		}  		callback.completeBlock (blockIndex' read.Data);  		//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  		Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  	if (cancellationToken.IsCancellationRequested) {  		// Clean up here' then...  		//cancellationToken.ThrowIfCancellationRequested();  		callback.status ("Reading of card interupted by user!");  		callback.error ();  		return;  	}  	int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  	// If we haven't authorized for this sector before  	if (sectorIndex != lastAuthorizedSectorIndex) {  		lastAuthorizedSectorIndex = sectorIndex;  		//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  		if (callback.getAuthByKeyA ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  		if (callback.getAuthByKeyB ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  	}  	{  		ReadResponse read = sendRead ((byte)blockIndex);  		// If this block is a sector trailer  		if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  			// If keys are supposed to be included in data  			if (callback.getInclKeys ()) {  				// If authorizing with key A is enabled  				if (callback.getAuthByKeyA ()) {  					Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  				}  				// If authorizing with key B is enabled  				if (callback.getAuthByKeyB ()) {  					Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  				}  			}  		}  		callback.completeBlock (blockIndex' read.Data);  		//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  		Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  	if (cancellationToken.IsCancellationRequested) {  		// Clean up here' then...  		//cancellationToken.ThrowIfCancellationRequested();  		callback.status ("Reading of card interupted by user!");  		callback.error ();  		return;  	}  	int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  	// If we haven't authorized for this sector before  	if (sectorIndex != lastAuthorizedSectorIndex) {  		lastAuthorizedSectorIndex = sectorIndex;  		//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  		if (callback.getAuthByKeyA ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  		if (callback.getAuthByKeyB ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  	}  	{  		ReadResponse read = sendRead ((byte)blockIndex);  		// If this block is a sector trailer  		if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  			// If keys are supposed to be included in data  			if (callback.getInclKeys ()) {  				// If authorizing with key A is enabled  				if (callback.getAuthByKeyA ()) {  					Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  				}  				// If authorizing with key B is enabled  				if (callback.getAuthByKeyB ()) {  					Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  				}  			}  		}  		callback.completeBlock (blockIndex' read.Data);  		//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  		Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  	if (cancellationToken.IsCancellationRequested) {  		// Clean up here' then...  		//cancellationToken.ThrowIfCancellationRequested();  		callback.status ("Reading of card interupted by user!");  		callback.error ();  		return;  	}  	int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  	// If we haven't authorized for this sector before  	if (sectorIndex != lastAuthorizedSectorIndex) {  		lastAuthorizedSectorIndex = sectorIndex;  		//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  		if (callback.getAuthByKeyA ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  		if (callback.getAuthByKeyB ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  	}  	{  		ReadResponse read = sendRead ((byte)blockIndex);  		// If this block is a sector trailer  		if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  			// If keys are supposed to be included in data  			if (callback.getInclKeys ()) {  				// If authorizing with key A is enabled  				if (callback.getAuthByKeyA ()) {  					Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  				}  				// If authorizing with key B is enabled  				if (callback.getAuthByKeyB ()) {  					Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  				}  			}  		}  		callback.completeBlock (blockIndex' read.Data);  		//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  		Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: for (int blockIndex = 0; blockIndex < getBlockCount (requestResponse.MifareType); blockIndex++) {  	if (cancellationToken.IsCancellationRequested) {  		// Clean up here' then...  		//cancellationToken.ThrowIfCancellationRequested();  		callback.status ("Reading of card interupted by user!");  		callback.error ();  		return;  	}  	int sectorIndex = getSectorIndexByBlockIndex (blockIndex);  	// If we haven't authorized for this sector before  	if (sectorIndex != lastAuthorizedSectorIndex) {  		lastAuthorizedSectorIndex = sectorIndex;  		//Console.WriteLine("Autorizing sector {0} for block starting at index {1}"' sectorIndex' blockIndex);  		if (callback.getAuthByKeyA ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_A' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with A-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  		if (callback.getAuthByKeyB ()) {  			MifareResponse auth = sendAuth ((byte)blockIndex' AuthMode.KEY_B' getRejsekortKeyByBlock (AuthMode.KEY_B' blockIndex));  			if (auth.Response == Response.ERR_AUTH_FAILURE) {  				var response = sendMifareRequest (MifareRequestCode.IDLE_CARD).Response;  				callback.status (string.Format ("Error while trying to authorize sector {0} with B-key {1}"' getSectorIndexByBlockIndex (blockIndex)' getRejsekortKeyByBlock (AuthMode.KEY_A' blockIndex).ToHex ()));  				callback.error ();  				return;  			}  		}  	}  	{  		ReadResponse read = sendRead ((byte)blockIndex);  		// If this block is a sector trailer  		if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  			// If keys are supposed to be included in data  			if (callback.getInclKeys ()) {  				// If authorizing with key A is enabled  				if (callback.getAuthByKeyA ()) {  					Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  				}  				// If authorizing with key B is enabled  				if (callback.getAuthByKeyB ()) {  					Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  				}  			}  		}  		callback.completeBlock (blockIndex' read.Data);  		//Console.WriteLine("Copying {0} bytes over to index {1}"' 16' (blockIndex*16));  		Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  	// If keys are supposed to be included in data  	if (callback.getInclKeys ()) {  		// If authorizing with key A is enabled  		if (callback.getAuthByKeyA ()) {  			Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  		}  		// If authorizing with key B is enabled  		if (callback.getAuthByKeyB ()) {  			Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  		}  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  	// If keys are supposed to be included in data  	if (callback.getInclKeys ()) {  		// If authorizing with key A is enabled  		if (callback.getAuthByKeyA ()) {  			Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  		}  		// If authorizing with key B is enabled  		if (callback.getAuthByKeyB ()) {  			Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  		}  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (getSectorIndexByBlockIndex (blockIndex + 1) != sectorIndex) {  	// If keys are supposed to be included in data  	if (callback.getInclKeys ()) {  		// If authorizing with key A is enabled  		if (callback.getAuthByKeyA ()) {  			Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  		}  		// If authorizing with key B is enabled  		if (callback.getAuthByKeyB ()) {  			Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  		}  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (callback.getInclKeys ()) {  	// If authorizing with key A is enabled  	if (callback.getAuthByKeyA ()) {  		Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  	}  	// If authorizing with key B is enabled  	if (callback.getAuthByKeyB ()) {  		Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (callback.getInclKeys ()) {  	// If authorizing with key A is enabled  	if (callback.getAuthByKeyA ()) {  		Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  	}  	// If authorizing with key B is enabled  	if (callback.getAuthByKeyB ()) {  		Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (callback.getInclKeys ()) {  	// If authorizing with key A is enabled  	if (callback.getAuthByKeyA ()) {  		Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  	}  	// If authorizing with key B is enabled  	if (callback.getAuthByKeyB ()) {  		Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  	}  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (callback.getAuthByKeyA ()) {  	Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: Buffer.BlockCopy (callback.getKeyABySector (sectorIndex)' 0' read.Data' 0' 6);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (callback.getAuthByKeyB ()) {  	Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: if (callback.getAuthByKeyB ()) {  	Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: Buffer.BlockCopy (callback.getKeyBBySector (sectorIndex)' 0' read.Data' 10' 6);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,StartConversation,The following statement contains a magic number: Buffer.BlockCopy (read.Data' 0' buffer' blockIndex * 16' 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendInitRequest,The following statement contains a magic number: do {  	if (retryCount++ == INIT_REQUEST_RETRY_COUNT) {  		throw new Exception ("Failed at establishting connection!");  	}  	WriteCommand (Command.INIT_PORT' NODE_BROADCAST' (byte)speed);  	Thread.Sleep (50);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendInitRequest,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendReadDeviceMode,The following statement contains a magic number: do {  	Thread.Sleep (50);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendReadDeviceMode,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareRequest,The following statement contains a magic number: do {  	Thread.Sleep (10);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareRequest,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareAnticollisionRequest,The following statement contains a magic number: do {  	Thread.Sleep (50);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareAnticollisionRequest,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendLedRequest,The following statement contains a magic number: do {  	Thread.Sleep (50);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendLedRequest,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendBeepRequest,The following statement contains a magic number: do {  	Thread.Sleep (50);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendBeepRequest,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareSelect,The following statement contains a magic number: do {  	Thread.Sleep (50);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareSelect,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendMifareSelect,The following statement contains a magic number: response.SAKByte = readBuffer [9];  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendHalt,The following statement contains a magic number: do {  	Thread.Sleep (50);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendHalt,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendAuth,The following statement contains a magic number: do {  	Thread.Sleep (10);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendAuth,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendRead,The following statement contains a magic number: do {  	Thread.Sleep (10);  	bytesToRead = port.BytesToRead;  }  while (bytesToRead == 0);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendRead,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendRead,The following statement contains a magic number: response.Data = readBuffer.Subset (9' 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,sendRead,The following statement contains a magic number: response.Data = readBuffer.Subset (9' 16);  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getBlockCount,The following statement contains a magic number: if (mifareType == MifareType.MIFARE_CLASSIC_4K_S70) {  	return 256;  }  else {  	return 64;  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getBlockCount,The following statement contains a magic number: if (mifareType == MifareType.MIFARE_CLASSIC_4K_S70) {  	return 256;  }  else {  	return 64;  }  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getBlockCount,The following statement contains a magic number: return 256;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,getBlockCount,The following statement contains a magic number: return 64;  
Magic Number,BangBits.ER301.Driver,Mifare,C:\repos\casperbang_ER301.NET\Driver\ER301.cs,WriteCommand,The following statement contains a magic number: Write ((ushort)(data.Length + 5));  
Magic Number,BangBits.ER301.Driver,StringUtils,C:\repos\casperbang_ER301.NET\Driver\StringUtils.cs,littleEndianToBigEndian,The following statement contains a magic number: for (int i = 0; i < littleEndian.Length; i += 2) {  	bigEndian [31 - i] = littleEndian [i + 1];  	bigEndian [30 - i] = littleEndian [i];  }  
Magic Number,BangBits.ER301.Driver,StringUtils,C:\repos\casperbang_ER301.NET\Driver\StringUtils.cs,littleEndianToBigEndian,The following statement contains a magic number: for (int i = 0; i < littleEndian.Length; i += 2) {  	bigEndian [31 - i] = littleEndian [i + 1];  	bigEndian [30 - i] = littleEndian [i];  }  
Magic Number,BangBits.ER301.Driver,StringUtils,C:\repos\casperbang_ER301.NET\Driver\StringUtils.cs,littleEndianToBigEndian,The following statement contains a magic number: for (int i = 0; i < littleEndian.Length; i += 2) {  	bigEndian [31 - i] = littleEndian [i + 1];  	bigEndian [30 - i] = littleEndian [i];  }  
Magic Number,BangBits.ER301.Driver,StringUtils,C:\repos\casperbang_ER301.NET\Driver\StringUtils.cs,littleEndianToBigEndian,The following statement contains a magic number: i += 2
Magic Number,BangBits.ER301.Driver,StringUtils,C:\repos\casperbang_ER301.NET\Driver\StringUtils.cs,littleEndianToBigEndian,The following statement contains a magic number: bigEndian [31 - i] = littleEndian [i + 1];  
Magic Number,BangBits.ER301.Driver,StringUtils,C:\repos\casperbang_ER301.NET\Driver\StringUtils.cs,littleEndianToBigEndian,The following statement contains a magic number: bigEndian [30 - i] = littleEndian [i];  
