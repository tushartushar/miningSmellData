Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PdfExporter,PdfExporter,C:\repos\grumpycatsaysno_FormEntiresPDFExport\PdfExporter\PdfExporter.cs,ExportToStream,Cyclomatic complexity of the method is 8
Long Statement,PdfExporter,PdfExporter,C:\repos\grumpycatsaysno_FormEntiresPDFExport\PdfExporter\PdfExporter.cs,AppendDataItemContent,The length of the statement  "			PdfPCell cell = new PdfPCell (new Phrase (dataItemPropertyDescriptor.Name' new Font (Font.FontFamily.HELVETICA' 13' Font.BOLD))); " is 129.
Long Statement,PdfExporter,PdfExporter,C:\repos\grumpycatsaysno_FormEntiresPDFExport\PdfExporter\PdfExporter.cs,GetValueAsString,The length of the statement  "		str = (!converter.CanConvertTo (typeof(string)) ? value.ToString () : (string)converter.ConvertTo (value' typeof(string))); " is 123.
Long Statement,PdfExporter,PdfExporter,C:\repos\grumpycatsaysno_FormEntiresPDFExport\PdfExporter\PdfExporter.cs,CheckContextVariables,The length of the statement  "	this.overrideItemsType = string.IsNullOrEmpty (SystemManager.CurrentHttpContext.Items ["ExportingItemsTypeName"] as string); " is 124.
Magic Number,PdfExporter,PdfExporter,C:\repos\grumpycatsaysno_FormEntiresPDFExport\PdfExporter\PdfExporter.cs,ExportToStream,The following statement contains a magic number: using (Document pdfDocument = new Document (PageSize.A4.Rotate ()' 0' 0' 15' 5)) {  	//// Gets the instance of the document created and writes it to the output stream of the Response object.  	PdfWriter.GetInstance (pdfDocument' streamToExportTo);  	pdfDocument.Open ();  	pdfDocument.AddTitle ("Form entries");  	PropertyDescriptorCollection itemProperties = null;  	IEnumerator<IDataItem> enumerator = itemsToExport.GetEnumerator ();  	if (!enumerator.MoveNext ()) {  		throw new ArgumentException ("Can't export empty collection");  	}  	IDataItem current = enumerator.Current;  	itemProperties = this.GetItemProperties (current);  	int count = 1;  	this.AppendDataItemContent (pdfDocument' current' itemProperties' count);  	while (enumerator.MoveNext ()) {  		count++;  		pdfDocument.NewPage ();  		this.AppendDataItemContent (pdfDocument' enumerator.Current' itemProperties' count);  	}  	pdfDocument.Close ();  }  
Magic Number,PdfExporter,PdfExporter,C:\repos\grumpycatsaysno_FormEntiresPDFExport\PdfExporter\PdfExporter.cs,ExportToStream,The following statement contains a magic number: using (Document pdfDocument = new Document (PageSize.A4.Rotate ()' 0' 0' 15' 5)) {  	//// Gets the instance of the document created and writes it to the output stream of the Response object.  	PdfWriter.GetInstance (pdfDocument' streamToExportTo);  	pdfDocument.Open ();  	pdfDocument.AddTitle ("Form entries");  	PropertyDescriptorCollection itemProperties = null;  	IEnumerator<IDataItem> enumerator = itemsToExport.GetEnumerator ();  	if (!enumerator.MoveNext ()) {  		throw new ArgumentException ("Can't export empty collection");  	}  	IDataItem current = enumerator.Current;  	itemProperties = this.GetItemProperties (current);  	int count = 1;  	this.AppendDataItemContent (pdfDocument' current' itemProperties' count);  	while (enumerator.MoveNext ()) {  		count++;  		pdfDocument.NewPage ();  		this.AppendDataItemContent (pdfDocument' enumerator.Current' itemProperties' count);  	}  	pdfDocument.Close ();  }  
Magic Number,PdfExporter,PdfExporter,C:\repos\grumpycatsaysno_FormEntiresPDFExport\PdfExporter\PdfExporter.cs,AppendDataItemContent,The following statement contains a magic number: foreach (PropertyDescriptor dataItemPropertyDescriptor in dataItemPropertyDescriptors) {  	object value = dataItemPropertyDescriptor.GetValue (dataItem);  	if (value != null) {  		PdfPCell cell = new PdfPCell (new Phrase (dataItemPropertyDescriptor.Name' new Font (Font.FontFamily.HELVETICA' 13' Font.BOLD)));  		table.AddCell (cell);  		table.AddCell (this.GetValueAsString (value));  	}  }  
Magic Number,PdfExporter,PdfExporter,C:\repos\grumpycatsaysno_FormEntiresPDFExport\PdfExporter\PdfExporter.cs,AppendDataItemContent,The following statement contains a magic number: if (value != null) {  	PdfPCell cell = new PdfPCell (new Phrase (dataItemPropertyDescriptor.Name' new Font (Font.FontFamily.HELVETICA' 13' Font.BOLD)));  	table.AddCell (cell);  	table.AddCell (this.GetValueAsString (value));  }  
