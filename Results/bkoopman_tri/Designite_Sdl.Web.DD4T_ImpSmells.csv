Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sdl.Web.DD4T.Mapping,DD4TContentResolver,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TContentResolver.cs,ResolveMvcData,Cyclomatic complexity of the method is 13
Complex Method,Sdl.Web.DD4T.Mapping,DD4TContentResolver,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TContentResolver.cs,ResolveRichText,Cyclomatic complexity of the method is 9
Complex Method,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,CreateModelFromMapData,Cyclomatic complexity of the method is 10
Complex Method,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetMultiMediaLinks,Cyclomatic complexity of the method is 8
Complex Method,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetMultiKeywords,Cyclomatic complexity of the method is 8
Complex Method,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetMultiComponentLinks,Cyclomatic complexity of the method is 8
Complex Method,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetAllFieldsAsDictionary,Cyclomatic complexity of the method is 10
Complex Method,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,CreatePage,Cyclomatic complexity of the method is 8
Complex Method,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,ProcessPageMetadata,Cyclomatic complexity of the method is 16
Complex Method,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ProcessUrl,Cyclomatic complexity of the method is 13
Long Statement,Sdl.Web.DD4T.Html,DD4TRenderer,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Html\DD4TRenderer.cs,RenderRegion,The length of the statement  "                MvcHtmlString result = helper.Action(mvcData.ActionName' mvcData.ControllerName' new { Region = region' containerSize = containerSize' area = mvcData.ControllerAreaName }); " is 172.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TContentResolver,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TContentResolver.cs,ResolveRichText,The length of the statement  "            foreach (XmlNode link in doc.SelectNodes("//a[@xlink:href[starts-with(string(.)''tcm:')]][@href='' or not(@href)]"' nsmgr)) " is 123.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,CreateEntity,The length of the statement  "                MappingData mapData = new MappingData {SemanticSchema = SemanticMapping.GetSchema(schemaId.ToString(CultureInfo.InvariantCulture))}; " is 132.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetFieldFromSemantics,The length of the statement  "                            return ExtractMatchedField(matchingField' (matchingField.IsMetadata && mapData.Meta!=null) ? mapData.Meta : mapData.Content' mapData.EmbedLevel); " is 145.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetMultiKeywords,The length of the statement  "                List<Tag> res = items.Select(k => new Tag {DisplayText=GetKeywordDisplayText(k)'Key=GetKeywordKey(k)'TagCategory=k.TaxonomyId}).ToList(); " is 137.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetMultiComponentLinks,The length of the statement  "            MethodInfo method = GetType().GetMethod("GetCompLink" + (multival ? "s" : String.Empty)' BindingFlags.NonPublic | BindingFlags.Instance); " is 137.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetImages,The length of the statement  "            return components.Select(c => new Image { Url = c.Multimedia.Url' FileName = c.Multimedia.FileName' FileSize = c.Multimedia.Size' MimeType = c.Multimedia.MimeType}).ToList(); " is 174.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetYouTubeVideos,The length of the statement  "            return components.Select(c => new YouTubeVideo { Url = c.Multimedia.Url' FileSize = c.Multimedia.Size' MimeType = c.Multimedia.MimeType' YouTubeId = c.MetadataFields["youTubeId"].Value }).ToList(); " is 197.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,GetDownloads,The length of the statement  "            return components.Select(c => new Download { Url = c.Multimedia.Url' FileName = c.Multimedia.FileName' FileSize = c.Multimedia.Size' MimeType = c.Multimedia.MimeType' Description = (c.MetadataFields.ContainsKey("description") ? c.MetadataFields["description"].Value : null) }).ToList(); " is 286.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,CreatePage,The length of the statement  "            throw new Exception(String.Format("Cannot create model for class {0}. Expecting IPage."' sourceEntity.GetType().FullName)); " is 123.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,ProcessPageMetadata,The length of the statement  "            //If we don't have a title or description - go hunting for a title and/or description from the first component in the main region on the page " is 141.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,ProcessPageMetadata,The length of the statement  "                        if (metadata.ContainsKey(TridionConfig.StandardMetadataXmlFieldName) && metadata[TridionConfig.StandardMetadataXmlFieldName].EmbeddedValues.Count > 0) " is 150.
Long Statement,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,ProcessPageMetadata,The length of the statement  "            string titlePostfix = String.Format(" {0} {1}"' GetResource("core.pageTitleSeparator")' GetResource("core.pageTitlePostfix")); " is 126.
Long Statement,Sdl.Web.DD4T.Statics,BinaryDistributionModule,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryDistributionModule.cs,DistributionModule_OnPreRequestHandlerExecute,The length of the statement  "            urlPath = urlPath.StartsWith("/" + SiteConfiguration.StaticsFolder) ? urlPath.Substring(SiteConfiguration.StaticsFolder.Length + 1) : urlPath; " is 142.
Long Statement,Sdl.Web.DD4T.Statics,BinaryDistributionModule,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryDistributionModule.cs,DistributionModule_OnBeginRequest,The length of the statement  "            string realPath = Path.Combine(new[] { request.PhysicalApplicationPath' SiteConfiguration.StaticsFolder' request.Path.ToCombinePath() }); // request.PhysicalPath; " is 162.
Long Statement,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ProcessUrl,The length of the statement  "            // the normal situation (where a binary is still in Tridion and it is present on the file system already and it is up to date) is now covered " is 141.
Long Statement,Sdl.Web.DD4T.Utils,ObjectExtension,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Utils\ObjectExtension.cs,IfNotNull,The length of the statement  "            // TODO possible compare of value type with null (http://confluence.jetbrains.com/display/ReSharper/Possible+compare+of+value+type+with+null) " is 141.
Empty Catch Block,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ProcessUrl,The method has an empty catch block.
Magic Number,Sdl.Web.DD4T.Mapping,DD4TModelBuilder,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Mapping\DD4TModelBuilder.cs,CreatePage,The following statement contains a magic number: if (page != null)              {                  PageBase model = new PageBase();                  bool isInclude = true;                  if (type == typeof(WebPage))                  {                      model = new WebPage();                      isInclude = false;                  }                  //default title - will be overridden later if appropriate                  model.Title = page.Title;                  model.Id = page.Id.Substring(4);                  foreach (var cp in page.ComponentPresentations)                  {                      var region = GetRegionFromComponentPresentation(cp);                      if (!model.Regions.ContainsKey(region.Name))                      {                          model.Regions.Add(region.Name' region);                      }                      model.Regions[region.Name].Items.Add(cp);                  }                  if (!isInclude)                  {                      var webpageModel = (WebPage)model;                      foreach (var include in includes)                      {                          var includePage = (PageBase)Create(include' typeof(PageBase));                          if (includePage != null)                          {                              webpageModel.Includes.Add(includePage.Title' includePage);                          }                      }                      webpageModel.PageData = GetPageData(page);                      webpageModel.Title = ProcessPageMetadata(page' webpageModel.Meta);                      model = webpageModel;                  }                  return model;              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryDistributionModule,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryDistributionModule.cs,DistributionModule_OnPreRequestHandlerExecute,The following statement contains a magic number: if (! BinaryFileManager.ProcessRequest(request))              {                  Log.Debug("Url {0} not found. Returning 404 Not Found."' urlPath);                  response.StatusCode = 404;                  response.SuppressContent = true;                  application.CompleteRequest();                  return;              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryDistributionModule,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryDistributionModule.cs,DistributionModule_OnPreRequestHandlerExecute,The following statement contains a magic number: if (fileLastModified.Subtract(ifModifiedSince).TotalSeconds < 1)              {                  Log.Debug("Sending 304 Not Modified.");                  response.StatusCode = 304;                  response.SuppressContent = true;                  application.CompleteRequest();                  return;              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ResizeImageFile,The following statement contains a magic number: if (dimensions.Width > 0 && dimensions.Height > 0)              {                  if (dimensions.NoStretch)                  {                      //If we don't want to stretch' then we crop                      float originalAspect = (float)original.Width / (float)original.Height;                      float targetAspect = (float)dimensions.Width / (float)dimensions.Height;                      if (targetAspect < originalAspect)                      {                          //Crop the width - ensuring that we do not stretch if the requested height is bigger than the original                          targetH = dimensions.Height > original.Height ? original.Height : dimensions.Height;                          targetW = (int)Math.Ceiling(targetH * targetAspect);                          cropX = (int)Math.Ceiling((original.Width - (original.Height * targetAspect)) / 2);                          sourceW = sourceW - 2 * cropX;                      }                      else                      {                          //Crop the height - ensuring that we do not stretch if the requested width is bigger than the original                          targetW = dimensions.Width > original.Width ? original.Width : dimensions.Width;                          targetH = (int)Math.Ceiling(targetW / targetAspect);                          cropY = (int)Math.Ceiling((original.Height - (original.Width / targetAspect)) / 2);                          sourceH = sourceH - 2 * cropY;                      }                  }                  else                  {                      //We stretch to fit the dimensions                      targetH = dimensions.Height;                      targetW = dimensions.Width;                  }              }              //If we simply have a certain width or height' its simple: We just use that and derive the other              //dimension from the original image aspect ratio. We also check if the target size is bigger than              //the original' and if we allow stretching.              else if (dimensions.Width > 0)              {                  targetW = (dimensions.NoStretch && dimensions.Width > original.Width) ? original.Width : dimensions.Width;                  targetH = (int)(original.Height * ((float)targetW / (float)original.Width));              }              else              {                  targetH = (dimensions.NoStretch && dimensions.Height > original.Height) ? original.Height : dimensions.Height;                  targetW = (int)(original.Width * ((float)targetH / (float)original.Height));              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ResizeImageFile,The following statement contains a magic number: if (dimensions.Width > 0 && dimensions.Height > 0)              {                  if (dimensions.NoStretch)                  {                      //If we don't want to stretch' then we crop                      float originalAspect = (float)original.Width / (float)original.Height;                      float targetAspect = (float)dimensions.Width / (float)dimensions.Height;                      if (targetAspect < originalAspect)                      {                          //Crop the width - ensuring that we do not stretch if the requested height is bigger than the original                          targetH = dimensions.Height > original.Height ? original.Height : dimensions.Height;                          targetW = (int)Math.Ceiling(targetH * targetAspect);                          cropX = (int)Math.Ceiling((original.Width - (original.Height * targetAspect)) / 2);                          sourceW = sourceW - 2 * cropX;                      }                      else                      {                          //Crop the height - ensuring that we do not stretch if the requested width is bigger than the original                          targetW = dimensions.Width > original.Width ? original.Width : dimensions.Width;                          targetH = (int)Math.Ceiling(targetW / targetAspect);                          cropY = (int)Math.Ceiling((original.Height - (original.Width / targetAspect)) / 2);                          sourceH = sourceH - 2 * cropY;                      }                  }                  else                  {                      //We stretch to fit the dimensions                      targetH = dimensions.Height;                      targetW = dimensions.Width;                  }              }              //If we simply have a certain width or height' its simple: We just use that and derive the other              //dimension from the original image aspect ratio. We also check if the target size is bigger than              //the original' and if we allow stretching.              else if (dimensions.Width > 0)              {                  targetW = (dimensions.NoStretch && dimensions.Width > original.Width) ? original.Width : dimensions.Width;                  targetH = (int)(original.Height * ((float)targetW / (float)original.Width));              }              else              {                  targetH = (dimensions.NoStretch && dimensions.Height > original.Height) ? original.Height : dimensions.Height;                  targetW = (int)(original.Width * ((float)targetH / (float)original.Height));              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ResizeImageFile,The following statement contains a magic number: if (dimensions.Width > 0 && dimensions.Height > 0)              {                  if (dimensions.NoStretch)                  {                      //If we don't want to stretch' then we crop                      float originalAspect = (float)original.Width / (float)original.Height;                      float targetAspect = (float)dimensions.Width / (float)dimensions.Height;                      if (targetAspect < originalAspect)                      {                          //Crop the width - ensuring that we do not stretch if the requested height is bigger than the original                          targetH = dimensions.Height > original.Height ? original.Height : dimensions.Height;                          targetW = (int)Math.Ceiling(targetH * targetAspect);                          cropX = (int)Math.Ceiling((original.Width - (original.Height * targetAspect)) / 2);                          sourceW = sourceW - 2 * cropX;                      }                      else                      {                          //Crop the height - ensuring that we do not stretch if the requested width is bigger than the original                          targetW = dimensions.Width > original.Width ? original.Width : dimensions.Width;                          targetH = (int)Math.Ceiling(targetW / targetAspect);                          cropY = (int)Math.Ceiling((original.Height - (original.Width / targetAspect)) / 2);                          sourceH = sourceH - 2 * cropY;                      }                  }                  else                  {                      //We stretch to fit the dimensions                      targetH = dimensions.Height;                      targetW = dimensions.Width;                  }              }              //If we simply have a certain width or height' its simple: We just use that and derive the other              //dimension from the original image aspect ratio. We also check if the target size is bigger than              //the original' and if we allow stretching.              else if (dimensions.Width > 0)              {                  targetW = (dimensions.NoStretch && dimensions.Width > original.Width) ? original.Width : dimensions.Width;                  targetH = (int)(original.Height * ((float)targetW / (float)original.Width));              }              else              {                  targetH = (dimensions.NoStretch && dimensions.Height > original.Height) ? original.Height : dimensions.Height;                  targetW = (int)(original.Width * ((float)targetH / (float)original.Height));              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ResizeImageFile,The following statement contains a magic number: if (dimensions.Width > 0 && dimensions.Height > 0)              {                  if (dimensions.NoStretch)                  {                      //If we don't want to stretch' then we crop                      float originalAspect = (float)original.Width / (float)original.Height;                      float targetAspect = (float)dimensions.Width / (float)dimensions.Height;                      if (targetAspect < originalAspect)                      {                          //Crop the width - ensuring that we do not stretch if the requested height is bigger than the original                          targetH = dimensions.Height > original.Height ? original.Height : dimensions.Height;                          targetW = (int)Math.Ceiling(targetH * targetAspect);                          cropX = (int)Math.Ceiling((original.Width - (original.Height * targetAspect)) / 2);                          sourceW = sourceW - 2 * cropX;                      }                      else                      {                          //Crop the height - ensuring that we do not stretch if the requested width is bigger than the original                          targetW = dimensions.Width > original.Width ? original.Width : dimensions.Width;                          targetH = (int)Math.Ceiling(targetW / targetAspect);                          cropY = (int)Math.Ceiling((original.Height - (original.Width / targetAspect)) / 2);                          sourceH = sourceH - 2 * cropY;                      }                  }                  else                  {                      //We stretch to fit the dimensions                      targetH = dimensions.Height;                      targetW = dimensions.Width;                  }              }              //If we simply have a certain width or height' its simple: We just use that and derive the other              //dimension from the original image aspect ratio. We also check if the target size is bigger than              //the original' and if we allow stretching.              else if (dimensions.Width > 0)              {                  targetW = (dimensions.NoStretch && dimensions.Width > original.Width) ? original.Width : dimensions.Width;                  targetH = (int)(original.Height * ((float)targetW / (float)original.Width));              }              else              {                  targetH = (dimensions.NoStretch && dimensions.Height > original.Height) ? original.Height : dimensions.Height;                  targetW = (int)(original.Width * ((float)targetH / (float)original.Height));              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ResizeImageFile,The following statement contains a magic number: bmPhoto.SetResolution(72' 72);
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,ResizeImageFile,The following statement contains a magic number: bmPhoto.SetResolution(72' 72);
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,StripDimensions,The following statement contains a magic number: if (re.IsMatch(path))              {                  var match = re.Match(path);                  var dim = match.Groups[2].ToString();                  if (!String.IsNullOrEmpty(dim))                  {                      dimensions.Width = Convert.ToInt32(dim);                  }                  dim = match.Groups[4].ToString();                  if (!String.IsNullOrEmpty(dim))                  {                      dimensions.Height = Convert.ToInt32(dim);                  }                  if(!String.IsNullOrEmpty(match.Groups[5].ToString()))                  {                      dimensions.NoStretch = true;                  }                  return re.Replace(path' ".");              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,StripDimensions,The following statement contains a magic number: if (re.IsMatch(path))              {                  var match = re.Match(path);                  var dim = match.Groups[2].ToString();                  if (!String.IsNullOrEmpty(dim))                  {                      dimensions.Width = Convert.ToInt32(dim);                  }                  dim = match.Groups[4].ToString();                  if (!String.IsNullOrEmpty(dim))                  {                      dimensions.Height = Convert.ToInt32(dim);                  }                  if(!String.IsNullOrEmpty(match.Groups[5].ToString()))                  {                      dimensions.NoStretch = true;                  }                  return re.Replace(path' ".");              }
Magic Number,Sdl.Web.DD4T.Statics,BinaryFileManager,C:\repos\bkoopman_tri\web-application\Sdl.Web.DD4T\Statics\BinaryFileManager.cs,StripDimensions,The following statement contains a magic number: if (re.IsMatch(path))              {                  var match = re.Match(path);                  var dim = match.Groups[2].ToString();                  if (!String.IsNullOrEmpty(dim))                  {                      dimensions.Width = Convert.ToInt32(dim);                  }                  dim = match.Groups[4].ToString();                  if (!String.IsNullOrEmpty(dim))                  {                      dimensions.Height = Convert.ToInt32(dim);                  }                  if(!String.IsNullOrEmpty(match.Groups[5].ToString()))                  {                      dimensions.NoStretch = true;                  }                  return re.Replace(path' ".");              }
