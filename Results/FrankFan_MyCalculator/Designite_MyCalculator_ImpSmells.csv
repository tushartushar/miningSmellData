Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MyCalculator,MainForm,C:\repos\FrankFan_MyCalculator\MyCalculator\MainForm.cs,DisplayOperator,Cyclomatic complexity of the method is 24
Complex Method,MyCalculator,MainForm,C:\repos\FrankFan_MyCalculator\MyCalculator\MainForm.cs,Evaluate,Cyclomatic complexity of the method is 24
Complex Method,MyCalculator,OperationFactory,C:\repos\FrankFan_MyCalculator\MyCalculator\OperationFactory.cs,createOpeate,Cyclomatic complexity of the method is 14
Magic Number,MyCalculator,SystemInfo,C:\repos\FrankFan_MyCalculator\MyCalculator\SystemInfo.cs,GetSystemInfo,The following statement contains a magic number: for (int i = 0; i < 30; i++) {  	result += arrSysteminfo [i] + "\r\n";  }  
Missing Default,MyCalculator,MainForm,C:\repos\FrankFan_MyCalculator\MyCalculator\MainForm.cs,Evaluate,The following switch statement is missing a default case: switch (currentOperator) {  case EnumOperator.None:  	break;  case EnumOperator.Add:  	oper = OperationFactory.createOpeate (EnumOperator.Add);  	oper.NumberA = numSum;  	oper.NumnberB = currentValue;  	numSum = oper.GetResult ();  	break;  case EnumOperator.Minus:  	oper = OperationFactory.createOpeate (EnumOperator.Minus);  	oper.NumberA = numSum;  	oper.NumnberB = currentValue;  	numSum = oper.GetResult ();  	break;  case EnumOperator.Multiply:  	oper = OperationFactory.createOpeate (EnumOperator.Multiply);  	oper.NumberA = numSum;  	oper.NumnberB = currentValue;  	numSum = oper.GetResult ();  	break;  case EnumOperator.Divide:  	if (currentValue != 0) {  		oper = OperationFactory.createOpeate (EnumOperator.Divide);  		oper.NumberA = numSum;  		oper.NumnberB = currentValue;  		numSum = oper.GetResult ();  	}  	else {  		MessageBox.Show ("除数不能为0哦，亲~"' "出错了~");  	}  	break;  }  
