Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MoonSharp.RemoteDebugger,DebugServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\DebugServer.cs,GetAction,Cyclomatic complexity of the method is 8
Long Parameter List,MoonSharp.RemoteDebugger,DebugServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\DebugServer.cs,DebugServer,The method has 5 parameters. Parameters: appName' script' port' options' freeRunAfterAttach
Long Parameter List,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,SendHttp,The method has 5 parameters. Parameters: peer' responseCode' contentType' data' extraHeaders
Long Parameter List,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,SendHttp,The method has 5 parameters. Parameters: peer' responseCode' contentType' data' extraHeaders
Long Statement,MoonSharp.RemoteDebugger,DebugServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\DebugServer.cs,m_Server_DataReceived,The length of the statement  "							m_WatchesChanging.UnionWith(arg.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries).Select(s => s.Trim())); " is 120.
Long Statement,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,ExecHttpRequest,The length of the statement  "						SendHttp(peer' "401 Not Authorized"' "text/html"' ERROR_401' "WWW-Authenticate: Basic realm=\"moonsharp-remote-debugger\""); " is 124.
Long Statement,MoonSharp.RemoteDebugger.Network,Utf8TcpPeer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\Utf8TcpPeer.cs,OnDataReceived,The length of the statement  "					m_Socket.BeginReceive(m_RecvBuffer' m_PrevSize' m_RecvBuffer.Length - m_PrevSize' SocketFlags.None' OnDataReceived' null); " is 122.
Empty Catch Block,MoonSharp.RemoteDebugger.Network,Utf8TcpPeer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\Utf8TcpPeer.cs,CloseConnection,The method has an empty catch block.
Empty Catch Block,MoonSharp.RemoteDebugger.Network,Utf8TcpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\Utf8TcpServer.cs,OnPeerDisconnected,The method has an empty catch block.
Empty Catch Block,MoonSharp.RemoteDebugger.Network,Utf8TcpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\Utf8TcpServer.cs,BroadcastMessage,The method has an empty catch block.
Magic Number,MoonSharp.RemoteDebugger,DebugServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\DebugServer.cs,DebugServer,The following statement contains a magic number: m_Server = new Utf8TcpServer(port' 1 << 20' '\0'' options);
Magic Number,MoonSharp.RemoteDebugger,DebugServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\DebugServer.cs,GetAction,The following statement contains a magic number: try  			{  				if (m_FreeRunAfterAttach)  				{  					m_FreeRunAfterAttach = false;  					return new DebuggerAction() { Action = DebuggerAction.ActionType.Run };  				}    				m_InGetActionLoop = true;  				m_RequestPause = false;    				if (m_HostBusySent)  				{  					m_HostBusySent = false;  					SendMessage("Host ready!");  				}    				if (sourceref != m_LastSentSourceRef)  				{  					Send(xw =>  						{  							SendSourceRef(xw' sourceref);  						});  				}    				while (true)  				{  					DebuggerAction da = m_QueuedActions.Dequeue();    					if (da.Action == DebuggerAction.ActionType.Refresh || da.Action == DebuggerAction.ActionType.HardRefresh)  					{  						lock (m_Lock)  						{  							HashSet<string> existing = new HashSet<string>();    							// remove all not present anymore  							m_Watches.RemoveAll(de => !m_WatchesChanging.Contains(de.ExpressionCode));    							// add all missing  							existing.UnionWith(m_Watches.Select(de => de.ExpressionCode));    							m_Watches.AddRange(m_WatchesChanging  								.Where(code => !existing.Contains(code))  								.Select(code => CreateDynExpr(code)));  						}    						return da;  					}    					if (da.Action == DebuggerAction.ActionType.ToggleBreakpoint || da.Action == DebuggerAction.ActionType.SetBreakpoint  						|| da.Action == DebuggerAction.ActionType.ClearBreakpoint)  						return da;    					if (da.Age < TimeSpan.FromMilliseconds(100))  						return da;  				}  			}  			finally  			{  				m_InGetActionLoop = false;  			}
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,HttpServer,The following statement contains a magic number: m_Server = new Utf8TcpServer(port' 100 << 10' '\n'' options);
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,HttpServer,The following statement contains a magic number: m_Server = new Utf8TcpServer(port' 100 << 10' '\n'' options);
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,ParseAuthenticationString,The following statement contains a magic number: if (parts.Length < 3)  				return;
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,ParseAuthenticationString,The following statement contains a magic number: byte[] credentialBytes = Convert.FromBase64String(parts[2]);
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,ParseAuthenticationString,The following statement contains a magic number: string[] credentials = credentialString.Split(new char[] { ':' }' 2);
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,ParseAuthenticationString,The following statement contains a magic number: if (credentials.Length != 2)  				return;
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,GetResourceFromPath,The following statement contains a magic number: if (parts.Length < 2)  				return null;
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,GetResourceFromPath,The following statement contains a magic number: if (!uri.Contains('?'))  			{  				return GetResourceFromUri(uri' null);  			}  			else  			{  				string[] macroparts = uri.Split(new char[] { '?' }' 2);  				uri = macroparts[0];  				string[] tuples = macroparts[1].Split(new char[] { '&' }' StringSplitOptions.RemoveEmptyEntries);    				Dictionary<string' string> args = new Dictionary<string' string>();  				foreach (string t in tuples)  				{  					ParseArgument(t' args);  				}    				return GetResourceFromUri(uri' args);  			}
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,ParseArgument,The following statement contains a magic number: string[] parts = t.Split(new char[] { '=' }' 2);
Magic Number,MoonSharp.RemoteDebugger.Network,HttpServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\Network\HttpServer.cs,ParseArgument,The following statement contains a magic number: if (parts.Length == 2)  				args.Add(parts[0]' parts[1]);  			else  				args.Add(t' null);
Missing Default,MoonSharp.RemoteDebugger,DebugServer,C:\repos\xanathar_moonsharp\src\MoonSharp.RemoteDebugger\DebugServer.cs,m_Server_DataReceived,The following switch statement is missing a default case: switch (cmd)  				{  					case "handshake":  						SendWelcome();    						for (int i = 0; i < m_Script.SourceCodeCount; i++)  							SetSourceCode(m_Script.GetSourceCode(i));  						break;  					case "stepin":  						QueueAction(new DebuggerAction() { Action = DebuggerAction.ActionType.StepIn });  						break;  					case "refresh":  						lock (m_Lock)  						{  							for (int i = 0; i < (int)WatchType.MaxValue; i++)  								m_CachedWatches[i] = null;  						}  						QueueRefresh();  						break;  					case "run":  						QueueAction(new DebuggerAction() { Action = DebuggerAction.ActionType.Run });  						break;  					case "stepover":  						QueueAction(new DebuggerAction() { Action = DebuggerAction.ActionType.StepOver });  						break;  					case "stepout":  						QueueAction(new DebuggerAction() { Action = DebuggerAction.ActionType.StepOut });  						break;  					case "pause":  						m_RequestPause = true;  						break;  					case "error_rx":  						m_ErrorRegEx = new Regex(arg.Trim());  						SendOption("error_rx"' m_ErrorRegEx.ToString());  						break;  					case "addwatch":  						lock (m_Lock)  							m_WatchesChanging.UnionWith(arg.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries).Select(s => s.Trim()));    						QueueRefresh();  						break;  					case "delwatch":  						lock (m_Lock)  						{  							var args = arg.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries);    							foreach (var a in args)  								m_WatchesChanging.Remove(a);  						}  						QueueRefresh();  						break;  					case "breakpoint":  						DebuggerAction.ActionType action = DebuggerAction.ActionType.ToggleBreakpoint;    						if (arg == "set") action = DebuggerAction.ActionType.SetBreakpoint;  						else if (arg == "clear") action = DebuggerAction.ActionType.ClearBreakpoint;    						QueueAction(new DebuggerAction()  						{  							Action = action'  							SourceID = int.Parse(xdoc.DocumentElement.GetAttribute("src"))'  							SourceLine = int.Parse(xdoc.DocumentElement.GetAttribute("line"))'  							SourceCol = int.Parse(xdoc.DocumentElement.GetAttribute("col"))'  						});  						break;  				}
