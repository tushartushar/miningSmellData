Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MoonSharp.VsCodeDebugger.SDK,Message,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,Message,The method has 5 parameters. Parameters: id' format' variables' user' telemetry
Long Parameter List,MoonSharp.VsCodeDebugger.SDK,StackFrame,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,StackFrame,The method has 7 parameters. Parameters: id' name' source' line' column' endLine' endColumn
Long Parameter List,MoonSharp.VsCodeDebugger.SDK,DebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,SendErrorResponse,The method has 6 parameters. Parameters: response' id' format' arguments' user' telemetry
Long Identifier,MoonSharp.VsCodeDebugger.SDK,Capabilities,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,,The length of the parameter supportsConfigurationDoneRequest is 32.
Long Identifier,MoonSharp.VsCodeDebugger.SDK,Capabilities,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,,The length of the parameter supportsConditionalBreakpoints is 30.
Long Statement,MoonSharp.VsCodeDebugger.SDK,DebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,DispatchRequest,The length of the statement  "				SendErrorResponse(response' 1104' "error while processing request '{_request}' (exception: {_exception})"' new { _request = command' _exception = e.Message }); " is 159.
Empty Catch Block,MoonSharp.VsCodeDebugger.SDK,ProtocolServer,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\Protocol.cs,Dispatch,The method has an empty catch block.
Empty Catch Block,MoonSharp.VsCodeDebugger.SDK,ProtocolServer,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\Protocol.cs,SendMessage,The method has an empty catch block.
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,AsyncDebugger,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\AsyncDebugger.cs,AsyncDebugger,The following statement contains a magic number: for (int i = 0; i < m_WatchItems.Length; i++)  				m_WatchItems[i] = new List<WatchItem>(64);
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,AsyncDebugger,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\AsyncDebugger.cs,GetAction,The following statement contains a magic number: while (true)  			{  				lock (m_Lock)  				{  					if (Client == null)  					{  						return new DebuggerAction() { Action = DebuggerAction.ActionType.Run };  					}    					if (m_PendingAction != null)  					{  						var action = m_PendingAction;  						m_PendingAction = null;  						return action;  					}  				}    				Sleep(10);  			}
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,AsyncDebugger,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\AsyncDebugger.cs,QueueAction,The following statement contains a magic number: while (true)  			{  				lock (m_Lock)  					if (m_PendingAction == null)  					{  						m_PendingAction = action;  						break;  					}    				Sleep(10);  			}
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,AsyncDebugger,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\AsyncDebugger.cs,Sleep,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,EmptyDebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\EmptyDebugSession.cs,SendList,The following statement contains a magic number: int currId = m_Server.CurrentId ?? -1000;
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,EmptyDebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\EmptyDebugSession.cs,SendList,The following statement contains a magic number: foreach (var pair in m_Server.GetAttachedDebuggersByIdAndName())  			{  				string isdef = (pair.Key == currId) ? " (default)" : "";  				SendText("{0} : {1}{2}"' pair.Key.ToString().PadLeft(9)' pair.Value' isdef);  			}
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,MoonSharpDebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\MoonSharpDebugSession.cs,ExecuteRepl,The following statement contains a magic number: if (cmd == "help")  			{  				showHelp = true;  			}  			else if (cmd.StartsWith("geterror"))  			{  				SendText("Current error regex : {0}"' m_Debug.ErrorRegex.ToString());  			}  			else if (cmd.StartsWith("seterror"))  			{  				string regex = cmd.Substring("seterror".Length).Trim();    				try  				{  					Regex rx = new Regex(regex);  					m_Debug.ErrorRegex = rx;  					SendText("Current error regex : {0}"' m_Debug.ErrorRegex.ToString());  				}  				catch (Exception ex)  				{  					SendText("Error setting regex: {0}"' ex.Message);  				}  			}  			else if (cmd.StartsWith("execendnotify"))  			{  				string val = cmd.Substring("execendnotify".Length).Trim();    				if (val == "off")  				{  					m_NotifyExecutionEnd = false;  				}  				else if (val == "on")  				{  					m_NotifyExecutionEnd = true;  				}  				else if (val.Length > 0)  					SendText("Error : expected 'on' or 'off'");    				SendText("Notifications of execution end are : {0}"' m_NotifyExecutionEnd ? "enabled" : "disabled");  			}  			else if (cmd == "list")  			{  				int currId = m_Server.CurrentId ?? -1000;    				foreach (var pair in m_Server.GetAttachedDebuggersByIdAndName())  				{  					string isthis = (pair.Key == m_Debug.Id) ? " (this)" : "";  					string isdef = (pair.Key == currId) ? " (default)" : "";    					SendText("{0} : {1}{2}{3}"' pair.Key.ToString().PadLeft(9)' pair.Value' isdef' isthis);  				}  			}  			else if (cmd.StartsWith("select") || cmd.StartsWith("switch"))  			{  				string arg = cmd.Substring("switch".Length).Trim();    				try  				{  					int id = int.Parse(arg);  					m_Server.CurrentId = id;    					if (cmd.StartsWith("switch"))  						Unbind();  					else  						SendText("Next time you'll attach the debugger' it will be atteched to script #{0}"' id);  				}  				catch (Exception ex)  				{  					SendText("Error setting regex: {0}"' ex.Message);  				}  			}  			else  			{  				SendText("Syntax error : {0}\n"' cmd);  				showHelp = true;  			}
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,MoonSharpDebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\MoonSharpDebugSession.cs,ExecuteRepl,The following statement contains a magic number: if (cmd == "help")  			{  				showHelp = true;  			}  			else if (cmd.StartsWith("geterror"))  			{  				SendText("Current error regex : {0}"' m_Debug.ErrorRegex.ToString());  			}  			else if (cmd.StartsWith("seterror"))  			{  				string regex = cmd.Substring("seterror".Length).Trim();    				try  				{  					Regex rx = new Regex(regex);  					m_Debug.ErrorRegex = rx;  					SendText("Current error regex : {0}"' m_Debug.ErrorRegex.ToString());  				}  				catch (Exception ex)  				{  					SendText("Error setting regex: {0}"' ex.Message);  				}  			}  			else if (cmd.StartsWith("execendnotify"))  			{  				string val = cmd.Substring("execendnotify".Length).Trim();    				if (val == "off")  				{  					m_NotifyExecutionEnd = false;  				}  				else if (val == "on")  				{  					m_NotifyExecutionEnd = true;  				}  				else if (val.Length > 0)  					SendText("Error : expected 'on' or 'off'");    				SendText("Notifications of execution end are : {0}"' m_NotifyExecutionEnd ? "enabled" : "disabled");  			}  			else if (cmd == "list")  			{  				int currId = m_Server.CurrentId ?? -1000;    				foreach (var pair in m_Server.GetAttachedDebuggersByIdAndName())  				{  					string isthis = (pair.Key == m_Debug.Id) ? " (this)" : "";  					string isdef = (pair.Key == currId) ? " (default)" : "";    					SendText("{0} : {1}{2}{3}"' pair.Key.ToString().PadLeft(9)' pair.Value' isdef' isthis);  				}  			}  			else if (cmd.StartsWith("select") || cmd.StartsWith("switch"))  			{  				string arg = cmd.Substring("switch".Length).Trim();    				try  				{  					int id = int.Parse(arg);  					m_Server.CurrentId = id;    					if (cmd.StartsWith("switch"))  						Unbind();  					else  						SendText("Next time you'll attach the debugger' it will be atteched to script #{0}"' id);  				}  				catch (Exception ex)  				{  					SendText("Error setting regex: {0}"' ex.Message);  				}  			}  			else  			{  				SendText("Syntax error : {0}\n"' cmd);  				showHelp = true;  			}
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,MoonSharpDebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\MoonSharpDebugSession.cs,SetBreakpoints,The following statement contains a magic number: if (path == null)  			{  				SendErrorResponse(response' 3010' "setBreakpoints: property 'source' is empty or misformed"' null' false' true);  				return;  			}
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,MoonSharpDebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\MoonSharpDebugSession.cs,StackTrace,The following statement contains a magic number: int maxLevels = getInt(args' "levels"' 10);
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,MoonSharpDebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\MoonSharpDebugSession.cs,StackTrace,The following statement contains a magic number: int max = Math.Min(maxLevels - 3' stack.Count);
Magic Number,MoonSharp.VsCodeDebugger.DebuggerLogic,MoonSharpDebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\DebuggerLogic\MoonSharpDebugSession.cs,StackTrace,The following statement contains a magic number: if (stack.Count > maxLevels - 3)  				stackFrames.Add(new StackFrame(level++' "(...)"' null' 0));
Magic Number,MoonSharp.VsCodeDebugger.SDK,DebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,DispatchRequest,The following statement contains a magic number: try  			{  				switch (command)  				{    					case "initialize":    						if (args["linesStartAt1"] != null)  						_clientLinesStartAt1 = args.Get("linesStartAt1").ToObject<bool>();    						var pathFormat = args.Get("pathFormat").ToObject<string>();  						if (pathFormat != null)  						{  							switch (pathFormat)  							{  								case "uri":  									_clientPathsAreURI = true;  									break;  								case "path":  									_clientPathsAreURI = false;  									break;  								default:  									SendErrorResponse(response' 1015' "initialize: bad value '{_format}' for pathFormat"' new { _format = pathFormat });  									return;  							}  						}  						Initialize(response' args);  						break;    					case "launch":  						Launch(response' args);  						break;    					case "attach":  						Attach(response' args);  						break;    					case "disconnect":  						Disconnect(response' args);  						break;    					case "next":  						Next(response' args);  						break;    					case "continue":  						Continue(response' args);  						break;    					case "stepIn":  						StepIn(response' args);  						break;    					case "stepOut":  						StepOut(response' args);  						break;    					case "pause":  						Pause(response' args);  						break;    					case "stackTrace":  						StackTrace(response' args);  						break;    					case "scopes":  						Scopes(response' args);  						break;    					case "variables":  						Variables(response' args);  						break;    					case "source":  						Source(response' args);  						break;    					case "threads":  						Threads(response' args);  						break;    					case "setBreakpoints":  						SetBreakpoints(response' args);  						break;    					case "setFunctionBreakpoints":  						SetFunctionBreakpoints(response' args);  						break;    					case "setExceptionBreakpoints":  						SetExceptionBreakpoints(response' args);  						break;    					case "evaluate":  						Evaluate(response' args);  						break;    					default:  						SendErrorResponse(response' 1014' "unrecognized request: {_request}"' new { _request = command });  						break;  				}  			}  			catch (Exception e)  			{  				SendErrorResponse(response' 1104' "error while processing request '{_request}' (exception: {_exception})"' new { _request = command' _exception = e.Message });  			}
Magic Number,MoonSharp.VsCodeDebugger.SDK,DebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,DispatchRequest,The following statement contains a magic number: try  			{  				switch (command)  				{    					case "initialize":    						if (args["linesStartAt1"] != null)  						_clientLinesStartAt1 = args.Get("linesStartAt1").ToObject<bool>();    						var pathFormat = args.Get("pathFormat").ToObject<string>();  						if (pathFormat != null)  						{  							switch (pathFormat)  							{  								case "uri":  									_clientPathsAreURI = true;  									break;  								case "path":  									_clientPathsAreURI = false;  									break;  								default:  									SendErrorResponse(response' 1015' "initialize: bad value '{_format}' for pathFormat"' new { _format = pathFormat });  									return;  							}  						}  						Initialize(response' args);  						break;    					case "launch":  						Launch(response' args);  						break;    					case "attach":  						Attach(response' args);  						break;    					case "disconnect":  						Disconnect(response' args);  						break;    					case "next":  						Next(response' args);  						break;    					case "continue":  						Continue(response' args);  						break;    					case "stepIn":  						StepIn(response' args);  						break;    					case "stepOut":  						StepOut(response' args);  						break;    					case "pause":  						Pause(response' args);  						break;    					case "stackTrace":  						StackTrace(response' args);  						break;    					case "scopes":  						Scopes(response' args);  						break;    					case "variables":  						Variables(response' args);  						break;    					case "source":  						Source(response' args);  						break;    					case "threads":  						Threads(response' args);  						break;    					case "setBreakpoints":  						SetBreakpoints(response' args);  						break;    					case "setFunctionBreakpoints":  						SetFunctionBreakpoints(response' args);  						break;    					case "setExceptionBreakpoints":  						SetExceptionBreakpoints(response' args);  						break;    					case "evaluate":  						Evaluate(response' args);  						break;    					default:  						SendErrorResponse(response' 1014' "unrecognized request: {_request}"' new { _request = command });  						break;  				}  			}  			catch (Exception e)  			{  				SendErrorResponse(response' 1104' "error while processing request '{_request}' (exception: {_exception})"' new { _request = command' _exception = e.Message });  			}
Magic Number,MoonSharp.VsCodeDebugger.SDK,DebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,DispatchRequest,The following statement contains a magic number: try  			{  				switch (command)  				{    					case "initialize":    						if (args["linesStartAt1"] != null)  						_clientLinesStartAt1 = args.Get("linesStartAt1").ToObject<bool>();    						var pathFormat = args.Get("pathFormat").ToObject<string>();  						if (pathFormat != null)  						{  							switch (pathFormat)  							{  								case "uri":  									_clientPathsAreURI = true;  									break;  								case "path":  									_clientPathsAreURI = false;  									break;  								default:  									SendErrorResponse(response' 1015' "initialize: bad value '{_format}' for pathFormat"' new { _format = pathFormat });  									return;  							}  						}  						Initialize(response' args);  						break;    					case "launch":  						Launch(response' args);  						break;    					case "attach":  						Attach(response' args);  						break;    					case "disconnect":  						Disconnect(response' args);  						break;    					case "next":  						Next(response' args);  						break;    					case "continue":  						Continue(response' args);  						break;    					case "stepIn":  						StepIn(response' args);  						break;    					case "stepOut":  						StepOut(response' args);  						break;    					case "pause":  						Pause(response' args);  						break;    					case "stackTrace":  						StackTrace(response' args);  						break;    					case "scopes":  						Scopes(response' args);  						break;    					case "variables":  						Variables(response' args);  						break;    					case "source":  						Source(response' args);  						break;    					case "threads":  						Threads(response' args);  						break;    					case "setBreakpoints":  						SetBreakpoints(response' args);  						break;    					case "setFunctionBreakpoints":  						SetFunctionBreakpoints(response' args);  						break;    					case "setExceptionBreakpoints":  						SetExceptionBreakpoints(response' args);  						break;    					case "evaluate":  						Evaluate(response' args);  						break;    					default:  						SendErrorResponse(response' 1014' "unrecognized request: {_request}"' new { _request = command });  						break;  				}  			}  			catch (Exception e)  			{  				SendErrorResponse(response' 1104' "error while processing request '{_request}' (exception: {_exception})"' new { _request = command' _exception = e.Message });  			}
Magic Number,MoonSharp.VsCodeDebugger.SDK,DebugSession,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\DebugSession.cs,Source,The following statement contains a magic number: SendErrorResponse(response' 1020' "Source not supported");
Magic Number,MoonSharp.VsCodeDebugger.SDK,ProtocolServer,C:\repos\xanathar_moonsharp\src\MoonSharp.VsCodeDebugger\SDK\Protocol.cs,ProcessData,The following statement contains a magic number: while (true)  			{  				if (_bodyLength >= 0)  				{  					if (_rawData.Length >= _bodyLength)  					{  						var buf = _rawData.RemoveFirst(_bodyLength);    						_bodyLength = -1;    						Dispatch(Encoding.GetString(buf));    						continue;   // there may be more complete messages to process  					}  				}  				else  				{  					string s = _rawData.GetString(Encoding);  					var idx = s.IndexOf(TWO_CRLF);  					if (idx != -1)  					{  						Match m = CONTENT_LENGTH_MATCHER.Match(s);  						if (m.Success && m.Groups.Count == 2)  						{  							_bodyLength = Convert.ToInt32(m.Groups[1].ToString());    							_rawData.RemoveFirst(idx + TWO_CRLF.Length);    							continue;   // try to handle a complete message  						}  					}  				}  				break;  			}
