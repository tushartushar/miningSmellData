Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,FileUpLoad,Cyclomatic complexity of the method is 13
Complex Method,ToolingWCF.Utilities,PrefixUtil,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\Utilities\PrefixUtil.cs,GetMoldPositionPrefix,Cyclomatic complexity of the method is 12
Long Parameter List,ToolingWCF,IMoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\IMoldPartInfoService.cs,GetMoldApplyRecordsInPages,The method has 6 parameters.
Long Parameter List,ToolingWCF,IMoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\IMoldPartInfoService.cs,GetMoldReleaseInfoByMoldNRInPage,The method has 6 parameters.
Long Parameter List,ToolingWCF,IStorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\IStorageManageService.cs,ApplyMold,The method has 5 parameters.
Long Parameter List,ToolingWCF,IStorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\IStorageManageService.cs,ReturnMold,The method has 5 parameters.
Long Parameter List,ToolingWCF,IStorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\IStorageManageService.cs,MoldTest,The method has 5 parameters.
Long Parameter List,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,ApplyMold,The method has 5 parameters.
Long Parameter List,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,ReturnMold,The method has 5 parameters.
Long Parameter List,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,MoldTest,The method has 5 parameters.
Long Parameter List,ToolingWCF,MoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\MoldPartInfoService.cs,GetMoldApplyRecordsInPages,The method has 6 parameters.
Long Parameter List,ToolingWCF,MoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\MoldPartInfoService.cs,GetMoldReleaseInfoByMoldNRInPage,The method has 6 parameters.
Long Statement,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,MoldInStore,The length of the statement  "			if (positionRep.CheckPositionAvailable (warehouseNR' positionNR' 1) == false && Settings.Default.AllowOverInStore == false) " is 123.
Long Statement,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,MoldMoveWorkStation,The length of the statement  "			string currentWorkPosi = moldview.StorageRecordNR == null ? string.Empty : moldRep.GetMoldCurrPosiByRecordNR ((Guid)moldview.StorageRecordNR); " is 142.
Long Statement,ToolingWCF,MoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\MoldPartInfoService.cs,GetMoldByMutiConditions,The length of the statement  "				CurrentPosition = m.StorageRecordNR.HasValue ? moldRepostitory.GetMoldCurrPosiByRecordNR ((Guid)m.StorageRecordNR) : string.Empty " is 129.
Long Statement,ToolingWCF,MoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\MoldPartInfoService.cs,GetMoldDynamicInfoByMoldNR,The length of the statement  "			CurrentPosition = moldview.StorageRecordNR == null ? string.Empty : moldRepostitory.GetMoldCurrPosiByRecordNR ((Guid)moldview.StorageRecordNR)' " is 143.
Long Statement,ToolingWCF,MoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\MoldPartInfoService.cs,GetMoldApplyRecordsInPages,The length of the statement  "		List<StorageRecord> records = recordRepositroy.GetMoldApplyRecordsByMoldNR (moldNR' pageIndex' pageSize' applicantId' startDate' endDate); " is 138.
Long Statement,ToolingWCF,MoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\MoldPartInfoService.cs,GetMoldReleaseInfoByMoldNRInPage,The length of the statement  "		List<ReportView> reports = reportRep.GetReportViewByMoldNR (moldNR' pageIndex' pageSize' operatorId' startDate' endDate); " is 121.
Long Statement,ToolingWCF,MoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\MoldPartInfoService.cs,GetMoldWarnInfo,The length of the statement  "				CurrentPosition = m.StorageRecordNR.HasValue ? moldRepostitory.GetMoldCurrPosiByRecordNR ((Guid)m.StorageRecordNR) : string.Empty " is 129.
Long Statement,ToolingWCF,MoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\MoldPartInfoService.cs,GetMoldCurrentPosition,The length of the statement  "		return moldview.StorageRecordNR == null ? string.Empty : moldRepostitory.GetMoldCurrPosiByRecordNR ((Guid)moldview.StorageRecordNR); " is 132.
Magic Number,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,FileUpLoad,The following statement contains a magic number: try {  	if (files != null && files.Length > 0) {  		using (IUnitOfWork unitwork = MSSqlHelper.DataContext ()) {  			string p = Path.Combine (AppDomain.CurrentDomain.BaseDirectory' Settings.Default.FileAttachmentPath);  			if (!Directory.Exists (p)) {  				Directory.CreateDirectory (p);  			}  			List<Attachment> reportAttaches = new List<Attachment> ();  			string type = string.Empty;  			const int bufferLength = 4096;  			foreach (FileUP file in files) {  				// type = file.Name.Substring(file.Name.LastIndexOf('.')' file.Name.Length - file.Name.LastIndexOf('.'));  				string servername = GuidUtil.GenerateGUID ().ToString () + file.FileType;  				string filePath = Path.Combine (p' servername);  				using (FileStream fs = new FileStream (filePath' FileMode.Create' FileAccess.Write' FileShare.Read)) {  					using (Stream stream = new MemoryStream (file.Data)) {  						byte[] buffer = new byte[bufferLength];  						int readcount = 0;  						do {  							readcount = stream.Read (buffer' 0' bufferLength);  							if (readcount > 0) {  								fs.Write (buffer' 0' readcount);  							}  						}  						while (readcount > 0);  					}  				}  				Attachment attachment = new Attachment () {  					MasterNR = masterNR'  					Name = file.Name'  					Path = servername'  					Date = DateTime.Now  				};  				reportAttaches.Add (attachment);  			}  			IAttachmentRepository attachRep = new AttachmentRepository (unitwork);  			attachRep.Add (reportAttaches);  			unitwork.Submit ();  			return new Message () {  				MsgType = MsgType.OK'  				Content = "文件上传成功！"  			};  		}  	}  	return new Message () {  		MsgType = MsgType.Warn'  		Content = "文件为空！"  	};  }  catch (Exception ex) {  	LogUtil.log.Error (ex.ToString ());  	return new Message () {  		MsgType = MsgType.Error'  		Content = "请核实所填数据的准确性"  	};  }  
Magic Number,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,FileUpLoad,The following statement contains a magic number: if (files != null && files.Length > 0) {  	using (IUnitOfWork unitwork = MSSqlHelper.DataContext ()) {  		string p = Path.Combine (AppDomain.CurrentDomain.BaseDirectory' Settings.Default.FileAttachmentPath);  		if (!Directory.Exists (p)) {  			Directory.CreateDirectory (p);  		}  		List<Attachment> reportAttaches = new List<Attachment> ();  		string type = string.Empty;  		const int bufferLength = 4096;  		foreach (FileUP file in files) {  			// type = file.Name.Substring(file.Name.LastIndexOf('.')' file.Name.Length - file.Name.LastIndexOf('.'));  			string servername = GuidUtil.GenerateGUID ().ToString () + file.FileType;  			string filePath = Path.Combine (p' servername);  			using (FileStream fs = new FileStream (filePath' FileMode.Create' FileAccess.Write' FileShare.Read)) {  				using (Stream stream = new MemoryStream (file.Data)) {  					byte[] buffer = new byte[bufferLength];  					int readcount = 0;  					do {  						readcount = stream.Read (buffer' 0' bufferLength);  						if (readcount > 0) {  							fs.Write (buffer' 0' readcount);  						}  					}  					while (readcount > 0);  				}  			}  			Attachment attachment = new Attachment () {  				MasterNR = masterNR'  				Name = file.Name'  				Path = servername'  				Date = DateTime.Now  			};  			reportAttaches.Add (attachment);  		}  		IAttachmentRepository attachRep = new AttachmentRepository (unitwork);  		attachRep.Add (reportAttaches);  		unitwork.Submit ();  		return new Message () {  			MsgType = MsgType.OK'  			Content = "文件上传成功！"  		};  	}  }  
Magic Number,ToolingWCF,StorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\StorageManageService.cs,FileUpLoad,The following statement contains a magic number: using (IUnitOfWork unitwork = MSSqlHelper.DataContext ()) {  	string p = Path.Combine (AppDomain.CurrentDomain.BaseDirectory' Settings.Default.FileAttachmentPath);  	if (!Directory.Exists (p)) {  		Directory.CreateDirectory (p);  	}  	List<Attachment> reportAttaches = new List<Attachment> ();  	string type = string.Empty;  	const int bufferLength = 4096;  	foreach (FileUP file in files) {  		// type = file.Name.Substring(file.Name.LastIndexOf('.')' file.Name.Length - file.Name.LastIndexOf('.'));  		string servername = GuidUtil.GenerateGUID ().ToString () + file.FileType;  		string filePath = Path.Combine (p' servername);  		using (FileStream fs = new FileStream (filePath' FileMode.Create' FileAccess.Write' FileShare.Read)) {  			using (Stream stream = new MemoryStream (file.Data)) {  				byte[] buffer = new byte[bufferLength];  				int readcount = 0;  				do {  					readcount = stream.Read (buffer' 0' bufferLength);  					if (readcount > 0) {  						fs.Write (buffer' 0' readcount);  					}  				}  				while (readcount > 0);  			}  		}  		Attachment attachment = new Attachment () {  			MasterNR = masterNR'  			Name = file.Name'  			Path = servername'  			Date = DateTime.Now  		};  		reportAttaches.Add (attachment);  	}  	IAttachmentRepository attachRep = new AttachmentRepository (unitwork);  	attachRep.Add (reportAttaches);  	unitwork.Submit ();  	return new Message () {  		MsgType = MsgType.OK'  		Content = "文件上传成功！"  	};  }  
Magic Number,ToolingWCF.Helper,MoldRecordTypeHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\Helper\MoldRecordTypeHelper.cs,GetApplyTypes,The following statement contains a magic number: switch (index) {  case 0:  	return applyTypes;  case 1:  	return returnTypes;  case 2:  	return moveTypes;  case 3:  	return produceTypes;  case 4:  	return mantainTypes;  case 5:  	return testTypes;  default:  	return null;  }  
Magic Number,ToolingWCF.Helper,MoldRecordTypeHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\Helper\MoldRecordTypeHelper.cs,GetApplyTypes,The following statement contains a magic number: switch (index) {  case 0:  	return applyTypes;  case 1:  	return returnTypes;  case 2:  	return moveTypes;  case 3:  	return produceTypes;  case 4:  	return mantainTypes;  case 5:  	return testTypes;  default:  	return null;  }  
Magic Number,ToolingWCF.Helper,MoldRecordTypeHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\Helper\MoldRecordTypeHelper.cs,GetApplyTypes,The following statement contains a magic number: switch (index) {  case 0:  	return applyTypes;  case 1:  	return returnTypes;  case 2:  	return moveTypes;  case 3:  	return produceTypes;  case 4:  	return mantainTypes;  case 5:  	return testTypes;  default:  	return null;  }  
Magic Number,ToolingWCF.Helper,MoldRecordTypeHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\Helper\MoldRecordTypeHelper.cs,GetApplyTypes,The following statement contains a magic number: switch (index) {  case 0:  	return applyTypes;  case 1:  	return returnTypes;  case 2:  	return moveTypes;  case 3:  	return produceTypes;  case 4:  	return mantainTypes;  case 5:  	return testTypes;  default:  	return null;  }  
Missing Default,ToolingWCF.Utilities,PrefixUtil,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingWCF\Utilities\PrefixUtil.cs,GetMoldPositionPrefix,The following switch statement is missing a default case: switch (sotrageRecordType) {  case StorageRecordType.Produce:  	prefix = EnumUtil.GetEnumDescriptionByEnumValue (PositionPrefixType.Workstation);  	break;  case StorageRecordType.Mantain:  	prefix = EnumUtil.GetEnumDescriptionByEnumValue (PositionPrefixType.Mantainstation);  	break;  case StorageRecordType.Test:  	prefix = EnumUtil.GetEnumDescriptionByEnumValue (PositionPrefixType.Teststation);  	break;  case StorageRecordType.OutStore:  	prefix = EnumUtil.GetEnumDescriptionByEnumValue (PositionPrefixType.InPosition);  	break;  }  
