Implementation smell,Namespace,Class,File,Method,Description
Long Method,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The method has 129 lines of code.
Complex Method,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,Cyclomatic complexity of the method is 11
Complex Method,ToolingDataSys.Code,SQLHelper,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\SQLHelper.cs,Insert,Cyclomatic complexity of the method is 14
Complex Method,ToolingDataSys.Code,SQLHelper,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\SQLHelper.cs,Update,Cyclomatic complexity of the method is 16
Complex Method,ToolingDataSys.Code,SQLHelper,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\SQLHelper.cs,Delete,Cyclomatic complexity of the method is 11
Long Parameter List,ToolingDataSys.Code,SQLHelper,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\SQLHelper.cs,Insert,The method has 7 parameters.
Long Parameter List,ToolingDataSys.Code,SQLHelper,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\SQLHelper.cs,Update,The method has 7 parameters.
Long Parameter List,ToolingDataSys.Code,SQLHelper,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\SQLHelper.cs,Delete,The method has 6 parameters.
Long Statement,ToolingDataSys.Code,ImExcel,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\ImExcel.cs,LoadExcel,The length of the statement  "	string connString = "Driver={Driver do Microsoft Excel(*.xls)};DriverId=790;SafeTransactions=0;ReadOnly=1;MaxScanRows=16;Threads=3;MaxBufferSize=2024;UserCommitSync=Yes;FIL=excel 8.0;PageTimeout=5;"; " is 199.
Long Statement,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The length of the statement  "			string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material)" is 171.
Long Statement,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Update,The length of the statement  "	string updateString = @"update Mold set MoldTypeID=@type'ProjectID=@pro'Name=@name'MaxCuttimes=@maxCut'MaxLendHour=@max'ReleaseCycle=@release'MaintainCycle=@main'" is 162.
Long Statement,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,TransPosition,The length of the statement  "	string updateString = @"update UniqStorage set PositionId =(SELECT  PositionID  FROM  Position where PositionNR='LeoniMoldTransfer01')" is 134.
Long Statement,ToolingDataSys.Code,PositionFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\PositionFile.cs,Insert,The length of the statement  "	string insertString = "insert into position(PositionID'WarehouseNR'PositionNR'Capicity) values(newid()''UNIQ-WARE-001''@pnr'@ca)"; " is 130.
Long Statement,ToolingDataSys.Code,PositionFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\PositionFile.cs,Delete,The length of the statement  "	string deleteString = @"update UniqStorage set PositionId=(SELECT  PositionID  FROM  Position where PositionNR='LeoniMoldTransfer01')" is 133.
Long Statement,ToolingDataSys.Code,WorkstationFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\WorkstationFile.cs,Insert,The length of the statement  "	string insertString = " insert into Workstation(WorkstationID'WorkstationType'Name'MaxMoldCount'CurrentMoldCount) values(@id'0'@name'@max'0)"; " is 142.
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = SQLHelper.GetConn ()) {  	conn.Open ();  	SqlTransaction tran = conn.BeginTransaction ();  	SqlDataReader reader = null;  	try {  		string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  		List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  			new ForeignKeyChecker () {  				CheckQuery = "select * from Position where PositionNR=@posi"'  				CheckValueIndex = 0'  				CheckMessage = "库位不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from  Project where ProjectID=@pro"'  				CheckValueIndex = 3'  				CheckMessage = "成本中心不存在"  			}'  			new ForeignKeyChecker () {  				CheckQuery = "select * from MoldType where MoldTypeID=@type"'  				CheckValueIndex = 2'  				CheckMessage = "模具型号不存在"  			}  		};  		string uniqQuery = "select * from Mold where MoldNR=@nr";  		string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  		SqlCommand com = new SqlCommand (q' conn' tran);  		SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  		SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  		SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  		SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  		SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  		SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  		SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  		SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  		SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  		SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  		SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  		SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  		SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  		SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  		com.Parameters.Add (nr);  		com.Parameters.Add (type);  		com.Parameters.Add (pro);  		com.Parameters.Add (name);  		com.Parameters.Add (maxCut);  		com.Parameters.Add (max);  		com.Parameters.Add (release);  		com.Parameters.Add (main);  		com.Parameters.Add (producer);  		com.Parameters.Add (weight);  		com.Parameters.Add (material);  		com.Parameters.Add (posi);  		com.Parameters.Add (guid);  		com.Parameters.Add (date);  		if (dt.Rows.Count > 0) {  			foreach (DataRow row in dt.Rows) {  				try {  					posi.Value = row [0];  					nr.Value = row [1];  					type.Value = row [2];  					pro.Value = row [3];  					name.Value = row [4];  					maxCut.Value = int.Parse (row [5].ToString ().Trim ());  					max.Value = int.Parse (row [6].ToString ().Trim ());  					release.Value = int.Parse (row [7].ToString ().Trim ());  					main.Value = int.Parse (row [8].ToString ().Trim ());  					producer.Value = row [9];  					weight.Value = int.Parse (row [10].ToString ().Trim ());  					material.Value = row [11];  					guid.Value = Guid.NewGuid ();  					date.Value = DateTime.Now.ToString ();  					bool checkResult = true;  					foreach (ForeignKeyChecker checker in checkers) {  						com.CommandText = checker.CheckQuery;  						reader = com.ExecuteReader ();  						if (!reader.HasRows) {  							checkResult = false;  							message.Add (new Message () {  								message = row [checker.CheckValueIndex] + checker.CheckMessage  							});  						}  						reader.Close ();  					}  					if (checkResult) {  						com.CommandText = uniqQuery;  						reader = com.ExecuteReader ();  						bool exist = reader.HasRows;  						reader.Close ();  						if (exist) {  							message.Add (new Message () {  								message = row [1] + "已经存在"  							});  						}  						else {  							com.CommandText = insertQuery;  							com.ExecuteNonQuery ();  						}  					}  				}  				catch (Exception Exception) {  					throw Exception;  				}  			}  		}  		tran.Commit ();  		conn.Close ();  	}  	catch (Exception e) {  		tran.Rollback ();  		if (conn.State == ConnectionState.Open)  			conn.Close ();  		message.Add (new Message () {  			message = "导入失败" + e.Message  		});  	}  	finally {  		conn.Close ();  	}  	return message;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	string q = @"if exists() begin if exists() begin if exists( ) begin  end end end";  	List<ForeignKeyChecker> checkers = new List<ForeignKeyChecker> () {  		new ForeignKeyChecker () {  			CheckQuery = "select * from Position where PositionNR=@posi"'  			CheckValueIndex = 0'  			CheckMessage = "库位不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from  Project where ProjectID=@pro"'  			CheckValueIndex = 3'  			CheckMessage = "成本中心不存在"  		}'  		new ForeignKeyChecker () {  			CheckQuery = "select * from MoldType where MoldTypeID=@type"'  			CheckValueIndex = 2'  			CheckMessage = "模具型号不存在"  		}  	};  	string uniqQuery = "select * from Mold where MoldNR=@nr";  	string insertQuery = @"insert into Mold(MoldNR'MoldTypeID'ProjectID'Name'State'MaxCuttimes'CurrentCuttimes'MaxLendHour'ReleaseCycle'MaintainCycle'Producer'Weight'Material) values(@nr'@type'@pro'@name'1'@maxCut'0'@max'@release'@main'@producer'@weight'@material); insert into UniqStorage(UniqStorageId'UniqNR'PositionId'Quantity) values(NEWID()'@nr'(select top 1 PositionID from Position where PositionNR=@posi)'1);   insert into StorageRecord(StorageRecordNR'PositionId'Destination'Date'Quantity'RecordType'TargetNR'OperatorId)   values(@guid'(select PositionID from Position where PositionNR=@posi)'@posi'@date'1'3'@nr''DATA-ADMIN');   insert into MoldLastRecord(MoldNR'StorageRecordNR) values(@nr'@guid);";  	SqlCommand com = new SqlCommand (q' conn' tran);  	SqlParameter nr = new SqlParameter ("@nr"' SqlDbType.VarChar);  	SqlParameter type = new SqlParameter ("@type"' SqlDbType.VarChar);  	SqlParameter pro = new SqlParameter ("@pro"' SqlDbType.VarChar);  	SqlParameter name = new SqlParameter ("@name"' SqlDbType.VarChar);  	SqlParameter maxCut = new SqlParameter ("@maxCut"' SqlDbType.BigInt);  	SqlParameter max = new SqlParameter ("@max"' SqlDbType.Int);  	SqlParameter release = new SqlParameter ("@release"' SqlDbType.Int);  	SqlParameter main = new SqlParameter ("@main"' SqlDbType.Int);  	SqlParameter producer = new SqlParameter ("@producer"' SqlDbType.VarChar);  	SqlParameter weight = new SqlParameter ("@weight"' SqlDbType.Float);  	SqlParameter material = new SqlParameter ("@material"' SqlDbType.VarChar);  	SqlParameter posi = new SqlParameter ("@posi"' SqlDbType.VarChar);  	SqlParameter guid = new SqlParameter ("@guid"' SqlDbType.UniqueIdentifier);  	SqlParameter date = new SqlParameter ("@date"' SqlDbType.DateTime);  	com.Parameters.Add (nr);  	com.Parameters.Add (type);  	com.Parameters.Add (pro);  	com.Parameters.Add (name);  	com.Parameters.Add (maxCut);  	com.Parameters.Add (max);  	com.Parameters.Add (release);  	com.Parameters.Add (main);  	com.Parameters.Add (producer);  	com.Parameters.Add (weight);  	com.Parameters.Add (material);  	com.Parameters.Add (posi);  	com.Parameters.Add (guid);  	com.Parameters.Add (date);  	if (dt.Rows.Count > 0) {  		foreach (DataRow row in dt.Rows) {  			try {  				posi.Value = row [0];  				nr.Value = row [1];  				type.Value = row [2];  				pro.Value = row [3];  				name.Value = row [4];  				maxCut.Value = int.Parse (row [5].ToString ().Trim ());  				max.Value = int.Parse (row [6].ToString ().Trim ());  				release.Value = int.Parse (row [7].ToString ().Trim ());  				main.Value = int.Parse (row [8].ToString ().Trim ());  				producer.Value = row [9];  				weight.Value = int.Parse (row [10].ToString ().Trim ());  				material.Value = row [11];  				guid.Value = Guid.NewGuid ();  				date.Value = DateTime.Now.ToString ();  				bool checkResult = true;  				foreach (ForeignKeyChecker checker in checkers) {  					com.CommandText = checker.CheckQuery;  					reader = com.ExecuteReader ();  					if (!reader.HasRows) {  						checkResult = false;  						message.Add (new Message () {  							message = row [checker.CheckValueIndex] + checker.CheckMessage  						});  					}  					reader.Close ();  				}  				if (checkResult) {  					com.CommandText = uniqQuery;  					reader = com.ExecuteReader ();  					bool exist = reader.HasRows;  					reader.Close ();  					if (exist) {  						message.Add (new Message () {  							message = row [1] + "已经存在"  						});  					}  					else {  						com.CommandText = insertQuery;  						com.ExecuteNonQuery ();  					}  				}  			}  			catch (Exception Exception) {  				throw Exception;  			}  		}  	}  	tran.Commit ();  	conn.Close ();  }  catch (Exception e) {  	tran.Rollback ();  	if (conn.State == ConnectionState.Open)  		conn.Close ();  	message.Add (new Message () {  		message = "导入失败" + e.Message  	});  }  finally {  	conn.Close ();  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	foreach (DataRow row in dt.Rows) {  		try {  			posi.Value = row [0];  			nr.Value = row [1];  			type.Value = row [2];  			pro.Value = row [3];  			name.Value = row [4];  			maxCut.Value = int.Parse (row [5].ToString ().Trim ());  			max.Value = int.Parse (row [6].ToString ().Trim ());  			release.Value = int.Parse (row [7].ToString ().Trim ());  			main.Value = int.Parse (row [8].ToString ().Trim ());  			producer.Value = row [9];  			weight.Value = int.Parse (row [10].ToString ().Trim ());  			material.Value = row [11];  			guid.Value = Guid.NewGuid ();  			date.Value = DateTime.Now.ToString ();  			bool checkResult = true;  			foreach (ForeignKeyChecker checker in checkers) {  				com.CommandText = checker.CheckQuery;  				reader = com.ExecuteReader ();  				if (!reader.HasRows) {  					checkResult = false;  					message.Add (new Message () {  						message = row [checker.CheckValueIndex] + checker.CheckMessage  					});  				}  				reader.Close ();  			}  			if (checkResult) {  				com.CommandText = uniqQuery;  				reader = com.ExecuteReader ();  				bool exist = reader.HasRows;  				reader.Close ();  				if (exist) {  					message.Add (new Message () {  						message = row [1] + "已经存在"  					});  				}  				else {  					com.CommandText = insertQuery;  					com.ExecuteNonQuery ();  				}  			}  		}  		catch (Exception Exception) {  			throw Exception;  		}  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	try {  		posi.Value = row [0];  		nr.Value = row [1];  		type.Value = row [2];  		pro.Value = row [3];  		name.Value = row [4];  		maxCut.Value = int.Parse (row [5].ToString ().Trim ());  		max.Value = int.Parse (row [6].ToString ().Trim ());  		release.Value = int.Parse (row [7].ToString ().Trim ());  		main.Value = int.Parse (row [8].ToString ().Trim ());  		producer.Value = row [9];  		weight.Value = int.Parse (row [10].ToString ().Trim ());  		material.Value = row [11];  		guid.Value = Guid.NewGuid ();  		date.Value = DateTime.Now.ToString ();  		bool checkResult = true;  		foreach (ForeignKeyChecker checker in checkers) {  			com.CommandText = checker.CheckQuery;  			reader = com.ExecuteReader ();  			if (!reader.HasRows) {  				checkResult = false;  				message.Add (new Message () {  					message = row [checker.CheckValueIndex] + checker.CheckMessage  				});  			}  			reader.Close ();  		}  		if (checkResult) {  			com.CommandText = uniqQuery;  			reader = com.ExecuteReader ();  			bool exist = reader.HasRows;  			reader.Close ();  			if (exist) {  				message.Add (new Message () {  					message = row [1] + "已经存在"  				});  			}  			else {  				com.CommandText = insertQuery;  				com.ExecuteNonQuery ();  			}  		}  	}  	catch (Exception Exception) {  		throw Exception;  	}  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: try {  	posi.Value = row [0];  	nr.Value = row [1];  	type.Value = row [2];  	pro.Value = row [3];  	name.Value = row [4];  	maxCut.Value = int.Parse (row [5].ToString ().Trim ());  	max.Value = int.Parse (row [6].ToString ().Trim ());  	release.Value = int.Parse (row [7].ToString ().Trim ());  	main.Value = int.Parse (row [8].ToString ().Trim ());  	producer.Value = row [9];  	weight.Value = int.Parse (row [10].ToString ().Trim ());  	material.Value = row [11];  	guid.Value = Guid.NewGuid ();  	date.Value = DateTime.Now.ToString ();  	bool checkResult = true;  	foreach (ForeignKeyChecker checker in checkers) {  		com.CommandText = checker.CheckQuery;  		reader = com.ExecuteReader ();  		if (!reader.HasRows) {  			checkResult = false;  			message.Add (new Message () {  				message = row [checker.CheckValueIndex] + checker.CheckMessage  			});  		}  		reader.Close ();  	}  	if (checkResult) {  		com.CommandText = uniqQuery;  		reader = com.ExecuteReader ();  		bool exist = reader.HasRows;  		reader.Close ();  		if (exist) {  			message.Add (new Message () {  				message = row [1] + "已经存在"  			});  		}  		else {  			com.CommandText = insertQuery;  			com.ExecuteNonQuery ();  		}  	}  }  catch (Exception Exception) {  	throw Exception;  }  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: type.Value = row [2];  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: pro.Value = row [3];  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: name.Value = row [4];  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: maxCut.Value = int.Parse (row [5].ToString ().Trim ());  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: max.Value = int.Parse (row [6].ToString ().Trim ());  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: release.Value = int.Parse (row [7].ToString ().Trim ());  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: main.Value = int.Parse (row [8].ToString ().Trim ());  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: producer.Value = row [9];  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: weight.Value = int.Parse (row [10].ToString ().Trim ());  
Magic Number,ToolingDataSys.Code,MoldFile,C:\repos\shentianyi_MoldSmartDevice\ModlMgnDataDesktop\ToolingDataSys\Code\MoldFile.cs,Insert,The following statement contains a magic number: material.Value = row [11];  
