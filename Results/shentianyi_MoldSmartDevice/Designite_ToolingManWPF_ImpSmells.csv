Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ToolingManWPF,Lab,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Lab.xaml.cs,UpReportBtn_Click,Cyclomatic complexity of the method is 17
Complex Method,ToolingManWPF,MoldApply,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\MoldApply.xaml.cs,MoldApplyBtn_Click,Cyclomatic complexity of the method is 8
Complex Method,ToolingManWPF.Helper,OverValidateConverter,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Helper\OverDateValidateConverter.cs,Convert,Cyclomatic complexity of the method is 12
Complex Method,ToolingManWPF.Utilities,FileUtil,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Utilities\FileUtil.cs,SavaFIle,Cyclomatic complexity of the method is 8
Long Parameter List,ToolingManWPF.Helper,GenExcelHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Helper\GenExcelHelper.cs,GenExcel,The method has 5 parameters.
Long Parameter List,ToolingManWPF.MoldPartInfoServiceReference,IMoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\MoldPartInfoServiceReference\Reference.cs,GetMoldApplyRecordsInPages,The method has 6 parameters.
Long Parameter List,ToolingManWPF.MoldPartInfoServiceReference,IMoldPartInfoService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\MoldPartInfoServiceReference\Reference.cs,GetMoldReleaseInfoByMoldNRInPage,The method has 6 parameters.
Long Parameter List,ToolingManWPF.MoldPartInfoServiceReference,MoldPartInfoServiceClient,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\MoldPartInfoServiceReference\Reference.cs,GetMoldApplyRecordsInPages,The method has 6 parameters.
Long Parameter List,ToolingManWPF.MoldPartInfoServiceReference,MoldPartInfoServiceClient,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\MoldPartInfoServiceReference\Reference.cs,GetMoldReleaseInfoByMoldNRInPage,The method has 6 parameters.
Long Parameter List,ToolingManWPF.StorageManageServiceReference,IStorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\StorageManageServiceReference\Reference.cs,ApplyMold,The method has 5 parameters.
Long Parameter List,ToolingManWPF.StorageManageServiceReference,IStorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\StorageManageServiceReference\Reference.cs,ReturnMold,The method has 5 parameters.
Long Parameter List,ToolingManWPF.StorageManageServiceReference,IStorageManageService,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\StorageManageServiceReference\Reference.cs,MoldTest,The method has 5 parameters.
Long Parameter List,ToolingManWPF.StorageManageServiceReference,StorageManageServiceClient,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\StorageManageServiceReference\Reference.cs,ApplyMold,The method has 5 parameters.
Long Parameter List,ToolingManWPF.StorageManageServiceReference,StorageManageServiceClient,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\StorageManageServiceReference\Reference.cs,ReturnMold,The method has 5 parameters.
Long Parameter List,ToolingManWPF.StorageManageServiceReference,StorageManageServiceClient,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Service References\StorageManageServiceReference\Reference.cs,MoldTest,The method has 5 parameters.
Long Statement,ToolingManWPF,BasiscInfo,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\BasiscInfo.xaml.cs,OKBtn_Click,The length of the statement  "				ToolingManWPF.StorageManageServiceReference.AttachmentType attachType = ToolingManWPF.StorageManageServiceReference.AttachmentType.PICTURE; " is 139.
Long Statement,ToolingManWPF,DataExporter,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\DataExporter.xaml.cs,Window_Loaded,The length of the statement  "	List<EnumItem> types = conditionClient.GetEnumItems (typeof(ToolingManWPF.ConditionServiceReference.ReportType).ToString ()); " is 125.
Long Statement,ToolingManWPF,DataExporter,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\DataExporter.xaml.cs,LabDataExportBtn_Click,The length of the statement  "			if (GenExcelHelper.GenExcel<ReportView> (saveFileDialog.FileName' ((EnumItem)ReportTypeCB.SelectedItem).Description + "数据"' headers' pathes' items)) " is 148.
Long Statement,ToolingManWPF,DataExporter,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\DataExporter.xaml.cs,StoreDataExportBtn_Click,The length of the statement  "			if (GenExcelHelper.GenExcel<StorageRecord> (saveFileDialog.FileName' ((EnumItem)StorageRecordTypeCB.SelectedItem).Description + "数据"' headers' pathes' items)) " is 158.
Long Statement,ToolingManWPF,DataExporter,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\DataExporter.xaml.cs,GetReportView,The length of the statement  "	List<ReportView> items = (new MoldPartInfoServiceClient ()).GetReportViewByDate ((ToolingManWPF.MoldPartInfoServiceReference.ReportType)(int.Parse (((EnumItem)ReportTypeCB.SelectedItem).Value))' startDate' endDate); " is 215.
Long Statement,ToolingManWPF,DataExporter,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\DataExporter.xaml.cs,GetStoreRecordView,The length of the statement  "	List<StorageRecord> items = (new MoldPartInfoServiceClient ()).GetStoreRecordByDate (int.Parse (((EnumItem)StorageRecordTypeCB.SelectedItem).Value)' startDate' endDate); " is 169.
Long Statement,ToolingManWPF,Lab,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Lab.xaml.cs,UpReportBtn_Click,The length of the statement  "					ToolingManWPF.StorageManageServiceReference.AttachmentType attachType = ToolingManWPF.StorageManageServiceReference.AttachmentType.PICTURE; " is 139.
Long Statement,ToolingManWPF,Lab,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Lab.xaml.cs,LoadConditions,The length of the statement  "	List<EnumItem> reportTypes = conditionClient.GetEnumItems (typeof(ToolingManWPF.MoldPartInfoServiceReference.ReportType).ToString ()); " is 134.
Long Statement,ToolingManWPF,MoldApply,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\MoldApply.xaml.cs,MoldApplyBtn_Click,The length of the statement  "	if ((ToolingManWPF.ConditionServiceReference.MoldStateType)moldBaseInfo.State != ToolingManWPF.ConditionServiceReference.MoldStateType.Normal && (MoldUseType)int.Parse (MoldUseWayCB.SelectedValue.ToString ()) == MoldUseType.Produce) { " is 234.
Long Statement,ToolingManWPF,MoldApply,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\MoldApply.xaml.cs,MoldApplyBtn_Click,The length of the statement  "	if (!string.IsNullOrWhiteSpace (EnsureMoldNRTB.Text) && !string.IsNullOrWhiteSpace (ApplicantNRTB.Text) && !string.IsNullOrWhiteSpace (WorkstationNRTB.Text)) { " is 159.
Long Statement,ToolingManWPF,MoldApply,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\MoldApply.xaml.cs,MoldApplyBtn_Click,The length of the statement  "			Message msg = client.ApplyMold ((MoldUseType)int.Parse (MoldUseWayCB.SelectedValue.ToString ())' MoldNRTB.Text' ApplicantNRTB.Text' ""' WorkstationNRTB.Text); " is 158.
Long Statement,ToolingManWPF,MoldInitStore,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\MoldInitStore.xaml.cs,OKBtn_Click,The length of the statement  "	if (string.IsNullOrWhiteSpace (MoldNRTB.Text) || string.IsNullOrWhiteSpace (WarehouseNRTB.Text) || string.IsNullOrWhiteSpace (PositionNRTB.Text)) { " is 147.
Long Statement,ToolingManWPF,MoldMoveStore,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\MoldMoveStore.xaml.cs,OKBtn_Click,The length of the statement  "	Message msg = client.MoldMoveStore (MoldNrLab.Content.ToString ()' Settings.Default.WarehouseNr' CurrentPosiLab.Content.ToString ()' DesiPosiNRTB.Text); " is 152.
Long Statement,ToolingManWPF,MoldReturn,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\MoldReturn.xaml.cs,ReturnMoldBtn_Click,The length of the statement  "		Message msg = client.ReturnMold (MoldNRTB.Text' ApplicantNRTB.Text' ""' RemarkTB.Text' (MoldReturnStateType)int.Parse (MoldSateCB.SelectedValue.ToString ())); " is 158.
Long Statement,ToolingManWPF,Search,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Search.xaml.cs,SearchBtn_Click,The length of the statement  "	condition.State = StateCB.SelectedIndex < 1 ? ToolingManWPF.MoldPartInfoServiceReference.MoldStateType.NULL : (ToolingManWPF.MoldPartInfoServiceReference.MoldStateType)(int.Parse (StateCB.SelectedValue.ToString ())); " is 216.
Long Statement,ToolingManWPF,Search,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Search.xaml.cs,SearchBtn_Click,The length of the statement  "	//condition.Warn = WarnCB.SelectedIndex < 1 ? MoldWarnType.NULL : (MoldWarnType)(int.Parse(WarnCB.SelectedValue.ToString())); " is 125.
Long Statement,ToolingManWPF,Search,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Search.xaml.cs,LoadConditions,The length of the statement  "	List<EnumItem> stateItems = conditionClient.GetEnumItems (typeof(ToolingManWPF.ConditionServiceReference.MoldStateType).ToString ()); " is 133.
Magic Number,ToolingManWPF.Helper,GenExcelHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Helper\GenExcelHelper.cs,GenExcel,The following statement contains a magic number: try {  	System.Reflection.Missing miss = System.Reflection.Missing.Value;  	sheet.Name = sheetName;  	for (int i = 0; i < headers.Length; i++) {  		excel.Cells [1' i + 1] = headers [i];  	}  	Type t = typeof(T);  	for (int i = 0; i < items.Count; i++) {  		for (int j = 0; j < pathes.Length; j++) {  			object v = t.GetProperty (pathes [j]).GetValue (items [i]' null);  			excel.Cells [2 + i' j + 1] = v == null ? "" : v.ToString ();  		}  	}  	Range range = sheet.Range [sheet.Cells [1' 1]' sheet.Cells [items.Count + 1' headers.Length + 1]];  	range.HorizontalAlignment = XlHAlign.xlHAlignLeft;  	sheet.SaveAs (filepath' miss' miss' miss' miss' miss' XlSaveAsAccessMode.xlNoChange' miss' miss' miss);  	book.Close (false' miss' miss);  	books.Close ();  	excel.Quit ();  }  catch (Exception e) {  	return false;  }  finally {  	Marshal.ReleaseComObject (sheet);  	Marshal.ReleaseComObject (book);  	Marshal.ReleaseComObject (books);  	Marshal.ReleaseComObject (excel);  	GC.Collect ();  }  
Magic Number,ToolingManWPF.Helper,GenExcelHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Helper\GenExcelHelper.cs,GenExcel,The following statement contains a magic number: for (int i = 0; i < items.Count; i++) {  	for (int j = 0; j < pathes.Length; j++) {  		object v = t.GetProperty (pathes [j]).GetValue (items [i]' null);  		excel.Cells [2 + i' j + 1] = v == null ? "" : v.ToString ();  	}  }  
Magic Number,ToolingManWPF.Helper,GenExcelHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Helper\GenExcelHelper.cs,GenExcel,The following statement contains a magic number: for (int j = 0; j < pathes.Length; j++) {  	object v = t.GetProperty (pathes [j]).GetValue (items [i]' null);  	excel.Cells [2 + i' j + 1] = v == null ? "" : v.ToString ();  }  
Magic Number,ToolingManWPF.Helper,GenExcelHelper,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Helper\GenExcelHelper.cs,GenExcel,The following statement contains a magic number: excel.Cells [2 + i' j + 1] = v == null ? "" : v.ToString ();  
Magic Number,ToolingManWPF.Utilities,FileUtil,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Utilities\FileUtil.cs,SavaFIle,The following statement contains a magic number: try {  	using (FileStream fs = new FileStream (filepath' FileMode.Create' FileAccess.Write)) {  		using (Stream stream = new MemoryStream (data)) {  			const int bufferLenth = 4096;  			byte[] buffer = new byte[bufferLenth];  			int readcount = 0;  			do {  				readcount = stream.Read (buffer' 0' bufferLenth);  				if (readcount > 0) {  					fs.Write (buffer' 0' readcount);  				}  			}  			while (readcount > 0);  		}  	}  	return true;  }  catch (Exception e) {  	return false;  }  
Magic Number,ToolingManWPF.Utilities,FileUtil,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Utilities\FileUtil.cs,SavaFIle,The following statement contains a magic number: using (FileStream fs = new FileStream (filepath' FileMode.Create' FileAccess.Write)) {  	using (Stream stream = new MemoryStream (data)) {  		const int bufferLenth = 4096;  		byte[] buffer = new byte[bufferLenth];  		int readcount = 0;  		do {  			readcount = stream.Read (buffer' 0' bufferLenth);  			if (readcount > 0) {  				fs.Write (buffer' 0' readcount);  			}  		}  		while (readcount > 0);  	}  }  
Magic Number,ToolingManWPF.Utilities,FileUtil,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Utilities\FileUtil.cs,SavaFIle,The following statement contains a magic number: using (Stream stream = new MemoryStream (data)) {  	const int bufferLenth = 4096;  	byte[] buffer = new byte[bufferLenth];  	int readcount = 0;  	do {  		readcount = stream.Read (buffer' 0' bufferLenth);  		if (readcount > 0) {  			fs.Write (buffer' 0' readcount);  		}  	}  	while (readcount > 0);  }  
Missing Default,ToolingManWPF,Lab,C:\repos\shentianyi_MoldSmartDevice\MoldMgnDesktop\ToolingManWPF\Lab.xaml.cs,UpReportBtn_Click,The following switch statement is missing a default case: switch ((ToolingManWPF.MoldPartInfoServiceReference.ReportType)int.Parse (MaintainTypeCB.SelectedValue.ToString ())) {  case ToolingManWPF.MoldPartInfoServiceReference.ReportType.MaintainReport:  	// msg = client.MoldMaintain(MoldNRTB.Text' OperatorNRTB.Text' files' (bool)MoldStateCheckBox.IsChecked);  	msg = client.MoldMaintain (MoldNRTB.Text' OperatorNRTB.Text' files' false);  	break;  case ToolingManWPF.MoldPartInfoServiceReference.ReportType.TestReport:  	int c = 0;  	//int.TryParse(CurrentCutTimeTB.Text'out c);  	msg = client.MoldTest (MoldNRTB.Text' OperatorNRTB.Text' files' c' false);  	//msg = client.MoldTest(MoldNRTB.Text' OperatorNRTB.Text' files' c' (bool)MoldStateCheckBox.IsChecked);  	break;  }  
