Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SODA,SodaRequest,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaRequest.cs,SodaRequest,Cyclomatic complexity of the method is 8
Complex Method,SODA,SoqlQuery,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SoqlQuery.cs,ToString,Cyclomatic complexity of the method is 11
Long Parameter List,SODA,SodaRequest,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaRequest.cs,SodaRequest,The method has 8 parameters. Parameters: uri' method' appToken' username' password' dataFormat' payload' timeout
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,GetMetadata,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,GetResource,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,Query,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,Upsert,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,Upsert,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,BatchUpsert,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,BatchUpsert,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,Replace,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,Replace,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,DeleteRow,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA,SodaClient,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaClient.cs,write,The length of the statement  "            var request = new SodaRequest(uri' method' AppToken' Username' password' SodaDataFormat.JSON' payload.ToJsonString()' RequestTimeout); " is 134.
Long Statement,SODA,SodaRequest,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaRequest.cs,ParseResponse,The length of the statement  "                        result = Newtonsoft.Json.JsonConvert.DeserializeObject<TResult>(this.ResponseMessage.Content.ReadAsStringAsync().Result); " is 121.
Long Statement,SODA,SodaRequest,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaRequest.cs,ParseResponse,The length of the statement  "                throw new InvalidOperationException(String.Format("Couldn't deserialize the ({0}) response into an instance of type {1}."' dataFormat' typeof(TResult))' inner); " is 160.
Long Statement,SODA.Utilities,SodaUri,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\Utilities\SodaUri.cs,ForMetadata,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA.Utilities,SodaUri,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\Utilities\SodaUri.cs,ForResourceAPI,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA.Utilities,SodaUri,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\Utilities\SodaUri.cs,ForResourcePage,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA.Utilities,SodaUri,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\Utilities\SodaUri.cs,ForResourceAboutPage,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA.Utilities,SodaUri,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\Utilities\SodaUri.cs,ForResourceAPIPage,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA.Utilities,SodaUri,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\Utilities\SodaUri.cs,ForQuery,The length of the statement  "                throw new ArgumentOutOfRangeException("resourceId"' "The provided resourceId is not a valid Socrata (4x4) resource identifier."); " is 129.
Long Statement,SODA.Utilities,SodaUri,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\Utilities\SodaUri.cs,ForCategoryPage,The length of the statement  "            string url = String.Format("{0}/{1}"' metadataUrl(socrataHost).Replace("views"' "categories")' Uri.EscapeDataString(category)); " is 127.
Complex Conditional,SODA.Models,HumanAddress,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\Models\HumanAddress.cs,HumanAddress,The conditional expression  "other != null && other.Address == null && other.City == null && other.State == null && other.Zip == null"  is complex.
Missing Default,SODA,SodaRequest,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaRequest.cs,SodaRequest,The following switch statement is missing a default case: switch (dataFormat)              {                  case SodaDataFormat.JSON:                      Client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));                      break;                  case SodaDataFormat.CSV:                      this.Client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("text/csv"));                      break;                  case SodaDataFormat.XML:                      this.Client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/rdf+xml"));                      break;              }
Missing Default,SODA,SodaRequest,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaRequest.cs,SodaRequest,The following switch statement is missing a default case: switch (dataFormat)                  {                      case SodaDataFormat.JSON:                          this.RequestMessage.Content = new StringContent(payload' Encoding.UTF8' "application/json");                          break;                      case SodaDataFormat.CSV:                          this.RequestMessage.Content = new StringContent(payload' Encoding.UTF8' "text/csv");                          break;                      case SodaDataFormat.XML:                          this.RequestMessage.Content = new StringContent(payload' Encoding.UTF8' "application/rdf+xml");                          break;                  }
Missing Default,SODA,SodaRequest,D:\research\architectureSmells\repos\CityofSantaMonica_SODA.NET\SODA\SodaRequest.cs,ParseResponse,The following switch statement is missing a default case: switch (dataFormat)              {                  case SodaDataFormat.JSON:                      try                      {                          result = Newtonsoft.Json.JsonConvert.DeserializeObject<TResult>(this.ResponseMessage.Content.ReadAsStringAsync().Result);                      }                      catch (Newtonsoft.Json.JsonException jex)                      {                          inner = jex;                          exception = true;                      }                      break;                  case SodaDataFormat.CSV:                      //TODO: should we consider this an error (i.e. InvalidOperationException) if this cast returns null?                      result = this.ResponseMessage.Content.ReadAsStringAsync().Result as TResult;                      break;                  case SodaDataFormat.XML:                      //see if the caller just wanted the XML string                      var ttype = typeof(TResult);                      if (ttype == typeof(string))                      {                          result = this.ResponseMessage.Content.ReadAsStringAsync().Result as TResult;                      }                      else                      {                          //try to deserialize the XML response                          try                          {                              var reader = XmlReader.Create(new StringReader(this.ResponseMessage.Content.ReadAsStringAsync().Result));                              var serializer = new XmlSerializer(ttype);                              result = serializer.Deserialize(reader) as TResult;                          }                          catch (Exception ex)                          {                              inner = ex;                              exception = true;                          }                      }                      break;              }
