Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CsNativeVisual,MainWindowViewModel,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindowViewModel.cs,CompileCode,The length of the statement  "                      var files = Directory.GetFiles(Path.GetDirectoryName(slnPath)' "*.cs"' SearchOption.AllDirectories)//.Union(Directory.GetFiles(TempDir' "*.h"' SearchOption.AllDirectories)) " is 172.
Long Statement,CsNativeVisual,MainWindowViewModel,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindowViewModel.cs,CompileCode,The length of the statement  "                      //				var compilation = CSharpCompilation.Create (testName' files.Select (o => CSharpSyntaxTree.ParseText (o))' new MetadataReference[]  " is 135.
Long Statement,CsNativeVisual,MainWindowViewModel,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindowViewModel.cs,CompileCode,The length of the statement  "                      //					new MetadataImageReference (AssemblyMetadata.CreateFromImageStream (new FileStream (typeof(object).Assembly.Location' FileMode.Open' FileAccess.Read)))' " is 159.
Long Statement,CsNativeVisual,MainWindowViewModel,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindowViewModel.cs,CompileCode,The length of the statement  "                      //					new MetadataImageReference (AssemblyMetadata.CreateFromImageStream (new FileStream (typeof(Enumerable).Assembly.Location' FileMode.Open' FileAccess.Read)))' // Linq " is 171.
Long Statement,CsNativeVisual,MainWindowViewModel,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindowViewModel.cs,CompileCode,The length of the statement  "                      //					new MetadataImageReference (AssemblyMetadata.CreateFromImageStream (new FileStream (typeof(RuntimeBinderException).Assembly.Location' FileMode.Open' FileAccess.Read)))' " is 175.
Long Statement,CsNativeVisual,MainWindowViewModel,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindowViewModel.cs,CompileCode,The length of the statement  "                      //					new MetadataImageReference (AssemblyMetadata.CreateFromImageStream (new FileStream (typeof(Microsoft.CSharp.CSharpCodeProvider).Assembly.Location' FileMode.Open' FileAccess.Read)))' " is 188.
Long Statement,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,CompileD,The length of the statement  "                var outputexe = MainWindowViewModel.TempDir + "/"+ LastCompiledExecutable.Replace(".exe"' ".d").Replace(".d"' "_d.exe"); " is 120.
Long Statement,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,CompileD,The length of the statement  "                   // @"C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\vcvars32.bat".ExecuteCommand(""'@"C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\"); " is 160.
Long Statement,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,CompileD,The length of the statement  "                    NativeCompilationUtils.CompileAppToNativeExe(((List<FileItem>)CppFileList.ItemsSource).Where(j=>j.Name.EndsWith(".d")).Select(k=>k.Location).Union(bclFiles).ToArray()' outputexe); " is 179.
Long Statement,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,RunAllTests,The length of the statement  "                                    ViewModel.CompilerErrors += String.Format("-------------------------Test {0} Passed:-------------------------\n"' shortName); " is 125.
Long Statement,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,RunAllTests,The length of the statement  "                        ViewModel.CompilerErrors += String.Format("Summary \nTotal:{0} \nPass Rate:{1} \nPassed: {2} \nFailed: {3} {4}\n"' allTests.Count()' (passCount * 100) / ((float)allTests.Count())' passCount' allTests.Count() - passCount' (allTests.Count() - passCount == 0) ? "" : failedTestNames.Aggregate((k' j) => k + " ' " + j)); " is 316.
Empty Catch Block,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,CompileD,The method has an empty catch block.
Magic Number,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: foldingUpdateTimer.Interval = TimeSpan.FromSeconds(2);
Magic Number,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,TestButton_Click,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((h) =>            {                CompileCSharp(false);                CompileD();                             if (strip(CSharpOutput??"") == strip(CppOutput??""))                  {                      Dispatcher.Invoke(() =>                      {                          TestStatus.Content = "PASSED";                          TestStatus.Background =                              new SolidColorBrush(System.Windows.Media.Color.FromRgb(Color.GreenYellow.R'                                  Color.GreenYellow.G' Color.GreenYellow.B));                            ViewModel.CompilerErrors = String.Format("Test Passed:\n\nCSharpOutput:\n{0}DlangOutPut:\n{1}"'                              CSharpOutput' CppOutput);                      });                  }                  else                  {                      Dispatcher.Invoke(() =>                      {                          TestStatus.Content = "FAILED";                          TestStatus.Background =                              new SolidColorBrush(System.Windows.Media.Color.FromRgb(Color.Red.R' Color.Red.G' Color.Red.B));                          ViewModel.CompilerErrors = "Test Failed\n" + ViewModel.CompilerErrors;                      });                  }                  if (ResetStatus == null)                  {                      ResetStatus = new Timer(2000);                      ResetStatus.AutoReset = false;                      ResetStatus.Elapsed += (o' args) => Dispatcher.Invoke(() =>                      {                          TestStatus.Content = "TEST STATUS";                          TestStatus.Background =                              new SolidColorBrush(System.Windows.Media.Color.FromRgb(Color.White.R' Color.White.G'                                  Color.White.B));                      });                  }                  ResetStatus.Start();            });
Magic Number,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,Button_Click,The following statement contains a magic number: if (SaveStatus == null)              {                  SaveStatus = new Timer(2000);                  SaveStatus.AutoReset = false;                  SaveStatus.Elapsed += (o' args) => Dispatcher.Invoke(() =>                  {                      SaveButton.Content = "Save";                      SaveButton.Background =                          new SolidColorBrush(System.Windows.Media.Color.FromRgb(Color.White.R' Color.White.G'                              Color.White.B));                  });              }
Magic Number,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,SaveButton_Test_Click,The following statement contains a magic number: if (SaveStatus == null)              {                  SaveStatus = new Timer(2000);                  SaveStatus.AutoReset = false;                  SaveStatus.Elapsed += (o' args) => Dispatcher.Invoke(() =>                  {                      SaveButton_Test.Content = "Save";                      SaveButton_Test.Background =                          new SolidColorBrush(System.Windows.Media.Color.FromRgb(Color.White.R' Color.White.G'                              Color.White.B));                  });              }
Magic Number,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,RunAllTests,The following statement contains a magic number: if ((bool)dialog.ShowDialog(this))              {                                              var filename = dialog.SelectedPath; // will switch to .Url later                                                     //				var newText = File.ReadAllText (filename);                                                     //				CSharpFilename.StringValue = Path.GetFileName (filename);                                                     //				CSharpTextEditor.Replace (new NSRange (0' CSharpTextEditor.Value.Length)' newText);                                                     //				ViewModel.SourceCode = newText;                                                     //				ViewModel.RecompileSource ();                    Func<string' string> strip = i => Regex.Replace(i ?? ""' "[\r\n \t]+"' " ").Trim();                    ViewModel.CompilerErrors = "\r\r" + ("Running all tests in : " + filename) + "\r\r";                  int passCount = 0;                  //			if (ResetStatus != null)                  //				ResetStatus.Stop();                  List<string> failedTestNames = new List<string>();                  ThreadPool.QueueUserWorkItem((h) =>                      {                            var allTests = Directory.EnumerateFiles(filename).Where(u => Path.GetExtension(u) == ".cs");                          var count = 0;                          foreach (var file in allTests)                          {                                var shortName = Path.GetFileName(file);                              Console.WriteLine("-------------------------Running Test: " + shortName + "-------------------------");                              ViewModel.CompilerErrors += "-------------------------Running Test: " + shortName + "-------------------------";                                var text = FileExtensions.ReadFile(file);                                if (text == "-1")                                  break;                                Dispatcher.Invoke(() =>                              {                                  CurrentSourceFile = file;                                    TextEditor.Text = text;  //                                ViewModel.Recompile(CurrentSourceFile);    //                                CSharpFilename.StringValue = Path.GetFileName(file);    //                                CSharpTextEditor.Value = Extensions.ReadFile(file);                              });                                CSharpOutput = "Z..)";                              CppOutput = "A..)";                              //							ViewModel.CompileAndRunCode(shortName'File.ReadAllText(file));                              CompileCSharp(false);                              CompileD();                              count++;                                if (count % 20 == 0)                              {                                  GC.Collect();                              }                                if (strip(CSharpOutput) == strip(CppOutput))                              {                                  passCount++;                                  Dispatcher.Invoke(() =>                                  {                                                                             ViewModel.CompilerErrors += String.Format("-------------------------Test {0} Passed:-------------------------\n"' shortName);                                  });                              }                              else                              {                                  Dispatcher.Invoke(() =>                                  {                                                                       ViewModel.CompilerErrors += String.Format("Test {0} Failed:\n"' shortName);                                      failedTestNames.Add(Path.GetFileNameWithoutExtension(shortName));                                    });                              }                                                       }                            ViewModel.CompilerErrors += String.Format("Summary \nTotal:{0} \nPass Rate:{1} \nPassed: {2} \nFailed: {3} {4}\n"' allTests.Count()' (passCount * 100) / ((float)allTests.Count())' passCount' allTests.Count() - passCount' (allTests.Count() - passCount == 0) ? "" : failedTestNames.Aggregate((k' j) => k + " ' " + j));                        });                    }
Magic Number,CsNativeVisual,MainWindow,C:\repos\afrogeek_SharpNative\CsNativeVisual\MainWindow.xaml.cs,RunAllTests,The following statement contains a magic number: if ((bool)dialog.ShowDialog(this))              {                                              var filename = dialog.SelectedPath; // will switch to .Url later                                                     //				var newText = File.ReadAllText (filename);                                                     //				CSharpFilename.StringValue = Path.GetFileName (filename);                                                     //				CSharpTextEditor.Replace (new NSRange (0' CSharpTextEditor.Value.Length)' newText);                                                     //				ViewModel.SourceCode = newText;                                                     //				ViewModel.RecompileSource ();                    Func<string' string> strip = i => Regex.Replace(i ?? ""' "[\r\n \t]+"' " ").Trim();                    ViewModel.CompilerErrors = "\r\r" + ("Running all tests in : " + filename) + "\r\r";                  int passCount = 0;                  //			if (ResetStatus != null)                  //				ResetStatus.Stop();                  List<string> failedTestNames = new List<string>();                  ThreadPool.QueueUserWorkItem((h) =>                      {                            var allTests = Directory.EnumerateFiles(filename).Where(u => Path.GetExtension(u) == ".cs");                          var count = 0;                          foreach (var file in allTests)                          {                                var shortName = Path.GetFileName(file);                              Console.WriteLine("-------------------------Running Test: " + shortName + "-------------------------");                              ViewModel.CompilerErrors += "-------------------------Running Test: " + shortName + "-------------------------";                                var text = FileExtensions.ReadFile(file);                                if (text == "-1")                                  break;                                Dispatcher.Invoke(() =>                              {                                  CurrentSourceFile = file;                                    TextEditor.Text = text;  //                                ViewModel.Recompile(CurrentSourceFile);    //                                CSharpFilename.StringValue = Path.GetFileName(file);    //                                CSharpTextEditor.Value = Extensions.ReadFile(file);                              });                                CSharpOutput = "Z..)";                              CppOutput = "A..)";                              //							ViewModel.CompileAndRunCode(shortName'File.ReadAllText(file));                              CompileCSharp(false);                              CompileD();                              count++;                                if (count % 20 == 0)                              {                                  GC.Collect();                              }                                if (strip(CSharpOutput) == strip(CppOutput))                              {                                  passCount++;                                  Dispatcher.Invoke(() =>                                  {                                                                             ViewModel.CompilerErrors += String.Format("-------------------------Test {0} Passed:-------------------------\n"' shortName);                                  });                              }                              else                              {                                  Dispatcher.Invoke(() =>                                  {                                                                       ViewModel.CompilerErrors += String.Format("Test {0} Failed:\n"' shortName);                                      failedTestNames.Add(Path.GetFileNameWithoutExtension(shortName));                                    });                              }                                                       }                            ViewModel.CompilerErrors += String.Format("Summary \nTotal:{0} \nPass Rate:{1} \nPassed: {2} \nFailed: {3} {4}\n"' allTests.Count()' (passCount * 100) / ((float)allTests.Count())' passCount' allTests.Count() - passCount' (allTests.Count() - passCount == 0) ? "" : failedTestNames.Aggregate((k' j) => k + " ' " + j));                        });                    }
