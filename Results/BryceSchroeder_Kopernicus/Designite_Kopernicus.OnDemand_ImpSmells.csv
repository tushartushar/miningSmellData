Implementation smell,Namespace,Class,File,Method,Description
Long Method,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The method has 141 lines of code.
Long Method,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The method has 141 lines of code.
Complex Method,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,Cyclomatic complexity of the method is 13
Complex Method,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,Cyclomatic complexity of the method is 13
Long Statement,OnDemand,CBAttributeMapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\CBAttributeMapSODemand.cs,GetAtt,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting attribute with unloaded CBmap " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,OnDemand,CBAttributeMapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\CBAttributeMapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColF with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,CBAttributeMapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\CBAttributeMapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,CBAttributeMapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\CBAttributeMapSODemand.cs,CompileToTexture,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("OD: ERROR: compiling with unloaded CBmap " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 154.
Long Statement,OnDemand,Events,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\Events.cs,Awake,The length of the statement  "                PropertyInfo[] events = typeof(Events).GetProperties(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 121.
Long Statement,OnDemand,Events,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\Events.cs,Awake,The length of the statement  "                    DescriptionAttribute description = (info.GetCustomAttributes(typeof(DescriptionAttribute)' false) as DescriptionAttribute[])[0]; " is 128.
Long Statement,OnDemand,Events,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\Events.cs,Awake,The length of the statement  "                    events[i].SetValue(null' Activator.CreateInstance(events[i].PropertyType' new[] { "Kopernicus." + description.Description })' null); " is 132.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelByte,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelbyte with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColD with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColF with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor32,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelCol32D with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor32,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelCol32F with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor32,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelCol32I with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelFloat,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelFloatD with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelFloat,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelFloatF with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelFloat,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelFloatI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelHeightAlpha,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelHeightAlphaD with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 169.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelHeightAlpha,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelHeightAlphaF with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 169.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelHeightAlpha,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelHeightAlphaI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 169.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GreyByte,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting GreyByteI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GreyFloat,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting GreyFloat with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,PixelByte,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelByte with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,OnDemand,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,CompileToTexture,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: compiling with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 153.
Long Statement,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,AddMap,The length of the statement  "                    Debug.Log("[OD] WARNING: trying to add a map but is already tracked! Current body is " + body + " and map name is " + map.name + " and path is " + map.Path); " is 157.
Long Statement,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                Boolean rgb888 = dDSHeader.ddspf.dwRBitMask == 0x000000ff && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x00ff0000; " is 146.
Long Statement,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                //Boolean bgr888 = dDSHeader.ddspf.dwRBitMask == 0x00ff0000 && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x000000ff; " is 148.
Long Statement,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                Boolean rgb565 = dDSHeader.ddspf.dwRBitMask == 0x0000F800 && dDSHeader.ddspf.dwGBitMask == 0x000007E0 && dDSHeader.ddspf.dwBBitMask == 0x0000001F; " is 146.
Long Statement,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                Boolean argb4444 = dDSHeader.ddspf.dwABitMask == 0x0000f000 && dDSHeader.ddspf.dwRBitMask == 0x00000f00 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x0000000f; " is 192.
Long Statement,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                Boolean rbga4444 = dDSHeader.ddspf.dwABitMask == 0x0000000f && dDSHeader.ddspf.dwRBitMask == 0x0000f000 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x00000f00; " is 192.
Long Statement,Kopernicus,CBAttributeMapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\CBAttributeMapSODemand.cs,GetAtt,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting attribute with unloaded CBmap " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,Kopernicus,CBAttributeMapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\CBAttributeMapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColF with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,CBAttributeMapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\CBAttributeMapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,CBAttributeMapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\CBAttributeMapSODemand.cs,CompileToTexture,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("OD: ERROR: compiling with unloaded CBmap " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 154.
Long Statement,Kopernicus,Events,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\Events.cs,Awake,The length of the statement  "                PropertyInfo[] events = typeof(Events).GetProperties(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 121.
Long Statement,Kopernicus,Events,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\Events.cs,Awake,The length of the statement  "                    DescriptionAttribute description = (info.GetCustomAttributes(typeof(DescriptionAttribute)' false) as DescriptionAttribute[])[0]; " is 128.
Long Statement,Kopernicus,Events,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\Events.cs,Awake,The length of the statement  "                    events[i].SetValue(null' Activator.CreateInstance(events[i].PropertyType' new[] { "Kopernicus." + description.Description })' null); " is 132.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelByte,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelbyte with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColD with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColF with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelColI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor32,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelCol32D with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor32,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelCol32F with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelColor32,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelCol32I with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelFloat,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelFloatD with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelFloat,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelFloatF with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelFloat,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelFloatI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 163.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelHeightAlpha,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelHeightAlphaD with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 169.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelHeightAlpha,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelHeightAlphaF with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 169.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GetPixelHeightAlpha,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelHeightAlphaI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 169.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GreyByte,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting GreyByteI with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,GreyFloat,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting GreyFloat with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,PixelByte,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: getting pixelByte with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 161.
Long Statement,Kopernicus,MapSODemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\MapSODemand.cs,CompileToTexture,The length of the statement  "                    if (OnDemandStorage.onDemandLogOnMissing) Debug.Log("[OD] ERROR: compiling with unloaded map " + name + " of path " + Path + "' autoload = " + AutoLoad); " is 153.
Long Statement,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,AddMap,The length of the statement  "                    Debug.Log("[OD] WARNING: trying to add a map but is already tracked! Current body is " + body + " and map name is " + map.name + " and path is " + map.Path); " is 157.
Long Statement,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                Boolean rgb888 = dDSHeader.ddspf.dwRBitMask == 0x000000ff && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x00ff0000; " is 146.
Long Statement,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                //Boolean bgr888 = dDSHeader.ddspf.dwRBitMask == 0x00ff0000 && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x000000ff; " is 148.
Long Statement,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                Boolean rgb565 = dDSHeader.ddspf.dwRBitMask == 0x0000F800 && dDSHeader.ddspf.dwGBitMask == 0x000007E0 && dDSHeader.ddspf.dwBBitMask == 0x0000001F; " is 146.
Long Statement,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                Boolean argb4444 = dDSHeader.ddspf.dwABitMask == 0x0000f000 && dDSHeader.ddspf.dwRBitMask == 0x00000f00 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x0000000f; " is 192.
Long Statement,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The length of the statement  "                                Boolean rbga4444 = dDSHeader.ddspf.dwABitMask == 0x0000000f && dDSHeader.ddspf.dwRBitMask == 0x0000f000 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x00000f00; " is 192.
Complex Conditional,OnDemand,ScaledSpaceDemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\ScaledSpaceDemand.cs,LateUpdate,The conditional expression  "isInView && (!isLoaded || isLoaded && unloadTime != 0)"  is complex.
Complex Conditional,OnDemand,ScaledSpaceDemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\ScaledSpaceDemand.cs,IsInView,The conditional expression  "pointOnScreen.x < 0 || pointOnScreen.x > Screen.width ||                      pointOnScreen.y < 0 || pointOnScreen.y > Screen.height"  is complex.
Complex Conditional,Kopernicus,ScaledSpaceDemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\ScaledSpaceDemand.cs,LateUpdate,The conditional expression  "isInView && (!isLoaded || isLoaded && unloadTime != 0)"  is complex.
Complex Conditional,Kopernicus,ScaledSpaceDemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\ScaledSpaceDemand.cs,IsInView,The conditional expression  "pointOnScreen.x < 0 || pointOnScreen.x > Screen.width ||                      pointOnScreen.y < 0 || pointOnScreen.y > Screen.height"  is complex.
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: Int32[] temp = new Int32[3];
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: Int32 offset = -4;
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: fixed (Int32* ptr = &temp[0])                  {                      Int32* p = ptr - 1;                      while (*p != 3 && offset > -44)                      {                          offset -= 4;                          p--;                      }                        arrayLengthOffset = (*p == 3) ? offset : 1;                      Debug.Log("[OD] CalculateArrayLengthOffset using offset of " + arrayLengthOffset);                  }
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: fixed (Int32* ptr = &temp[0])                  {                      Int32* p = ptr - 1;                      while (*p != 3 && offset > -44)                      {                          offset -= 4;                          p--;                      }                        arrayLengthOffset = (*p == 3) ? offset : 1;                      Debug.Log("[OD] CalculateArrayLengthOffset using offset of " + arrayLengthOffset);                  }
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: fixed (Int32* ptr = &temp[0])                  {                      Int32* p = ptr - 1;                      while (*p != 3 && offset > -44)                      {                          offset -= 4;                          p--;                      }                        arrayLengthOffset = (*p == 3) ? offset : 1;                      Debug.Log("[OD] CalculateArrayLengthOffset using offset of " + arrayLengthOffset);                  }
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: fixed (Int32* ptr = &temp[0])                  {                      Int32* p = ptr - 1;                      while (*p != 3 && offset > -44)                      {                          offset -= 4;                          p--;                      }                        arrayLengthOffset = (*p == 3) ? offset : 1;                      Debug.Log("[OD] CalculateArrayLengthOffset using offset of " + arrayLengthOffset);                  }
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The following statement contains a magic number: if (File.Exists(path))                  {                      Boolean uncaught = true;                      try                      {                          if (path.ToLower().EndsWith(".dds"))                          {                              // Borrowed from stock KSP 1.0 DDS loader (hi Mike!)                              // Also borrowed the extra bits from Sarbian.                              BinaryReader binaryReader = new BinaryReader(File.OpenRead(path));                              uint num = binaryReader.ReadUInt32();                              if (num == DDSHeaders.DDSValues.uintMagic)                              {                                    DDSHeaders.DDSHeader dDSHeader = new DDSHeaders.DDSHeader(binaryReader);                                    if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                  {                                      new DDSHeaders.DDSHeaderDX10(binaryReader);                                  }                                    Boolean alpha = (dDSHeader.dwFlags & 0x00000002) != 0;                                  Boolean fourcc = (dDSHeader.dwFlags & 0x00000004) != 0;                                  Boolean rgb = (dDSHeader.dwFlags & 0x00000040) != 0;                                  Boolean alphapixel = (dDSHeader.dwFlags & 0x00000001) != 0;                                  Boolean luminance = (dDSHeader.dwFlags & 0x00020000) != 0;                                  Boolean rgb888 = dDSHeader.ddspf.dwRBitMask == 0x000000ff && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x00ff0000;                                  //Boolean bgr888 = dDSHeader.ddspf.dwRBitMask == 0x00ff0000 && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x000000ff;                                  Boolean rgb565 = dDSHeader.ddspf.dwRBitMask == 0x0000F800 && dDSHeader.ddspf.dwGBitMask == 0x000007E0 && dDSHeader.ddspf.dwBBitMask == 0x0000001F;                                  Boolean argb4444 = dDSHeader.ddspf.dwABitMask == 0x0000f000 && dDSHeader.ddspf.dwRBitMask == 0x00000f00 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x0000000f;                                  Boolean rbga4444 = dDSHeader.ddspf.dwABitMask == 0x0000000f && dDSHeader.ddspf.dwRBitMask == 0x0000f000 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x00000f00;                                    Boolean mipmap = (dDSHeader.dwCaps & DDSHeaders.DDSPixelFormatCaps.MIPMAP) != (DDSHeaders.DDSPixelFormatCaps)0u;                                  Boolean isNormalMap = ((dDSHeader.ddspf.dwFlags & 524288u) != 0u || (dDSHeader.ddspf.dwFlags & 2147483648u) != 0u);                                  if (fourcc)                                  {                                      if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT1)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT1' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT3)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' (TextureFormat)11' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT5)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT5' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT2)                                      {                                          Debug.Log("[Kopernicus]: DXT2 not supported" + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT4)                                      {                                          Debug.Log("[Kopernicus]: DXT4 not supported: " + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                      {                                          Debug.Log("[Kopernicus]: DX10 dds not supported: " + path);                                      }                                      else                                          fourcc = false;                                  }                                  if (!fourcc)                                  {                                      TextureFormat textureFormat = TextureFormat.ARGB32;                                      Boolean ok = true;                                      if (rgb && (rgb888 /*|| bgr888*/))                                      {                                          // RGB or RGBA format                                          textureFormat = alphapixel                                          ? TextureFormat.RGBA32                                          : TextureFormat.RGB24;                                      }                                      else if (rgb && rgb565)                                      {                                          // Nvidia texconv B5G6R5_UNORM                                          textureFormat = TextureFormat.RGB565;                                      }                                      else if (rgb && alphapixel && argb4444)                                      {                                          // Nvidia texconv B4G4R4A4_UNORM                                          textureFormat = TextureFormat.ARGB4444;                                      }                                      else if (rgb && alphapixel && rbga4444)                                      {                                          textureFormat = TextureFormat.RGBA4444;                                      }                                      else if (!rgb && alpha != luminance)                                      {                                          // A8 format or Luminance 8                                          textureFormat = TextureFormat.Alpha8;                                      }                                      else                                      {                                          ok = false;                                          Debug.Log("[Kopernicus]: Only DXT1' DXT5' A8' RGB24' RGBA32' RGB565' ARGB4444 and RGBA4444 are supported");                                      }                                      if (ok)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' textureFormat' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                    }                                  if (map != null)                                      if (upload)                                          map.Apply(false' unreadable);                              }                              else                                  Debug.Log("[Kopernicus]: Bad DDS header.");                          }                          else                          {                              map = new Texture2D(2' 2);                              byte[] data = LoadWholeFile(path);                              if (data == null)                                  throw new Exception("LoadWholeFile failed");                                map.LoadImage(data);                              if (compress)                                  map.Compress(true);                              if (upload)                                  map.Apply(false' unreadable);                          }                      }                      catch (Exception ex)                      {                          uncaught = false;                          Debug.Log("[Kopernicus]: failed to load " + path + " with exception " + ex.Message);                      }                      if (map == null && uncaught)                      {                          Debug.Log("[Kopernicus]: failed to load " + path);                      }                      map.name = path.Remove(0' (KSPUtil.ApplicationRootPath + "GameData/").Length);                  }                  else                      Debug.Log("[Kopernicus]: texture does not exist! " + path);
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The following statement contains a magic number: if (File.Exists(path))                  {                      Boolean uncaught = true;                      try                      {                          if (path.ToLower().EndsWith(".dds"))                          {                              // Borrowed from stock KSP 1.0 DDS loader (hi Mike!)                              // Also borrowed the extra bits from Sarbian.                              BinaryReader binaryReader = new BinaryReader(File.OpenRead(path));                              uint num = binaryReader.ReadUInt32();                              if (num == DDSHeaders.DDSValues.uintMagic)                              {                                    DDSHeaders.DDSHeader dDSHeader = new DDSHeaders.DDSHeader(binaryReader);                                    if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                  {                                      new DDSHeaders.DDSHeaderDX10(binaryReader);                                  }                                    Boolean alpha = (dDSHeader.dwFlags & 0x00000002) != 0;                                  Boolean fourcc = (dDSHeader.dwFlags & 0x00000004) != 0;                                  Boolean rgb = (dDSHeader.dwFlags & 0x00000040) != 0;                                  Boolean alphapixel = (dDSHeader.dwFlags & 0x00000001) != 0;                                  Boolean luminance = (dDSHeader.dwFlags & 0x00020000) != 0;                                  Boolean rgb888 = dDSHeader.ddspf.dwRBitMask == 0x000000ff && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x00ff0000;                                  //Boolean bgr888 = dDSHeader.ddspf.dwRBitMask == 0x00ff0000 && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x000000ff;                                  Boolean rgb565 = dDSHeader.ddspf.dwRBitMask == 0x0000F800 && dDSHeader.ddspf.dwGBitMask == 0x000007E0 && dDSHeader.ddspf.dwBBitMask == 0x0000001F;                                  Boolean argb4444 = dDSHeader.ddspf.dwABitMask == 0x0000f000 && dDSHeader.ddspf.dwRBitMask == 0x00000f00 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x0000000f;                                  Boolean rbga4444 = dDSHeader.ddspf.dwABitMask == 0x0000000f && dDSHeader.ddspf.dwRBitMask == 0x0000f000 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x00000f00;                                    Boolean mipmap = (dDSHeader.dwCaps & DDSHeaders.DDSPixelFormatCaps.MIPMAP) != (DDSHeaders.DDSPixelFormatCaps)0u;                                  Boolean isNormalMap = ((dDSHeader.ddspf.dwFlags & 524288u) != 0u || (dDSHeader.ddspf.dwFlags & 2147483648u) != 0u);                                  if (fourcc)                                  {                                      if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT1)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT1' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT3)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' (TextureFormat)11' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT5)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT5' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT2)                                      {                                          Debug.Log("[Kopernicus]: DXT2 not supported" + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT4)                                      {                                          Debug.Log("[Kopernicus]: DXT4 not supported: " + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                      {                                          Debug.Log("[Kopernicus]: DX10 dds not supported: " + path);                                      }                                      else                                          fourcc = false;                                  }                                  if (!fourcc)                                  {                                      TextureFormat textureFormat = TextureFormat.ARGB32;                                      Boolean ok = true;                                      if (rgb && (rgb888 /*|| bgr888*/))                                      {                                          // RGB or RGBA format                                          textureFormat = alphapixel                                          ? TextureFormat.RGBA32                                          : TextureFormat.RGB24;                                      }                                      else if (rgb && rgb565)                                      {                                          // Nvidia texconv B5G6R5_UNORM                                          textureFormat = TextureFormat.RGB565;                                      }                                      else if (rgb && alphapixel && argb4444)                                      {                                          // Nvidia texconv B4G4R4A4_UNORM                                          textureFormat = TextureFormat.ARGB4444;                                      }                                      else if (rgb && alphapixel && rbga4444)                                      {                                          textureFormat = TextureFormat.RGBA4444;                                      }                                      else if (!rgb && alpha != luminance)                                      {                                          // A8 format or Luminance 8                                          textureFormat = TextureFormat.Alpha8;                                      }                                      else                                      {                                          ok = false;                                          Debug.Log("[Kopernicus]: Only DXT1' DXT5' A8' RGB24' RGBA32' RGB565' ARGB4444 and RGBA4444 are supported");                                      }                                      if (ok)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' textureFormat' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                    }                                  if (map != null)                                      if (upload)                                          map.Apply(false' unreadable);                              }                              else                                  Debug.Log("[Kopernicus]: Bad DDS header.");                          }                          else                          {                              map = new Texture2D(2' 2);                              byte[] data = LoadWholeFile(path);                              if (data == null)                                  throw new Exception("LoadWholeFile failed");                                map.LoadImage(data);                              if (compress)                                  map.Compress(true);                              if (upload)                                  map.Apply(false' unreadable);                          }                      }                      catch (Exception ex)                      {                          uncaught = false;                          Debug.Log("[Kopernicus]: failed to load " + path + " with exception " + ex.Message);                      }                      if (map == null && uncaught)                      {                          Debug.Log("[Kopernicus]: failed to load " + path);                      }                      map.name = path.Remove(0' (KSPUtil.ApplicationRootPath + "GameData/").Length);                  }                  else                      Debug.Log("[Kopernicus]: texture does not exist! " + path);
Magic Number,OnDemand,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The following statement contains a magic number: if (File.Exists(path))                  {                      Boolean uncaught = true;                      try                      {                          if (path.ToLower().EndsWith(".dds"))                          {                              // Borrowed from stock KSP 1.0 DDS loader (hi Mike!)                              // Also borrowed the extra bits from Sarbian.                              BinaryReader binaryReader = new BinaryReader(File.OpenRead(path));                              uint num = binaryReader.ReadUInt32();                              if (num == DDSHeaders.DDSValues.uintMagic)                              {                                    DDSHeaders.DDSHeader dDSHeader = new DDSHeaders.DDSHeader(binaryReader);                                    if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                  {                                      new DDSHeaders.DDSHeaderDX10(binaryReader);                                  }                                    Boolean alpha = (dDSHeader.dwFlags & 0x00000002) != 0;                                  Boolean fourcc = (dDSHeader.dwFlags & 0x00000004) != 0;                                  Boolean rgb = (dDSHeader.dwFlags & 0x00000040) != 0;                                  Boolean alphapixel = (dDSHeader.dwFlags & 0x00000001) != 0;                                  Boolean luminance = (dDSHeader.dwFlags & 0x00020000) != 0;                                  Boolean rgb888 = dDSHeader.ddspf.dwRBitMask == 0x000000ff && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x00ff0000;                                  //Boolean bgr888 = dDSHeader.ddspf.dwRBitMask == 0x00ff0000 && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x000000ff;                                  Boolean rgb565 = dDSHeader.ddspf.dwRBitMask == 0x0000F800 && dDSHeader.ddspf.dwGBitMask == 0x000007E0 && dDSHeader.ddspf.dwBBitMask == 0x0000001F;                                  Boolean argb4444 = dDSHeader.ddspf.dwABitMask == 0x0000f000 && dDSHeader.ddspf.dwRBitMask == 0x00000f00 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x0000000f;                                  Boolean rbga4444 = dDSHeader.ddspf.dwABitMask == 0x0000000f && dDSHeader.ddspf.dwRBitMask == 0x0000f000 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x00000f00;                                    Boolean mipmap = (dDSHeader.dwCaps & DDSHeaders.DDSPixelFormatCaps.MIPMAP) != (DDSHeaders.DDSPixelFormatCaps)0u;                                  Boolean isNormalMap = ((dDSHeader.ddspf.dwFlags & 524288u) != 0u || (dDSHeader.ddspf.dwFlags & 2147483648u) != 0u);                                  if (fourcc)                                  {                                      if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT1)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT1' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT3)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' (TextureFormat)11' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT5)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT5' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT2)                                      {                                          Debug.Log("[Kopernicus]: DXT2 not supported" + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT4)                                      {                                          Debug.Log("[Kopernicus]: DXT4 not supported: " + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                      {                                          Debug.Log("[Kopernicus]: DX10 dds not supported: " + path);                                      }                                      else                                          fourcc = false;                                  }                                  if (!fourcc)                                  {                                      TextureFormat textureFormat = TextureFormat.ARGB32;                                      Boolean ok = true;                                      if (rgb && (rgb888 /*|| bgr888*/))                                      {                                          // RGB or RGBA format                                          textureFormat = alphapixel                                          ? TextureFormat.RGBA32                                          : TextureFormat.RGB24;                                      }                                      else if (rgb && rgb565)                                      {                                          // Nvidia texconv B5G6R5_UNORM                                          textureFormat = TextureFormat.RGB565;                                      }                                      else if (rgb && alphapixel && argb4444)                                      {                                          // Nvidia texconv B4G4R4A4_UNORM                                          textureFormat = TextureFormat.ARGB4444;                                      }                                      else if (rgb && alphapixel && rbga4444)                                      {                                          textureFormat = TextureFormat.RGBA4444;                                      }                                      else if (!rgb && alpha != luminance)                                      {                                          // A8 format or Luminance 8                                          textureFormat = TextureFormat.Alpha8;                                      }                                      else                                      {                                          ok = false;                                          Debug.Log("[Kopernicus]: Only DXT1' DXT5' A8' RGB24' RGBA32' RGB565' ARGB4444 and RGBA4444 are supported");                                      }                                      if (ok)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' textureFormat' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                    }                                  if (map != null)                                      if (upload)                                          map.Apply(false' unreadable);                              }                              else                                  Debug.Log("[Kopernicus]: Bad DDS header.");                          }                          else                          {                              map = new Texture2D(2' 2);                              byte[] data = LoadWholeFile(path);                              if (data == null)                                  throw new Exception("LoadWholeFile failed");                                map.LoadImage(data);                              if (compress)                                  map.Compress(true);                              if (upload)                                  map.Apply(false' unreadable);                          }                      }                      catch (Exception ex)                      {                          uncaught = false;                          Debug.Log("[Kopernicus]: failed to load " + path + " with exception " + ex.Message);                      }                      if (map == null && uncaught)                      {                          Debug.Log("[Kopernicus]: failed to load " + path);                      }                      map.name = path.Remove(0' (KSPUtil.ApplicationRootPath + "GameData/").Length);                  }                  else                      Debug.Log("[Kopernicus]: texture does not exist! " + path);
Magic Number,OnDemand,ScaledSpaceDemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\ScaledSpaceDemand.cs,IsInView,The following statement contains a magic number: Single pixelSize = (Single) body.Radius * 2 * Mathf.Rad2Deg * Screen.height /                                    (Vector3.Distance(cam.transform.position'                                         body.scaledBody.GetComponentInChildren<Renderer>().bounds.center) *                                     cam.fieldOfView);
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: Int32[] temp = new Int32[3];
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: Int32 offset = -4;
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: fixed (Int32* ptr = &temp[0])                  {                      Int32* p = ptr - 1;                      while (*p != 3 && offset > -44)                      {                          offset -= 4;                          p--;                      }                        arrayLengthOffset = (*p == 3) ? offset : 1;                      Debug.Log("[OD] CalculateArrayLengthOffset using offset of " + arrayLengthOffset);                  }
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: fixed (Int32* ptr = &temp[0])                  {                      Int32* p = ptr - 1;                      while (*p != 3 && offset > -44)                      {                          offset -= 4;                          p--;                      }                        arrayLengthOffset = (*p == 3) ? offset : 1;                      Debug.Log("[OD] CalculateArrayLengthOffset using offset of " + arrayLengthOffset);                  }
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: fixed (Int32* ptr = &temp[0])                  {                      Int32* p = ptr - 1;                      while (*p != 3 && offset > -44)                      {                          offset -= 4;                          p--;                      }                        arrayLengthOffset = (*p == 3) ? offset : 1;                      Debug.Log("[OD] CalculateArrayLengthOffset using offset of " + arrayLengthOffset);                  }
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,CalculateArrayLengthOffset,The following statement contains a magic number: fixed (Int32* ptr = &temp[0])                  {                      Int32* p = ptr - 1;                      while (*p != 3 && offset > -44)                      {                          offset -= 4;                          p--;                      }                        arrayLengthOffset = (*p == 3) ? offset : 1;                      Debug.Log("[OD] CalculateArrayLengthOffset using offset of " + arrayLengthOffset);                  }
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The following statement contains a magic number: if (File.Exists(path))                  {                      Boolean uncaught = true;                      try                      {                          if (path.ToLower().EndsWith(".dds"))                          {                              // Borrowed from stock KSP 1.0 DDS loader (hi Mike!)                              // Also borrowed the extra bits from Sarbian.                              BinaryReader binaryReader = new BinaryReader(File.OpenRead(path));                              uint num = binaryReader.ReadUInt32();                              if (num == DDSHeaders.DDSValues.uintMagic)                              {                                    DDSHeaders.DDSHeader dDSHeader = new DDSHeaders.DDSHeader(binaryReader);                                    if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                  {                                      new DDSHeaders.DDSHeaderDX10(binaryReader);                                  }                                    Boolean alpha = (dDSHeader.dwFlags & 0x00000002) != 0;                                  Boolean fourcc = (dDSHeader.dwFlags & 0x00000004) != 0;                                  Boolean rgb = (dDSHeader.dwFlags & 0x00000040) != 0;                                  Boolean alphapixel = (dDSHeader.dwFlags & 0x00000001) != 0;                                  Boolean luminance = (dDSHeader.dwFlags & 0x00020000) != 0;                                  Boolean rgb888 = dDSHeader.ddspf.dwRBitMask == 0x000000ff && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x00ff0000;                                  //Boolean bgr888 = dDSHeader.ddspf.dwRBitMask == 0x00ff0000 && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x000000ff;                                  Boolean rgb565 = dDSHeader.ddspf.dwRBitMask == 0x0000F800 && dDSHeader.ddspf.dwGBitMask == 0x000007E0 && dDSHeader.ddspf.dwBBitMask == 0x0000001F;                                  Boolean argb4444 = dDSHeader.ddspf.dwABitMask == 0x0000f000 && dDSHeader.ddspf.dwRBitMask == 0x00000f00 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x0000000f;                                  Boolean rbga4444 = dDSHeader.ddspf.dwABitMask == 0x0000000f && dDSHeader.ddspf.dwRBitMask == 0x0000f000 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x00000f00;                                    Boolean mipmap = (dDSHeader.dwCaps & DDSHeaders.DDSPixelFormatCaps.MIPMAP) != (DDSHeaders.DDSPixelFormatCaps)0u;                                  Boolean isNormalMap = ((dDSHeader.ddspf.dwFlags & 524288u) != 0u || (dDSHeader.ddspf.dwFlags & 2147483648u) != 0u);                                  if (fourcc)                                  {                                      if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT1)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT1' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT3)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' (TextureFormat)11' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT5)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT5' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT2)                                      {                                          Debug.Log("[Kopernicus]: DXT2 not supported" + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT4)                                      {                                          Debug.Log("[Kopernicus]: DXT4 not supported: " + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                      {                                          Debug.Log("[Kopernicus]: DX10 dds not supported: " + path);                                      }                                      else                                          fourcc = false;                                  }                                  if (!fourcc)                                  {                                      TextureFormat textureFormat = TextureFormat.ARGB32;                                      Boolean ok = true;                                      if (rgb && (rgb888 /*|| bgr888*/))                                      {                                          // RGB or RGBA format                                          textureFormat = alphapixel                                          ? TextureFormat.RGBA32                                          : TextureFormat.RGB24;                                      }                                      else if (rgb && rgb565)                                      {                                          // Nvidia texconv B5G6R5_UNORM                                          textureFormat = TextureFormat.RGB565;                                      }                                      else if (rgb && alphapixel && argb4444)                                      {                                          // Nvidia texconv B4G4R4A4_UNORM                                          textureFormat = TextureFormat.ARGB4444;                                      }                                      else if (rgb && alphapixel && rbga4444)                                      {                                          textureFormat = TextureFormat.RGBA4444;                                      }                                      else if (!rgb && alpha != luminance)                                      {                                          // A8 format or Luminance 8                                          textureFormat = TextureFormat.Alpha8;                                      }                                      else                                      {                                          ok = false;                                          Debug.Log("[Kopernicus]: Only DXT1' DXT5' A8' RGB24' RGBA32' RGB565' ARGB4444 and RGBA4444 are supported");                                      }                                      if (ok)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' textureFormat' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                    }                                  if (map != null)                                      if (upload)                                          map.Apply(false' unreadable);                              }                              else                                  Debug.Log("[Kopernicus]: Bad DDS header.");                          }                          else                          {                              map = new Texture2D(2' 2);                              byte[] data = LoadWholeFile(path);                              if (data == null)                                  throw new Exception("LoadWholeFile failed");                                map.LoadImage(data);                              if (compress)                                  map.Compress(true);                              if (upload)                                  map.Apply(false' unreadable);                          }                      }                      catch (Exception ex)                      {                          uncaught = false;                          Debug.Log("[Kopernicus]: failed to load " + path + " with exception " + ex.Message);                      }                      if (map == null && uncaught)                      {                          Debug.Log("[Kopernicus]: failed to load " + path);                      }                      map.name = path.Remove(0' (KSPUtil.ApplicationRootPath + "GameData/").Length);                  }                  else                      Debug.Log("[Kopernicus]: texture does not exist! " + path);
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The following statement contains a magic number: if (File.Exists(path))                  {                      Boolean uncaught = true;                      try                      {                          if (path.ToLower().EndsWith(".dds"))                          {                              // Borrowed from stock KSP 1.0 DDS loader (hi Mike!)                              // Also borrowed the extra bits from Sarbian.                              BinaryReader binaryReader = new BinaryReader(File.OpenRead(path));                              uint num = binaryReader.ReadUInt32();                              if (num == DDSHeaders.DDSValues.uintMagic)                              {                                    DDSHeaders.DDSHeader dDSHeader = new DDSHeaders.DDSHeader(binaryReader);                                    if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                  {                                      new DDSHeaders.DDSHeaderDX10(binaryReader);                                  }                                    Boolean alpha = (dDSHeader.dwFlags & 0x00000002) != 0;                                  Boolean fourcc = (dDSHeader.dwFlags & 0x00000004) != 0;                                  Boolean rgb = (dDSHeader.dwFlags & 0x00000040) != 0;                                  Boolean alphapixel = (dDSHeader.dwFlags & 0x00000001) != 0;                                  Boolean luminance = (dDSHeader.dwFlags & 0x00020000) != 0;                                  Boolean rgb888 = dDSHeader.ddspf.dwRBitMask == 0x000000ff && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x00ff0000;                                  //Boolean bgr888 = dDSHeader.ddspf.dwRBitMask == 0x00ff0000 && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x000000ff;                                  Boolean rgb565 = dDSHeader.ddspf.dwRBitMask == 0x0000F800 && dDSHeader.ddspf.dwGBitMask == 0x000007E0 && dDSHeader.ddspf.dwBBitMask == 0x0000001F;                                  Boolean argb4444 = dDSHeader.ddspf.dwABitMask == 0x0000f000 && dDSHeader.ddspf.dwRBitMask == 0x00000f00 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x0000000f;                                  Boolean rbga4444 = dDSHeader.ddspf.dwABitMask == 0x0000000f && dDSHeader.ddspf.dwRBitMask == 0x0000f000 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x00000f00;                                    Boolean mipmap = (dDSHeader.dwCaps & DDSHeaders.DDSPixelFormatCaps.MIPMAP) != (DDSHeaders.DDSPixelFormatCaps)0u;                                  Boolean isNormalMap = ((dDSHeader.ddspf.dwFlags & 524288u) != 0u || (dDSHeader.ddspf.dwFlags & 2147483648u) != 0u);                                  if (fourcc)                                  {                                      if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT1)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT1' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT3)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' (TextureFormat)11' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT5)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT5' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT2)                                      {                                          Debug.Log("[Kopernicus]: DXT2 not supported" + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT4)                                      {                                          Debug.Log("[Kopernicus]: DXT4 not supported: " + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                      {                                          Debug.Log("[Kopernicus]: DX10 dds not supported: " + path);                                      }                                      else                                          fourcc = false;                                  }                                  if (!fourcc)                                  {                                      TextureFormat textureFormat = TextureFormat.ARGB32;                                      Boolean ok = true;                                      if (rgb && (rgb888 /*|| bgr888*/))                                      {                                          // RGB or RGBA format                                          textureFormat = alphapixel                                          ? TextureFormat.RGBA32                                          : TextureFormat.RGB24;                                      }                                      else if (rgb && rgb565)                                      {                                          // Nvidia texconv B5G6R5_UNORM                                          textureFormat = TextureFormat.RGB565;                                      }                                      else if (rgb && alphapixel && argb4444)                                      {                                          // Nvidia texconv B4G4R4A4_UNORM                                          textureFormat = TextureFormat.ARGB4444;                                      }                                      else if (rgb && alphapixel && rbga4444)                                      {                                          textureFormat = TextureFormat.RGBA4444;                                      }                                      else if (!rgb && alpha != luminance)                                      {                                          // A8 format or Luminance 8                                          textureFormat = TextureFormat.Alpha8;                                      }                                      else                                      {                                          ok = false;                                          Debug.Log("[Kopernicus]: Only DXT1' DXT5' A8' RGB24' RGBA32' RGB565' ARGB4444 and RGBA4444 are supported");                                      }                                      if (ok)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' textureFormat' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                    }                                  if (map != null)                                      if (upload)                                          map.Apply(false' unreadable);                              }                              else                                  Debug.Log("[Kopernicus]: Bad DDS header.");                          }                          else                          {                              map = new Texture2D(2' 2);                              byte[] data = LoadWholeFile(path);                              if (data == null)                                  throw new Exception("LoadWholeFile failed");                                map.LoadImage(data);                              if (compress)                                  map.Compress(true);                              if (upload)                                  map.Apply(false' unreadable);                          }                      }                      catch (Exception ex)                      {                          uncaught = false;                          Debug.Log("[Kopernicus]: failed to load " + path + " with exception " + ex.Message);                      }                      if (map == null && uncaught)                      {                          Debug.Log("[Kopernicus]: failed to load " + path);                      }                      map.name = path.Remove(0' (KSPUtil.ApplicationRootPath + "GameData/").Length);                  }                  else                      Debug.Log("[Kopernicus]: texture does not exist! " + path);
Magic Number,Kopernicus,OnDemandStorage,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\OnDemandStorage.cs,LoadTexture,The following statement contains a magic number: if (File.Exists(path))                  {                      Boolean uncaught = true;                      try                      {                          if (path.ToLower().EndsWith(".dds"))                          {                              // Borrowed from stock KSP 1.0 DDS loader (hi Mike!)                              // Also borrowed the extra bits from Sarbian.                              BinaryReader binaryReader = new BinaryReader(File.OpenRead(path));                              uint num = binaryReader.ReadUInt32();                              if (num == DDSHeaders.DDSValues.uintMagic)                              {                                    DDSHeaders.DDSHeader dDSHeader = new DDSHeaders.DDSHeader(binaryReader);                                    if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                  {                                      new DDSHeaders.DDSHeaderDX10(binaryReader);                                  }                                    Boolean alpha = (dDSHeader.dwFlags & 0x00000002) != 0;                                  Boolean fourcc = (dDSHeader.dwFlags & 0x00000004) != 0;                                  Boolean rgb = (dDSHeader.dwFlags & 0x00000040) != 0;                                  Boolean alphapixel = (dDSHeader.dwFlags & 0x00000001) != 0;                                  Boolean luminance = (dDSHeader.dwFlags & 0x00020000) != 0;                                  Boolean rgb888 = dDSHeader.ddspf.dwRBitMask == 0x000000ff && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x00ff0000;                                  //Boolean bgr888 = dDSHeader.ddspf.dwRBitMask == 0x00ff0000 && dDSHeader.ddspf.dwGBitMask == 0x0000ff00 && dDSHeader.ddspf.dwBBitMask == 0x000000ff;                                  Boolean rgb565 = dDSHeader.ddspf.dwRBitMask == 0x0000F800 && dDSHeader.ddspf.dwGBitMask == 0x000007E0 && dDSHeader.ddspf.dwBBitMask == 0x0000001F;                                  Boolean argb4444 = dDSHeader.ddspf.dwABitMask == 0x0000f000 && dDSHeader.ddspf.dwRBitMask == 0x00000f00 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x0000000f;                                  Boolean rbga4444 = dDSHeader.ddspf.dwABitMask == 0x0000000f && dDSHeader.ddspf.dwRBitMask == 0x0000f000 && dDSHeader.ddspf.dwGBitMask == 0x000000f0 && dDSHeader.ddspf.dwBBitMask == 0x00000f00;                                    Boolean mipmap = (dDSHeader.dwCaps & DDSHeaders.DDSPixelFormatCaps.MIPMAP) != (DDSHeaders.DDSPixelFormatCaps)0u;                                  Boolean isNormalMap = ((dDSHeader.ddspf.dwFlags & 524288u) != 0u || (dDSHeader.ddspf.dwFlags & 2147483648u) != 0u);                                  if (fourcc)                                  {                                      if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT1)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT1' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT3)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' (TextureFormat)11' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT5)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' TextureFormat.DXT5' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT2)                                      {                                          Debug.Log("[Kopernicus]: DXT2 not supported" + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDXT4)                                      {                                          Debug.Log("[Kopernicus]: DXT4 not supported: " + path);                                      }                                      else if (dDSHeader.ddspf.dwFourCC == DDSHeaders.DDSValues.uintDX10)                                      {                                          Debug.Log("[Kopernicus]: DX10 dds not supported: " + path);                                      }                                      else                                          fourcc = false;                                  }                                  if (!fourcc)                                  {                                      TextureFormat textureFormat = TextureFormat.ARGB32;                                      Boolean ok = true;                                      if (rgb && (rgb888 /*|| bgr888*/))                                      {                                          // RGB or RGBA format                                          textureFormat = alphapixel                                          ? TextureFormat.RGBA32                                          : TextureFormat.RGB24;                                      }                                      else if (rgb && rgb565)                                      {                                          // Nvidia texconv B5G6R5_UNORM                                          textureFormat = TextureFormat.RGB565;                                      }                                      else if (rgb && alphapixel && argb4444)                                      {                                          // Nvidia texconv B4G4R4A4_UNORM                                          textureFormat = TextureFormat.ARGB4444;                                      }                                      else if (rgb && alphapixel && rbga4444)                                      {                                          textureFormat = TextureFormat.RGBA4444;                                      }                                      else if (!rgb && alpha != luminance)                                      {                                          // A8 format or Luminance 8                                          textureFormat = TextureFormat.Alpha8;                                      }                                      else                                      {                                          ok = false;                                          Debug.Log("[Kopernicus]: Only DXT1' DXT5' A8' RGB24' RGBA32' RGB565' ARGB4444 and RGBA4444 are supported");                                      }                                      if (ok)                                      {                                          map = new Texture2D((Int32)dDSHeader.dwWidth' (Int32)dDSHeader.dwHeight' textureFormat' mipmap);                                          map.LoadRawTextureData(LoadRestOfReader(binaryReader));                                      }                                    }                                  if (map != null)                                      if (upload)                                          map.Apply(false' unreadable);                              }                              else                                  Debug.Log("[Kopernicus]: Bad DDS header.");                          }                          else                          {                              map = new Texture2D(2' 2);                              byte[] data = LoadWholeFile(path);                              if (data == null)                                  throw new Exception("LoadWholeFile failed");                                map.LoadImage(data);                              if (compress)                                  map.Compress(true);                              if (upload)                                  map.Apply(false' unreadable);                          }                      }                      catch (Exception ex)                      {                          uncaught = false;                          Debug.Log("[Kopernicus]: failed to load " + path + " with exception " + ex.Message);                      }                      if (map == null && uncaught)                      {                          Debug.Log("[Kopernicus]: failed to load " + path);                      }                      map.name = path.Remove(0' (KSPUtil.ApplicationRootPath + "GameData/").Length);                  }                  else                      Debug.Log("[Kopernicus]: texture does not exist! " + path);
Magic Number,Kopernicus,ScaledSpaceDemand,C:\repos\BryceSchroeder_Kopernicus\src\Kopernicus.OnDemand\ScaledSpaceDemand.cs,IsInView,The following statement contains a magic number: Single pixelSize = (Single) body.Radius * 2 * Mathf.Rad2Deg * Screen.height /                                    (Vector3.Distance(cam.transform.position'                                         body.scaledBody.GetComponentInChildren<Renderer>().bounds.center) *                                     cam.fieldOfView);
