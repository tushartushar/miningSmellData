Implementation smell,Namespace,Class,File,Method,Description
Complex Method,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,selectData,Cyclomatic complexity of the method is 11
Complex Method,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,Cyclomatic complexity of the method is 8
Complex Method,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,toolStripMenuItem8_Click,Cyclomatic complexity of the method is 11
Long Statement,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,find_column_Datetime,The length of the statement  "		if (item [2].ToUpper ().Equals ("TIMESTAMP") || item [2].ToUpper ().Equals ("DATE") || item [2].ToUpper ().Equals ("DATETIME")) { " is 129.
Long Statement,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The length of the statement  "	string text = "SELECT type'name'tbl_name'rootpage'sql FROM sqlite_master WHERE tbl_name like '" + tableName + "' and type='table'"; " is 131.
Long Statement,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,ddeleteTableToolStripMenuItem_Click,The length of the statement  "	DialogResult result = MessageBox.Show ("Do you want to delete the table?"' "Confirmation"' MessageBoxButtons.YesNoCancel); " is 122.
Empty Catch Block,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,listData,The method has an empty catch block.
Empty Catch Block,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,createDataBase,The method has an empty catch block.
Empty Catch Block,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,exportSQL,The method has an empty catch block.
Empty Catch Block,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,copyDataGridViewuStructure,The method has an empty catch block.
Empty Catch Block,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,copyDataGridViewData,The method has an empty catch block.
Empty Catch Block,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,copyDataGridViewSQLQuery,The method has an empty catch block.
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getColumnsTypes_List,The following statement contains a magic number: if (sQLiteDataReader.HasRows) {  	while (sQLiteDataReader.Read ()) {  		columns = sQLiteDataReader.GetString (2);  		listColumns.Add (columns);  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getColumnsTypes_List,The following statement contains a magic number: while (sQLiteDataReader.Read ()) {  	columns = sQLiteDataReader.GetString (2);  	listColumns.Add (columns);  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getColumnsTypes_List,The following statement contains a magic number: columns = sQLiteDataReader.GetString (2);  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: if (sQLiteDataReader.HasRows) {  	while (sQLiteDataReader.Read ()) {  		cid = sQLiteDataReader.GetValue (0).ToString ();  		name = sQLiteDataReader.GetString (1);  		type = sQLiteDataReader.GetString (2);  		notnull = sQLiteDataReader.GetValue (3).ToString ();  		dft_Value = sQLiteDataReader.GetValue (4).ToString ();  		pk = sQLiteDataReader.GetValue (5).ToString ();  		data = new String[] {  			cid'  			name'  			type'  			notnull'  			dft_Value'  			pk  		};  		listDataStructureTable.Add (data);  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: if (sQLiteDataReader.HasRows) {  	while (sQLiteDataReader.Read ()) {  		cid = sQLiteDataReader.GetValue (0).ToString ();  		name = sQLiteDataReader.GetString (1);  		type = sQLiteDataReader.GetString (2);  		notnull = sQLiteDataReader.GetValue (3).ToString ();  		dft_Value = sQLiteDataReader.GetValue (4).ToString ();  		pk = sQLiteDataReader.GetValue (5).ToString ();  		data = new String[] {  			cid'  			name'  			type'  			notnull'  			dft_Value'  			pk  		};  		listDataStructureTable.Add (data);  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: if (sQLiteDataReader.HasRows) {  	while (sQLiteDataReader.Read ()) {  		cid = sQLiteDataReader.GetValue (0).ToString ();  		name = sQLiteDataReader.GetString (1);  		type = sQLiteDataReader.GetString (2);  		notnull = sQLiteDataReader.GetValue (3).ToString ();  		dft_Value = sQLiteDataReader.GetValue (4).ToString ();  		pk = sQLiteDataReader.GetValue (5).ToString ();  		data = new String[] {  			cid'  			name'  			type'  			notnull'  			dft_Value'  			pk  		};  		listDataStructureTable.Add (data);  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: if (sQLiteDataReader.HasRows) {  	while (sQLiteDataReader.Read ()) {  		cid = sQLiteDataReader.GetValue (0).ToString ();  		name = sQLiteDataReader.GetString (1);  		type = sQLiteDataReader.GetString (2);  		notnull = sQLiteDataReader.GetValue (3).ToString ();  		dft_Value = sQLiteDataReader.GetValue (4).ToString ();  		pk = sQLiteDataReader.GetValue (5).ToString ();  		data = new String[] {  			cid'  			name'  			type'  			notnull'  			dft_Value'  			pk  		};  		listDataStructureTable.Add (data);  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: while (sQLiteDataReader.Read ()) {  	cid = sQLiteDataReader.GetValue (0).ToString ();  	name = sQLiteDataReader.GetString (1);  	type = sQLiteDataReader.GetString (2);  	notnull = sQLiteDataReader.GetValue (3).ToString ();  	dft_Value = sQLiteDataReader.GetValue (4).ToString ();  	pk = sQLiteDataReader.GetValue (5).ToString ();  	data = new String[] {  		cid'  		name'  		type'  		notnull'  		dft_Value'  		pk  	};  	listDataStructureTable.Add (data);  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: while (sQLiteDataReader.Read ()) {  	cid = sQLiteDataReader.GetValue (0).ToString ();  	name = sQLiteDataReader.GetString (1);  	type = sQLiteDataReader.GetString (2);  	notnull = sQLiteDataReader.GetValue (3).ToString ();  	dft_Value = sQLiteDataReader.GetValue (4).ToString ();  	pk = sQLiteDataReader.GetValue (5).ToString ();  	data = new String[] {  		cid'  		name'  		type'  		notnull'  		dft_Value'  		pk  	};  	listDataStructureTable.Add (data);  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: while (sQLiteDataReader.Read ()) {  	cid = sQLiteDataReader.GetValue (0).ToString ();  	name = sQLiteDataReader.GetString (1);  	type = sQLiteDataReader.GetString (2);  	notnull = sQLiteDataReader.GetValue (3).ToString ();  	dft_Value = sQLiteDataReader.GetValue (4).ToString ();  	pk = sQLiteDataReader.GetValue (5).ToString ();  	data = new String[] {  		cid'  		name'  		type'  		notnull'  		dft_Value'  		pk  	};  	listDataStructureTable.Add (data);  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: while (sQLiteDataReader.Read ()) {  	cid = sQLiteDataReader.GetValue (0).ToString ();  	name = sQLiteDataReader.GetString (1);  	type = sQLiteDataReader.GetString (2);  	notnull = sQLiteDataReader.GetValue (3).ToString ();  	dft_Value = sQLiteDataReader.GetValue (4).ToString ();  	pk = sQLiteDataReader.GetValue (5).ToString ();  	data = new String[] {  		cid'  		name'  		type'  		notnull'  		dft_Value'  		pk  	};  	listDataStructureTable.Add (data);  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: type = sQLiteDataReader.GetString (2);  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: notnull = sQLiteDataReader.GetValue (3).ToString ();  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: dft_Value = sQLiteDataReader.GetValue (4).ToString ();  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getStructureTable,The following statement contains a magic number: pk = sQLiteDataReader.GetValue (5).ToString ();  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,find_column_Datetime,The following statement contains a magic number: foreach (var item in listDataStructureTable) {  	if (item [2].ToUpper ().Equals ("TIMESTAMP") || item [2].ToUpper ().Equals ("DATE") || item [2].ToUpper ().Equals ("DATETIME")) {  		listColumsTime.Add (item [1]);  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,find_column_Datetime,The following statement contains a magic number: foreach (var item in listDataStructureTable) {  	if (item [2].ToUpper ().Equals ("TIMESTAMP") || item [2].ToUpper ().Equals ("DATE") || item [2].ToUpper ().Equals ("DATETIME")) {  		listColumsTime.Add (item [1]);  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,find_column_Datetime,The following statement contains a magic number: foreach (var item in listDataStructureTable) {  	if (item [2].ToUpper ().Equals ("TIMESTAMP") || item [2].ToUpper ().Equals ("DATE") || item [2].ToUpper ().Equals ("DATETIME")) {  		listColumsTime.Add (item [1]);  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,find_column_Datetime,The following statement contains a magic number: if (item [2].ToUpper ().Equals ("TIMESTAMP") || item [2].ToUpper ().Equals ("DATE") || item [2].ToUpper ().Equals ("DATETIME")) {  	listColumsTime.Add (item [1]);  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,find_column_Datetime,The following statement contains a magic number: if (item [2].ToUpper ().Equals ("TIMESTAMP") || item [2].ToUpper ().Equals ("DATE") || item [2].ToUpper ().Equals ("DATETIME")) {  	listColumsTime.Add (item [1]);  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,find_column_Datetime,The following statement contains a magic number: if (item [2].ToUpper ().Equals ("TIMESTAMP") || item [2].ToUpper ().Equals ("DATE") || item [2].ToUpper ().Equals ("DATETIME")) {  	listColumsTime.Add (item [1]);  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: if (sQLiteDataReader.HasRows) {  	while (sQLiteDataReader.Read ()) {  		listColumsTable = new String[] {  			sQLiteDataReader.GetString (0)'  			sQLiteDataReader.GetString (1)'  			sQLiteDataReader.GetString (2)'  			sQLiteDataReader.GetInt32 (3) + ""'  			sQLiteDataReader.GetString (4)  		};  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: if (sQLiteDataReader.HasRows) {  	while (sQLiteDataReader.Read ()) {  		listColumsTable = new String[] {  			sQLiteDataReader.GetString (0)'  			sQLiteDataReader.GetString (1)'  			sQLiteDataReader.GetString (2)'  			sQLiteDataReader.GetInt32 (3) + ""'  			sQLiteDataReader.GetString (4)  		};  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: if (sQLiteDataReader.HasRows) {  	while (sQLiteDataReader.Read ()) {  		listColumsTable = new String[] {  			sQLiteDataReader.GetString (0)'  			sQLiteDataReader.GetString (1)'  			sQLiteDataReader.GetString (2)'  			sQLiteDataReader.GetInt32 (3) + ""'  			sQLiteDataReader.GetString (4)  		};  	}  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: while (sQLiteDataReader.Read ()) {  	listColumsTable = new String[] {  		sQLiteDataReader.GetString (0)'  		sQLiteDataReader.GetString (1)'  		sQLiteDataReader.GetString (2)'  		sQLiteDataReader.GetInt32 (3) + ""'  		sQLiteDataReader.GetString (4)  	};  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: while (sQLiteDataReader.Read ()) {  	listColumsTable = new String[] {  		sQLiteDataReader.GetString (0)'  		sQLiteDataReader.GetString (1)'  		sQLiteDataReader.GetString (2)'  		sQLiteDataReader.GetInt32 (3) + ""'  		sQLiteDataReader.GetString (4)  	};  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: while (sQLiteDataReader.Read ()) {  	listColumsTable = new String[] {  		sQLiteDataReader.GetString (0)'  		sQLiteDataReader.GetString (1)'  		sQLiteDataReader.GetString (2)'  		sQLiteDataReader.GetInt32 (3) + ""'  		sQLiteDataReader.GetString (4)  	};  }  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: listColumsTable = new String[] {  	sQLiteDataReader.GetString (0)'  	sQLiteDataReader.GetString (1)'  	sQLiteDataReader.GetString (2)'  	sQLiteDataReader.GetInt32 (3) + ""'  	sQLiteDataReader.GetString (4)  };  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: listColumsTable = new String[] {  	sQLiteDataReader.GetString (0)'  	sQLiteDataReader.GetString (1)'  	sQLiteDataReader.GetString (2)'  	sQLiteDataReader.GetInt32 (3) + ""'  	sQLiteDataReader.GetString (4)  };  
Magic Number,appSqliteManagerPro.Clases,DatabaseSqlite,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\Clases\DatabaseSqlite.cs,getSQlMasterTable,The following statement contains a magic number: listColumsTable = new String[] {  	sQLiteDataReader.GetString (0)'  	sQLiteDataReader.GetString (1)'  	sQLiteDataReader.GetString (2)'  	sQLiteDataReader.GetInt32 (3) + ""'  	sQLiteDataReader.GetString (4)  };  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,openDatabase,The following statement contains a magic number: openFileDialog.FilterIndex = 2;  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: if (oDatabaseSqlite != null) {  	try {  		String query = "";  		this.rowsAfected = 0;  		for (i = 0; i < listQuerys.Length; i++) {  			query = listQuerys [i];  			if (i == 0) {  				query = query.Replace ("\r"' "");  			}  			else {  				query = query.Replace ("\r\n"' "");  			}  			if (!query.Trim ().Equals ("")) {  				queryType = query.Substring (0' query.IndexOf (" "));  				if (queryType.ToUpper ().Equals ("SELECT")) {  					UpdateDgvQueryResults (this.oDatabaseSqlite.queryDatabase (query));  					////////          this.dgvQueryResults.DataSource = this.oDatabaseSqlite.queryDatabase(query);  				}  				else {  					rowsAfected += oDatabaseSqlite.updateDatabase (query);  					if (rowsAfected == -1) {  						i = listQuerys.Length + 2;  						result = "0";  					}  					else {  						result = rowsAfected + "";  					}  				}  			}  		}  	}  	catch (Exception ex) {  		UpdateoFrmProcessingDgvSqlQuery ();  		//ofrmProcessingDgvSqlQuery.Dispose();  		//trvTables.Enabled = true;  		//tabControl1.Enabled = true;  		//btnExecuteQuery.Enabled = true;*/  		MessageBox.Show (ex.Message.ToString ());  		i = listQuerys.Length + 2;  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: if (oDatabaseSqlite != null) {  	try {  		String query = "";  		this.rowsAfected = 0;  		for (i = 0; i < listQuerys.Length; i++) {  			query = listQuerys [i];  			if (i == 0) {  				query = query.Replace ("\r"' "");  			}  			else {  				query = query.Replace ("\r\n"' "");  			}  			if (!query.Trim ().Equals ("")) {  				queryType = query.Substring (0' query.IndexOf (" "));  				if (queryType.ToUpper ().Equals ("SELECT")) {  					UpdateDgvQueryResults (this.oDatabaseSqlite.queryDatabase (query));  					////////          this.dgvQueryResults.DataSource = this.oDatabaseSqlite.queryDatabase(query);  				}  				else {  					rowsAfected += oDatabaseSqlite.updateDatabase (query);  					if (rowsAfected == -1) {  						i = listQuerys.Length + 2;  						result = "0";  					}  					else {  						result = rowsAfected + "";  					}  				}  			}  		}  	}  	catch (Exception ex) {  		UpdateoFrmProcessingDgvSqlQuery ();  		//ofrmProcessingDgvSqlQuery.Dispose();  		//trvTables.Enabled = true;  		//tabControl1.Enabled = true;  		//btnExecuteQuery.Enabled = true;*/  		MessageBox.Show (ex.Message.ToString ());  		i = listQuerys.Length + 2;  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: try {  	String query = "";  	this.rowsAfected = 0;  	for (i = 0; i < listQuerys.Length; i++) {  		query = listQuerys [i];  		if (i == 0) {  			query = query.Replace ("\r"' "");  		}  		else {  			query = query.Replace ("\r\n"' "");  		}  		if (!query.Trim ().Equals ("")) {  			queryType = query.Substring (0' query.IndexOf (" "));  			if (queryType.ToUpper ().Equals ("SELECT")) {  				UpdateDgvQueryResults (this.oDatabaseSqlite.queryDatabase (query));  				////////          this.dgvQueryResults.DataSource = this.oDatabaseSqlite.queryDatabase(query);  			}  			else {  				rowsAfected += oDatabaseSqlite.updateDatabase (query);  				if (rowsAfected == -1) {  					i = listQuerys.Length + 2;  					result = "0";  				}  				else {  					result = rowsAfected + "";  				}  			}  		}  	}  }  catch (Exception ex) {  	UpdateoFrmProcessingDgvSqlQuery ();  	//ofrmProcessingDgvSqlQuery.Dispose();  	//trvTables.Enabled = true;  	//tabControl1.Enabled = true;  	//btnExecuteQuery.Enabled = true;*/  	MessageBox.Show (ex.Message.ToString ());  	i = listQuerys.Length + 2;  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: try {  	String query = "";  	this.rowsAfected = 0;  	for (i = 0; i < listQuerys.Length; i++) {  		query = listQuerys [i];  		if (i == 0) {  			query = query.Replace ("\r"' "");  		}  		else {  			query = query.Replace ("\r\n"' "");  		}  		if (!query.Trim ().Equals ("")) {  			queryType = query.Substring (0' query.IndexOf (" "));  			if (queryType.ToUpper ().Equals ("SELECT")) {  				UpdateDgvQueryResults (this.oDatabaseSqlite.queryDatabase (query));  				////////          this.dgvQueryResults.DataSource = this.oDatabaseSqlite.queryDatabase(query);  			}  			else {  				rowsAfected += oDatabaseSqlite.updateDatabase (query);  				if (rowsAfected == -1) {  					i = listQuerys.Length + 2;  					result = "0";  				}  				else {  					result = rowsAfected + "";  				}  			}  		}  	}  }  catch (Exception ex) {  	UpdateoFrmProcessingDgvSqlQuery ();  	//ofrmProcessingDgvSqlQuery.Dispose();  	//trvTables.Enabled = true;  	//tabControl1.Enabled = true;  	//btnExecuteQuery.Enabled = true;*/  	MessageBox.Show (ex.Message.ToString ());  	i = listQuerys.Length + 2;  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: for (i = 0; i < listQuerys.Length; i++) {  	query = listQuerys [i];  	if (i == 0) {  		query = query.Replace ("\r"' "");  	}  	else {  		query = query.Replace ("\r\n"' "");  	}  	if (!query.Trim ().Equals ("")) {  		queryType = query.Substring (0' query.IndexOf (" "));  		if (queryType.ToUpper ().Equals ("SELECT")) {  			UpdateDgvQueryResults (this.oDatabaseSqlite.queryDatabase (query));  			////////          this.dgvQueryResults.DataSource = this.oDatabaseSqlite.queryDatabase(query);  		}  		else {  			rowsAfected += oDatabaseSqlite.updateDatabase (query);  			if (rowsAfected == -1) {  				i = listQuerys.Length + 2;  				result = "0";  			}  			else {  				result = rowsAfected + "";  			}  		}  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: if (!query.Trim ().Equals ("")) {  	queryType = query.Substring (0' query.IndexOf (" "));  	if (queryType.ToUpper ().Equals ("SELECT")) {  		UpdateDgvQueryResults (this.oDatabaseSqlite.queryDatabase (query));  		////////          this.dgvQueryResults.DataSource = this.oDatabaseSqlite.queryDatabase(query);  	}  	else {  		rowsAfected += oDatabaseSqlite.updateDatabase (query);  		if (rowsAfected == -1) {  			i = listQuerys.Length + 2;  			result = "0";  		}  		else {  			result = rowsAfected + "";  		}  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: if (queryType.ToUpper ().Equals ("SELECT")) {  	UpdateDgvQueryResults (this.oDatabaseSqlite.queryDatabase (query));  	////////          this.dgvQueryResults.DataSource = this.oDatabaseSqlite.queryDatabase(query);  }  else {  	rowsAfected += oDatabaseSqlite.updateDatabase (query);  	if (rowsAfected == -1) {  		i = listQuerys.Length + 2;  		result = "0";  	}  	else {  		result = rowsAfected + "";  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: if (rowsAfected == -1) {  	i = listQuerys.Length + 2;  	result = "0";  }  else {  	result = rowsAfected + "";  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: i = listQuerys.Length + 2;  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,executeQuery,The following statement contains a magic number: i = listQuerys.Length + 2;  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,tabControl1_SelectedIndexChanged,The following statement contains a magic number: if (tabControl1.SelectedIndex < 2) {  	lblTable.Text = "TABLE - " + tableName;  	tstExecuteQuery.Enabled = false;  	tstSaveQuery.Enabled = false;  }  else {  	lblTable.Text = "";  	tstExecuteQuery.Enabled = true;  	tstSaveQuery.Enabled = true;  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,toolStripMenuItem1_Click_1,The following statement contains a magic number: txtQuery.Text = listColumsTable [4] + ";";  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,UpdateDgvQueryResults,The following statement contains a magic number: if (dgvQueryResults.InvokeRequired)  	dgvQueryResults.Invoke (new updateDelegate (UpdateDgvQueryResults)' updateVal);  else {  	dgvQueryResults.DataSource = updateVal;  	foreach (DataGridViewColumn col in dgvQueryResults.Columns) {  		if (col.ValueType == typeof(string)) {  			col.Width = 250;  		}  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,UpdateDgvQueryResults,The following statement contains a magic number: foreach (DataGridViewColumn col in dgvQueryResults.Columns) {  	if (col.ValueType == typeof(string)) {  		col.Width = 250;  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,UpdateDgvQueryResults,The following statement contains a magic number: if (col.ValueType == typeof(string)) {  	col.Width = 250;  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,UpdateDgvQueryResults,The following statement contains a magic number: col.Width = 250;  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,UpdateDgvDatos,The following statement contains a magic number: if (dgvDatos.InvokeRequired)  	dgvDatos.Invoke (new updateDelegate (UpdateDgvDatos)' updateVal);  else {  	dgvDatos.DataSource = updateVal;  	foreach (DataGridViewColumn col in dgvDatos.Columns) {  		if (col.ValueType == typeof(string)) {  			col.Width = 250;  		}  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,UpdateDgvDatos,The following statement contains a magic number: foreach (DataGridViewColumn col in dgvDatos.Columns) {  	if (col.ValueType == typeof(string)) {  		col.Width = 250;  	}  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,UpdateDgvDatos,The following statement contains a magic number: if (col.ValueType == typeof(string)) {  	col.Width = 250;  }  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,UpdateDgvDatos,The following statement contains a magic number: col.Width = 250;  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,toolStripMenuItem5_Click,The following statement contains a magic number: tabControl1.SelectedIndex = 2;  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,toolStripMenuItem6_Click,The following statement contains a magic number: tabControl1.SelectedIndex = 2;  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,toolStripMenuItem7_Click,The following statement contains a magic number: tabControl1.SelectedIndex = 2;  
Magic Number,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,toolStripMenuItem8_Click,The following statement contains a magic number: switch (tabControl1.SelectedIndex) {  case 0:  	copyDataGridViewuStructure ();  	break;  case 1:  	copyDataGridViewData ();  	break;  case 2:  	copyDataGridViewSQLQuery ();  	break;  default:  	break;  }  
Missing Default,appSqliteManagerPro,Form1,C:\repos\icol2006_Windows_SQlite\appSqliteAdmin\frmMain.cs,contextMenu_Click,The following switch statement is missing a default case: switch (sender.ToString ().Trim ()) {  case "Copy":  	Process.Start ("https://www.google.com");  	break;  }  
