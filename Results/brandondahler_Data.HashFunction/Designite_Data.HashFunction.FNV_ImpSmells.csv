Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Data.HashFunction,FNV1a,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1a.cs,ProcessBytes,The method has 5 parameters.
Long Parameter List,System.Data.HashFunction,FNV1a,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1a.cs,ProcessBytes32,The method has 5 parameters.
Long Parameter List,System.Data.HashFunction,FNV1a,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1a.cs,ProcessBytes64,The method has 5 parameters.
Long Parameter List,System.Data.HashFunction,FNV1,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1.cs,ProcessBytes,The method has 5 parameters.
Long Parameter List,System.Data.HashFunction,FNV1,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1.cs,ProcessBytes32,The method has 5 parameters.
Long Parameter List,System.Data.HashFunction,FNV1,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1.cs,ProcessBytes64,The method has 5 parameters.
Long Parameter List,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ProcessBytes32,The method has 5 parameters.
Long Parameter List,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ProcessBytes64,The method has 5 parameters.
Long Parameter List,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ProcessBytes,The method has 5 parameters.
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,FNV1Base,The following statement contains a magic number: if (HashParameters [hashSize].Prime.Count != hashSize / 32) {  	throw new ArgumentException (string.Format ("HashParameters[{0}].Prime should contain exactly {1} items."' hashSize' hashSize / 32)' string.Format ("HashParameters[{0}].Prime"' hashSize));  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,FNV1Base,The following statement contains a magic number: if (HashParameters [hashSize].Prime.Count != hashSize / 32) {  	throw new ArgumentException (string.Format ("HashParameters[{0}].Prime should contain exactly {1} items."' hashSize' hashSize / 32)' string.Format ("HashParameters[{0}].Prime"' hashSize));  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,FNV1Base,The following statement contains a magic number: throw new ArgumentException (string.Format ("HashParameters[{0}].Prime should contain exactly {1} items."' hashSize' hashSize / 32)' string.Format ("HashParameters[{0}].Prime"' hashSize));  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,FNV1Base,The following statement contains a magic number: if (HashParameters [hashSize].Offset.Count != hashSize / 32) {  	throw new ArgumentException (string.Format ("HashParameters[{0}].Offset should contain exactly {1} items."' hashSize' hashSize / 32)' string.Format ("HashParameters[{0}].Offset"' hashSize));  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,FNV1Base,The following statement contains a magic number: if (HashParameters [hashSize].Offset.Count != hashSize / 32) {  	throw new ArgumentException (string.Format ("HashParameters[{0}].Offset should contain exactly {1} items."' hashSize' hashSize / 32)' string.Format ("HashParameters[{0}].Offset"' hashSize));  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,FNV1Base,The following statement contains a magic number: throw new ArgumentException (string.Format ("HashParameters[{0}].Offset should contain exactly {1} items."' hashSize' hashSize / 32)' string.Format ("HashParameters[{0}].Offset"' hashSize));  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashInternal,The following statement contains a magic number: if (HashSize == 32) {  	var hash = offset [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes32 (ref hash' prime [0]' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  } else if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashInternal,The following statement contains a magic number: if (HashSize == 32) {  	var hash = offset [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes32 (ref hash' prime [0]' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  } else if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashInternal,The following statement contains a magic number: if (HashSize == 32) {  	var hash = offset [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes32 (ref hash' prime [0]' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  } else if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashInternal,The following statement contains a magic number: if (HashSize == 32) {  	var hash = offset [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes32 (ref hash' prime [0]' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  } else if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashInternal,The following statement contains a magic number: if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashInternal,The following statement contains a magic number: if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashInternal,The following statement contains a magic number: if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	data.ForEachRead ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	});  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashAsyncInternal,The following statement contains a magic number: if (HashSize == 32) {  	var hash = offset [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes32 (ref hash' prime [0]' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  } else if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashAsyncInternal,The following statement contains a magic number: if (HashSize == 32) {  	var hash = offset [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes32 (ref hash' prime [0]' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  } else if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashAsyncInternal,The following statement contains a magic number: if (HashSize == 32) {  	var hash = offset [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes32 (ref hash' prime [0]' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  } else if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashAsyncInternal,The following statement contains a magic number: if (HashSize == 32) {  	var hash = offset [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes32 (ref hash' prime [0]' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  } else if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashAsyncInternal,The following statement contains a magic number: if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashAsyncInternal,The following statement contains a magic number: if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  }  
Magic Number,System.Data.HashFunction,FNV1Base,F:\newReposMay17\brandondahler_Data.HashFunction\src\FNV\FNV1Base.cs,ComputeHashAsyncInternal,The following statement contains a magic number: if (HashSize == 64) {  	var hash = ((UInt64)offset [1] << 32) | offset [0];  	var prime64 = ((UInt64)prime [1] << 32) | prime [0];  	await data.ForEachReadAsync ((dataBytes' position' length) => {  		ProcessBytes64 (ref hash' prime64' dataBytes' position' length);  	}).ConfigureAwait (false);  	return BitConverter.GetBytes (hash);  }  
