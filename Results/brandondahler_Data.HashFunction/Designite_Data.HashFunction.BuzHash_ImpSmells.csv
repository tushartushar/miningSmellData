Implementation smell,Namespace,Class,File,Method,Description
Magic Number,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Magic Number,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Magic Number,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Magic Number,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Magic Number,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Magic Number,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Magic Number,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Magic Number,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Missing Default,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashInternal,The following switch statement is missing a default case: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    data.ForEachRead((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      });                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
Missing Default,System.Data.HashFunction,BuzHashBase,C:\repos\brandondahler_Data.HashFunction\src\BuzHash\BuzHashBase.cs,ComputeHashAsyncInternal,The following switch statement is missing a default case: switch (HashSize)              {                  case 8:                  {                      byte h = (byte) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = new byte[] { h };                      break;                  }                    case 16:                  {                       UInt16 h = (UInt16) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                    case 32:                  {                      UInt32 h = (UInt32) InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                        hash = BitConverter.GetBytes(h);                      break;                  }                                    case 64:                  {                      UInt64 h = InitVal;                                    await data.ForEachReadAsync((dataBytes' position' length) => {                          ProcessBytes(ref h' dataBytes' position' length);                      }).ConfigureAwait(false);                                    hash = BitConverter.GetBytes(h);                      break;                  }              }
