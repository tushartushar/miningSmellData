Implementation smell,Namespace,Class,File,Method,Description
Long Statement,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The length of the statement  "	return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56); " is 285.
Long Statement,System.Data.HashFunction.Utilities.UnifiedData,StreamData,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\UnifiedData\StreamData.cs,ForEachGroupAsync,The length of the statement  "	while ((currentLength = await _Data.ReadAsync (buffer' position' buffer.Length - position).ConfigureAwait (false)) > 0) { " is 121.
Magic Number,System.Data.HashFunction,IHashFunction_Extensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\IHashFunction_Extensions.cs,ComputeHash,The following statement contains a magic number: Array.Copy (data' 0' seededData' 4' data.Length);  
Magic Number,System.Data.HashFunction,IHashFunction_Extensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\IHashFunction_Extensions.cs,ComputeHash,The following statement contains a magic number: for (int x = 0; x < Math.Max (hashesNeeded' 1); ++x) {  	byte[] currentData;  	if (x != 0) {  		Array.Copy (BitConverter.GetBytes (x)' seededData' 4);  		currentData = seededData;  	} else {  		// Use original data for first   		currentData = data;  	}  	var elementHash = new BigInteger (hashFunction.ComputeHash (currentData).Concat (new[] {  		(byte)0  	}).ToArray ());  	hash |= elementHash << (x * hashFunction.HashSize);  }  
Magic Number,System.Data.HashFunction,IHashFunction_Extensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\IHashFunction_Extensions.cs,ComputeHash,The following statement contains a magic number: if (x != 0) {  	Array.Copy (BitConverter.GetBytes (x)' seededData' 4);  	currentData = seededData;  } else {  	// Use original data for first   	currentData = data;  }  
Magic Number,System.Data.HashFunction,IHashFunction_Extensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\IHashFunction_Extensions.cs,ComputeHash,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (x)' seededData' 4);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReflectBitsExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReflectBitsExtensions.cs,ReflectBits,The following statement contains a magic number: if (bitLength <= 0 || bitLength > 8)  	throw new ArgumentOutOfRangeException ("bitLength"' "bitLength must be in the range [1' 8].");  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReflectBitsExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReflectBitsExtensions.cs,ReflectBits,The following statement contains a magic number: if (bitLength <= 0 || bitLength > 16)  	throw new ArgumentOutOfRangeException ("bitLength"' "bitLength must be in the range [1' 16].");  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReflectBitsExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReflectBitsExtensions.cs,ReflectBits,The following statement contains a magic number: if (bitLength <= 0 || bitLength > 32)  	throw new ArgumentOutOfRangeException ("bitLength"' "bitLength must be in the range [1' 32].");  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReflectBitsExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReflectBitsExtensions.cs,ReflectBits,The following statement contains a magic number: if (bitLength <= 0 || bitLength > 64)  	throw new ArgumentOutOfRangeException ("bitLength"' "bitLength must be in the range [1' 64].");  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: if (bitLength <= 0 || bitLength > 8)  	throw new ArgumentOutOfRangeException ("bitLength"' "bitLength but be in the range [1' 8].");  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: value &= (byte)(byte.MaxValue >> (8 - bitLength));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: if (bitLength <= 0 || bitLength > 16)  	throw new ArgumentOutOfRangeException ("bitLength"' "bitLength but be in the range [1' 16].");  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: value &= (UInt16)(UInt16.MaxValue >> (16 - bitLength));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: for (int x = 0; x < valueBytes.Length; ++x) {  	valueBytes [x] = (byte)value;  	value >>= 8;  }  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: value >>= 8;  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: if (bitLength <= 0 || bitLength > 32)  	throw new ArgumentOutOfRangeException ("bitLength"' "bitLength but be in the range [1' 32].");  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: value &= (UInt32.MaxValue >> (32 - bitLength));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: for (int x = 0; x < valueBytes.Length; ++x) {  	valueBytes [x] = (byte)value;  	value >>= 8;  }  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: value >>= 8;  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: if (bitLength <= 0 || bitLength > 64)  	throw new ArgumentOutOfRangeException ("bitLength"' "bitLength but be in the range [1' 64].");  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: value &= (UInt64.MaxValue >> (64 - bitLength));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: for (int x = 0; x < valueBytes.Length; ++x) {  	valueBytes [x] = (byte)value;  	value >>= 8;  }  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ToBytesExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ToBytesExtensions.cs,ToBytes,The following statement contains a magic number: value >>= 8;  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ExtendedMultiplyExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ExtendedMultiplyExtensions.cs,ExtendedMultiply,The following statement contains a magic number: for (int y = 0; y < operand2.Count; ++y) {  	// Skip multiplying things by zero  	if (operand2 [y] == 0)  		continue;  	UInt32 carryOver = 0;  	// Top of equation  	for (int x = 0; x < operand2.Count; ++x) {  		if (x + y >= product.Length)  			break;  		var productResult = product [x + y] + (((UInt64)operand2 [y]) * operand1 [x]) + carryOver;  		product [x + y] = (UInt32)productResult;  		carryOver = (UInt32)(productResult >> 32);  	}  }  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ExtendedMultiplyExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ExtendedMultiplyExtensions.cs,ExtendedMultiply,The following statement contains a magic number: for (int x = 0; x < operand2.Count; ++x) {  	if (x + y >= product.Length)  		break;  	var productResult = product [x + y] + (((UInt64)operand2 [y]) * operand1 [x]) + carryOver;  	product [x + y] = (UInt32)productResult;  	carryOver = (UInt32)(productResult >> 32);  }  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ExtendedMultiplyExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ExtendedMultiplyExtensions.cs,ExtendedMultiply,The following statement contains a magic number: carryOver = (UInt32)(productResult >> 32);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,RotateRightExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\RotateRightExtensions.cs,RotateRight,The following statement contains a magic number: return (byte)((operand >> shiftCount) | (operand << (8 - shiftCount)));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,RotateRightExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\RotateRightExtensions.cs,RotateRight,The following statement contains a magic number: return (UInt16)((operand >> shiftCount) | (operand << (16 - shiftCount)));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,RotateRightExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\RotateRightExtensions.cs,RotateRight,The following statement contains a magic number: return (operand >> shiftCount) | (operand << (32 - shiftCount));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,RotateRightExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\RotateRightExtensions.cs,RotateRight,The following statement contains a magic number: return (operand >> shiftCount) | (operand << (64 - shiftCount));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,RotateLeftExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\RotateLeftExtensions.cs,RotateLeft,The following statement contains a magic number: return (byte)((operand << shiftCount) | (operand >> (8 - shiftCount)));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,RotateLeftExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\RotateLeftExtensions.cs,RotateLeft,The following statement contains a magic number: return (UInt16)((operand << shiftCount) | (operand >> (16 - shiftCount)));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,RotateLeftExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\RotateLeftExtensions.cs,RotateLeft,The following statement contains a magic number: return (operand << shiftCount) | (operand >> (32 - shiftCount));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,RotateLeftExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\RotateLeftExtensions.cs,RotateLeft,The following statement contains a magic number: return (operand << shiftCount) | (operand >> (64 - shiftCount));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (UInt16)((operand >> 8) | (operand << 8));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (UInt16)((operand >> 8) | (operand << 8));  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 24) | ((operand & 0x00ff0000) >> 8) | ((operand & 0x0000ff00) << 8) | (operand << 24);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 24) | ((operand & 0x00ff0000) >> 8) | ((operand & 0x0000ff00) << 8) | (operand << 24);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 24) | ((operand & 0x00ff0000) >> 8) | ((operand & 0x0000ff00) << 8) | (operand << 24);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 24) | ((operand & 0x00ff0000) >> 8) | ((operand & 0x0000ff00) << 8) | (operand << 24);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56);  
Magic Number,System.Data.HashFunction.Utilities.IntegerManipulation,ReverseByteOrderExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\IntegerManipulation\ReverseByteOrderExtensions.cs,ReverseByteOrder,The following statement contains a magic number: return (operand >> 56) | ((operand & 0x00ff000000000000) >> 40) | ((operand & 0x0000ff0000000000) >> 24) | ((operand & 0x000000ff00000000) >> 8) | ((operand & 0x00000000ff000000) << 8) | ((operand & 0x0000000000ff0000) << 24) | ((operand & 0x000000000000ff00) << 40) | (operand << 56);  
Magic Number,System.Data.HashFunction.Utilities,BigIntegerExtensions,F:\newReposMay17\brandondahler_Data.HashFunction\src\Core\Utilities\BigIntegerExtensions.cs,ToUInt32Array,The following statement contains a magic number: if (bitSize < 0 || bitSize % 32 != 0)  	throw new ArgumentOutOfRangeException ("bitSize"' "bitSize must be a positive a multiple of 32.");  
