Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,Cyclomatic complexity of the method is 11
Complex Method,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,Cyclomatic complexity of the method is 17
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,TransformByteGroupsInternal,The following statement contains a magic number: Debug.Assert(data.Count % 12 == 0);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,TransformByteGroupsInternal,The following statement contains a magic number: tempB += BitConverter.ToUInt32(dataArray' currentOffset + 4);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,TransformByteGroupsInternal,The following statement contains a magic number: tempC += BitConverter.ToUInt32(dataArray' currentOffset + 8);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: Debug.Assert(remainderLength < 12);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: return new HashValue(                      BitConverter.GetBytes(finalC)'                      32);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: a ^= (c >> 13);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: b ^= (a << 8);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: c ^= (b >> 13);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: a ^= (c >> 12);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: b ^= (a << 16);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: c ^= (b >> 5);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: a ^= (c >> 3);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: b ^= (a << 10);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,Mix,The following statement contains a magic number: c ^= (b >> 15);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,TransformByteGroupsInternal,The following statement contains a magic number: tempHashValue += (tempHashValue << 10);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,TransformByteGroupsInternal,The following statement contains a magic number: tempHashValue ^= (tempHashValue >> 6);
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: finalHashValue += finalHashValue << 3;
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: finalHashValue ^= finalHashValue >> 11;
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: finalHashValue += finalHashValue << 15;
Magic Number,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following statement contains a magic number: return new HashValue(                      BitConverter.GetBytes(finalHashValue)'                      32);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: _config.HashSizeInBits == 64
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: var remainderCount = dataCount % 12;
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: remainderCount = 12;
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: b += BitConverter.ToUInt32(dataArray' currentOffset + 4);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: c += BitConverter.ToUInt32(dataArray' currentOffset + 8);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: currentOffset += 12;
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: Debug.Assert(remainderCount <= 12);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: switch (_config.HashSizeInBits)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;                    default:                      throw new NotImplementedException();              }
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: switch (_config.HashSizeInBits)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;                    default:                      throw new NotImplementedException();              }
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following statement contains a magic number: switch (_config.HashSizeInBits)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;                    default:                      throw new NotImplementedException();              }
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Mix,The following statement contains a magic number: a ^= RotateLeft(c' 4);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Mix,The following statement contains a magic number: b ^= RotateLeft(a'  6);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Mix,The following statement contains a magic number: c ^= RotateLeft(b'  8);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Mix,The following statement contains a magic number: a ^= RotateLeft(c' 16);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Mix,The following statement contains a magic number: b ^= RotateLeft(a' 19);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Mix,The following statement contains a magic number: c ^= RotateLeft(b'  4);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Final,The following statement contains a magic number: c -= RotateLeft(b' 14);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Final,The following statement contains a magic number: a -= RotateLeft(c' 11);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Final,The following statement contains a magic number: b -= RotateLeft(a' 25);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Final,The following statement contains a magic number: c -= RotateLeft(b' 16);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Final,The following statement contains a magic number: a -= RotateLeft(c'  4);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Final,The following statement contains a magic number: b -= RotateLeft(a' 14);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,Final,The following statement contains a magic number: c -= RotateLeft(b' 24);
Magic Number,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,RotateLeft,The following statement contains a magic number: return                  (operand << shiftCount) |                  (operand >> (32 - shiftCount));
Missing Default,OpenSource.Data.HashFunction.Jenkins,BlockTransformer,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup2_Implementation.cs,FinalizeHashValueInternal,The following switch statement is missing a default case: switch (remainderLength)                  {                      case 11: finalC += (UInt32) remainder[10] << 24; goto case 10;                      case 10: finalC += (UInt32) remainder[9] << 16; goto case 9;                      case 9:  finalC += (UInt32) remainder[8] << 8; goto case 8;                      // the first byte of c is reserved for the length                        case 8:                          finalB += BitConverter.ToUInt32(remainder' 4);                          goto case 4;                        case 7: finalB += (UInt32) remainder[6] << 16; goto case 6;                      case 6: finalB += (UInt32) remainder[5] << 8; goto case 5;                      case 5: finalB += (UInt32) remainder[4]; goto case 4;                        case 4:                          finalA += BitConverter.ToUInt32(remainder' 0);                          break;                        case 3: finalA += (UInt32)remainder[2] << 16; goto case 2;                      case 2: finalA += (UInt32)remainder[1] << 8; goto case 1;                      case 1:                          finalA += (UInt32)remainder[0];                          break;                  }
Missing Default,OpenSource.Data.HashFunction.Jenkins,JenkinsLookup3_Implementation,D:\research\architectureSmells\repos\brandondahler_Data.HashFunction\src\OpenSource.Data.HashFunction.Jenkins\JenkinsLookup3_Implementation.cs,ComputeHashInternal,The following switch statement is missing a default case: switch (remainderCount)                  {                      case 12:                          c += BitConverter.ToUInt32(dataArray' currentOffset + 8);                          goto case 8;                        case 11: c += (UInt32) dataArray[currentOffset + 10] << 16; goto case 10;                      case 10: c += (UInt32) dataArray[currentOffset + 9] << 8; goto case 9;                      case 9:  c += (UInt32) dataArray[currentOffset + 8]; goto case 8;                        case 8:                          b += BitConverter.ToUInt32(dataArray' currentOffset + 4);                          goto case 4;                        case 7: b += (UInt32) dataArray[currentOffset + 6] << 16; goto case 6;                      case 6: b += (UInt32) dataArray[currentOffset + 5] << 8; goto case 5;                      case 5: b += (UInt32) dataArray[currentOffset + 4]; goto case 4;                        case 4:                          a += BitConverter.ToUInt32(dataArray' currentOffset);                            Final(ref a' ref b' ref c);                          break;                        case 3: a += (UInt32) dataArray[currentOffset + 2] << 16; goto case 2;                      case 2: a += (UInt32) dataArray[currentOffset + 1] << 8; goto case 1;                      case 1:                          a += (UInt32) dataArray[currentOffset];                            Final(ref a' ref b' ref c);                          break;                  }
