Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessGroup,The method has 6 parameters. Parameters: a' b' c' dataGroup' position' length
Long Parameter List,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The method has 6 parameters. Parameters: a' b' c' remainder' position' length
Long Parameter List,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessGroup,The method has 7 parameters. Parameters: a' b' c' dataCount' dataGroup' position' length
Long Parameter List,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The method has 7 parameters. Parameters: a' b' c' dataCount' remainder' position' length
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ComputeHashInternal,The following statement contains a magic number: data.ForEachGroup(12'                   (dataGroup' position' length) => {                      ProcessGroup(ref a' ref b' ref c' dataGroup' position' length);                        dataCount += length;                  }'                   (remainder' position' length) => {                      ProcessRemainder(ref a' ref b' ref c' remainder' position' length);                        dataCount += length;                  });
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ComputeHashAsyncInternal,The following statement contains a magic number: await data.ForEachGroupAsync(12'                   (dataGroup' position' length) => {                      ProcessGroup(ref a' ref b' ref c' dataGroup' position' length);                        dataCount += length;                  }'                   (remainder' position' length) => {                      ProcessRemainder(ref a' ref b' ref c' remainder' position' length);                        dataCount += length;                  }).ConfigureAwait(false);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessGroup,The following statement contains a magic number: for (var x = position; x < position + length; x += 12)              {                  a += BitConverter.ToUInt32(dataGroup' x);                  b += BitConverter.ToUInt32(dataGroup' x + 4);                  c += BitConverter.ToUInt32(dataGroup' x + 8);                    Mix(ref a' ref b' ref c);              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessGroup,The following statement contains a magic number: for (var x = position; x < position + length; x += 12)              {                  a += BitConverter.ToUInt32(dataGroup' x);                  b += BitConverter.ToUInt32(dataGroup' x + 4);                  c += BitConverter.ToUInt32(dataGroup' x + 8);                    Mix(ref a' ref b' ref c);              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessGroup,The following statement contains a magic number: for (var x = position; x < position + length; x += 12)              {                  a += BitConverter.ToUInt32(dataGroup' x);                  b += BitConverter.ToUInt32(dataGroup' x + 4);                  c += BitConverter.ToUInt32(dataGroup' x + 8);                    Mix(ref a' ref b' ref c);              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: a ^= (c >> 13);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: b ^= (a << 8);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: c ^= (b >> 13);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: a ^= (c >> 12);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: b ^= (a << 16);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: c ^= (b >> 5);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: a ^= (c >> 3);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: b ^= (a << 10);
Magic Number,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,Mix,The following statement contains a magic number: c ^= (b >> 15);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashInternal,The following statement contains a magic number: if (HashSize == 64)                  c += InitVal2;
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashInternal,The following statement contains a magic number: data.ForEachGroup(12'                   (dataGroup' position' length) => {                      ProcessGroup(ref a' ref b' ref c' ref dataCount' dataGroup' position' length);                  }'                  (remainder' position' length) => {                      ProcessRemainder(ref a' ref b' ref c' ref dataCount' remainder' position' length);                  });
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashAsyncInternal,The following statement contains a magic number: if (HashSize == 64)                  c += InitVal2;
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashAsyncInternal,The following statement contains a magic number: await data.ForEachGroupAsync(12'                   (dataGroup' position' length) => {                      ProcessGroup(ref a' ref b' ref c' ref dataCount' dataGroup' position' length);                  }'                  (remainder' position' length) => {                      ProcessRemainder(ref a' ref b' ref c' ref dataCount' remainder' position' length);                  }).ConfigureAwait(false);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessGroup,The following statement contains a magic number: for (int x = position; x < position + length; x += 12)              {                  // Mix at beginning of subsequent group to handle special case of length <= 12                  if (dataCount > 0 || x > position)                      Mix(ref a' ref b' ref c);                    a += BitConverter.ToUInt32(dataGroup' x + 0);                  b += BitConverter.ToUInt32(dataGroup' x + 4);                  c += BitConverter.ToUInt32(dataGroup' x + 8);              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessGroup,The following statement contains a magic number: for (int x = position; x < position + length; x += 12)              {                  // Mix at beginning of subsequent group to handle special case of length <= 12                  if (dataCount > 0 || x > position)                      Mix(ref a' ref b' ref c);                    a += BitConverter.ToUInt32(dataGroup' x + 0);                  b += BitConverter.ToUInt32(dataGroup' x + 4);                  c += BitConverter.ToUInt32(dataGroup' x + 8);              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessGroup,The following statement contains a magic number: for (int x = position; x < position + length; x += 12)              {                  // Mix at beginning of subsequent group to handle special case of length <= 12                  if (dataCount > 0 || x > position)                      Mix(ref a' ref b' ref c);                    a += BitConverter.ToUInt32(dataGroup' x + 0);                  b += BitConverter.ToUInt32(dataGroup' x + 4);                  c += BitConverter.ToUInt32(dataGroup' x + 8);              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following statement contains a magic number: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Mix,The following statement contains a magic number: a ^= c.RotateLeft( 4);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Mix,The following statement contains a magic number: b ^= a.RotateLeft( 6);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Mix,The following statement contains a magic number: c ^= b.RotateLeft( 8);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Mix,The following statement contains a magic number: a ^= c.RotateLeft(16);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Mix,The following statement contains a magic number: b ^= a.RotateLeft(19);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Mix,The following statement contains a magic number: c ^= b.RotateLeft( 4);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Final,The following statement contains a magic number: c -= b.RotateLeft(14);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Final,The following statement contains a magic number: a -= c.RotateLeft(11);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Final,The following statement contains a magic number: b -= a.RotateLeft(25);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Final,The following statement contains a magic number: c -= b.RotateLeft(16);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Final,The following statement contains a magic number: a -= c.RotateLeft( 4);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Final,The following statement contains a magic number: b -= a.RotateLeft(14);
Magic Number,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,Final,The following statement contains a magic number: c -= b.RotateLeft(24);
Magic Number,System.Data.HashFunction,JenkinsOneAtATime,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsOneAtATime.cs,ComputeHashInternal,The following statement contains a magic number: hash += hash << 3;
Magic Number,System.Data.HashFunction,JenkinsOneAtATime,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsOneAtATime.cs,ComputeHashInternal,The following statement contains a magic number: hash ^= hash >> 11;
Magic Number,System.Data.HashFunction,JenkinsOneAtATime,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsOneAtATime.cs,ComputeHashInternal,The following statement contains a magic number: hash += hash << 15;
Magic Number,System.Data.HashFunction,JenkinsOneAtATime,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsOneAtATime.cs,ComputeHashAsyncInternal,The following statement contains a magic number: hash += hash << 3;
Magic Number,System.Data.HashFunction,JenkinsOneAtATime,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsOneAtATime.cs,ComputeHashAsyncInternal,The following statement contains a magic number: hash ^= hash >> 11;
Magic Number,System.Data.HashFunction,JenkinsOneAtATime,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsOneAtATime.cs,ComputeHashAsyncInternal,The following statement contains a magic number: hash += hash << 15;
Magic Number,System.Data.HashFunction,JenkinsOneAtATime,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsOneAtATime.cs,ProcessBytes,The following statement contains a magic number: for (var x = position; x < position + length; ++x)              {                  hash += dataBytes[x];                  hash += (hash << 10);                  hash ^= (hash >> 6);              }
Magic Number,System.Data.HashFunction,JenkinsOneAtATime,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsOneAtATime.cs,ProcessBytes,The following statement contains a magic number: for (var x = position; x < position + length; ++x)              {                  hash += dataBytes[x];                  hash += (hash << 10);                  hash ^= (hash >> 6);              }
Missing Default,System.Data.HashFunction,JenkinsLookup2,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup2.cs,ProcessRemainder,The following switch statement is missing a default case: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 24;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] << 16;  goto case  9;                  case  9: c += (UInt32) remainder[position +  8] <<  8;  goto case  8;                  // the first byte of c is reserved for the length                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] <<  8;    goto case 1;                  case 1:                      a += (UInt32) remainder[position];                      break;              }
Missing Default,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashInternal,The following switch statement is missing a default case: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;              }
Missing Default,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ComputeHashAsyncInternal,The following switch statement is missing a default case: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(c);                      break;                    case 64:                      hash = BitConverter.GetBytes((((UInt64) b) << 32) | c);                      break;              }
Missing Default,System.Data.HashFunction,JenkinsLookup3,C:\repos\brandondahler_Data.HashFunction\src\Jenkins\JenkinsLookup3.cs,ProcessRemainder,The following switch statement is missing a default case: switch (length)              {                  case 11: c += (UInt32) remainder[position + 10] << 16;  goto case 10;                  case 10: c += (UInt32) remainder[position +  9] <<  8;  goto case 9;                  case  9: c += (UInt32) remainder[position +  8];        goto case 8;                    case 8:                      b += BitConverter.ToUInt32(remainder' position + 4);                      goto case 4;                    case 7: b += (UInt32) remainder[position + 6] << 16;    goto case 6;                  case 6: b += (UInt32) remainder[position + 5] <<  8;    goto case 5;                  case 5: b += (UInt32) remainder[position + 4];          goto case 4;                    case 4:                      a += BitConverter.ToUInt32(remainder' position);                      break;                    case 3: a += (UInt32) remainder[position + 2] << 16;    goto case 2;                  case 2: a += (UInt32) remainder[position + 1] << 8;     goto case 1;                  case 1:                       a += (UInt32) remainder[position];                       break;              }
