Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,WeakHashLen32WithSeeds,The method has 6 parameters. Parameters: w' x' y' z' a' b
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                        BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                        BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                        BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                        BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                        BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                                            BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                                            BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                                            BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                                            BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashAsyncInternal,The following statement contains a magic number: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                                            BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: if (data.Length <= 24)              {                  if (data.Length <= 12)                      return (data.Length <= 4 ? Hash32Len0to4(data) : Hash32Len5to12(data));                  else                      return Hash32Len13to24(data);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: if (data.Length <= 24)              {                  if (data.Length <= 12)                      return (data.Length <= 4 ? Hash32Len0to4(data) : Hash32Len5to12(data));                  else                      return Hash32Len13to24(data);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: if (data.Length <= 24)              {                  if (data.Length <= 12)                      return (data.Length <= 4 ? Hash32Len0to4(data) : Hash32Len5to12(data));                  else                      return Hash32Len13to24(data);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: {                  UInt32 a0 = (BitConverter.ToUInt32(data' data.Length - 4) * c1).RotateRight(17) * c2;                  UInt32 a1 = (BitConverter.ToUInt32(data' data.Length - 8) * c1).RotateRight(17) * c2;                  UInt32 a2 = (BitConverter.ToUInt32(data' data.Length - 16) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' data.Length - 12) * c1).RotateRight(17) * c2;                  UInt32 a4 = (BitConverter.ToUInt32(data' data.Length - 20) * c1).RotateRight(17) * c2;                    h ^= a0;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                  h ^= a2;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a1;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                  g ^= a3;                  g = g.RotateRight(19);                  g = g * 5 + 0xe6546b64;                    f += a4;                  f = f.RotateRight(19);                  f = f * 5 + 0xe6546b64;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: for (int x = 0; x < (data.Length - 1) / 20; ++x)              {                  UInt32 a0 = (BitConverter.ToUInt32(data' 20 * x + 0) * c1).RotateRight(17) * c2;                  UInt32 a1 =  BitConverter.ToUInt32(data' 20 * x + 4);                  UInt32 a2 = (BitConverter.ToUInt32(data' 20 * x + 8) * c1).RotateRight(17) * c2;                  UInt32 a3 = (BitConverter.ToUInt32(data' 20 * x + 12) * c1).RotateRight(17) * c2;                  UInt32 a4 =  BitConverter.ToUInt32(data' 20 * x + 16);                    h ^= a0;                  h = h.RotateRight(18);                  h = h * 5 + 0xe6546b64;                    f += a1;                  f = f.RotateRight(19);                  f = f * c1;                    g += a2;                  g = g.RotateRight(18);                  g = g * 5 + 0xe6546b64;                    h ^= a3 + a1;                  h = h.RotateRight(19);                  h = h * 5 + 0xe6546b64;                    g ^= a4;                  g = g.ReverseByteOrder() * 5;                    h += a4 * 5;                  h = h.ReverseByteOrder();                    f += a0;                    Permute3(ref f' ref h' ref g);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: g = g.RotateRight(11) * c1;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: g = g.RotateRight(17) * c1;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: f = f.RotateRight(11) * c1;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: f = f.RotateRight(17) * c1;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: h = (h + g).RotateRight(19);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: h = h * 5 + 0xe6546b64;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: h = h.RotateRight(17) * c1;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: h = (h + f).RotateRight(19);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: h = h * 5 + 0xe6546b64;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash32,The following statement contains a magic number: h = h.RotateRight(17) * c1;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len0to4,The following statement contains a magic number: UInt32 c = 9;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len5to12,The following statement contains a magic number: UInt32 b = (UInt32) data.Length * 5;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len5to12,The following statement contains a magic number: UInt32 c = 9;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len5to12,The following statement contains a magic number: b += BitConverter.ToUInt32(data' data.Length - 4);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len5to12,The following statement contains a magic number: c += BitConverter.ToUInt32(data' (data.Length >> 1) & 4);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len13to24,The following statement contains a magic number: UInt32 a = BitConverter.ToUInt32(data' (data.Length >> 1) - 4);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len13to24,The following statement contains a magic number: UInt32 b = BitConverter.ToUInt32(data' 4);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len13to24,The following statement contains a magic number: UInt32 c = BitConverter.ToUInt32(data' data.Length - 8);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash32Len13to24,The following statement contains a magic number: UInt32 f = BitConverter.ToUInt32(data' data.Length - 4);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: if (data.Length <= 32)               {                  if (data.Length <= 16) {                      return HashLen0to16(data);                  } else {                      return HashLen17to32(data);                  }              } else if (data.Length <= 64) {                  return HashLen33to64(data);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: if (data.Length <= 32)               {                  if (data.Length <= 16) {                      return HashLen0to16(data);                  } else {                      return HashLen17to32(data);                  }              } else if (data.Length <= 64) {                  return HashLen33to64(data);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: if (data.Length <= 32)               {                  if (data.Length <= 16) {                      return HashLen0to16(data);                  } else {                      return HashLen17to32(data);                  }              } else if (data.Length <= 64) {                  return HashLen33to64(data);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: UInt64 x = BitConverter.ToUInt64(data' data.Length - 40);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: UInt64 y = BitConverter.ToUInt64(data'  data.Length - 16) + BitConverter.ToUInt64(data'  data.Length - 56);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: UInt64 y = BitConverter.ToUInt64(data'  data.Length - 16) + BitConverter.ToUInt64(data'  data.Length - 56);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: UInt64 z = HashLen16(                  BitConverter.ToUInt64(data'  data.Length - 48) + (UInt64) data.Length'                   BitConverter.ToUInt64(data'  data.Length - 24));
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: UInt64 z = HashLen16(                  BitConverter.ToUInt64(data'  data.Length - 48) + (UInt64) data.Length'                   BitConverter.ToUInt64(data'  data.Length - 24));
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: UInt128 v = WeakHashLen32WithSeeds(data'  data.Length - 64' (UInt64) data.Length' z);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: UInt128 w = WeakHashLen32WithSeeds(data'  data.Length - 32' y + k1' x);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash64,The following statement contains a magic number: for (int i = 0; i < data.Length >> 6; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' 64 * i + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' 64 * i + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' 64 * i + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 64 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' 64 * i + 32' z + w.High' y + BitConverter.ToUInt64(data' 64 * i + 16));                                    UInt64 temp = x;                  x = z;                  z = temp;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen16,The following statement contains a magic number: a ^= (a >> 47);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen16,The following statement contains a magic number: b ^= (b >> 47);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 8)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt64(data' 0) + k2;                  UInt64 b = BitConverter.ToUInt64(data' data.Length - 8);                  UInt64 c = b.RotateRight(37) * mul + a;                  UInt64 d = (a.RotateRight(25) + b) * mul;                    return HashLen16(c' d' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 8)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt64(data' 0) + k2;                  UInt64 b = BitConverter.ToUInt64(data' data.Length - 8);                  UInt64 c = b.RotateRight(37) * mul + a;                  UInt64 d = (a.RotateRight(25) + b) * mul;                    return HashLen16(c' d' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 8)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt64(data' 0) + k2;                  UInt64 b = BitConverter.ToUInt64(data' data.Length - 8);                  UInt64 c = b.RotateRight(37) * mul + a;                  UInt64 d = (a.RotateRight(25) + b) * mul;                    return HashLen16(c' d' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 8)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt64(data' 0) + k2;                  UInt64 b = BitConverter.ToUInt64(data' data.Length - 8);                  UInt64 c = b.RotateRight(37) * mul + a;                  UInt64 d = (a.RotateRight(25) + b) * mul;                    return HashLen16(c' d' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 8)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt64(data' 0) + k2;                  UInt64 b = BitConverter.ToUInt64(data' data.Length - 8);                  UInt64 c = b.RotateRight(37) * mul + a;                  UInt64 d = (a.RotateRight(25) + b) * mul;                    return HashLen16(c' d' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 4)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt32(data' 0);                  return HashLen16((UInt64) data.Length + (a << 3)' BitConverter.ToUInt32(data' data.Length - 4)' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 4)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt32(data' 0);                  return HashLen16((UInt64) data.Length + (a << 3)' BitConverter.ToUInt32(data' data.Length - 4)' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 4)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt32(data' 0);                  return HashLen16((UInt64) data.Length + (a << 3)' BitConverter.ToUInt32(data' data.Length - 4)' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length >= 4)               {                  UInt64 mul = k2 + (UInt64) data.Length * 2;                  UInt64 a = BitConverter.ToUInt32(data' 0);                  return HashLen16((UInt64) data.Length + (a << 3)' BitConverter.ToUInt32(data' data.Length - 4)' mul);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length > 0)               {                  byte a = data[0];                  byte b = data[data.Length >> 1];                  byte c = data[data.Length - 1];                    UInt32 y = (UInt32) a + ((UInt32) b << 8);                  UInt32 z = (UInt32) data.Length + ((UInt32) c << 2);                    return Mix((UInt64) (y * k2 ^ z * k0)) * k2;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen0to16,The following statement contains a magic number: if (data.Length > 0)               {                  byte a = data[0];                  byte b = data[data.Length >> 1];                  byte c = data[data.Length - 1];                    UInt32 y = (UInt32) a + ((UInt32) b << 8);                  UInt32 z = (UInt32) data.Length + ((UInt32) c << 2);                    return Mix((UInt64) (y * k2 ^ z * k0)) * k2;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen17to32,The following statement contains a magic number: UInt64 mul = k2 + (UInt64) data.Length * 2;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen17to32,The following statement contains a magic number: UInt64 b = BitConverter.ToUInt64(data' 8);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen17to32,The following statement contains a magic number: UInt64 c = BitConverter.ToUInt64(data' data.Length - 8) * mul;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen17to32,The following statement contains a magic number: UInt64 d = BitConverter.ToUInt64(data' data.Length - 16) * k2;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen17to32,The following statement contains a magic number: return HashLen16((a + b).RotateRight(43) + c.RotateRight(30) + d'                             a + (b + k2).RotateRight(18) + c' mul);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen17to32,The following statement contains a magic number: return HashLen16((a + b).RotateRight(43) + c.RotateRight(30) + d'                             a + (b + k2).RotateRight(18) + c' mul);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen17to32,The following statement contains a magic number: return HashLen16((a + b).RotateRight(43) + c.RotateRight(30) + d'                             a + (b + k2).RotateRight(18) + c' mul);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: b = (b + a + z).RotateRight(21);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: b += a.RotateRight(44);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: return WeakHashLen32WithSeeds(                  BitConverter.ToUInt64(data' startIndex)'                  BitConverter.ToUInt64(data' startIndex + 8)'                  BitConverter.ToUInt64(data' startIndex + 16)'                  BitConverter.ToUInt64(data' startIndex + 24)'                  a'                  b);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: return WeakHashLen32WithSeeds(                  BitConverter.ToUInt64(data' startIndex)'                  BitConverter.ToUInt64(data' startIndex + 8)'                  BitConverter.ToUInt64(data' startIndex + 16)'                  BitConverter.ToUInt64(data' startIndex + 24)'                  a'                  b);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,WeakHashLen32WithSeeds,The following statement contains a magic number: return WeakHashLen32WithSeeds(                  BitConverter.ToUInt64(data' startIndex)'                  BitConverter.ToUInt64(data' startIndex + 8)'                  BitConverter.ToUInt64(data' startIndex + 16)'                  BitConverter.ToUInt64(data' startIndex + 24)'                  a'                  b);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 mul = k2 + (UInt64) data.Length * 2;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 b = BitConverter.ToUInt64(data' 8);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 c = BitConverter.ToUInt64(data' data.Length - 24);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 d = BitConverter.ToUInt64(data' data.Length - 32);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 e = BitConverter.ToUInt64(data' 16) * k2;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 f = BitConverter.ToUInt64(data' 24) * 9;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 f = BitConverter.ToUInt64(data' 24) * 9;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 g = BitConverter.ToUInt64(data' data.Length - 8);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 h = BitConverter.ToUInt64(data' data.Length - 16) * mul;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 u = (a + g).RotateRight(43) + (b.RotateRight(30) + c) * 9;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 u = (a + g).RotateRight(43) + (b.RotateRight(30) + c) * 9;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 u = (a + g).RotateRight(43) + (b.RotateRight(30) + c) * 9;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,HashLen33to64,The following statement contains a magic number: UInt64 x = (e + f).RotateRight(42) + c;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash128,The following statement contains a magic number: return                   data.Length >= 16 ?                  CityHash128WithSeed(                      data.Skip(16).ToArray()'                       new UInt128() {                           Low = BitConverter.ToUInt64(data' 0)'                           High = BitConverter.ToUInt64(data' 8) + k0                      }) :                  CityHash128WithSeed(                      data'                       new UInt128() {                           Low = k0'                           High = k1                       });
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash128,The following statement contains a magic number: return                   data.Length >= 16 ?                  CityHash128WithSeed(                      data.Skip(16).ToArray()'                       new UInt128() {                           Low = BitConverter.ToUInt64(data' 0)'                           High = BitConverter.ToUInt64(data' 8) + k0                      }) :                  CityHash128WithSeed(                      data'                       new UInt128() {                           Low = k0'                           High = k1                       });
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHash128,The following statement contains a magic number: return                   data.Length >= 16 ?                  CityHash128WithSeed(                      data.Skip(16).ToArray()'                       new UInt128() {                           Low = BitConverter.ToUInt64(data' 0)'                           High = BitConverter.ToUInt64(data' 8) + k0                      }) :                  CityHash128WithSeed(                      data'                       new UInt128() {                           Low = k0'                           High = k1                       });
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityMurmur,The following statement contains a magic number: int l = data.Length - 16;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityMurmur,The following statement contains a magic number: if (l <= 0) {  // len <= 16                  a = Mix(a * k1) * k1;                  c = b * k1 + HashLen0to16(data);                  d = Mix(a + (data.Length >= 8 ? BitConverter.ToUInt64(data' 0) : c));              } else {  // len > 16                  c = HashLen16(BitConverter.ToUInt64(data' data.Length - 8) + k1' a);                  d = HashLen16(b + (UInt64) data.Length' c + BitConverter.ToUInt64(data' data.Length - 16));                  a += d;                    for (int i = 0; i < (data.Length - 1) / 16; ++i)                  {                      a ^= Mix(BitConverter.ToUInt64(data' i * 16) * k1) * k1;                      a *= k1;                      b ^= a;                      c ^= Mix(BitConverter.ToUInt64(data' i * 16 + 8) * k1) * k1;                      c *= k1;                      d ^= c;                  }                }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityMurmur,The following statement contains a magic number: if (l <= 0) {  // len <= 16                  a = Mix(a * k1) * k1;                  c = b * k1 + HashLen0to16(data);                  d = Mix(a + (data.Length >= 8 ? BitConverter.ToUInt64(data' 0) : c));              } else {  // len > 16                  c = HashLen16(BitConverter.ToUInt64(data' data.Length - 8) + k1' a);                  d = HashLen16(b + (UInt64) data.Length' c + BitConverter.ToUInt64(data' data.Length - 16));                  a += d;                    for (int i = 0; i < (data.Length - 1) / 16; ++i)                  {                      a ^= Mix(BitConverter.ToUInt64(data' i * 16) * k1) * k1;                      a *= k1;                      b ^= a;                      c ^= Mix(BitConverter.ToUInt64(data' i * 16 + 8) * k1) * k1;                      c *= k1;                      d ^= c;                  }                }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityMurmur,The following statement contains a magic number: if (l <= 0) {  // len <= 16                  a = Mix(a * k1) * k1;                  c = b * k1 + HashLen0to16(data);                  d = Mix(a + (data.Length >= 8 ? BitConverter.ToUInt64(data' 0) : c));              } else {  // len > 16                  c = HashLen16(BitConverter.ToUInt64(data' data.Length - 8) + k1' a);                  d = HashLen16(b + (UInt64) data.Length' c + BitConverter.ToUInt64(data' data.Length - 16));                  a += d;                    for (int i = 0; i < (data.Length - 1) / 16; ++i)                  {                      a ^= Mix(BitConverter.ToUInt64(data' i * 16) * k1) * k1;                      a *= k1;                      b ^= a;                      c ^= Mix(BitConverter.ToUInt64(data' i * 16 + 8) * k1) * k1;                      c *= k1;                      d ^= c;                  }                }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityMurmur,The following statement contains a magic number: if (l <= 0) {  // len <= 16                  a = Mix(a * k1) * k1;                  c = b * k1 + HashLen0to16(data);                  d = Mix(a + (data.Length >= 8 ? BitConverter.ToUInt64(data' 0) : c));              } else {  // len > 16                  c = HashLen16(BitConverter.ToUInt64(data' data.Length - 8) + k1' a);                  d = HashLen16(b + (UInt64) data.Length' c + BitConverter.ToUInt64(data' data.Length - 16));                  a += d;                    for (int i = 0; i < (data.Length - 1) / 16; ++i)                  {                      a ^= Mix(BitConverter.ToUInt64(data' i * 16) * k1) * k1;                      a *= k1;                      b ^= a;                      c ^= Mix(BitConverter.ToUInt64(data' i * 16 + 8) * k1) * k1;                      c *= k1;                      d ^= c;                  }                }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityMurmur,The following statement contains a magic number: if (l <= 0) {  // len <= 16                  a = Mix(a * k1) * k1;                  c = b * k1 + HashLen0to16(data);                  d = Mix(a + (data.Length >= 8 ? BitConverter.ToUInt64(data' 0) : c));              } else {  // len > 16                  c = HashLen16(BitConverter.ToUInt64(data' data.Length - 8) + k1' a);                  d = HashLen16(b + (UInt64) data.Length' c + BitConverter.ToUInt64(data' data.Length - 16));                  a += d;                    for (int i = 0; i < (data.Length - 1) / 16; ++i)                  {                      a ^= Mix(BitConverter.ToUInt64(data' i * 16) * k1) * k1;                      a *= k1;                      b ^= a;                      c ^= Mix(BitConverter.ToUInt64(data' i * 16 + 8) * k1) * k1;                      c *= k1;                      d ^= c;                  }                }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityMurmur,The following statement contains a magic number: if (l <= 0) {  // len <= 16                  a = Mix(a * k1) * k1;                  c = b * k1 + HashLen0to16(data);                  d = Mix(a + (data.Length >= 8 ? BitConverter.ToUInt64(data' 0) : c));              } else {  // len > 16                  c = HashLen16(BitConverter.ToUInt64(data' data.Length - 8) + k1' a);                  d = HashLen16(b + (UInt64) data.Length' c + BitConverter.ToUInt64(data' data.Length - 16));                  a += d;                    for (int i = 0; i < (data.Length - 1) / 16; ++i)                  {                      a ^= Mix(BitConverter.ToUInt64(data' i * 16) * k1) * k1;                      a *= k1;                      b ^= a;                      c ^= Mix(BitConverter.ToUInt64(data' i * 16 + 8) * k1) * k1;                      c *= k1;                      d ^= c;                  }                }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityMurmur,The following statement contains a magic number: if (l <= 0) {  // len <= 16                  a = Mix(a * k1) * k1;                  c = b * k1 + HashLen0to16(data);                  d = Mix(a + (data.Length >= 8 ? BitConverter.ToUInt64(data' 0) : c));              } else {  // len > 16                  c = HashLen16(BitConverter.ToUInt64(data' data.Length - 8) + k1' a);                  d = HashLen16(b + (UInt64) data.Length' c + BitConverter.ToUInt64(data' data.Length - 16));                  a += d;                    for (int i = 0; i < (data.Length - 1) / 16; ++i)                  {                      a ^= Mix(BitConverter.ToUInt64(data' i * 16) * k1) * k1;                      a *= k1;                      b ^= a;                      c ^= Mix(BitConverter.ToUInt64(data' i * 16 + 8) * k1) * k1;                      c *= k1;                      d ^= c;                  }                }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: if (data.Length < 128) {                  return CityMurmur(data' seed);              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: v.Low = (seed.High ^ k1).RotateRight(49) * k1 + BitConverter.ToUInt64(data' 0);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: v.High = (v.Low).RotateRight(42) * k1 + BitConverter.ToUInt64(data' 8);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: v.High = (v.Low).RotateRight(42) * k1 + BitConverter.ToUInt64(data' 8);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: w.Low = (seed.High + ((UInt64) data.LongLength * k1)).RotateRight(35) * k1 + seed.Low;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: w.High = (seed.Low + BitConverter.ToUInt64(data' 88)).RotateRight(53) * k1;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: w.High = (seed.Low + BitConverter.ToUInt64(data' 88)).RotateRight(53) * k1;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 0; i < data.Length / 128; ++i)              {                  x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 8)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 48)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 40);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' 128 * i' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 32' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 16));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                    x = (x + y + v.Low + BitConverter.ToUInt64(data' (128 * i) + 72)).RotateRight(37) * k1;                  y = (y + v.High + BitConverter.ToUInt64(data' (128 * i) + 112)).RotateRight(42) * k1;                  x ^= w.High;                  y += v.Low + BitConverter.ToUInt64(data' (128 * i) + 104);                  z = (z + w.Low).RotateRight(33) * k1;                  v = WeakHashLen32WithSeeds(data' (128 * i) + 64' v.High * k1' x + w.Low);                  w = WeakHashLen32WithSeeds(data' (128 * i) + 96' z + w.High' y + BitConverter.ToUInt64(data' (128 * i) + 80));                    {                      UInt64 temp = z;                      z = x;                      x = temp;                  }                  }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: x += (v.Low + z).RotateRight(49) * k0;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: y = y * k0 + (w.High).RotateRight(37);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: z = z * k0 + (w.Low).RotateRight(27);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: w.Low *= 9;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 1; i <= (((data.Length % 128) + 31) / 32); ++i)               {                  y = (x + y).RotateRight(42) * k0 + v.High;                  w.Low += BitConverter.ToUInt64(data' data.Length - (32 * i) + 16);                  x = x * k0 + w.Low;                  z += w.High + BitConverter.ToUInt64(data' data.Length - (32 * i));                  w.High += v.Low;                  v = WeakHashLen32WithSeeds(data' data.Length - (32 * i)' v.Low + z' v.High);                  v.Low *= k0;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 1; i <= (((data.Length % 128) + 31) / 32); ++i)               {                  y = (x + y).RotateRight(42) * k0 + v.High;                  w.Low += BitConverter.ToUInt64(data' data.Length - (32 * i) + 16);                  x = x * k0 + w.Low;                  z += w.High + BitConverter.ToUInt64(data' data.Length - (32 * i));                  w.High += v.Low;                  v = WeakHashLen32WithSeeds(data' data.Length - (32 * i)' v.Low + z' v.High);                  v.Low *= k0;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 1; i <= (((data.Length % 128) + 31) / 32); ++i)               {                  y = (x + y).RotateRight(42) * k0 + v.High;                  w.Low += BitConverter.ToUInt64(data' data.Length - (32 * i) + 16);                  x = x * k0 + w.Low;                  z += w.High + BitConverter.ToUInt64(data' data.Length - (32 * i));                  w.High += v.Low;                  v = WeakHashLen32WithSeeds(data' data.Length - (32 * i)' v.Low + z' v.High);                  v.Low *= k0;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 1; i <= (((data.Length % 128) + 31) / 32); ++i)               {                  y = (x + y).RotateRight(42) * k0 + v.High;                  w.Low += BitConverter.ToUInt64(data' data.Length - (32 * i) + 16);                  x = x * k0 + w.Low;                  z += w.High + BitConverter.ToUInt64(data' data.Length - (32 * i));                  w.High += v.Low;                  v = WeakHashLen32WithSeeds(data' data.Length - (32 * i)' v.Low + z' v.High);                  v.Low *= k0;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 1; i <= (((data.Length % 128) + 31) / 32); ++i)               {                  y = (x + y).RotateRight(42) * k0 + v.High;                  w.Low += BitConverter.ToUInt64(data' data.Length - (32 * i) + 16);                  x = x * k0 + w.Low;                  z += w.High + BitConverter.ToUInt64(data' data.Length - (32 * i));                  w.High += v.Low;                  v = WeakHashLen32WithSeeds(data' data.Length - (32 * i)' v.Low + z' v.High);                  v.Low *= k0;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 1; i <= (((data.Length % 128) + 31) / 32); ++i)               {                  y = (x + y).RotateRight(42) * k0 + v.High;                  w.Low += BitConverter.ToUInt64(data' data.Length - (32 * i) + 16);                  x = x * k0 + w.Low;                  z += w.High + BitConverter.ToUInt64(data' data.Length - (32 * i));                  w.High += v.Low;                  v = WeakHashLen32WithSeeds(data' data.Length - (32 * i)' v.Low + z' v.High);                  v.Low *= k0;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 1; i <= (((data.Length % 128) + 31) / 32); ++i)               {                  y = (x + y).RotateRight(42) * k0 + v.High;                  w.Low += BitConverter.ToUInt64(data' data.Length - (32 * i) + 16);                  x = x * k0 + w.Low;                  z += w.High + BitConverter.ToUInt64(data' data.Length - (32 * i));                  w.High += v.Low;                  v = WeakHashLen32WithSeeds(data' data.Length - (32 * i)' v.Low + z' v.High);                  v.Low *= k0;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,CityHash128WithSeed,The following statement contains a magic number: for (int i = 1; i <= (((data.Length % 128) + 31) / 32); ++i)               {                  y = (x + y).RotateRight(42) * k0 + v.High;                  w.Low += BitConverter.ToUInt64(data' data.Length - (32 * i) + 16);                  x = x * k0 + w.Low;                  z += w.High + BitConverter.ToUInt64(data' data.Length - (32 * i));                  w.High += v.Low;                  v = WeakHashLen32WithSeeds(data' data.Length - (32 * i)' v.Low + z' v.High);                  v.Low *= k0;              }
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Mix,The following statement contains a magic number: h ^= h >> 16;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Mix,The following statement contains a magic number: h ^= h >> 13;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Mix,The following statement contains a magic number: h ^= h >> 16;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Mix,The following statement contains a magic number: return val ^ (val >> 47);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Mur,The following statement contains a magic number: a = a.RotateRight(17);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Mur,The following statement contains a magic number: h = h.RotateRight(19);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Mur,The following statement contains a magic number: return h * 5 + 0xe6546b64;
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash128to64,The following statement contains a magic number: a ^= (a >> 47);
Magic Number,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,Hash128to64,The following statement contains a magic number: b ^= (b >> 47);
Missing Default,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashInternal,The following switch statement is missing a default case: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                        BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
Missing Default,System.Data.HashFunction,CityHash,C:\repos\brandondahler_Data.HashFunction\src\CityHash\CityHash.cs,ComputeHashAsyncInternal,The following switch statement is missing a default case: switch (HashSize)              {                  case 32:                      hash = BitConverter.GetBytes(                          ComputeHash32(dataArray));                        break;                    case 64:                      hash = BitConverter.GetBytes(                          ComputeHash64(dataArray));                        break;                    case 128:                      var result = ComputeHash128(dataArray);                          hash = new byte[16];                                            BitConverter.GetBytes(result.Low)                          .CopyTo(hash' 0);                        BitConverter.GetBytes(result.High)                          .CopyTo(hash' 8);                        break;              }
