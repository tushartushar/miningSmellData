Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BlueCollar.Examples,Tail,F:\newReposMay17\ChadBurggraf_blue-collar\Source\BlueCollar.Examples\Tail.cs,Read,Cyclomatic complexity of the method is 17
Magic Number,BlueCollar.Examples,Tail,F:\newReposMay17\ChadBurggraf_blue-collar\Source\BlueCollar.Examples\Tail.cs,Read,The following statement contains a magic number: using (StreamReader reader = new StreamReader (stream' encoding)) {  	reader.BaseStream.Seek (0' SeekOrigin.End);  	string currentLine = string.Empty' previousLine = string.Empty;  	StringBuilder sb = new StringBuilder ();  	char[] buffer = new char[1024];  	bool finished = false;  	while (!finished) {  		long position = reader.BaseStream.Position - buffer.Length;  		int max = buffer.Length' charCount' lineCount;  		if (position < 0) {  			max = (int)(max + position);  			position = 0;  		}  		reader.BaseStream.Seek (position' SeekOrigin.Begin);  		finished = position == 0;  		charCount = reader.Read (buffer' 0' max);  		lineCount = result.Count;  		previousLine = ReadBuffer (result' sb' buffer' charCount);  		if (result.Count > lineCount) {  			result [lineCount] += currentLine;  			currentLine = string.Empty;  		}  		if (count == 0 || result.Count < count) {  			currentLine = currentLine + previousLine;  			if (!finished) {  				reader.BaseStream.Seek (-encoding.GetByteCount (sb.ToString ())' SeekOrigin.Current);  				if (sb.Length > 0) {  					sb.Remove (0' sb.Length);  				}  			}  		} else {  			finished = true;  		}  	}  	if (currentLine.Length > 0) {  		result.Add (currentLine);  	}  	if (count > 0) {  		while (result.Count > count) {  			result.RemoveAt (result.Count - 1);  		}  	}  }  
