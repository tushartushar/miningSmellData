Implementation smell,Namespace,Class,File,Method,Description
Long Method,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The method has 261 lines of code.
Long Method,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The method has 154 lines of code.
Long Method,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,ProcessQueuedItems,The method has 100 lines of code.
Long Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The method has 261 lines of code.
Long Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The method has 122 lines of code.
Long Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The method has 258 lines of code.
Long Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The method has 235 lines of code.
Long Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The method has 107 lines of code.
Complex Method,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,Cyclomatic complexity of the method is 44
Complex Method,CommonClasses,PLOG,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Write,Cyclomatic complexity of the method is 38
Complex Method,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,Cyclomatic complexity of the method is 16
Complex Method,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,ProcessQueuedItems,Cyclomatic complexity of the method is 9
Complex Method,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,Shutdown,Cyclomatic complexity of the method is 11
Complex Method,Amib.Threading.Internal,WorkItem,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItem.cs,GetResult,Cyclomatic complexity of the method is 13
Complex Method,Amib.Threading.Internal,WorkItem,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItem.cs,Execute,Cyclomatic complexity of the method is 11
Complex Method,Amib.Threading.Internal,WorkItem,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItem.cs,WaitAll,Cyclomatic complexity of the method is 8
Complex Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,Cyclomatic complexity of the method is 23
Complex Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,Cyclomatic complexity of the method is 15
Complex Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,Cyclomatic complexity of the method is 21
Complex Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,Cyclomatic complexity of the method is 27
Complex Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,Cyclomatic complexity of the method is 12
Complex Method,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,Cyclomatic complexity of the method is 18
Long Parameter List,Amib.Threading,IWorkItemsGroup,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\Interfaces.cs,QueueWorkItem,The method has 5 parameters.
Long Parameter List,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,QueueWorkItem,The method has 5 parameters.
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemFactory.cs,CreateWorkItem,The method has 5 parameters.
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemFactory.cs,CreateWorkItem,The method has 5 parameters.
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemFactory.cs,CreateWorkItem,The method has 5 parameters.
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemFactory.cs,CreateWorkItem,The method has 6 parameters.
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemFactory.cs,CreateWorkItem,The method has 6 parameters.
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemFactory.cs,CreateWorkItem,The method has 7 parameters.
Long Parameter List,Amib.Threading.Internal,WorkItemsGroup,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemsGroup.cs,QueueWorkItem,The method has 5 parameters.
Long Identifier,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,ProcessQueuedItems,The length of the parameter bInUseWorkerThreadsWasIncremented is 33.
Long Statement,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The length of the statement  "		return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound)); " is 144.
Long Statement,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The length of the statement  "	return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * (double)range); " is 131.
Long Statement,CommonClasses,LoadGlobals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\LoadGlobals.cs,LoadLogFilePath,The length of the statement  "			File.Move ("tpcbench_" + Globals.ServerName.Replace ('\\'' '_') + ".log"' "tpcbench_" + Globals.ServerName.Replace ('\\'' '_') + "_" + Convert.ToString (rnd.Next ()) + ".log"); " is 176.
Long Statement,CommonClasses,LoadGlobals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\LoadGlobals.cs,LoadLogFilePath,The length of the statement  "			File.Move ("tpcbench_Err_" + Globals.ServerName.Replace ('\\'' '_') + ".log"' "tpcbench_Err_" + Globals.ServerName.Replace ('\\'' '_') + "_" + Convert.ToString (rnd.Next ()) + ".log"); " is 184.
Long Statement,CommonClasses,LoadGlobals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\LoadGlobals.cs,LoadMasterConnectionString,The length of the statement  "		strConnect = "Data Source=" + Globals.ServerName + ";" + "Initial Catalog=" + Globals.DatabaseName + ";" + "Integrated Security=SSPI;" + "Enlist=false;" + "connection reset=false;" + "connection lifetime=5;" + "connection timeout=60;" + "min pool size=2;" + "max pool size=2000;"; " is 280.
Long Statement,CommonClasses,LoadGlobals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\LoadGlobals.cs,LoadMasterConnectionString,The length of the statement  "		strConnect = "Data Source=" + Globals.ServerName + ";" + "Initial Catalog=" + Globals.DatabaseName + ";" + "Uid=" + Globals.UserName + ";" + "Pwd=" + Globals.Password + ";" + "Enlist=false;" + "connection reset=false;" + "connection lifetime=5;" + "connection timeout=60;" + "min pool size=2;" + "max pool size=2000;"; " is 318.
Long Statement,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The length of the statement  "				PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl)); " is 134.
Long Statement,Amib.Threading,CallerThreadContext,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\CallerThreadContext.cs,Capture,The length of the statement  "		callerThreadContext._callContext = (LogicalCallContext)getLogicalCallContextMethodInfo.Invoke (Thread.CurrentThread' null); " is 123.
Long Statement,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,ValidateSTPStartInfo,The length of the statement  "		throw new ArgumentOutOfRangeException ("MinWorkerThreads' maxWorkerThreads"' "MaxWorkerThreads must be greater or equal to MinWorkerThreads"); " is 142.
Long Statement,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,QueueWorkItem,The length of the statement  "	WorkItem workItem = WorkItemFactory.CreateWorkItem (this' _stpStartInfo' callback' state' postExecuteWorkItemCallback' workItemPriority); " is 137.
Long Statement,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,QueueWorkItem,The length of the statement  "	WorkItem workItem = WorkItemFactory.CreateWorkItem (this' _stpStartInfo' callback' state' postExecuteWorkItemCallback' callToPostExecute); " is 138.
Long Statement,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,QueueWorkItem,The length of the statement  "	WorkItem workItem = WorkItemFactory.CreateWorkItem (this' _stpStartInfo' callback' state' postExecuteWorkItemCallback' callToPostExecute' workItemPriority); " is 156.
Long Statement,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,ValidateWaitForIdle,The length of the statement  "		throw new NotSupportedException ("WaitForIdle cannot be called from a thread on its SmartThreadPool' it will cause may cause a deadlock"); " is 138.
Long Statement,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,ValidateWorkItemsGroupWaitForIdle,The length of the statement  "		throw new NotSupportedException ("WaitForIdle cannot be called from a thread on its SmartThreadPool' it will cause may cause a deadlock"); " is 138.
Long Statement,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,ValidateWorkItemsGroupWaitForIdleImpl,The length of the statement  "		throw new NotSupportedException ("WaitForIdle cannot be called from a thread on its SmartThreadPool' it will cause may cause a deadlock"); " is 138.
Long Statement,Amib.Threading.Internal,STPPerformanceCounters,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\STPPerformanceCounter.cs,SetupCategory,The length of the statement  "		PerformanceCounterCategory.Create (_stpCategoryName' _stpCategoryHelp' PerformanceCounterCategoryType.MultiInstance' counters); " is 127.
Long Statement,Amib.Threading.Internal,STPInstancePerformanceCounters,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\STPPerformanceCounter.cs,SampleWorkItemsProcessTime,The length of the statement  "	GetCounter (STPPerformanceCounterType.AvgWorkItemProcessTime).IncrementBy ((long)workItemProcessTime.TotalMilliseconds); " is 120.
Long Statement,Amib.Threading.Internal,WorkItem,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItem.cs,StartingWorkItem,The length of the statement  "			if ((_workItemInfo.PostExecuteWorkItemCallback != null) && ((_workItemInfo.CallToPostExecute & CallToPostExecute.WhenWorkItemCanceled) == CallToPostExecute.WhenWorkItemCanceled)) { " is 180.
Long Statement,Amib.Threading.Internal,WorkItemsGroup,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemsGroup.cs,QueueWorkItem,The length of the statement  "	WorkItem workItem = WorkItemFactory.CreateWorkItem (this' _workItemsGroupStartInfo' callback' state' postExecuteWorkItemCallback); " is 130.
Long Statement,Amib.Threading.Internal,WorkItemsGroup,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemsGroup.cs,QueueWorkItem,The length of the statement  "	WorkItem workItem = WorkItemFactory.CreateWorkItem (this' _workItemsGroupStartInfo' callback' state' postExecuteWorkItemCallback' workItemPriority); " is 148.
Long Statement,Amib.Threading.Internal,WorkItemsGroup,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemsGroup.cs,QueueWorkItem,The length of the statement  "	WorkItem workItem = WorkItemFactory.CreateWorkItem (this' _workItemsGroupStartInfo' callback' state' postExecuteWorkItemCallback' callToPostExecute); " is 149.
Long Statement,Amib.Threading.Internal,WorkItemsGroup,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemsGroup.cs,QueueWorkItem,The length of the statement  "	WorkItem workItem = WorkItemFactory.CreateWorkItem (this' _workItemsGroupStartInfo' callback' state' postExecuteWorkItemCallback' callToPostExecute' workItemPriority); " is 167.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The length of the statement  "		/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n"; " is 448.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The length of the statement  "		query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n"; " is 271.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The length of the statement  "		query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n"; " is 221.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The length of the statement  "		query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n"; " is 168.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The length of the statement  "		query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n"; " is 241.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The length of the statement  "		query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n"; " is 448.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The length of the statement  "		query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n"; " is 262.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The length of the statement  "		query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n"; " is 535.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The length of the statement  "		query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_FIRST' \r\n" + "C_MIDDLE' \r\n" + "C_LAST \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n"; " is 255.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The length of the statement  "		query = "SELECT \r\n" + "O_ID' \r\n" + "O_CARRIER_ID' \r\n" + "O_ENTRY_D \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_W_ID  = '" + vwId + "' \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_C_ID  = '" + vcId + "' \r\n" + "ORDER BY O_W_ID DESC' \r\n" + "O_D_ID DESC' \r\n" + "O_C_ID DESC' \r\n" + "O_ID DESC  \r\n"; " is 315.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The length of the statement  "		query = "SELECT  \r\n" + "OL_I_ID'  \r\n" + "OL_SUPPLY_W_ID'  \r\n" + "OL_QUANTITY'  \r\n" + "OL_AMOUNT'  \r\n" + "isnull(OL_DELIVERY_D''01-01-1972 00:00:00.000') OL_DELIVERY_D  \r\n" + "FROM  ORDER_LINE   \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  = '" + voId + "' \r\n"; " is 332.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The length of the statement  "                */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n"; " is 527.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The length of the statement  "			query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n"; " is 491.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The length of the statement  "			query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n"; " is 278.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The length of the statement  "		query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n"; " is 250.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The length of the statement  "		query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n"; " is 197.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The length of the statement  "		query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n"; " is 212.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The length of the statement  "		query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n"; " is 160.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The length of the statement  "		query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n"; " is 489.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The length of the statement  "		query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n"; " is 169.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The length of the statement  "				query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n"; " is 161.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The length of the statement  "				query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n"; " is 225.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The length of the statement  "				query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n"; " is 262.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The length of the statement  "				query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n"; " is 210.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The length of the statement  "						query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n"; " is 237.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The length of the statement  "				query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n"; " is 227.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The length of the statement  "						query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n"; " is 358.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The length of the statement  "		query = "SELECT D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n"; " is 136.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The length of the statement  "		query = "SELECT COUNT(DISTINCT S_I_ID) N_ITEMS \r\n" + "FROM  ORDER_LINE' \r\n" + "STOCK  \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  <  " + vdNextOId + " \r\n" + "AND	OL_O_ID  >=  " + (vdNextOId - 20) + " \r\n" + "AND	S_W_ID  =  '" + vwId + "' \r\n" + "AND	S_I_ID  =  OL_I_ID \r\n"; " is 342.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The length of the statement  "				else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) { " is 122.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The length of the statement  "				else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) { " is 149.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The length of the statement  "				else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) { " is 122.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The length of the statement  "				else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) { " is 149.
Long Statement,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,RawWrites,The length of the statement  "	string query = "insert into WriteTest (ID'RNDCHAR1'RNDCHAR2'RNDCHAR3'RNDCHAR4'RNDCHAR5'RNDCHAR6'RNDCHAR7'RNDCHAR8)" + " VALUES(" + "'" + Random.Next (1' 1000000000) + "''" + "'" + RandomString (1' 200) + "''" + "'" + RandomString (1' 200) + "''" + "'" + RandomString (1' 200) + "''" + "'" + RandomString (1' 200) + "''" + "'" + RandomString (1' 200) + "''" + "'" + RandomString (1' 200) + "''" + "'" + RandomString (1' 200) + "''" + "'" + RandomString (1' 200) + "'" + ")"; " is 473.
Empty Catch Block,Amib.Threading,SmartThreadPool,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\SmartThreadPool.cs,ExecuteWorkItem,The method has an empty catch block.
Empty Catch Block,Amib.Threading.Internal,WorkItem,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItem.cs,FireWorkItemCompleted,The method has an empty catch block.
Empty Catch Block,Amib.Threading.Internal,WorkItemsGroup,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItemsGroup.cs,FireOnIdleImpl,The method has an empty catch block.
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: return (int)((REAL_UNIT_INT * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: return (int)((REAL_UNIT_INT * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: if (range < 0) {  	// If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).  	// We also must use all 32 bits of precision' instead of the normal 31' which again is slower.    	return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: if (range < 0) {  	// If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).  	// We also must use all 32 bits of precision' instead of the normal 31' which again is slower.    	return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextDouble,The following statement contains a magic number: return REAL_UNIT_INT * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextDouble,The following statement contains a magic number: return REAL_UNIT_INT * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: t = x ^ (x << 11);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 8);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 16);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 24);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: t = x ^ (x << 11);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 8);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 16);  	if (i < buffer.Length) {  		buffer [i] = (byte)(w >> 24);  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 16);  	if (i < buffer.Length) {  		buffer [i] = (byte)(w >> 24);  	}  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 16);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i] = (byte)(w >> 24);  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i] = (byte)(w >> 24);  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextUInt,The following statement contains a magic number: return _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextUInt,The following statement contains a magic number: return _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBool,The following statement contains a magic number: if (_bitMask == 0) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBool,The following statement contains a magic number: if (_bitMask == 0) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBool,The following statement contains a magic number: if (_bitMask == 0) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBool,The following statement contains a magic number: _bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SharpNeat.Utility,FastRandom,C:\repos\SQLServerIO_TPCCBench\tpccbench\FastRandom.cs,NextBool,The following statement contains a magic number: _bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (numargs > 0) {  	foreach (string cmd in args) {  		//select tpc benchmark type defaults to c   		//not implemented yet  		if (cmd.ToLower ().Contains ("\\b:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.BenchType = arg;  		}  		//number of warehouses  		else if (cmd.ToLower ().Contains ("\\wh:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.WH = Convert.ToInt32 (arg);  		}  		//number of clients  		else if (cmd.ToLower ().Contains ("\\c:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumClients = Convert.ToInt32 (arg);  		}  		//Client sleep cycle maximum  		else if (cmd.ToLower ().Contains ("\\cs:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  		}  		//percent new orders  		else if (cmd.ToLower ().Contains ("\\pno:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PNO = Convert.ToInt32 (arg);  		}  		//percent new order status  		else if (cmd.ToLower ().Contains ("\\pos:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.POS = Convert.ToInt32 (arg);  		}  		//percent pament  		else if (cmd.ToLower ().Contains ("\\pp:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PP = Convert.ToInt32 (arg);  		}  		//percent dilivery  		else if (cmd.ToLower ().Contains ("\\pd:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PD = Convert.ToInt32 (arg);  		}  		//percent stock lookup  		else if (cmd.ToLower ().Contains ("\\psl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.PSL = Convert.ToInt32 (arg);  		}  		//server name  		else if (cmd.ToLower ().Contains ("\\s:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.ServerName = arg;  		}  		//database name  		else if (cmd.ToLower ().Contains ("\\d:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.DatabaseName = arg;  			//Globals.DatabaseName = Globals.DatabaseName.Trim;  		}  		//user name  		else if (cmd.ToLower ().Contains ("\\u:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.UserName = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//fixed number of loops  		else if (cmd.ToLower ().Contains ("\\nl:")) {  			arg = cmd.Remove (0' 4);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.NumLoops = Convert.ToInt32 (arg);  		}  		//password  		else if (cmd.ToLower ().Contains ("\\p:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.Password = arg;  			//Globals.Password = Globals.Password.Trim;  		}  		//logging level debug'info'query'error'warn  		else if (cmd.ToLower ().Contains ("\\l:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StrLoggingLevel = arg;  			//Globals.UserName = Globals.UserName.Trim;  		}  		//trusted  		else if (cmd.ToLower ().Contains ("\\t")) {  			Globals.Trusted = "true";  		}  		//use stored procedures  		else if (cmd.ToLower ().Contains ("\\sp")) {  			Globals.StoredProc = 1;  		}  		//full out writes to a table  		else if (cmd.ToLower ().Contains ("\\rw")) {  			Globals.RawWrite = 1;  		}  		//write to Heartbeat table  		else if (cmd.ToLower ().Contains ("\\hb")) {  			Globals.Heartbeat = 1;  		}  		//Stagger Client load  		else if (cmd.ToLower ().Contains ("\\stl:")) {  			arg = cmd.Remove (0' 5);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  		}  		//show help  		else if (cmd.ToLower ().Contains ("\\?")) {  			Showhelp ();  			Globals.Err = 2;  		}  		//log to console  		//for debugging only  		else if (cmd.ToLower ().Contains ("\\lc")) {  			Globals.LogToConsole = 1;  		}  		//run time  		else if (cmd.ToLower ().Contains ("\\m:")) {  			arg = cmd.Remove (0' 3);  			arg = arg.Trim ();  			if (arg.Length == 0) {  				Globals.Err = 1;  				Console.WriteLine (cmd + " no valid argument after identifier");  				Showhelp ();  				break;  			}  			Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  			//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  		}  		else {  			Console.WriteLine ("invalid arguements specified");  			Console.WriteLine (cmd + " is incorrect");  			Showhelp ();  			Globals.Err = 1;  			break;  		}  	}  }  else {  	Console.WriteLine ("No arguements specified.");  	Showhelp ();  	Globals.Err = 1;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: foreach (string cmd in args) {  	//select tpc benchmark type defaults to c   	//not implemented yet  	if (cmd.ToLower ().Contains ("\\b:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.BenchType = arg;  	}  	//number of warehouses  	else if (cmd.ToLower ().Contains ("\\wh:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.WH = Convert.ToInt32 (arg);  	}  	//number of clients  	else if (cmd.ToLower ().Contains ("\\c:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumClients = Convert.ToInt32 (arg);  	}  	//Client sleep cycle maximum  	else if (cmd.ToLower ().Contains ("\\cs:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  	}  	//percent new orders  	else if (cmd.ToLower ().Contains ("\\pno:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PNO = Convert.ToInt32 (arg);  	}  	//percent new order status  	else if (cmd.ToLower ().Contains ("\\pos:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.POS = Convert.ToInt32 (arg);  	}  	//percent pament  	else if (cmd.ToLower ().Contains ("\\pp:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PP = Convert.ToInt32 (arg);  	}  	//percent dilivery  	else if (cmd.ToLower ().Contains ("\\pd:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PD = Convert.ToInt32 (arg);  	}  	//percent stock lookup  	else if (cmd.ToLower ().Contains ("\\psl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.PSL = Convert.ToInt32 (arg);  	}  	//server name  	else if (cmd.ToLower ().Contains ("\\s:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.ServerName = arg;  	}  	//database name  	else if (cmd.ToLower ().Contains ("\\d:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.DatabaseName = arg;  		//Globals.DatabaseName = Globals.DatabaseName.Trim;  	}  	//user name  	else if (cmd.ToLower ().Contains ("\\u:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.UserName = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//fixed number of loops  	else if (cmd.ToLower ().Contains ("\\nl:")) {  		arg = cmd.Remove (0' 4);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.NumLoops = Convert.ToInt32 (arg);  	}  	//password  	else if (cmd.ToLower ().Contains ("\\p:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.Password = arg;  		//Globals.Password = Globals.Password.Trim;  	}  	//logging level debug'info'query'error'warn  	else if (cmd.ToLower ().Contains ("\\l:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StrLoggingLevel = arg;  		//Globals.UserName = Globals.UserName.Trim;  	}  	//trusted  	else if (cmd.ToLower ().Contains ("\\t")) {  		Globals.Trusted = "true";  	}  	//use stored procedures  	else if (cmd.ToLower ().Contains ("\\sp")) {  		Globals.StoredProc = 1;  	}  	//full out writes to a table  	else if (cmd.ToLower ().Contains ("\\rw")) {  		Globals.RawWrite = 1;  	}  	//write to Heartbeat table  	else if (cmd.ToLower ().Contains ("\\hb")) {  		Globals.Heartbeat = 1;  	}  	//Stagger Client load  	else if (cmd.ToLower ().Contains ("\\stl:")) {  		arg = cmd.Remove (0' 5);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  	}  	//show help  	else if (cmd.ToLower ().Contains ("\\?")) {  		Showhelp ();  		Globals.Err = 2;  	}  	//log to console  	//for debugging only  	else if (cmd.ToLower ().Contains ("\\lc")) {  		Globals.LogToConsole = 1;  	}  	//run time  	else if (cmd.ToLower ().Contains ("\\m:")) {  		arg = cmd.Remove (0' 3);  		arg = arg.Trim ();  		if (arg.Length == 0) {  			Globals.Err = 1;  			Console.WriteLine (cmd + " no valid argument after identifier");  			Showhelp ();  			break;  		}  		Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  		//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  	}  	else {  		Console.WriteLine ("invalid arguements specified");  		Console.WriteLine (cmd + " is incorrect");  		Showhelp ();  		Globals.Err = 1;  		break;  	}  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\b:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.BenchType = arg;  }  //number of warehouses  else if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 3);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\wh:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.WH = Convert.ToInt32 (arg);  }  //number of clients  else if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 4);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\c:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumClients = Convert.ToInt32 (arg);  }  //Client sleep cycle maximum  else if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 3);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\cs:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  }  //percent new orders  else if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 4);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: Globals.ClientSleepSec = Convert.ToInt32 (arg) * 1000;  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pno:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PNO = Convert.ToInt32 (arg);  }  //percent new order status  else if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 5);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pos:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.POS = Convert.ToInt32 (arg);  }  //percent pament  else if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 5);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pp:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PP = Convert.ToInt32 (arg);  }  //percent dilivery  else if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 4);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\pd:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PD = Convert.ToInt32 (arg);  }  //percent stock lookup  else if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 4);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\psl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.PSL = Convert.ToInt32 (arg);  }  //server name  else if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 5);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\s:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.ServerName = arg;  }  //database name  else if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 3);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\d:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.DatabaseName = arg;  	//Globals.DatabaseName = Globals.DatabaseName.Trim;  }  //user name  else if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 3);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\u:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.UserName = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //fixed number of loops  else if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 3);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\nl:")) {  	arg = cmd.Remove (0' 4);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.NumLoops = Convert.ToInt32 (arg);  }  //password  else if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 4);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\p:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.Password = arg;  	//Globals.Password = Globals.Password.Trim;  }  //logging level debug'info'query'error'warn  else if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 3);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\l:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StrLoggingLevel = arg;  	//Globals.UserName = Globals.UserName.Trim;  }  //trusted  else if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 3);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\t")) {  	Globals.Trusted = "true";  }  //use stored procedures  else if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\sp")) {  	Globals.StoredProc = 1;  }  //full out writes to a table  else if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\rw")) {  	Globals.RawWrite = 1;  }  //write to Heartbeat table  else if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\hb")) {  	Globals.Heartbeat = 1;  }  //Stagger Client load  else if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\stl:")) {  	arg = cmd.Remove (0' 5);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  }  //show help  else if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 5);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: Globals.StaggeredLoad = Convert.ToInt32 (arg) * 1000;  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\?")) {  	Showhelp ();  	Globals.Err = 2;  }  //log to console  //for debugging only  else if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: Globals.Err = 2;  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\lc")) {  	Globals.LogToConsole = 1;  }  //run time  else if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (cmd.ToLower ().Contains ("\\m:")) {  	arg = cmd.Remove (0' 3);  	arg = arg.Trim ();  	if (arg.Length == 0) {  		Globals.Err = 1;  		Console.WriteLine (cmd + " no valid argument after identifier");  		Showhelp ();  		break;  	}  	Globals.MaxRunTimeMin = Convert.ToInt32 (arg);  	//Globals.MaxRunTimeMin = Convert.ToInt32(cmd);  }  else {  	Console.WriteLine ("invalid arguements specified");  	Console.WriteLine (cmd + " is incorrect");  	Showhelp ();  	Globals.Err = 1;  	break;  }  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: arg = cmd.Remove (0' 3);  
Magic Number,CLParser,CLP,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\CLParser.cs,Cmdline,The following statement contains a magic number: if (!((Globals.PD + Globals.PNO + Globals.POS + Globals.PP + Globals.PSL) == 100)) {  	Console.WriteLine (Globals.PD + Globals.PNO + Globals.POS + Globals.PP + Globals.PSL);  	Console.WriteLine ("You must specifiy all work load variables and they must total 100. Please correct and run again");  	Globals.Err = 1;  }  
Magic Number,CommonClasses,Globals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Globals,The following statement contains a magic number: WH = 25;  
Magic Number,CommonClasses,Globals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Globals,The following statement contains a magic number: PSL = 4;  
Magic Number,CommonClasses,Globals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Globals,The following statement contains a magic number: PP = 4;  
Magic Number,CommonClasses,Globals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Globals,The following statement contains a magic number: PD = 4;  
Magic Number,CommonClasses,Globals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Globals,The following statement contains a magic number: POS = 43;  
Magic Number,CommonClasses,Globals,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Globals,The following statement contains a magic number: PNO = 45;  
Magic Number,CommonClasses,PLOG,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Write,The following statement contains a magic number: switch (lvl) {  case 1:  	Listlock.AcquireWriterLock (-1);  	WriteErrBuffer.Add ("-----------------------");  	WriteErrBuffer.Add ("DEBUG");  	WriteErrBuffer.Add (DateTime.Now.ToString ());  	try {  		WriteErrBuffer.Add (frame.GetMethod ().Name);  	}  	catch (Exception e) {  		Console.WriteLine (e);  	}  	WriteErrBuffer.Add (msg);  	Listlock.ReleaseWriterLock ();  	break;  case 2:  	Listlock.AcquireWriterLock (-1);  	WriteErrBuffer.Add ("-----------------------");  	WriteErrBuffer.Add ("DEBUG");  	WriteErrBuffer.Add (DateTime.Now.ToString ());  	try {  		WriteErrBuffer.Add (frame.GetMethod ().Name);  	}  	catch (Exception e) {  		Console.WriteLine (e);  	}  	Listlock.ReleaseWriterLock ();  	break;  case 3:  	Listlock.AcquireWriterLock (-1);  	WriteErrBuffer.Add ("-----------------------");  	WriteErrBuffer.Add ("DEBUG");  	WriteErrBuffer.Add (DateTime.Now.ToString ());  	try {  		WriteErrBuffer.Add (frame.GetMethod ().Name);  	}  	catch (Exception e) {  		Console.WriteLine (e);  	}  	Listlock.ReleaseWriterLock ();  	break;  default:  	Listlock.AcquireWriterLock (-1);  	WriteErrBuffer.Add ("-----------------------");  	WriteErrBuffer.Add ("DEBUG");  	WriteErrBuffer.Add (DateTime.Now.ToString ());  	try {  		WriteErrBuffer.Add (frame.GetMethod ().Name);  	}  	catch (Exception e) {  		Console.WriteLine (e);  	}  	WriteErrBuffer.Add (msg);  	Listlock.ReleaseWriterLock ();  	break;  }  
Magic Number,CommonClasses,PLOG,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,Write,The following statement contains a magic number: switch (lvl) {  case 1:  	Listlock.AcquireWriterLock (-1);  	WriteErrBuffer.Add ("-----------------------");  	WriteErrBuffer.Add ("DEBUG");  	WriteErrBuffer.Add (DateTime.Now.ToString ());  	try {  		WriteErrBuffer.Add (frame.GetMethod ().Name);  	}  	catch (Exception e) {  		Console.WriteLine (e);  	}  	WriteErrBuffer.Add (msg);  	Listlock.ReleaseWriterLock ();  	break;  case 2:  	Listlock.AcquireWriterLock (-1);  	WriteErrBuffer.Add ("-----------------------");  	WriteErrBuffer.Add ("DEBUG");  	WriteErrBuffer.Add (DateTime.Now.ToString ());  	try {  		WriteErrBuffer.Add (frame.GetMethod ().Name);  	}  	catch (Exception e) {  		Console.WriteLine (e);  	}  	Listlock.ReleaseWriterLock ();  	break;  case 3:  	Listlock.AcquireWriterLock (-1);  	WriteErrBuffer.Add ("-----------------------");  	WriteErrBuffer.Add ("DEBUG");  	WriteErrBuffer.Add (DateTime.Now.ToString ());  	try {  		WriteErrBuffer.Add (frame.GetMethod ().Name);  	}  	catch (Exception e) {  		Console.WriteLine (e);  	}  	Listlock.ReleaseWriterLock ();  	break;  default:  	Listlock.AcquireWriterLock (-1);  	WriteErrBuffer.Add ("-----------------------");  	WriteErrBuffer.Add ("DEBUG");  	WriteErrBuffer.Add (DateTime.Now.ToString ());  	try {  		WriteErrBuffer.Add (frame.GetMethod ().Name);  	}  	catch (Exception e) {  		Console.WriteLine (e);  	}  	WriteErrBuffer.Add (msg);  	Listlock.ReleaseWriterLock ();  	break;  }  
Magic Number,CommonClasses,PLOG,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,WriteLog,The following statement contains a magic number: while (true) {  	WriteErrBufferToFile ();  	WriteBufferToFile ();  	if (Globals.RunFlag == 1) {  		break;  	}  	Thread.Sleep (500);  }  
Magic Number,CommonClasses,PLOG,C:\repos\SQLServerIO_TPCCBench\tpccbench\General\GeneralClasses.cs,WriteLog,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 2) {  	Console.WriteLine ("Program Exit.");  }  else {  	//LoadGlobal.LoadGeneralGlobals();  	LoadGlobals.LoadMasterConnectionString ();  	LoadGlobals.LoadLogFilePath ();  	var trd = new Thread (PLOG.WriteLog);  	//trd.IsBackground = true;  	trd.Start ();  	PLOG.Write ("Running Benchmark on server: " + Globals.ServerName);  	PLOG.Write ("Running Benchmark on database: " + Globals.DatabaseName);  	const string query = "select @@version";  	//Console.WriteLine(query);  	try {  		//Globals.SQLVersion =   		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch {  		Console.WriteLine ("Unable to connect to database' correct and retry");  		PLOG.Write ("Unable to connect to database' correct and retry"' 1);  		Thread.Sleep (1000);  		Globals.Err = 1;  	}  	if (Globals.Err == 1) {  		Console.WriteLine ("Error detected' execution stopped.");  	}  	else {  		if (Globals.Heartbeat == 1) {  			PLOG.Write ("Heartbeat enabled.");  			var heartbeat = new Thread (TpcUtils.Heartbeat) {  				IsBackground = true  			};  			heartbeat.Start ();  		}  		var stpStartInfo = new STPStartInfo ();  		if (!(Globals.StaggeredLoad == 0)) {  			stpStartInfo.StartSuspended = false;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		else {  			stpStartInfo.StartSuspended = true;  			stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  			stpStartInfo.IdleTimeout = 10 * 1000;  		}  		var smartThreadPool = new SmartThreadPool (stpStartInfo);  		var s = new StopWatch ();  		int i = 0;  		var clients = new Tpcc[Globals.NumClients];  		PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  		s.Start ();  		if (!(Globals.StaggeredLoad == 0)) {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				Console.WriteLine ("Client " + i + " Loaded.");  				Thread.Sleep (Globals.StaggeredLoad);  				i++;  			}  		}  		else {  			while (i < Globals.NumClients) {  				clients [i] = new Tpcc {  					Clientid = i + 1  				};  				smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  				i++;  			}  		}  		PLOG.Write ("Started On: " + DateTime.Now);  		if (Globals.NumLoops == 0) {  			PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  		}  		else {  			PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  		}  		PLOG.Write ("number of clients to load: " + i);  		PLOG.Write ("Work load Mix:");  		if (Globals.RawWrite == 0) {  			PLOG.Write ("Percent New Orders: " + Globals.PNO);  			PLOG.Write ("Percent Order Status: " + (Globals.POS));  			PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  			PLOG.Write ("Percent Payment: " + (Globals.PP));  			PLOG.Write ("Percent Delivery: " + (Globals.PD));  			PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  		}  		else {  			PLOG.Write ("Raw Inserts: 100");  		}  		PLOG.Read ();  		//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  		if (Globals.StaggeredLoad == 0) {  			smartThreadPool.Start ();  		}  		// Wait for the completion of all work items  		smartThreadPool.WaitForIdle ();  		s.Stop ();  		smartThreadPool.Shutdown ();  		if (Globals.RawWrite == 1) {  			PLOG.Write ("Total number of operations: " + Globals.TotalCount);  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  		}  		else {  			PLOG.Write ("Total number of new orders: " + Globals.Countno);  			PLOG.Write ("Total number of order status: " + Globals.Countos);  			PLOG.Write ("Total number of payments: " + Globals.Countp);  			PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  			PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  			PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  			PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  			PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  			PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  		}  		PLOG.Write ("end TPC benchmark :" + DateTime.Now);  		PLOG.Read ();  		Globals.RunFlag = 1;  	}  	trd.Join (10000);  	//Console.ReadKey();  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: try {  	//Globals.SQLVersion =   	ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  }  catch {  	Console.WriteLine ("Unable to connect to database' correct and retry");  	PLOG.Write ("Unable to connect to database' correct and retry"' 1);  	Thread.Sleep (1000);  	Globals.Err = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else {  	if (Globals.Heartbeat == 1) {  		PLOG.Write ("Heartbeat enabled.");  		var heartbeat = new Thread (TpcUtils.Heartbeat) {  			IsBackground = true  		};  		heartbeat.Start ();  	}  	var stpStartInfo = new STPStartInfo ();  	if (!(Globals.StaggeredLoad == 0)) {  		stpStartInfo.StartSuspended = false;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	else {  		stpStartInfo.StartSuspended = true;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	var smartThreadPool = new SmartThreadPool (stpStartInfo);  	var s = new StopWatch ();  	int i = 0;  	var clients = new Tpcc[Globals.NumClients];  	PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  	s.Start ();  	if (!(Globals.StaggeredLoad == 0)) {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			Console.WriteLine ("Client " + i + " Loaded.");  			Thread.Sleep (Globals.StaggeredLoad);  			i++;  		}  	}  	else {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			i++;  		}  	}  	PLOG.Write ("Started On: " + DateTime.Now);  	if (Globals.NumLoops == 0) {  		PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  	}  	else {  		PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  	}  	PLOG.Write ("number of clients to load: " + i);  	PLOG.Write ("Work load Mix:");  	if (Globals.RawWrite == 0) {  		PLOG.Write ("Percent New Orders: " + Globals.PNO);  		PLOG.Write ("Percent Order Status: " + (Globals.POS));  		PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  		PLOG.Write ("Percent Payment: " + (Globals.PP));  		PLOG.Write ("Percent Delivery: " + (Globals.PD));  		PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  	}  	else {  		PLOG.Write ("Raw Inserts: 100");  	}  	PLOG.Read ();  	//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  	if (Globals.StaggeredLoad == 0) {  		smartThreadPool.Start ();  	}  	// Wait for the completion of all work items  	smartThreadPool.WaitForIdle ();  	s.Stop ();  	smartThreadPool.Shutdown ();  	if (Globals.RawWrite == 1) {  		PLOG.Write ("Total number of operations: " + Globals.TotalCount);  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  	}  	else {  		PLOG.Write ("Total number of new orders: " + Globals.Countno);  		PLOG.Write ("Total number of order status: " + Globals.Countos);  		PLOG.Write ("Total number of payments: " + Globals.Countp);  		PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  		PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  		PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  	}  	PLOG.Write ("end TPC benchmark :" + DateTime.Now);  	PLOG.Read ();  	Globals.RunFlag = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else {  	if (Globals.Heartbeat == 1) {  		PLOG.Write ("Heartbeat enabled.");  		var heartbeat = new Thread (TpcUtils.Heartbeat) {  			IsBackground = true  		};  		heartbeat.Start ();  	}  	var stpStartInfo = new STPStartInfo ();  	if (!(Globals.StaggeredLoad == 0)) {  		stpStartInfo.StartSuspended = false;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	else {  		stpStartInfo.StartSuspended = true;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	var smartThreadPool = new SmartThreadPool (stpStartInfo);  	var s = new StopWatch ();  	int i = 0;  	var clients = new Tpcc[Globals.NumClients];  	PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  	s.Start ();  	if (!(Globals.StaggeredLoad == 0)) {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			Console.WriteLine ("Client " + i + " Loaded.");  			Thread.Sleep (Globals.StaggeredLoad);  			i++;  		}  	}  	else {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			i++;  		}  	}  	PLOG.Write ("Started On: " + DateTime.Now);  	if (Globals.NumLoops == 0) {  		PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  	}  	else {  		PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  	}  	PLOG.Write ("number of clients to load: " + i);  	PLOG.Write ("Work load Mix:");  	if (Globals.RawWrite == 0) {  		PLOG.Write ("Percent New Orders: " + Globals.PNO);  		PLOG.Write ("Percent Order Status: " + (Globals.POS));  		PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  		PLOG.Write ("Percent Payment: " + (Globals.PP));  		PLOG.Write ("Percent Delivery: " + (Globals.PD));  		PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  	}  	else {  		PLOG.Write ("Raw Inserts: 100");  	}  	PLOG.Read ();  	//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  	if (Globals.StaggeredLoad == 0) {  		smartThreadPool.Start ();  	}  	// Wait for the completion of all work items  	smartThreadPool.WaitForIdle ();  	s.Stop ();  	smartThreadPool.Shutdown ();  	if (Globals.RawWrite == 1) {  		PLOG.Write ("Total number of operations: " + Globals.TotalCount);  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  	}  	else {  		PLOG.Write ("Total number of new orders: " + Globals.Countno);  		PLOG.Write ("Total number of order status: " + Globals.Countos);  		PLOG.Write ("Total number of payments: " + Globals.Countp);  		PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  		PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  		PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  	}  	PLOG.Write ("end TPC benchmark :" + DateTime.Now);  	PLOG.Read ();  	Globals.RunFlag = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else {  	if (Globals.Heartbeat == 1) {  		PLOG.Write ("Heartbeat enabled.");  		var heartbeat = new Thread (TpcUtils.Heartbeat) {  			IsBackground = true  		};  		heartbeat.Start ();  	}  	var stpStartInfo = new STPStartInfo ();  	if (!(Globals.StaggeredLoad == 0)) {  		stpStartInfo.StartSuspended = false;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	else {  		stpStartInfo.StartSuspended = true;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	var smartThreadPool = new SmartThreadPool (stpStartInfo);  	var s = new StopWatch ();  	int i = 0;  	var clients = new Tpcc[Globals.NumClients];  	PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  	s.Start ();  	if (!(Globals.StaggeredLoad == 0)) {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			Console.WriteLine ("Client " + i + " Loaded.");  			Thread.Sleep (Globals.StaggeredLoad);  			i++;  		}  	}  	else {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			i++;  		}  	}  	PLOG.Write ("Started On: " + DateTime.Now);  	if (Globals.NumLoops == 0) {  		PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  	}  	else {  		PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  	}  	PLOG.Write ("number of clients to load: " + i);  	PLOG.Write ("Work load Mix:");  	if (Globals.RawWrite == 0) {  		PLOG.Write ("Percent New Orders: " + Globals.PNO);  		PLOG.Write ("Percent Order Status: " + (Globals.POS));  		PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  		PLOG.Write ("Percent Payment: " + (Globals.PP));  		PLOG.Write ("Percent Delivery: " + (Globals.PD));  		PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  	}  	else {  		PLOG.Write ("Raw Inserts: 100");  	}  	PLOG.Read ();  	//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  	if (Globals.StaggeredLoad == 0) {  		smartThreadPool.Start ();  	}  	// Wait for the completion of all work items  	smartThreadPool.WaitForIdle ();  	s.Stop ();  	smartThreadPool.Shutdown ();  	if (Globals.RawWrite == 1) {  		PLOG.Write ("Total number of operations: " + Globals.TotalCount);  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  	}  	else {  		PLOG.Write ("Total number of new orders: " + Globals.Countno);  		PLOG.Write ("Total number of order status: " + Globals.Countos);  		PLOG.Write ("Total number of payments: " + Globals.Countp);  		PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  		PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  		PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  	}  	PLOG.Write ("end TPC benchmark :" + DateTime.Now);  	PLOG.Read ();  	Globals.RunFlag = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else {  	if (Globals.Heartbeat == 1) {  		PLOG.Write ("Heartbeat enabled.");  		var heartbeat = new Thread (TpcUtils.Heartbeat) {  			IsBackground = true  		};  		heartbeat.Start ();  	}  	var stpStartInfo = new STPStartInfo ();  	if (!(Globals.StaggeredLoad == 0)) {  		stpStartInfo.StartSuspended = false;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	else {  		stpStartInfo.StartSuspended = true;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	var smartThreadPool = new SmartThreadPool (stpStartInfo);  	var s = new StopWatch ();  	int i = 0;  	var clients = new Tpcc[Globals.NumClients];  	PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  	s.Start ();  	if (!(Globals.StaggeredLoad == 0)) {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			Console.WriteLine ("Client " + i + " Loaded.");  			Thread.Sleep (Globals.StaggeredLoad);  			i++;  		}  	}  	else {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			i++;  		}  	}  	PLOG.Write ("Started On: " + DateTime.Now);  	if (Globals.NumLoops == 0) {  		PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  	}  	else {  		PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  	}  	PLOG.Write ("number of clients to load: " + i);  	PLOG.Write ("Work load Mix:");  	if (Globals.RawWrite == 0) {  		PLOG.Write ("Percent New Orders: " + Globals.PNO);  		PLOG.Write ("Percent Order Status: " + (Globals.POS));  		PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  		PLOG.Write ("Percent Payment: " + (Globals.PP));  		PLOG.Write ("Percent Delivery: " + (Globals.PD));  		PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  	}  	else {  		PLOG.Write ("Raw Inserts: 100");  	}  	PLOG.Read ();  	//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  	if (Globals.StaggeredLoad == 0) {  		smartThreadPool.Start ();  	}  	// Wait for the completion of all work items  	smartThreadPool.WaitForIdle ();  	s.Stop ();  	smartThreadPool.Shutdown ();  	if (Globals.RawWrite == 1) {  		PLOG.Write ("Total number of operations: " + Globals.TotalCount);  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  	}  	else {  		PLOG.Write ("Total number of new orders: " + Globals.Countno);  		PLOG.Write ("Total number of order status: " + Globals.Countos);  		PLOG.Write ("Total number of payments: " + Globals.Countp);  		PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  		PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  		PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  	}  	PLOG.Write ("end TPC benchmark :" + DateTime.Now);  	PLOG.Read ();  	Globals.RunFlag = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else {  	if (Globals.Heartbeat == 1) {  		PLOG.Write ("Heartbeat enabled.");  		var heartbeat = new Thread (TpcUtils.Heartbeat) {  			IsBackground = true  		};  		heartbeat.Start ();  	}  	var stpStartInfo = new STPStartInfo ();  	if (!(Globals.StaggeredLoad == 0)) {  		stpStartInfo.StartSuspended = false;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	else {  		stpStartInfo.StartSuspended = true;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	var smartThreadPool = new SmartThreadPool (stpStartInfo);  	var s = new StopWatch ();  	int i = 0;  	var clients = new Tpcc[Globals.NumClients];  	PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  	s.Start ();  	if (!(Globals.StaggeredLoad == 0)) {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			Console.WriteLine ("Client " + i + " Loaded.");  			Thread.Sleep (Globals.StaggeredLoad);  			i++;  		}  	}  	else {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			i++;  		}  	}  	PLOG.Write ("Started On: " + DateTime.Now);  	if (Globals.NumLoops == 0) {  		PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  	}  	else {  		PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  	}  	PLOG.Write ("number of clients to load: " + i);  	PLOG.Write ("Work load Mix:");  	if (Globals.RawWrite == 0) {  		PLOG.Write ("Percent New Orders: " + Globals.PNO);  		PLOG.Write ("Percent Order Status: " + (Globals.POS));  		PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  		PLOG.Write ("Percent Payment: " + (Globals.PP));  		PLOG.Write ("Percent Delivery: " + (Globals.PD));  		PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  	}  	else {  		PLOG.Write ("Raw Inserts: 100");  	}  	PLOG.Read ();  	//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  	if (Globals.StaggeredLoad == 0) {  		smartThreadPool.Start ();  	}  	// Wait for the completion of all work items  	smartThreadPool.WaitForIdle ();  	s.Stop ();  	smartThreadPool.Shutdown ();  	if (Globals.RawWrite == 1) {  		PLOG.Write ("Total number of operations: " + Globals.TotalCount);  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  	}  	else {  		PLOG.Write ("Total number of new orders: " + Globals.Countno);  		PLOG.Write ("Total number of order status: " + Globals.Countos);  		PLOG.Write ("Total number of payments: " + Globals.Countp);  		PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  		PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  		PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  	}  	PLOG.Write ("end TPC benchmark :" + DateTime.Now);  	PLOG.Read ();  	Globals.RunFlag = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else {  	if (Globals.Heartbeat == 1) {  		PLOG.Write ("Heartbeat enabled.");  		var heartbeat = new Thread (TpcUtils.Heartbeat) {  			IsBackground = true  		};  		heartbeat.Start ();  	}  	var stpStartInfo = new STPStartInfo ();  	if (!(Globals.StaggeredLoad == 0)) {  		stpStartInfo.StartSuspended = false;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	else {  		stpStartInfo.StartSuspended = true;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	var smartThreadPool = new SmartThreadPool (stpStartInfo);  	var s = new StopWatch ();  	int i = 0;  	var clients = new Tpcc[Globals.NumClients];  	PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  	s.Start ();  	if (!(Globals.StaggeredLoad == 0)) {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			Console.WriteLine ("Client " + i + " Loaded.");  			Thread.Sleep (Globals.StaggeredLoad);  			i++;  		}  	}  	else {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			i++;  		}  	}  	PLOG.Write ("Started On: " + DateTime.Now);  	if (Globals.NumLoops == 0) {  		PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  	}  	else {  		PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  	}  	PLOG.Write ("number of clients to load: " + i);  	PLOG.Write ("Work load Mix:");  	if (Globals.RawWrite == 0) {  		PLOG.Write ("Percent New Orders: " + Globals.PNO);  		PLOG.Write ("Percent Order Status: " + (Globals.POS));  		PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  		PLOG.Write ("Percent Payment: " + (Globals.PP));  		PLOG.Write ("Percent Delivery: " + (Globals.PD));  		PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  	}  	else {  		PLOG.Write ("Raw Inserts: 100");  	}  	PLOG.Read ();  	//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  	if (Globals.StaggeredLoad == 0) {  		smartThreadPool.Start ();  	}  	// Wait for the completion of all work items  	smartThreadPool.WaitForIdle ();  	s.Stop ();  	smartThreadPool.Shutdown ();  	if (Globals.RawWrite == 1) {  		PLOG.Write ("Total number of operations: " + Globals.TotalCount);  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  	}  	else {  		PLOG.Write ("Total number of new orders: " + Globals.Countno);  		PLOG.Write ("Total number of order status: " + Globals.Countos);  		PLOG.Write ("Total number of payments: " + Globals.Countp);  		PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  		PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  		PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  	}  	PLOG.Write ("end TPC benchmark :" + DateTime.Now);  	PLOG.Read ();  	Globals.RunFlag = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else {  	if (Globals.Heartbeat == 1) {  		PLOG.Write ("Heartbeat enabled.");  		var heartbeat = new Thread (TpcUtils.Heartbeat) {  			IsBackground = true  		};  		heartbeat.Start ();  	}  	var stpStartInfo = new STPStartInfo ();  	if (!(Globals.StaggeredLoad == 0)) {  		stpStartInfo.StartSuspended = false;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	else {  		stpStartInfo.StartSuspended = true;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	var smartThreadPool = new SmartThreadPool (stpStartInfo);  	var s = new StopWatch ();  	int i = 0;  	var clients = new Tpcc[Globals.NumClients];  	PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  	s.Start ();  	if (!(Globals.StaggeredLoad == 0)) {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			Console.WriteLine ("Client " + i + " Loaded.");  			Thread.Sleep (Globals.StaggeredLoad);  			i++;  		}  	}  	else {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			i++;  		}  	}  	PLOG.Write ("Started On: " + DateTime.Now);  	if (Globals.NumLoops == 0) {  		PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  	}  	else {  		PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  	}  	PLOG.Write ("number of clients to load: " + i);  	PLOG.Write ("Work load Mix:");  	if (Globals.RawWrite == 0) {  		PLOG.Write ("Percent New Orders: " + Globals.PNO);  		PLOG.Write ("Percent Order Status: " + (Globals.POS));  		PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  		PLOG.Write ("Percent Payment: " + (Globals.PP));  		PLOG.Write ("Percent Delivery: " + (Globals.PD));  		PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  	}  	else {  		PLOG.Write ("Raw Inserts: 100");  	}  	PLOG.Read ();  	//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  	if (Globals.StaggeredLoad == 0) {  		smartThreadPool.Start ();  	}  	// Wait for the completion of all work items  	smartThreadPool.WaitForIdle ();  	s.Stop ();  	smartThreadPool.Shutdown ();  	if (Globals.RawWrite == 1) {  		PLOG.Write ("Total number of operations: " + Globals.TotalCount);  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  	}  	else {  		PLOG.Write ("Total number of new orders: " + Globals.Countno);  		PLOG.Write ("Total number of order status: " + Globals.Countos);  		PLOG.Write ("Total number of payments: " + Globals.Countp);  		PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  		PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  		PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  	}  	PLOG.Write ("end TPC benchmark :" + DateTime.Now);  	PLOG.Read ();  	Globals.RunFlag = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.Err == 1) {  	Console.WriteLine ("Error detected' execution stopped.");  }  else {  	if (Globals.Heartbeat == 1) {  		PLOG.Write ("Heartbeat enabled.");  		var heartbeat = new Thread (TpcUtils.Heartbeat) {  			IsBackground = true  		};  		heartbeat.Start ();  	}  	var stpStartInfo = new STPStartInfo ();  	if (!(Globals.StaggeredLoad == 0)) {  		stpStartInfo.StartSuspended = false;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	else {  		stpStartInfo.StartSuspended = true;  		stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  		stpStartInfo.IdleTimeout = 10 * 1000;  	}  	var smartThreadPool = new SmartThreadPool (stpStartInfo);  	var s = new StopWatch ();  	int i = 0;  	var clients = new Tpcc[Globals.NumClients];  	PLOG.Write ("Start TPC benchmark :" + DateTime.Now);  	s.Start ();  	if (!(Globals.StaggeredLoad == 0)) {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			Console.WriteLine ("Client " + i + " Loaded.");  			Thread.Sleep (Globals.StaggeredLoad);  			i++;  		}  	}  	else {  		while (i < Globals.NumClients) {  			clients [i] = new Tpcc {  				Clientid = i + 1  			};  			smartThreadPool.QueueWorkItem (new WorkItemCallback (clients [i].Client));  			i++;  		}  	}  	PLOG.Write ("Started On: " + DateTime.Now);  	if (Globals.NumLoops == 0) {  		PLOG.Write ("Target Run Time: " + (Globals.MaxRunTimeMin));  	}  	else {  		PLOG.Write ("Number of Loops: " + (Globals.NumLoops));  	}  	PLOG.Write ("number of clients to load: " + i);  	PLOG.Write ("Work load Mix:");  	if (Globals.RawWrite == 0) {  		PLOG.Write ("Percent New Orders: " + Globals.PNO);  		PLOG.Write ("Percent Order Status: " + (Globals.POS));  		PLOG.Write ("Percent Stock Level: " + (Globals.PSL));  		PLOG.Write ("Percent Payment: " + (Globals.PP));  		PLOG.Write ("Percent Delivery: " + (Globals.PD));  		PLOG.Write ("Total Percent: " + ((Globals.PNO) + (Globals.POS) + (Globals.PSL) + (Globals.PD) + (Globals.PP)));  	}  	else {  		PLOG.Write ("Raw Inserts: 100");  	}  	PLOG.Read ();  	//Console.WriteLine("Threads waiting callback: " + smartThreadPool.WaitingCallbacks);  	if (Globals.StaggeredLoad == 0) {  		smartThreadPool.Start ();  	}  	// Wait for the completion of all work items  	smartThreadPool.WaitForIdle ();  	s.Stop ();  	smartThreadPool.Shutdown ();  	if (Globals.RawWrite == 1) {  		PLOG.Write ("Total number of operations: " + Globals.TotalCount);  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  	}  	else {  		PLOG.Write ("Total number of new orders: " + Globals.Countno);  		PLOG.Write ("Total number of order status: " + Globals.Countos);  		PLOG.Write ("Total number of payments: " + Globals.Countp);  		PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  		PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  		PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  		PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  		PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  		PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  	}  	PLOG.Write ("end TPC benchmark :" + DateTime.Now);  	PLOG.Read ();  	Globals.RunFlag = 1;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (!(Globals.StaggeredLoad == 0)) {  	stpStartInfo.StartSuspended = false;  	stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.IdleTimeout = 10 * 1000;  }  else {  	stpStartInfo.StartSuspended = true;  	stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.IdleTimeout = 10 * 1000;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (!(Globals.StaggeredLoad == 0)) {  	stpStartInfo.StartSuspended = false;  	stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.IdleTimeout = 10 * 1000;  }  else {  	stpStartInfo.StartSuspended = true;  	stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.IdleTimeout = 10 * 1000;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (!(Globals.StaggeredLoad == 0)) {  	stpStartInfo.StartSuspended = false;  	stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.IdleTimeout = 10 * 1000;  }  else {  	stpStartInfo.StartSuspended = true;  	stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.IdleTimeout = 10 * 1000;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (!(Globals.StaggeredLoad == 0)) {  	stpStartInfo.StartSuspended = false;  	stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.IdleTimeout = 10 * 1000;  }  else {  	stpStartInfo.StartSuspended = true;  	stpStartInfo.MaxWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.MinWorkerThreads = Globals.NumClients + 1;  	stpStartInfo.IdleTimeout = 10 * 1000;  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: stpStartInfo.IdleTimeout = 10 * 1000;  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: stpStartInfo.IdleTimeout = 10 * 1000;  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: stpStartInfo.IdleTimeout = 10 * 1000;  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: stpStartInfo.IdleTimeout = 10 * 1000;  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.RawWrite == 1) {  	PLOG.Write ("Total number of operations: " + Globals.TotalCount);  	PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  	PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  	PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  }  else {  	PLOG.Write ("Total number of new orders: " + Globals.Countno);  	PLOG.Write ("Total number of order status: " + Globals.Countos);  	PLOG.Write ("Total number of payments: " + Globals.Countp);  	PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  	PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  	PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  	PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  	PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  	PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.RawWrite == 1) {  	PLOG.Write ("Total number of operations: " + Globals.TotalCount);  	PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  	PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  	PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  }  else {  	PLOG.Write ("Total number of new orders: " + Globals.Countno);  	PLOG.Write ("Total number of order status: " + Globals.Countos);  	PLOG.Write ("Total number of payments: " + Globals.Countp);  	PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  	PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  	PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  	PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  	PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  	PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.RawWrite == 1) {  	PLOG.Write ("Total number of operations: " + Globals.TotalCount);  	PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  	PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  	PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  }  else {  	PLOG.Write ("Total number of new orders: " + Globals.Countno);  	PLOG.Write ("Total number of order status: " + Globals.Countos);  	PLOG.Write ("Total number of payments: " + Globals.Countp);  	PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  	PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  	PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  	PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  	PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  	PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: if (Globals.RawWrite == 1) {  	PLOG.Write ("Total number of operations: " + Globals.TotalCount);  	PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  	PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  	PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  }  else {  	PLOG.Write ("Total number of new orders: " + Globals.Countno);  	PLOG.Write ("Total number of order status: " + Globals.Countos);  	PLOG.Write ("Total number of payments: " + Globals.Countp);  	PLOG.Write ("Total number of new diliveries: " + Globals.Countd);  	PLOG.Write ("Total number of new stock level: " + Globals.Countsl);  	PLOG.Write ("Total number of operations: " + (Globals.Countno + Globals.Countos + Globals.Countp + Globals.Countd + Globals.Countsl));  	PLOG.Write ("elapsed time in seconds: " + s.GetElapsedTimeSecs ());  	PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  	PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  }  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: PLOG.Write ("Total number of operations per minute: " + (Globals.TotalCount / (s.GetElapsedTimeSecs () / 60)));  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: PLOG.Write ("elapsed time in minutes: " + s.GetElapsedTimeSecs () / 60);  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: PLOG.Write ("Total number of new orders per minute: " + (Globals.Countno / (s.GetElapsedTimeSecs () / 60)));  
Magic Number,tpccbench,Program,C:\repos\SQLServerIO_TPCCBench\tpccbench\Program.cs,Main,The following statement contains a magic number: trd.Join (10000);  
Magic Number,Amib.Threading.Internal,WorkItem,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItem.cs,WaitAll,The following statement contains a magic number: if ((null == cancelWaitHandle) && (waitHandles.Length <= 64)) {  	success = WaitHandle.WaitAll (waitHandles' millisecondsTimeout' exitContext);  }  else {  	success = true;  	int millisecondsLeft = millisecondsTimeout;  	DateTime start = DateTime.Now;  	WaitHandle[] whs;  	if (null != cancelWaitHandle) {  		whs = new WaitHandle[] {  			null'  			cancelWaitHandle  		};  	}  	else {  		whs = new WaitHandle[] {  			null  		};  	}  	bool waitInfinitely = (Timeout.Infinite == millisecondsTimeout);  	// Iterate over the wait handles and wait for each one to complete.  	// We cannot use WaitHandle.WaitAll directly' because the cancelWaitHandle  	// won't affect it.  	// Each iteration we update the time left for the timeout.  	for (int i = 0; i < workItemResults.Length; ++i) {  		// WaitAny don't work with negative numbers  		if (!waitInfinitely && (millisecondsLeft < 0)) {  			success = false;  			break;  		}  		whs [0] = waitHandles [i];  		int result = WaitHandle.WaitAny (whs' millisecondsLeft' exitContext);  		if ((result > 0) || (WaitHandle.WaitTimeout == result)) {  			success = false;  			break;  		}  		if (!waitInfinitely) {  			// Update the time left to wait  			TimeSpan ts = DateTime.Now - start;  			millisecondsLeft = millisecondsTimeout - (int)ts.TotalMilliseconds;  		}  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec CREATE_NEW_ORDER NULL'1''OL_NUM_1''" + Globals.WH + "'" + autoNumber + ";";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600'  			CommandType = CommandType.Text  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	const float voAllLocal = 1;  	const string volNumber = "OL_NUM";  	float vsOrderCnt = 1;  	/* Generating Random Values */const float volAmount = 0;  	int maxValue = 500001;  	int minValue = 100001;  	float vstoId = Random.Next (minValue' maxValue);  	int vdisId = Random.Next (minValue' maxValue);  	int vnewordId = Random.Next (minValue' maxValue);  	int voordId = Random.Next (minValue' maxValue);  	int vordlineId = Random.Next (minValue' maxValue);  	float vrwId = Random.Next (1' Globals.WH);  	string vwId = "W_" + Convert.ToString (vrwId);  	maxValue = 11;  	minValue = 1;  	float vrdId = Random.Next (minValue' maxValue);  	string vdId = "D_W" + Convert.ToString (vrwId) + "_";  	vdId = vdId + Convert.ToString (vrdId);  	maxValue = 100001;  	minValue = 1;  	float viId = Random.Next (minValue' maxValue);  	maxValue = 5;  	minValue = 1;  	int volQuantity = Random.Next (minValue' maxValue);  	maxValue = 3000;  	minValue = 1;  	int randomInteger = Random.Next (minValue' maxValue);  	string vcId = "C_W" + vrwId + "_D" + vrdId + "_" + Convert.ToString (randomInteger);  	float vdNextOId = 1;  	const float voOlCnt = 1;  	int vsQuantity = 1;  	SqlDataReader result = null;  	/* Selecting the Sequence Value */query = "SELECT  \r\n " + "S_DIST_01' \r\n " + "S_DIST_02' \r\n " + "S_DIST_03' \r\n " + "S_DIST_04' \r\n " + "S_DIST_05' \r\n " + "S_DIST_06' \r\n " + "S_DIST_07' \r\n " + "S_DIST_08' \r\n " + "S_DIST_09' \r\n " + "S_DIST_10' \r\n " + "S_QUANTITY' \r\n " + "S_DATA' \r\n " + "S_YTD' \r\n " + "S_ORDER_CNT \r\n " + "FROM  stock \r\n " + "WHERE	 S_I_ID  = " + viId + " \r\n " + " AND	S_W_ID  = '" + vwId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["S_DIST_01"].ToString ();  			result ["S_DIST_02"].ToString ();  			result ["S_DIST_03"].ToString ();  			result ["S_DIST_04"].ToString ();  			result ["S_DIST_05"].ToString ();  			result ["S_DIST_06"].ToString ();  			result ["S_DIST_07"].ToString ();  			result ["S_DIST_08"].ToString ();  			result ["S_DIST_09"].ToString ();  			result ["S_DIST_10"].ToString ();  			result ["S_DATA"].ToString ();  			Convert.ToSingle (result ["S_YTD"].ToString ());  			vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  			vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (vsQuantity < volQuantity) {  		vsQuantity = vsQuantity - volQuantity + 91;  	}  	else {  		vsQuantity = vsQuantity - volQuantity;  	}  	//    /* Updating the Sotck Table */  	query = "UPDATE  STOCK \r\n" + "SET	S_QUANTITY = " + Convert.ToString (vsQuantity) + " ' \r\n" + "S_ORDER_CNT = " + Convert.ToString (vsOrderCnt + 1) + "' \r\n" + "SEQ_ID = " + vstoId + " \r\n" + "WHERE  S_I_ID  = " + viId + " \r\n" + "AND	S_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the Custome Table Details */  	query = "SELECT  \r\n" + "C_LAST'  \r\n" + "C_CREDIT'  \r\n" + "C_DISCOUNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["C_LAST"].ToString ();  			result ["C_CREDIT"].ToString ();  			Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the District Table Details */  	query = "SELECT  \r\n" + "   D_TAX' \r\n" + "   D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["D_TAX"].ToString ());  			vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Updating the District Table */  	query = "UPDATE  DISTRICT    \r\n" + "SET	D_NEXT_O_ID = " + Convert.ToString ((vdNextOId + 1)) + "'	 \r\n" + "   SEQ_ID = " + Convert.ToString (vdisId) + "   \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Order Table */  	query = "INSERT INTO  O_ORDER    \r\n" + "(   \r\n" + "O_ID ' \r\n" + "O_D_ID '  \r\n" + "O_W_ID '  \r\n" + "O_C_ID '  \r\n" + "O_ENTRY_D '  \r\n" + "O_OL_CNT '  \r\n" + "O_ALL_LOCAL '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(    \r\n" + " " + autoNumber + "' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + "getdate() ' \r\n" + " " + voOlCnt + "' \r\n" + " " + voAllLocal + "' \r\n" + " " + voordId + ") \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into New Order Table */  	query = "INSERT INTO  NEW_ORDER   \r\n" + "(   \r\n" + "NO_O_ID' \r\n" + "NO_D_ID' \r\n" + "NO_W_ID'  \r\n" + "SEQ_ID ) \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + vnewordId + " ) \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//    -- IMPLICIT_TRANSACTIONS is set to OFF  	//    /* Selecting the details of Warehouse Table */  	query = "SELECT W_TAX \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["W_TAX"]);  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Selecting the details of Item Table */  	query = "SELECT I_PRICE \r\n" + "FROM  ITEM  \r\n" + "WHERE	 I_ID  = '" + viId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = _objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["I_PRICE"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	//    /* Inserting into Orde Line Table */  	query = "    INSERT INTO ORDER_LINE    \r\n" + "( \r\n" + "OL_O_ID ' \r\n" + "OL_D_ID '  \r\n" + "OL_W_ID '  \r\n" + "OL_NUMBER '  \r\n" + "OL_I_ID '  \r\n" + "OL_SUPPLY_W_ID '  \r\n" + "OL_QUANTITY '  \r\n" + "OL_AMOUNT '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " " + autoNumber + " ' \r\n" + " '" + vdId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " '" + volNumber + "' ' \r\n" + " '" + viId + "' ' \r\n" + " '" + vwId + "' ' \r\n" + " " + volQuantity + " ' \r\n" + " " + volAmount + " ' \r\n" + " " + vordlineId + " ) \r\n";  	try {  		_objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		_objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600'  		CommandType = CommandType.Text  	};  	_objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600'  	CommandType = CommandType.Text  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: maxValue = 11;  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: maxValue = 100001;  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: maxValue = 5;  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: maxValue = 3000;  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = _objCommand.ExecuteReader ();  	while (result.Read ()) {  		result ["S_DIST_01"].ToString ();  		result ["S_DIST_02"].ToString ();  		result ["S_DIST_03"].ToString ();  		result ["S_DIST_04"].ToString ();  		result ["S_DIST_05"].ToString ();  		result ["S_DIST_06"].ToString ();  		result ["S_DIST_07"].ToString ();  		result ["S_DIST_08"].ToString ();  		result ["S_DIST_09"].ToString ();  		result ["S_DIST_10"].ToString ();  		result ["S_DATA"].ToString ();  		Convert.ToSingle (result ["S_YTD"].ToString ());  		vsQuantity = Convert.ToInt32 (result ["S_QUANTITY"].ToString ());  		vsOrderCnt = Convert.ToSingle (result ["S_ORDER_CNT"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: if (vsQuantity < volQuantity) {  	vsQuantity = vsQuantity - volQuantity + 91;  }  else {  	vsQuantity = vsQuantity - volQuantity;  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: vsQuantity = vsQuantity - volQuantity + 91;  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	_objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = _objCommand.ExecuteReader ();  	while (result.Read ()) {  		result ["C_LAST"].ToString ();  		result ["C_CREDIT"].ToString ();  		Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = _objCommand.ExecuteReader ();  	while (result.Read ()) {  		Convert.ToSingle (result ["D_TAX"].ToString ());  		vdNextOId = Convert.ToSingle (result ["D_NEXT_O_ID"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	_objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	_objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	_objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = _objCommand.ExecuteReader ();  	while (result.Read ()) {  		Convert.ToSingle (result ["W_TAX"]);  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = _objCommand.ExecuteReader ();  	while (result.Read ()) {  		Convert.ToSingle (result ["I_PRICE"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: try {  	_objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	_objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,NewOrder,The following statement contains a magic number: _objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec ORDER_STATUS '" + vwId + "'' '" + vdId + "'' '" + vcId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_FIRST' \r\n" + "C_MIDDLE' \r\n" + "C_LAST \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["C_BALANCE"].ToString ());  			result ["C_FIRST"].ToString ();  			result ["C_MIDDLE"].ToString ();  			result ["C_LAST"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_ID' \r\n" + "O_CARRIER_ID' \r\n" + "O_ENTRY_D \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_W_ID  = '" + vwId + "' \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_C_ID  = '" + vcId + "' \r\n" + "ORDER BY O_W_ID DESC' \r\n" + "O_D_ID DESC' \r\n" + "O_C_ID DESC' \r\n" + "O_ID DESC  \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			voId = result ["O_ID"].ToString ();  			result ["O_CARRIER_ID"].ToString ();  			Convert.ToDateTime (result ["O_ENTRY_D"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT  \r\n" + "OL_I_ID'  \r\n" + "OL_SUPPLY_W_ID'  \r\n" + "OL_QUANTITY'  \r\n" + "OL_AMOUNT'  \r\n" + "isnull(OL_DELIVERY_D''01-01-1972 00:00:00.000') OL_DELIVERY_D  \r\n" + "FROM  ORDER_LINE   \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  = '" + voId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["OL_I_ID"].ToString ();  			result ["OL_SUPPLY_W_ID"].ToString ();  			Convert.ToSingle (result ["OL_QUANTITY"].ToString ());  			Convert.ToSingle (result ["OL_AMOUNT"].ToString ());  			Convert.ToDateTime (result ["OL_DELIVERY_D"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec ORDER_STATUS '" + vwId + "'' '" + vdId + "'' '" + vcId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_FIRST' \r\n" + "C_MIDDLE' \r\n" + "C_LAST \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["C_BALANCE"].ToString ());  			result ["C_FIRST"].ToString ();  			result ["C_MIDDLE"].ToString ();  			result ["C_LAST"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_ID' \r\n" + "O_CARRIER_ID' \r\n" + "O_ENTRY_D \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_W_ID  = '" + vwId + "' \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_C_ID  = '" + vcId + "' \r\n" + "ORDER BY O_W_ID DESC' \r\n" + "O_D_ID DESC' \r\n" + "O_C_ID DESC' \r\n" + "O_ID DESC  \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			voId = result ["O_ID"].ToString ();  			result ["O_CARRIER_ID"].ToString ();  			Convert.ToDateTime (result ["O_ENTRY_D"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT  \r\n" + "OL_I_ID'  \r\n" + "OL_SUPPLY_W_ID'  \r\n" + "OL_QUANTITY'  \r\n" + "OL_AMOUNT'  \r\n" + "isnull(OL_DELIVERY_D''01-01-1972 00:00:00.000') OL_DELIVERY_D  \r\n" + "FROM  ORDER_LINE   \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  = '" + voId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["OL_I_ID"].ToString ();  			result ["OL_SUPPLY_W_ID"].ToString ();  			Convert.ToSingle (result ["OL_QUANTITY"].ToString ());  			Convert.ToSingle (result ["OL_AMOUNT"].ToString ());  			Convert.ToDateTime (result ["OL_DELIVERY_D"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec ORDER_STATUS '" + vwId + "'' '" + vdId + "'' '" + vcId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_FIRST' \r\n" + "C_MIDDLE' \r\n" + "C_LAST \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["C_BALANCE"].ToString ());  			result ["C_FIRST"].ToString ();  			result ["C_MIDDLE"].ToString ();  			result ["C_LAST"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_ID' \r\n" + "O_CARRIER_ID' \r\n" + "O_ENTRY_D \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_W_ID  = '" + vwId + "' \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_C_ID  = '" + vcId + "' \r\n" + "ORDER BY O_W_ID DESC' \r\n" + "O_D_ID DESC' \r\n" + "O_C_ID DESC' \r\n" + "O_ID DESC  \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			voId = result ["O_ID"].ToString ();  			result ["O_CARRIER_ID"].ToString ();  			Convert.ToDateTime (result ["O_ENTRY_D"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT  \r\n" + "OL_I_ID'  \r\n" + "OL_SUPPLY_W_ID'  \r\n" + "OL_QUANTITY'  \r\n" + "OL_AMOUNT'  \r\n" + "isnull(OL_DELIVERY_D''01-01-1972 00:00:00.000') OL_DELIVERY_D  \r\n" + "FROM  ORDER_LINE   \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  = '" + voId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["OL_I_ID"].ToString ();  			result ["OL_SUPPLY_W_ID"].ToString ();  			Convert.ToSingle (result ["OL_QUANTITY"].ToString ());  			Convert.ToSingle (result ["OL_AMOUNT"].ToString ());  			Convert.ToDateTime (result ["OL_DELIVERY_D"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec ORDER_STATUS '" + vwId + "'' '" + vdId + "'' '" + vcId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_FIRST' \r\n" + "C_MIDDLE' \r\n" + "C_LAST \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			Convert.ToSingle (result ["C_BALANCE"].ToString ());  			result ["C_FIRST"].ToString ();  			result ["C_MIDDLE"].ToString ();  			result ["C_LAST"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_ID' \r\n" + "O_CARRIER_ID' \r\n" + "O_ENTRY_D \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_W_ID  = '" + vwId + "' \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_C_ID  = '" + vcId + "' \r\n" + "ORDER BY O_W_ID DESC' \r\n" + "O_D_ID DESC' \r\n" + "O_C_ID DESC' \r\n" + "O_ID DESC  \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			voId = result ["O_ID"].ToString ();  			result ["O_CARRIER_ID"].ToString ();  			Convert.ToDateTime (result ["O_ENTRY_D"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT  \r\n" + "OL_I_ID'  \r\n" + "OL_SUPPLY_W_ID'  \r\n" + "OL_QUANTITY'  \r\n" + "OL_AMOUNT'  \r\n" + "isnull(OL_DELIVERY_D''01-01-1972 00:00:00.000') OL_DELIVERY_D  \r\n" + "FROM  ORDER_LINE   \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  = '" + voId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			result ["OL_I_ID"].ToString ();  			result ["OL_SUPPLY_W_ID"].ToString ();  			Convert.ToSingle (result ["OL_QUANTITY"].ToString ());  			Convert.ToSingle (result ["OL_AMOUNT"].ToString ());  			Convert.ToDateTime (result ["OL_DELIVERY_D"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		Convert.ToSingle (result ["C_BALANCE"].ToString ());  		result ["C_FIRST"].ToString ();  		result ["C_MIDDLE"].ToString ();  		result ["C_LAST"].ToString ();  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		voId = result ["O_ID"].ToString ();  		result ["O_CARRIER_ID"].ToString ();  		Convert.ToDateTime (result ["O_ENTRY_D"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		result ["OL_I_ID"].ToString ();  		result ["OL_SUPPLY_W_ID"].ToString ();  		Convert.ToSingle (result ["OL_QUANTITY"].ToString ());  		Convert.ToSingle (result ["OL_AMOUNT"].ToString ());  		Convert.ToDateTime (result ["OL_DELIVERY_D"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,OrderStatus,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec PAYMENT '" + vwId + "'' '" + vdId + "'' '" + vcId + "'' 'AVS'' " + ram + ";";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	//why is this block of code even here???  	//I can't find a use for it in the origional code ether  	/*                 _query = "SELECT C_ID \r\n"+                 "FROM  CUSTOMER  \r\n"+                 "WHERE	 C_W_ID  = " + VW_ID + " \r\n"+                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                 "AND	C_LAST  = " + VC_LAST +" \r\n"+                 "ORDER BY C_W_ID' \r\n"+                  "C_D_ID' \r\n"+                  "C_LAST' \r\n"+                  "C_FIRST  \r\n";                 try                 {                     _result = ClientResults.GetDataReader(Globals.StrPublisherConn' _query);                      while (_result.Read())                     {                         VCUS_ID  = 1;                         VDIS_ID  = 100001;                          VWAR_ID  = 1;                         VHIS_ID  = 1;                          if ( VC_ID == "0")                         {                             _query = "SELECT COUNT(C_ID) \r\n"+                                 "FROM  CUSTOMER  \r\n"+                                 "WHERE	 C_LAST  = " + VC_LAST + " \r\n"+                                 "AND	C_D_ID  = " + VD_ID + " \r\n"+                                 "AND	C_W_ID  = " + VW_ID + " \r\n";                             //NAMECNT need another reader to pull this count but didnt' see the need to code it up yet.                          }                     }                     if (_result != null)                     {                         _result.Close();                                              }                 }                 catch (Exception e)                 {                     if (_result != null)                     {                         _result.Close();                                              }                     errh.StopProcessing(e'_query);;                 }                 */query = "SELECT  \r\n" + "C_FIRST'  \r\n" + "C_MIDDLE'  \r\n" + "C_LAST'  \r\n" + "C_STREET_1'  \r\n" + "C_STREET_2'  \r\n" + "C_CITY'  \r\n" + "C_STATE'  \r\n" + "C_ZIP'  \r\n" + "C_PHONE'  \r\n" + "C_SINCE'  \r\n" + "C_CREDIT'  \r\n" + "C_CREDIT_LIM'  \r\n" + "C_DISCOUNT'  \r\n" + "isnull(C_BALANCE'0) C_BALANCE'  \r\n" + "C_PAYMENT_CNT'  \r\n" + "isnull(C_DATA''') C_DATA  \r\n" + "FROM  CUSTOMER   \r\n" + "WHERE	 C_W_ID  =  '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + vcId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vcFirst = result ["C_FIRST"].ToString ();  			var vcMiddle = result ["C_MIDDLE"].ToString ();  			var vcLast = result ["C_LAST"].ToString ();  			var vcStreet1 = result ["C_STREET_1"].ToString ();  			var vcStreet2 = result ["C_STREET_2"].ToString ();  			var vcCity = result ["C_CITY"].ToString ();  			var vcState = result ["C_STATE"].ToString ();  			var vcZip = result ["C_ZIP"].ToString ();  			var vcPhone = result ["C_PHONE"].ToString ();  			var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  			vcCredit = result ["C_CREDIT"].ToString ();  			var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  			var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  			vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  			vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  			vcData = result ["C_DATA"].ToString ();  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	vcBalance = vcBalance + vhAmount;  	if (vcCredit == "BC") {  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		//_query is the same as above without the c_data column set...  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	query = "SELECT \r\n" + "D_STREET_1' \r\n" + "D_STREET_2' \r\n" + "D_CITY' \r\n" + "D_STATE' \r\n" + "D_ZIP' \r\n" + "D_NAME' \r\n" + "D_YTD \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  =  '" + vdId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var vdStreet1 = result ["D_STREET_1"].ToString ();  			var vdStreet2 = result ["D_STREET_2"].ToString ();  			var vdCity = result ["D_CITY"].ToString ();  			var vdState = result ["D_STATE"].ToString ();  			var vdZip = result ["D_ZIP"].ToString ();  			vdName = result ["D_NAME"].ToString ();  			vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  DISTRICT \r\n" + "SET	D_YTD = " + (vdYtd + vhAmount) + "'	\r\n" + "SEQ_ID = " + (vdisId + 1) + " \r\n" + "WHERE  D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "W_NAME' \r\n" + "W_STREET_1' \r\n" + "W_STREET_2' \r\n" + "W_CITY' \r\n" + "W_STATE' \r\n" + "W_ZIP' \r\n" + "W_YTD \r\n" + "FROM  WAREHOUSE  \r\n" + "WHERE	 W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);                                 	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vwName = result ["W_NAME"].ToString ();  			//_result["W_STATE"].ToString();  			//_result["W_ZIP"].ToString();  			vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  WAREHOUSE \r\n" + "SET W_YTD = " + (vwYtd + vhAmount) + "' \r\n" + "SEQ_ID = " + (vwarId + 1) + " \r\n" + "WHERE  W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	string vhData = vwName + "" + vdName;  	query = "INSERT INTO  HISTORY    \r\n" + "( H_C_D_ID '  \r\n" + "H_C_W_ID '  \r\n" + "H_C_ID '  \r\n" + "H_D_ID '  \r\n" + "H_W_ID '  \r\n" + "H_DATE '  \r\n" + "H_AMOUNT '  \r\n" + "H_DATA '  \r\n" + "SEQ_ID )   \r\n" + "VALUES 		(  \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " '" + vcId + "'' \r\n" + " '" + vdId + "'' \r\n" + " '" + vwId + "'' \r\n" + " getdate()' \r\n" + " " + vhAmount + "' \r\n" + " '" + vhData + "'' \r\n" + " " + (vhisId + 1) + " \r\n" + ") \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		var vcFirst = result ["C_FIRST"].ToString ();  		var vcMiddle = result ["C_MIDDLE"].ToString ();  		var vcLast = result ["C_LAST"].ToString ();  		var vcStreet1 = result ["C_STREET_1"].ToString ();  		var vcStreet2 = result ["C_STREET_2"].ToString ();  		var vcCity = result ["C_CITY"].ToString ();  		var vcState = result ["C_STATE"].ToString ();  		var vcZip = result ["C_ZIP"].ToString ();  		var vcPhone = result ["C_PHONE"].ToString ();  		var vcSince = Convert.ToDateTime (result ["C_SINCE"].ToString ());  		vcCredit = result ["C_CREDIT"].ToString ();  		var vcCreditLim = Convert.ToSingle (result ["C_CREDIT_LIM"].ToString ());  		var vcDiscount = Convert.ToSingle (result ["C_DISCOUNT"].ToString ());  		vcBalance = Convert.ToSingle (result ["C_BALANCE"].ToString ());  		vcPaymentCnt = Convert.ToSingle (result ["C_PAYMENT_CNT"].ToString ());  		vcData = result ["C_DATA"].ToString ();  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (vcCredit == "BC") {  	query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//_query is the same as above without the c_data column set...  	query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: if (vcCredit == "BC") {  	query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_DATA = " + Convert.ToString (vcId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vdId) + Convert.ToString (vwId) + Convert.ToString (vhAmount) + Convert.ToString (vcData) + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	//_query is the same as above without the c_data column set...  	query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + vcBalance + "' \r\n" + "C_PAYMENT_CNT = " + (vcPaymentCnt + 1) + "'	 \r\n" + "SEQ_ID = " + (vcusId + 1) + " \r\n" + "WHERE  C_W_ID  = " + vwId + " \r\n" + "AND	C_D_ID  = " + vdId + " \r\n" + "AND	C_ID  = " + vcId + " \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		var vdStreet1 = result ["D_STREET_1"].ToString ();  		var vdStreet2 = result ["D_STREET_2"].ToString ();  		var vdCity = result ["D_CITY"].ToString ();  		var vdState = result ["D_STATE"].ToString ();  		var vdZip = result ["D_ZIP"].ToString ();  		vdName = result ["D_NAME"].ToString ();  		vdYtd = Convert.ToSingle (result ["D_YTD"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		vwName = result ["W_NAME"].ToString ();  		//_result["W_STATE"].ToString();  		//_result["W_ZIP"].ToString();  		vwYtd = Convert.ToSingle (result ["W_YTD"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Payment,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec DELIVERY '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n";  	//Console.WriteLine(_query);                          	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			//float OL_TOTAL;  			const float vordlineId = 100001;  			const float voordId = 100001;  			const int vcusId = 1;  			string vnoOId = result ["NO_O_ID"].ToString ();  			query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result2.Read ()) {  					voCId = result2 ["O_C_ID"].ToString ();  					voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  				}  				result2.Close ();  				result2.Dispose ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result3.Read ()) {  					volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  					query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  					//Console.WriteLine(_query);  				}  				result3.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result4.Read ()) {  					float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  					float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  					query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  					try {  						objCommand = new SqlCommand (query' objConnect) {  							CommandTimeout = 3600  						};  						objCommand.ExecuteNonQuery ();  					}  					catch (Exception e) {  						Errhandle.StopProcessing (e' query);  					}  				}  				result4.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				if (result4 != null) {  					result4.Close ();  					result4.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  		}  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec DELIVERY '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n";  	//Console.WriteLine(_query);                          	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			//float OL_TOTAL;  			const float vordlineId = 100001;  			const float voordId = 100001;  			const int vcusId = 1;  			string vnoOId = result ["NO_O_ID"].ToString ();  			query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result2.Read ()) {  					voCId = result2 ["O_C_ID"].ToString ();  					voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  				}  				result2.Close ();  				result2.Dispose ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result3.Read ()) {  					volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  					query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  					//Console.WriteLine(_query);  				}  				result3.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result4.Read ()) {  					float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  					float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  					query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  					try {  						objCommand = new SqlCommand (query' objConnect) {  							CommandTimeout = 3600  						};  						objCommand.ExecuteNonQuery ();  					}  					catch (Exception e) {  						Errhandle.StopProcessing (e' query);  					}  				}  				result4.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				if (result4 != null) {  					result4.Close ();  					result4.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  		}  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec DELIVERY '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n";  	//Console.WriteLine(_query);                          	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			//float OL_TOTAL;  			const float vordlineId = 100001;  			const float voordId = 100001;  			const int vcusId = 1;  			string vnoOId = result ["NO_O_ID"].ToString ();  			query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result2.Read ()) {  					voCId = result2 ["O_C_ID"].ToString ();  					voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  				}  				result2.Close ();  				result2.Dispose ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result3.Read ()) {  					volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  					query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  					//Console.WriteLine(_query);  				}  				result3.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result4.Read ()) {  					float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  					float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  					query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  					try {  						objCommand = new SqlCommand (query' objConnect) {  							CommandTimeout = 3600  						};  						objCommand.ExecuteNonQuery ();  					}  					catch (Exception e) {  						Errhandle.StopProcessing (e' query);  					}  				}  				result4.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				if (result4 != null) {  					result4.Close ();  					result4.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  		}  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec DELIVERY '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n";  	//Console.WriteLine(_query);                          	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			//float OL_TOTAL;  			const float vordlineId = 100001;  			const float voordId = 100001;  			const int vcusId = 1;  			string vnoOId = result ["NO_O_ID"].ToString ();  			query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result2.Read ()) {  					voCId = result2 ["O_C_ID"].ToString ();  					voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  				}  				result2.Close ();  				result2.Dispose ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result3.Read ()) {  					volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  					query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  					//Console.WriteLine(_query);  				}  				result3.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result4.Read ()) {  					float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  					float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  					query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  					try {  						objCommand = new SqlCommand (query' objConnect) {  							CommandTimeout = 3600  						};  						objCommand.ExecuteNonQuery ();  					}  					catch (Exception e) {  						Errhandle.StopProcessing (e' query);  					}  				}  				result4.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				if (result4 != null) {  					result4.Close ();  					result4.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  		}  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec DELIVERY '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n";  	//Console.WriteLine(_query);                          	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			//float OL_TOTAL;  			const float vordlineId = 100001;  			const float voordId = 100001;  			const int vcusId = 1;  			string vnoOId = result ["NO_O_ID"].ToString ();  			query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result2.Read ()) {  					voCId = result2 ["O_C_ID"].ToString ();  					voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  				}  				result2.Close ();  				result2.Dispose ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result3.Read ()) {  					volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  					query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  					//Console.WriteLine(_query);  				}  				result3.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result4.Read ()) {  					float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  					float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  					query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  					try {  						objCommand = new SqlCommand (query' objConnect) {  							CommandTimeout = 3600  						};  						objCommand.ExecuteNonQuery ();  					}  					catch (Exception e) {  						Errhandle.StopProcessing (e' query);  					}  				}  				result4.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				if (result4 != null) {  					result4.Close ();  					result4.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  		}  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec DELIVERY '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n";  	//Console.WriteLine(_query);                          	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			//float OL_TOTAL;  			const float vordlineId = 100001;  			const float voordId = 100001;  			const int vcusId = 1;  			string vnoOId = result ["NO_O_ID"].ToString ();  			query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result2.Read ()) {  					voCId = result2 ["O_C_ID"].ToString ();  					voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  				}  				result2.Close ();  				result2.Dispose ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result3.Read ()) {  					volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  					query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  					//Console.WriteLine(_query);  				}  				result3.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result4.Read ()) {  					float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  					float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  					query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  					try {  						objCommand = new SqlCommand (query' objConnect) {  							CommandTimeout = 3600  						};  						objCommand.ExecuteNonQuery ();  					}  					catch (Exception e) {  						Errhandle.StopProcessing (e' query);  					}  				}  				result4.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				if (result4 != null) {  					result4.Close ();  					result4.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  		}  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec DELIVERY '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n";  	//Console.WriteLine(_query);                          	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			//float OL_TOTAL;  			const float vordlineId = 100001;  			const float voordId = 100001;  			const int vcusId = 1;  			string vnoOId = result ["NO_O_ID"].ToString ();  			query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result2.Read ()) {  					voCId = result2 ["O_C_ID"].ToString ();  					voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  				}  				result2.Close ();  				result2.Dispose ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result3.Read ()) {  					volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  					query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  					//Console.WriteLine(_query);  				}  				result3.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result4.Read ()) {  					float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  					float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  					query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  					try {  						objCommand = new SqlCommand (query' objConnect) {  							CommandTimeout = 3600  						};  						objCommand.ExecuteNonQuery ();  					}  					catch (Exception e) {  						Errhandle.StopProcessing (e' query);  					}  				}  				result4.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				if (result4 != null) {  					result4.Close ();  					result4.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  		}  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec DELIVERY '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT NO_O_ID \r\n" + "FROM  NEW_ORDER  \r\n" + "WHERE	 NO_W_ID  = '" + vwId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "ORDER BY NO_O_ID DESC  \r\n";  	//Console.WriteLine(_query);                          	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			//float OL_TOTAL;  			const float vordlineId = 100001;  			const float voordId = 100001;  			const int vcusId = 1;  			string vnoOId = result ["NO_O_ID"].ToString ();  			query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result2.Read ()) {  					voCId = result2 ["O_C_ID"].ToString ();  					voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  				}  				result2.Close ();  				result2.Dispose ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result3.Read ()) {  					volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  					query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  					//Console.WriteLine(_query);  				}  				result3.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  			query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  			//Console.WriteLine(_query);  			try {  				result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  				while (result4.Read ()) {  					float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  					float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  					query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  					try {  						objCommand = new SqlCommand (query' objConnect) {  							CommandTimeout = 3600  						};  						objCommand.ExecuteNonQuery ();  					}  					catch (Exception e) {  						Errhandle.StopProcessing (e' query);  					}  				}  				result4.Close ();  			}  			catch (Exception e) {  				result.Close ();  				result.Dispose ();  				if (result2 != null) {  					result2.Close ();  					result2.Dispose ();  				}  				if (result3 != null) {  					result3.Close ();  					result3.Dispose ();  				}  				if (result4 != null) {  					result4.Close ();  					result4.Dispose ();  				}  				Errhandle.StopProcessing (e' query);  			}  		}  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		//float OL_TOTAL;  		const float vordlineId = 100001;  		const float voordId = 100001;  		const int vcusId = 1;  		string vnoOId = result ["NO_O_ID"].ToString ();  		query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result2.Read ()) {  				voCId = result2 ["O_C_ID"].ToString ();  				voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  			}  			result2.Close ();  			result2.Dispose ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result3.Read ()) {  				volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  				query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  				//Console.WriteLine(_query);  			}  			result3.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result4.Read ()) {  				float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  				float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  				query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  				try {  					objCommand = new SqlCommand (query' objConnect) {  						CommandTimeout = 3600  					};  					objCommand.ExecuteNonQuery ();  				}  				catch (Exception e) {  					Errhandle.StopProcessing (e' query);  				}  			}  			result4.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			if (result4 != null) {  				result4.Close ();  				result4.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  	}  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		//float OL_TOTAL;  		const float vordlineId = 100001;  		const float voordId = 100001;  		const int vcusId = 1;  		string vnoOId = result ["NO_O_ID"].ToString ();  		query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result2.Read ()) {  				voCId = result2 ["O_C_ID"].ToString ();  				voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  			}  			result2.Close ();  			result2.Dispose ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result3.Read ()) {  				volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  				query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  				//Console.WriteLine(_query);  			}  			result3.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result4.Read ()) {  				float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  				float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  				query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  				try {  					objCommand = new SqlCommand (query' objConnect) {  						CommandTimeout = 3600  					};  					objCommand.ExecuteNonQuery ();  				}  				catch (Exception e) {  					Errhandle.StopProcessing (e' query);  				}  			}  			result4.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			if (result4 != null) {  				result4.Close ();  				result4.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  	}  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		//float OL_TOTAL;  		const float vordlineId = 100001;  		const float voordId = 100001;  		const int vcusId = 1;  		string vnoOId = result ["NO_O_ID"].ToString ();  		query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result2.Read ()) {  				voCId = result2 ["O_C_ID"].ToString ();  				voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  			}  			result2.Close ();  			result2.Dispose ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result3.Read ()) {  				volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  				query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  				//Console.WriteLine(_query);  			}  			result3.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result4.Read ()) {  				float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  				float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  				query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  				try {  					objCommand = new SqlCommand (query' objConnect) {  						CommandTimeout = 3600  					};  					objCommand.ExecuteNonQuery ();  				}  				catch (Exception e) {  					Errhandle.StopProcessing (e' query);  				}  			}  			result4.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			if (result4 != null) {  				result4.Close ();  				result4.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  	}  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		//float OL_TOTAL;  		const float vordlineId = 100001;  		const float voordId = 100001;  		const int vcusId = 1;  		string vnoOId = result ["NO_O_ID"].ToString ();  		query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result2.Read ()) {  				voCId = result2 ["O_C_ID"].ToString ();  				voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  			}  			result2.Close ();  			result2.Dispose ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result3.Read ()) {  				volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  				query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  				//Console.WriteLine(_query);  			}  			result3.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result4.Read ()) {  				float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  				float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  				query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  				try {  					objCommand = new SqlCommand (query' objConnect) {  						CommandTimeout = 3600  					};  					objCommand.ExecuteNonQuery ();  				}  				catch (Exception e) {  					Errhandle.StopProcessing (e' query);  				}  			}  			result4.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			if (result4 != null) {  				result4.Close ();  				result4.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  	}  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		//float OL_TOTAL;  		const float vordlineId = 100001;  		const float voordId = 100001;  		const int vcusId = 1;  		string vnoOId = result ["NO_O_ID"].ToString ();  		query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result2.Read ()) {  				voCId = result2 ["O_C_ID"].ToString ();  				voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  			}  			result2.Close ();  			result2.Dispose ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result3.Read ()) {  				volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  				query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  				//Console.WriteLine(_query);  			}  			result3.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result4.Read ()) {  				float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  				float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  				query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  				try {  					objCommand = new SqlCommand (query' objConnect) {  						CommandTimeout = 3600  					};  					objCommand.ExecuteNonQuery ();  				}  				catch (Exception e) {  					Errhandle.StopProcessing (e' query);  				}  			}  			result4.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			if (result4 != null) {  				result4.Close ();  				result4.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  	}  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		//float OL_TOTAL;  		const float vordlineId = 100001;  		const float voordId = 100001;  		const int vcusId = 1;  		string vnoOId = result ["NO_O_ID"].ToString ();  		query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result2.Read ()) {  				voCId = result2 ["O_C_ID"].ToString ();  				voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  			}  			result2.Close ();  			result2.Dispose ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result3.Read ()) {  				volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  				query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  				//Console.WriteLine(_query);  			}  			result3.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result4.Read ()) {  				float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  				float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  				query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  				try {  					objCommand = new SqlCommand (query' objConnect) {  						CommandTimeout = 3600  					};  					objCommand.ExecuteNonQuery ();  				}  				catch (Exception e) {  					Errhandle.StopProcessing (e' query);  				}  			}  			result4.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			if (result4 != null) {  				result4.Close ();  				result4.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  	}  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		//float OL_TOTAL;  		const float vordlineId = 100001;  		const float voordId = 100001;  		const int vcusId = 1;  		string vnoOId = result ["NO_O_ID"].ToString ();  		query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result2.Read ()) {  				voCId = result2 ["O_C_ID"].ToString ();  				voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  			}  			result2.Close ();  			result2.Dispose ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result3.Read ()) {  				volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  				query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  				//Console.WriteLine(_query);  			}  			result3.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  		query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  		//Console.WriteLine(_query);  		try {  			result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  			while (result4.Read ()) {  				float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  				float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  				query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  				try {  					objCommand = new SqlCommand (query' objConnect) {  						CommandTimeout = 3600  					};  					objCommand.ExecuteNonQuery ();  				}  				catch (Exception e) {  					Errhandle.StopProcessing (e' query);  				}  			}  			result4.Close ();  		}  		catch (Exception e) {  			result.Close ();  			result.Dispose ();  			if (result2 != null) {  				result2.Close ();  				result2.Dispose ();  			}  			if (result3 != null) {  				result3.Close ();  				result3.Dispose ();  			}  			if (result4 != null) {  				result4.Close ();  				result4.Dispose ();  			}  			Errhandle.StopProcessing (e' query);  		}  	}  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: while (result.Read ()) {  	//float OL_TOTAL;  	const float vordlineId = 100001;  	const float voordId = 100001;  	const int vcusId = 1;  	string vnoOId = result ["NO_O_ID"].ToString ();  	query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result2.Read ()) {  			voCId = result2 ["O_C_ID"].ToString ();  			voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  		}  		result2.Close ();  		result2.Dispose ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result3.Read ()) {  			volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  			query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  		}  		result3.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result4.Read ()) {  			float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  			float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  			query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  		}  		result4.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: while (result.Read ()) {  	//float OL_TOTAL;  	const float vordlineId = 100001;  	const float voordId = 100001;  	const int vcusId = 1;  	string vnoOId = result ["NO_O_ID"].ToString ();  	query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result2.Read ()) {  			voCId = result2 ["O_C_ID"].ToString ();  			voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  		}  		result2.Close ();  		result2.Dispose ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result3.Read ()) {  			volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  			query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  		}  		result3.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result4.Read ()) {  			float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  			float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  			query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  		}  		result4.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: while (result.Read ()) {  	//float OL_TOTAL;  	const float vordlineId = 100001;  	const float voordId = 100001;  	const int vcusId = 1;  	string vnoOId = result ["NO_O_ID"].ToString ();  	query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result2.Read ()) {  			voCId = result2 ["O_C_ID"].ToString ();  			voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  		}  		result2.Close ();  		result2.Dispose ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result3.Read ()) {  			volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  			query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  		}  		result3.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result4.Read ()) {  			float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  			float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  			query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  		}  		result4.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: while (result.Read ()) {  	//float OL_TOTAL;  	const float vordlineId = 100001;  	const float voordId = 100001;  	const int vcusId = 1;  	string vnoOId = result ["NO_O_ID"].ToString ();  	query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result2.Read ()) {  			voCId = result2 ["O_C_ID"].ToString ();  			voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  		}  		result2.Close ();  		result2.Dispose ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result3.Read ()) {  			volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  			query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  		}  		result3.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result4.Read ()) {  			float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  			float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  			query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  		}  		result4.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: while (result.Read ()) {  	//float OL_TOTAL;  	const float vordlineId = 100001;  	const float voordId = 100001;  	const int vcusId = 1;  	string vnoOId = result ["NO_O_ID"].ToString ();  	query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result2.Read ()) {  			voCId = result2 ["O_C_ID"].ToString ();  			voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  		}  		result2.Close ();  		result2.Dispose ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result3.Read ()) {  			volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  			query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  		}  		result3.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result4.Read ()) {  			float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  			float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  			query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  		}  		result4.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: while (result.Read ()) {  	//float OL_TOTAL;  	const float vordlineId = 100001;  	const float voordId = 100001;  	const int vcusId = 1;  	string vnoOId = result ["NO_O_ID"].ToString ();  	query = "DELETE FROM   NEW_ORDER \r\n" + "WHERE  NO_O_ID  = '" + vnoOId + "' \r\n" + "AND	NO_D_ID  = '" + vdId + "' \r\n" + "AND	NO_W_ID  = '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "O_C_ID' \r\n" + "isnull(O_CARRIER_ID'' ') O_CARRIER_ID \r\n" + "FROM  O_ORDER  \r\n" + "WHERE	 O_ID  = " + vnoOId + " \r\n" + "AND	O_D_ID  = '" + vdId + "' \r\n" + "AND	O_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result2 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result2.Read ()) {  			voCId = result2 ["O_C_ID"].ToString ();  			voCarrierId = result2 ["O_CARRIER_ID"].ToString ();  		}  		result2.Close ();  		result2.Dispose ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "UPDATE  O_ORDER \r\n" + "SET	O_CARRIER_ID = '" + voCarrierId + "'' \r\n" + "SEQ_ID = " + Convert.ToString ((voordId + 1)) + "  \r\n" + "WHERE  O_ID  = '" + vnoOId + "'  \r\n" + "AND	O_D_ID  = '" + vdId + "'  \r\n" + "AND	O_W_ID  = '" + vwId + "'  \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT SUM(CONVERT(FLOAT' OL_AMOUNT)) OL_AMOUNT \r\n" + "FROM  ORDER_LINE  \r\n" + "WHERE	 OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result3 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result3.Read ()) {  			volAmount = Convert.ToSingle (result3 ["OL_AMOUNT"].ToString ());  			query = "UPDATE  ORDER_LINE \r\n" + "SET	OL_DELIVERY_D = getdate()' \r\n" + "SEQ_ID = " + (vordlineId + 1) + " \r\n" + "WHERE  OL_O_ID  = " + vnoOId + " \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_W_ID  = '" + vwId + "' \r\n";  			//Console.WriteLine(_query);  		}  		result3.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT \r\n" + "isnull(C_BALANCE'0) C_BALANCE' \r\n" + "C_DELIVERY_CNT \r\n" + "FROM  CUSTOMER  \r\n" + "WHERE	 C_W_ID  = '" + vwId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_ID  = '" + voCId + "' \r\n";  	//Console.WriteLine(_query);  	try {  		result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  		while (result4.Read ()) {  			float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  			float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  			query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  			try {  				objCommand = new SqlCommand (query' objConnect) {  					CommandTimeout = 3600  				};  				objCommand.ExecuteNonQuery ();  			}  			catch (Exception e) {  				Errhandle.StopProcessing (e' query);  			}  		}  		result4.Close ();  	}  	catch (Exception e) {  		result.Close ();  		result.Dispose ();  		if (result2 != null) {  			result2.Close ();  			result2.Dispose ();  		}  		if (result3 != null) {  			result3.Close ();  			result3.Dispose ();  		}  		if (result4 != null) {  			result4.Close ();  			result4.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	result4 = ClientDataAccess.GetDataReader (Globals.StrPublisherConn' query);  	while (result4.Read ()) {  		float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  		float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  		query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  		try {  			objCommand = new SqlCommand (query' objConnect) {  				CommandTimeout = 3600  			};  			objCommand.ExecuteNonQuery ();  		}  		catch (Exception e) {  			Errhandle.StopProcessing (e' query);  		}  	}  	result4.Close ();  }  catch (Exception e) {  	result.Close ();  	result.Dispose ();  	if (result2 != null) {  		result2.Close ();  		result2.Dispose ();  	}  	if (result3 != null) {  		result3.Close ();  		result3.Dispose ();  	}  	if (result4 != null) {  		result4.Close ();  		result4.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: while (result4.Read ()) {  	float vcBalance = Convert.ToSingle (result4 ["C_BALANCE"].ToString ());  	float vcDeliveryCnt = Convert.ToSingle (result4 ["C_DELIVERY_CNT"].ToString ());  	query = "UPDATE  CUSTOMER \r\n" + "SET	C_BALANCE = " + Convert.ToString ((vcBalance + volAmount)) + "' \r\n" + "C_DELIVERY_CNT = " + Convert.ToString ((vcDeliveryCnt + 1)) + "' \r\n" + "SEQ_ID = " + Convert.ToString ((vcusId + 1)) + " \r\n" + "WHERE  C_ID  = '" + voCId + "' \r\n" + "AND	C_D_ID  = '" + vdId + "' \r\n" + "AND	C_W_ID  =  '" + vwId + "' \r\n";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Delivery,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec STOCK_LEVEL '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                              	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vdNextOId = Convert.ToInt32 (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT COUNT(DISTINCT S_I_ID) N_ITEMS \r\n" + "FROM  ORDER_LINE' \r\n" + "STOCK  \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  <  " + vdNextOId + " \r\n" + "AND	OL_O_ID  >=  " + (vdNextOId - 20) + " \r\n" + "AND	S_W_ID  =  '" + vwId + "' \r\n" + "AND	S_I_ID  =  OL_I_ID \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var nItems = Convert.ToSingle (result ["N_ITEMS"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec STOCK_LEVEL '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                              	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vdNextOId = Convert.ToInt32 (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT COUNT(DISTINCT S_I_ID) N_ITEMS \r\n" + "FROM  ORDER_LINE' \r\n" + "STOCK  \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  <  " + vdNextOId + " \r\n" + "AND	OL_O_ID  >=  " + (vdNextOId - 20) + " \r\n" + "AND	S_W_ID  =  '" + vwId + "' \r\n" + "AND	S_I_ID  =  OL_I_ID \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var nItems = Convert.ToSingle (result ["N_ITEMS"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec STOCK_LEVEL '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                              	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vdNextOId = Convert.ToInt32 (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT COUNT(DISTINCT S_I_ID) N_ITEMS \r\n" + "FROM  ORDER_LINE' \r\n" + "STOCK  \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  <  " + vdNextOId + " \r\n" + "AND	OL_O_ID  >=  " + (vdNextOId - 20) + " \r\n" + "AND	S_W_ID  =  '" + vwId + "' \r\n" + "AND	S_I_ID  =  OL_I_ID \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var nItems = Convert.ToSingle (result ["N_ITEMS"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: if (Globals.StoredProc == 1) {  	query = "exec STOCK_LEVEL '" + vwId + "'' '" + vdId + "';";  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		objCommand.ExecuteNonQuery ();  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  }  else {  	query = "SELECT D_NEXT_O_ID \r\n" + "FROM  DISTRICT  \r\n" + "WHERE	 D_W_ID  = '" + vwId + "' \r\n" + "AND	D_ID  = '" + vdId + "' \r\n";  	//Console.WriteLine(_query);                              	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			vdNextOId = Convert.ToInt32 (result ["D_NEXT_O_ID"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  	query = "SELECT COUNT(DISTINCT S_I_ID) N_ITEMS \r\n" + "FROM  ORDER_LINE' \r\n" + "STOCK  \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  <  " + vdNextOId + " \r\n" + "AND	OL_O_ID  >=  " + (vdNextOId - 20) + " \r\n" + "AND	S_W_ID  =  '" + vwId + "' \r\n" + "AND	S_I_ID  =  OL_I_ID \r\n";  	//Console.WriteLine(_query);  	try {  		objCommand = new SqlCommand (query' objConnect) {  			CommandTimeout = 3600  		};  		result = objCommand.ExecuteReader ();  		while (result.Read ()) {  			var nItems = Convert.ToSingle (result ["N_ITEMS"].ToString ());  		}  		result.Close ();  		result.Dispose ();  	}  	catch (Exception e) {  		if (result != null) {  			result.Close ();  			result.Dispose ();  		}  		Errhandle.StopProcessing (e' query);  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		vdNextOId = Convert.ToInt32 (result ["D_NEXT_O_ID"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: query = "SELECT COUNT(DISTINCT S_I_ID) N_ITEMS \r\n" + "FROM  ORDER_LINE' \r\n" + "STOCK  \r\n" + "WHERE	 OL_W_ID  = '" + vwId + "' \r\n" + "AND	OL_D_ID  = '" + vdId + "' \r\n" + "AND	OL_O_ID  <  " + vdNextOId + " \r\n" + "AND	OL_O_ID  >=  " + (vdNextOId - 20) + " \r\n" + "AND	S_W_ID  =  '" + vwId + "' \r\n" + "AND	S_I_ID  =  OL_I_ID \r\n";  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	result = objCommand.ExecuteReader ();  	while (result.Read ()) {  		var nItems = Convert.ToSingle (result ["N_ITEMS"].ToString ());  	}  	result.Close ();  	result.Dispose ();  }  catch (Exception e) {  	if (result != null) {  		result.Close ();  		result.Dispose ();  	}  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,StockLevel,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The following statement contains a magic number: if (Globals.NumLoops == 0) {  	while (currdate < targetdate) {  		if (Globals.RawWrite == 1) {  			RawWrites ();  		}  		else {  			i = Random.Next (1' 100);  			//Console.WriteLine(i);  			if (i <= Globals.PNO) {  				NewOrder (min);  				//45  				no++;  			}  			else if ((i > Globals.PNO) && (i <= (Globals.PNO + Globals.POS))) {  				OrderStatus ();  				//43  				os++;  			}  			else if ((i > (Globals.PNO + Globals.POS)) && (i <= (Globals.PNO + Globals.POS + Globals.PP))) {  				Payment ();  				//4  				p++;  			}  			else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) {  				Delivery ();  				//4  				d++;  			}  			else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) {  				StockLevel ();  				//4  				sl++;  			}  			min++;  		}  		if (sleep != 0) {  			Thread.Sleep (sleep);  		}  		currdate = DateTime.Now;  		cnt++;  	}  }  else {  	while (cnt < Globals.NumLoops) {  		if (Globals.RawWrite == 1) {  			RawWrites ();  		}  		else {  			i = Random.Next (1' 100);  			//Console.WriteLine(i);  			if (i <= Globals.PNO) {  				NewOrder (min);  				//45  				no++;  			}  			else if ((i > Globals.PNO) && (i <= (Globals.PNO + Globals.POS))) {  				OrderStatus ();  				//43  				os++;  			}  			else if ((i > (Globals.PNO + Globals.POS)) && (i <= (Globals.PNO + Globals.POS + Globals.PP))) {  				Payment ();  				//4  				p++;  			}  			else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) {  				Delivery ();  				//4  				d++;  			}  			else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) {  				StockLevel ();  				//4  				sl++;  			}  			min++;  		}  		if (sleep != 0) {  			Thread.Sleep (sleep);  		}  		cnt++;  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The following statement contains a magic number: if (Globals.NumLoops == 0) {  	while (currdate < targetdate) {  		if (Globals.RawWrite == 1) {  			RawWrites ();  		}  		else {  			i = Random.Next (1' 100);  			//Console.WriteLine(i);  			if (i <= Globals.PNO) {  				NewOrder (min);  				//45  				no++;  			}  			else if ((i > Globals.PNO) && (i <= (Globals.PNO + Globals.POS))) {  				OrderStatus ();  				//43  				os++;  			}  			else if ((i > (Globals.PNO + Globals.POS)) && (i <= (Globals.PNO + Globals.POS + Globals.PP))) {  				Payment ();  				//4  				p++;  			}  			else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) {  				Delivery ();  				//4  				d++;  			}  			else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) {  				StockLevel ();  				//4  				sl++;  			}  			min++;  		}  		if (sleep != 0) {  			Thread.Sleep (sleep);  		}  		currdate = DateTime.Now;  		cnt++;  	}  }  else {  	while (cnt < Globals.NumLoops) {  		if (Globals.RawWrite == 1) {  			RawWrites ();  		}  		else {  			i = Random.Next (1' 100);  			//Console.WriteLine(i);  			if (i <= Globals.PNO) {  				NewOrder (min);  				//45  				no++;  			}  			else if ((i > Globals.PNO) && (i <= (Globals.PNO + Globals.POS))) {  				OrderStatus ();  				//43  				os++;  			}  			else if ((i > (Globals.PNO + Globals.POS)) && (i <= (Globals.PNO + Globals.POS + Globals.PP))) {  				Payment ();  				//4  				p++;  			}  			else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) {  				Delivery ();  				//4  				d++;  			}  			else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) {  				StockLevel ();  				//4  				sl++;  			}  			min++;  		}  		if (sleep != 0) {  			Thread.Sleep (sleep);  		}  		cnt++;  	}  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The following statement contains a magic number: while (currdate < targetdate) {  	if (Globals.RawWrite == 1) {  		RawWrites ();  	}  	else {  		i = Random.Next (1' 100);  		//Console.WriteLine(i);  		if (i <= Globals.PNO) {  			NewOrder (min);  			//45  			no++;  		}  		else if ((i > Globals.PNO) && (i <= (Globals.PNO + Globals.POS))) {  			OrderStatus ();  			//43  			os++;  		}  		else if ((i > (Globals.PNO + Globals.POS)) && (i <= (Globals.PNO + Globals.POS + Globals.PP))) {  			Payment ();  			//4  			p++;  		}  		else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) {  			Delivery ();  			//4  			d++;  		}  		else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) {  			StockLevel ();  			//4  			sl++;  		}  		min++;  	}  	if (sleep != 0) {  		Thread.Sleep (sleep);  	}  	currdate = DateTime.Now;  	cnt++;  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The following statement contains a magic number: if (Globals.RawWrite == 1) {  	RawWrites ();  }  else {  	i = Random.Next (1' 100);  	//Console.WriteLine(i);  	if (i <= Globals.PNO) {  		NewOrder (min);  		//45  		no++;  	}  	else if ((i > Globals.PNO) && (i <= (Globals.PNO + Globals.POS))) {  		OrderStatus ();  		//43  		os++;  	}  	else if ((i > (Globals.PNO + Globals.POS)) && (i <= (Globals.PNO + Globals.POS + Globals.PP))) {  		Payment ();  		//4  		p++;  	}  	else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) {  		Delivery ();  		//4  		d++;  	}  	else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) {  		StockLevel ();  		//4  		sl++;  	}  	min++;  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The following statement contains a magic number: i = Random.Next (1' 100);  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The following statement contains a magic number: while (cnt < Globals.NumLoops) {  	if (Globals.RawWrite == 1) {  		RawWrites ();  	}  	else {  		i = Random.Next (1' 100);  		//Console.WriteLine(i);  		if (i <= Globals.PNO) {  			NewOrder (min);  			//45  			no++;  		}  		else if ((i > Globals.PNO) && (i <= (Globals.PNO + Globals.POS))) {  			OrderStatus ();  			//43  			os++;  		}  		else if ((i > (Globals.PNO + Globals.POS)) && (i <= (Globals.PNO + Globals.POS + Globals.PP))) {  			Payment ();  			//4  			p++;  		}  		else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) {  			Delivery ();  			//4  			d++;  		}  		else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) {  			StockLevel ();  			//4  			sl++;  		}  		min++;  	}  	if (sleep != 0) {  		Thread.Sleep (sleep);  	}  	cnt++;  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The following statement contains a magic number: if (Globals.RawWrite == 1) {  	RawWrites ();  }  else {  	i = Random.Next (1' 100);  	//Console.WriteLine(i);  	if (i <= Globals.PNO) {  		NewOrder (min);  		//45  		no++;  	}  	else if ((i > Globals.PNO) && (i <= (Globals.PNO + Globals.POS))) {  		OrderStatus ();  		//43  		os++;  	}  	else if ((i > (Globals.PNO + Globals.POS)) && (i <= (Globals.PNO + Globals.POS + Globals.PP))) {  		Payment ();  		//4  		p++;  	}  	else if ((i > (Globals.PNO + Globals.POS + Globals.PP)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD))) {  		Delivery ();  		//4  		d++;  	}  	else if ((i > (Globals.PNO + Globals.POS + Globals.PP + Globals.PD)) && (i <= (Globals.PNO + Globals.POS + Globals.PP + Globals.PD + Globals.PSL))) {  		StockLevel ();  		//4  		sl++;  	}  	min++;  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The following statement contains a magic number: i = Random.Next (1' 100);  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,RandomString,The following statement contains a magic number: for (int x = 0; x < Random.Next (strMin' strMax); ++x) {  	randomString += randHold.Substring (Random.Next (0' 62)' 1);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,RandomString,The following statement contains a magic number: randomString += randHold.Substring (Random.Next (0' 62)' 1);  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,RawWrites,The following statement contains a magic number: try {  	objCommand = new SqlCommand (query' objConnect) {  		CommandTimeout = 3600  	};  	objCommand.ExecuteNonQuery ();  }  catch (Exception e) {  	Errhandle.StopProcessing (e' query);  }  
Magic Number,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,RawWrites,The following statement contains a magic number: objCommand = new SqlCommand (query' objConnect) {  	CommandTimeout = 3600  };  
Magic Number,TPC,TpcUtils,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\TpcUtils.cs,Heartbeat,The following statement contains a magic number: while (true) {  	string query = "insert into HEARTBEAT (ID) VALUES(" + i + ")";  	try {  		ClientDataAccess.RunProc (Globals.StrPublisherConn' query);  	}  	catch (Exception e) {  		Errhandle.StopProcessing (e' query);  	}  	i++;  	Thread.Sleep (1000);  }  
Magic Number,TPC,TpcUtils,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\TpcUtils.cs,Heartbeat,The following statement contains a magic number: Thread.Sleep (1000);  
Duplicate Code,TPC.C,Tpcc,C:\repos\SQLServerIO_TPCCBench\tpccbench\TPC\C\tpcc.cs,Client,The method contains a code clone-set at the following line numbers (starting from the method definition): ((17' 52)' (59' 94))
Missing Default,Amib.Threading.Internal,WorkItem,C:\repos\SQLServerIO_TPCCBench\tpccbench\STP\WorkItem.cs,Cancel,The following switch statement is missing a default case: switch (GetWorkItemState ()) {  case WorkItemState.Canceled:  	//Debug.WriteLine("Work item already canceled");  	return true;  case WorkItemState.Completed:  case WorkItemState.InProgress:  	//Debug.WriteLine("Work item cannot be canceled");  	return false;  case WorkItemState.InQueue:  	// Signal to the wait for completion that the work  	// item has been completed (canceled). There is no  	// reason to wait for it to get out of the queue  	SignalComplete (true);  	//Debug.WriteLine("Work item canceled");  	return true;  }  
