Implementation smell,Namespace,Class,File,Method,Description
Complex Method,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,SetAddressFields,Cyclomatic complexity of the method is 17
Complex Method,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,AddBodypart,Cyclomatic complexity of the method is 12
Complex Method,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseMIMEParts,Cyclomatic complexity of the method is 11
Complex Method,S22.Pop3,Pop3Client,C:\repos\smiley22_S22.Pop3\Pop3Client.cs,Login,Cyclomatic complexity of the method is 9
Long Parameter List,S22.Pop3,Pop3Client,C:\repos\smiley22_S22.Pop3\Pop3Client.cs,Pop3Client,The method has 7 parameters.
Long Parameter List,S22.Pop3,Pop3Client,C:\repos\smiley22_S22.Pop3\Pop3Client.cs,Connect,The method has 8 parameters.
Long Statement,S22.Pop3,ContentDispositionTypeMap,C:\repos\smiley22_S22.Pop3\ContentDisposition.cs,fromString,The length of the statement  "	Dictionary<string' ContentDispositionType> Map = new Dictionary<string' ContentDispositionType> (StringComparer.OrdinalIgnoreCase) { " is 132.
Long Statement,S22.Pop3,ContentTransferEncodingMap,C:\repos\smiley22_S22.Pop3\ContentTransferEncoding.cs,fromString,The length of the statement  "	Dictionary<string' ContentTransferEncoding> Map = new Dictionary<string' ContentTransferEncoding> (StringComparer.OrdinalIgnoreCase) { " is 134.
Long Statement,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseAddressList,The length of the statement  "		Match m = Regex.Match (a.Trim ()' @"(.*)\s*<?([A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2'4})>?"' RegexOptions.IgnoreCase | RegexOptions.RightToLeft); " is 141.
Long Statement,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,AddBodypart,The length of the statement  "	Encoding encoding = part.Parameters.ContainsKey ("Charset") ? Util.GetEncoding (part.Parameters ["Charset"]) : Encoding.ASCII; " is 126.
Long Statement,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,CreateAttachment,The length of the statement  "		attachment.ContentType = new System.Net.Mime.ContentType (part.Type.ToString ().ToLower () + "/" + part.Subtype.ToLower ()); " is 124.
Long Statement,S22.Pop3,Pop3Client,C:\repos\smiley22_S22.Pop3\Pop3Client.cs,Login,The length of the statement  "		/* retrieve server key */string key = Encoding.Default.GetString (Convert.FromBase64String (response.Replace ("+ "' ""))); " is 122.
Long Statement,S22.Pop3,Pop3Client,C:\repos\smiley22_S22.Pop3\Pop3Client.cs,GetMessage,The length of the statement  "	return options == FetchOptions.HeadersOnly ? MessageBuilder.FromHeader (builder.ToString ()) : MessageBuilder.FromMIME822 (builder.ToString ()); " is 144.
Empty Catch Block,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,FromHeader,The method has an empty catch block.
Empty Catch Block,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseAddressList,The method has an empty catch block.
Empty Catch Block,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,CreateAttachment,The method has an empty catch block.
Empty Catch Block,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,CreateAlternateView,The method has an empty catch block.
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseMIMEField,The following statement contains a magic number: try {  	MatchCollection matches = Regex.Matches (field' "([\\w\\-]+)\\s*=\\s*([^;]+)");  	foreach (Match m in matches)  		coll.Add (m.Groups [1].Value' m.Groups [2].Value.Trim ('"'));  	Match mvalue = Regex.Match (field' @"^\s*([^;]+)");  	coll.Add ("value"' mvalue.Success ? mvalue.Groups [1].Value.Trim () : "");  }  catch {  	// We don't want this to blow up on the user with weird mails so  	// just return an empty collection.  	coll.Add ("value"' String.Empty);  }  
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseMIMEField,The following statement contains a magic number: foreach (Match m in matches)  	coll.Add (m.Groups [1].Value' m.Groups [2].Value.Trim ('"'));  
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseMIMEField,The following statement contains a magic number: coll.Add (m.Groups [1].Value' m.Groups [2].Value.Trim ('"'));  
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseAddressList,The following statement contains a magic number: foreach (string a in addr) {  	Match m = Regex.Match (a.Trim ()' @"(.*)\s*<?([A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2'4})>?"' RegexOptions.IgnoreCase | RegexOptions.RightToLeft);  	if (m.Success) {  		// The above regex will erroneously match some illegal (very rare)  		// local-parts. RFC-compliant validation is not worth the effort  		// at all' so just wrap this in a try/catch block in case  		// MailAddress' ctor complains.  		try {  			mails.Add (new MailAddress (m.Groups [2].Value' m.Groups [1].Value));  		}  		catch {  		}  	}  }  
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseAddressList,The following statement contains a magic number: if (m.Success) {  	// The above regex will erroneously match some illegal (very rare)  	// local-parts. RFC-compliant validation is not worth the effort  	// at all' so just wrap this in a try/catch block in case  	// MailAddress' ctor complains.  	try {  		mails.Add (new MailAddress (m.Groups [2].Value' m.Groups [1].Value));  	}  	catch {  	}  }  
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseAddressList,The following statement contains a magic number: try {  	mails.Add (new MailAddress (m.Groups [2].Value' m.Groups [1].Value));  }  catch {  }  
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,ParseAddressList,The following statement contains a magic number: mails.Add (new MailAddress (m.Groups [2].Value' m.Groups [1].Value));  
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,BodypartFromMIME,The following statement contains a magic number: if (m.Success) {  	p.Type = ContentTypeMap.fromString (m.Groups [1].Value);  	p.Subtype = m.Groups [2].Value;  }  
Magic Number,S22.Pop3,MessageBuilder,C:\repos\smiley22_S22.Pop3\MessageBuilder.cs,BodypartFromMIME,The following statement contains a magic number: p.Subtype = m.Groups [2].Value;  
Magic Number,S22.Pop3,Pop3Client,C:\repos\smiley22_S22.Pop3\Pop3Client.cs,GetStatus,The following statement contains a magic number: lock (sequenceLock) {  	string response = SendCommandGetResponse ("LIST");  	if (!IsResponseOK (response))  		throw new BadServerResponseException (response);  	while ((response = GetResponse ()) != ".") {  		Match m = Regex.Match (response' @"(\d+)\s(\d+)");  		if (!m.Success)  			continue;  		uint number = Convert.ToUInt32 (m.Groups [1].Value);  		UInt64 size = Convert.ToUInt64 (m.Groups [2].Value);  		list.Add (new MessageInfo (number' size));  	}  }  
Magic Number,S22.Pop3,Pop3Client,C:\repos\smiley22_S22.Pop3\Pop3Client.cs,GetStatus,The following statement contains a magic number: while ((response = GetResponse ()) != ".") {  	Match m = Regex.Match (response' @"(\d+)\s(\d+)");  	if (!m.Success)  		continue;  	uint number = Convert.ToUInt32 (m.Groups [1].Value);  	UInt64 size = Convert.ToUInt64 (m.Groups [2].Value);  	list.Add (new MessageInfo (number' size));  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,IsASCII,The following statement contains a magic number: return s.ToCharArray ().All (c => c < 127);  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else if (value [i] == '_') {  				m.WriteByte (Convert.ToByte (' '));  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid Q-encoded " + "string");  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else if (value [i] == '_') {  				m.WriteByte (Convert.ToByte (' '));  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid Q-encoded " + "string");  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else if (value [i] == '_') {  				m.WriteByte (Convert.ToByte (' '));  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid Q-encoded " + "string");  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else if (value [i] == '_') {  			m.WriteByte (Convert.ToByte (' '));  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else if (value [i] == '_') {  			m.WriteByte (Convert.ToByte (' '));  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else if (value [i] == '_') {  			m.WriteByte (Convert.ToByte (' '));  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else if (value [i] == '_') {  		m.WriteByte (Convert.ToByte (' '));  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else if (value [i] == '_') {  		m.WriteByte (Convert.ToByte (' '));  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else if (value [i] == '_') {  		m.WriteByte (Convert.ToByte (' '));  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else if (value [i] == '_') {  	m.WriteByte (Convert.ToByte (' '));  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else if (value [i] == '_') {  	m.WriteByte (Convert.ToByte (' '));  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else if (value [i] == '_') {  	m.WriteByte (Convert.ToByte (' '));  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: m.WriteByte (Convert.ToByte (hex' 16));  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QDecode,The following statement contains a magic number: i = i + 2;  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid quoted-printable " + "encoded string");  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid quoted-printable " + "encoded string");  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid quoted-printable " + "encoded string");  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: m.WriteByte (Convert.ToByte (hex' 16));  
Magic Number,S22.Pop3,Util,C:\repos\smiley22_S22.Pop3\Util.cs,QPDecode,The following statement contains a magic number: i = i + 2;  
Missing Default,S22.Pop3,Pop3Client,C:\repos\smiley22_S22.Pop3\Pop3Client.cs,Login,The following switch statement is missing a default case: switch (method) {  case AuthMethod.Login:  	lock (sequenceLock) {  		response = SendCommandGetResponse ("USER " + username);  		if (!IsResponseOK (response))  			throw new BadServerResponseException (response);  		response = SendCommandGetResponse ("PASS " + password);  		if (!IsResponseOK (response))  			throw new InvalidCredentialsException (response);  	}  	break;  case AuthMethod.CRAMMD5:  	response = SendCommandGetResponse ("AUTHENTICATE CRAM-MD5");  	/* retrieve server key */string key = Encoding.Default.GetString (Convert.FromBase64String (response.Replace ("+ "' "")));  	/* compute the hash *//*					using (var kMd5 = new HMACMD5(Encoding.ASCII.GetBytes(password))) { 						byte[] hash1 = kMd5.ComputeHash(Encoding.ASCII.GetBytes(key)); 						key = BitConverter.ToString(hash1).ToLower().Replace("-"' ""); 						string command = Convert.ToBase64String( 							Encoding.ASCII.GetBytes(username + " " + key)); 						response = SendCommandGetResponse(command); 					}  */break;  case AuthMethod.SaslOAuth:  	//					response = SendCommandGetResponse(tag + "AUTHENTICATE XOAUTH " + password);  	break;  }  
