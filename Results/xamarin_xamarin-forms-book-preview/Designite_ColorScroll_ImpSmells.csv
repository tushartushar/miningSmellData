Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,ColorScrollPage,The following statement contains a magic number: foreach (ColorMode colorMode in Enum.GetValues(typeof(ColorMode)))              {                  // Define a Label to be used as a radio button.                  Label radioLabel = new Label                  {                      Text = modeLabels[(int)colorMode]'                      StyleId = colorMode.ToString()'                      XAlign = TextAlignment.Center'                      Opacity = 0.5                  };                  radioLabel.AddRadioToggler(OnRadioLabelToggled);                    // Set default item.                  radioLabel.SetRadioState(colorMode == ColorMode.RgbHex);                    // Add it to the Grid.                  radioGrid.Children.AddHorizontal(radioLabel);                    // Set the column width to "star" to equally space them.                  radioGrid.ColumnDefinitions.Add(new ColumnDefinition                  {                      Width = new GridLength(1' GridUnitType.Star)                  });              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,ColorScrollPage,The following statement contains a magic number: for (int component = 0; component < 3; component++)              {                  labels[component] = new Label                  {                      XAlign = TextAlignment.Center                  };                  controllersStack.Children.Add(labels[component]);                    // Set same ValueChanged handler for all sliders.                  sliders[component] = new Slider();                  sliders[component].ValueChanged += OnSliderValueChanged;                  controllersStack.Children.Add(sliders[component]);              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,ColorScrollPage,The following statement contains a magic number: this.Padding = new Thickness(0' Device.OnPlatform(20' 0' 0)' 0' 0);
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,OnRadioLabelToggled,The following statement contains a magic number: view.Opacity = view.GetRadioState() ? 1.0 : 0.5;
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following statement contains a magic number: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliderMax = 255;                      format = rgbHexFormat;                      valueConverter = new DoubleToIntegerConverter();                      break;                    case ColorMode.RgbFloat:                      format = rgbFloatFormat;                      break;                    case ColorMode.Hsl:                      format = hslFormat;                      break;              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  sliders[i].Maximum = sliderMax;                  labels[i].BindingContext = sliders[i];                  labels[i].SetBinding(Label.TextProperty'                      new Binding("Value"' BindingMode.OneWay' valueConverter' null' format[i]));              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following statement contains a magic number: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliders[0].Value = 255 * currentColor.R;                      sliders[1].Value = 255 * currentColor.G;                      sliders[2].Value = 255 * currentColor.B;                      break;                    case ColorMode.RgbFloat:                      sliders[0].Value = currentColor.R;                      sliders[1].Value = currentColor.G;                      sliders[2].Value = currentColor.B;                      break;                    case ColorMode.Hsl:                      sliders[0].Value = currentColor.Hue;                      sliders[1].Value = currentColor.Saturation;                      sliders[2].Value = currentColor.Luminosity;                      break;              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following statement contains a magic number: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliders[0].Value = 255 * currentColor.R;                      sliders[1].Value = 255 * currentColor.G;                      sliders[2].Value = 255 * currentColor.B;                      break;                    case ColorMode.RgbFloat:                      sliders[0].Value = currentColor.R;                      sliders[1].Value = currentColor.G;                      sliders[2].Value = currentColor.B;                      break;                    case ColorMode.Hsl:                      sliders[0].Value = currentColor.Hue;                      sliders[1].Value = currentColor.Saturation;                      sliders[2].Value = currentColor.Luminosity;                      break;              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following statement contains a magic number: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliders[0].Value = 255 * currentColor.R;                      sliders[1].Value = 255 * currentColor.G;                      sliders[2].Value = 255 * currentColor.B;                      break;                    case ColorMode.RgbFloat:                      sliders[0].Value = currentColor.R;                      sliders[1].Value = currentColor.G;                      sliders[2].Value = currentColor.B;                      break;                    case ColorMode.Hsl:                      sliders[0].Value = currentColor.Hue;                      sliders[1].Value = currentColor.Saturation;                      sliders[2].Value = currentColor.Luminosity;                      break;              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following statement contains a magic number: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliders[0].Value = 255 * currentColor.R;                      sliders[1].Value = 255 * currentColor.G;                      sliders[2].Value = 255 * currentColor.B;                      break;                    case ColorMode.RgbFloat:                      sliders[0].Value = currentColor.R;                      sliders[1].Value = currentColor.G;                      sliders[2].Value = currentColor.B;                      break;                    case ColorMode.Hsl:                      sliders[0].Value = currentColor.Hue;                      sliders[1].Value = currentColor.Saturation;                      sliders[2].Value = currentColor.Luminosity;                      break;              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following statement contains a magic number: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliders[0].Value = 255 * currentColor.R;                      sliders[1].Value = 255 * currentColor.G;                      sliders[2].Value = 255 * currentColor.B;                      break;                    case ColorMode.RgbFloat:                      sliders[0].Value = currentColor.R;                      sliders[1].Value = currentColor.G;                      sliders[2].Value = currentColor.B;                      break;                    case ColorMode.Hsl:                      sliders[0].Value = currentColor.Hue;                      sliders[1].Value = currentColor.Saturation;                      sliders[2].Value = currentColor.Luminosity;                      break;              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following statement contains a magic number: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliders[0].Value = 255 * currentColor.R;                      sliders[1].Value = 255 * currentColor.G;                      sliders[2].Value = 255 * currentColor.B;                      break;                    case ColorMode.RgbFloat:                      sliders[0].Value = currentColor.R;                      sliders[1].Value = currentColor.G;                      sliders[2].Value = currentColor.B;                      break;                    case ColorMode.Hsl:                      sliders[0].Value = currentColor.Hue;                      sliders[1].Value = currentColor.Saturation;                      sliders[2].Value = currentColor.Luminosity;                      break;              }
Magic Number,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetColorFromSliders,The following statement contains a magic number: double d2 = sliders[2].Value;
Missing Default,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following switch statement is missing a default case: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliderMax = 255;                      format = rgbHexFormat;                      valueConverter = new DoubleToIntegerConverter();                      break;                    case ColorMode.RgbFloat:                      format = rgbFloatFormat;                      break;                    case ColorMode.Hsl:                      format = hslFormat;                      break;              }
Missing Default,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetSlidersAndBindings,The following switch statement is missing a default case: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      sliders[0].Value = 255 * currentColor.R;                      sliders[1].Value = 255 * currentColor.G;                      sliders[2].Value = 255 * currentColor.B;                      break;                    case ColorMode.RgbFloat:                      sliders[0].Value = currentColor.R;                      sliders[1].Value = currentColor.G;                      sliders[2].Value = currentColor.B;                      break;                    case ColorMode.Hsl:                      sliders[0].Value = currentColor.Hue;                      sliders[1].Value = currentColor.Saturation;                      sliders[2].Value = currentColor.Luminosity;                      break;              }
Missing Default,ColorScroll,ColorScrollPage,C:\repos\xamarin_xamarin-forms-book-preview\Chapter06\ColorScroll\ColorScroll\ColorScroll\ColorScrollPage.cs,SetColorFromSliders,The following switch statement is missing a default case: switch (currentColorMode)              {                  case ColorMode.RgbHex:                      currentColor = Color.FromRgb((int)d0' (int)d1' (int)d2);                      break;                    case ColorMode.RgbFloat:                      currentColor = Color.FromRgb(d0' d1' d2);                      break;                    case ColorMode.Hsl:                      currentColor = Color.FromHsla(d0' d1' d2);                      break;              }
