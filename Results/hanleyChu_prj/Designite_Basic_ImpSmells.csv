Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Hoe.Basic.Controller,BillsController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\BillsController.cs,DatabaseBillPersist,Cyclomatic complexity of the method is 9
Complex Method,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,AddCurrentProductToBill,Cyclomatic complexity of the method is 10
Complex Method,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,DatabaseProductPersist,Cyclomatic complexity of the method is 9
Complex Method,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,DatabaseSemiProductPersist,Cyclomatic complexity of the method is 9
Long Parameter List,Hoe.Basic.AppLogic,SaleTask,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\AppLogic\SaleTask.cs,PreAddCurrentProductToCurrentBill,The method has 5 parameters.
Long Parameter List,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,GetSemiProductStatusString,The method has 5 parameters.
Long Statement,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,AddCurrentSemiProductToProduct,The length of the statement  "		(Task as SaleTask).TriggerRepoProductsChanged (null' new ProductChangeEventArg (theProduct' ModelChangeEventArg.UPDATE)); " is 121.
Long Statement,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,AddCurrentSemiProductToProduct,The length of the statement  "		(Task as SaleTask).TriggerRepoProductsChanged (null' new ProductChangeEventArg (theProduct' ModelChangeEventArg.INSERT)); " is 121.
Long Statement,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,WithdrawProductsToSemiProducts,The length of the statement  "	where s.WarehousingDate.Date == warehousingDate.Date && s.Norm.Equals (p.Norm) && s.Name.Equals (p.Name) && s.Material.Equals (p.Material) " is 138.
Long Statement,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,GetSemiProductStatusString,The length of the statement  "	where s.WarehousingDate.Date >= fr.Date && s.WarehousingDate.Date <= to.Date && s.Norm.Equals (p.Norm) && s.Name.Equals (p.Name) && s.Material.Equals (p.Material) " is 162.
Long Statement,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,GetRelatedSemiProducts,The length of the statement  "	where s.Norm.Equals (p.Norm) && s.Name.Equals (p.Name) && s.Material.Equals (p.Material) && s.InitialQuantity > s.Quantity " is 122.
Long Statement,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,DeleteSemiProduct,The length of the statement  "	(Task as SaleTask).TriggerRepoSemiProductsChanged (null' new SemiProductChangeEventArg (semiproduct' ModelChangeEventArg.REMOVE)); " is 130.
Long Statement,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,UpdateSemiProduct,The length of the statement  "	(Task as SaleTask).TriggerRepoSemiProductsChanged (null' new SemiProductChangeEventArg (semiproduct' ModelChangeEventArg.UPDATE)); " is 130.
Long Statement,Hoe.Basic.DAO,BillDao,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\DAO\BillDao.cs,FindByPhone,The length of the statement  "	MongoCursor mc = DatabaseHelper.BillCollection.FindAs<Bill> (Query.And (Query.EQ ("Phone"' phone)' Query.EQ ("Completed"' completed))); " is 135.
Long Statement,Hoe.Basic.Model,SemiProduct,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Model\SemiProduct.cs,Set,The length of the statement  "	if (this.Name.Equals (p.Name) && this.Material.Equals (p.Material) && this.Norm.Equals (p.Norm) && this.WarehousingDate.Date.Equals (p.WarehousingDate.Date)) { " is 159.
Long Statement,Hoe.Basic.Model,SemiProduct,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Model\SemiProduct.cs,Equals,The length of the statement  "	if (this.Name.Equals (p.Name) && this.Material.Equals (p.Material) && this.Norm.Equals (p.Norm) && this.WarehousingDate.Date.Equals (p.WarehousingDate.Date)) " is 157.
Complex Conditional,Hoe.Basic.Model,SemiProduct,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Model\SemiProduct.cs,Set,The conditional expression  "this.Name.Equals (p.Name) && this.Material.Equals (p.Material) && this.Norm.Equals (p.Norm) && this.WarehousingDate.Date.Equals (p.WarehousingDate.Date)"  is complex.
Complex Conditional,Hoe.Basic.Model,SemiProduct,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Model\SemiProduct.cs,Equals,The conditional expression  "this.Name.Equals (p.Name) && this.Material.Equals (p.Material) && this.Norm.Equals (p.Norm) && this.WarehousingDate.Date.Equals (p.WarehousingDate.Date)"  is complex.
Missing Default,Hoe.Basic.Controller,BillsController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\BillsController.cs,DatabaseBillPersist,The following switch statement is missing a default case: switch (changingType) {  case ModelChangeEventArg.INSERT:  	BillDao.Insert (bill);  	break;  case ModelChangeEventArg.UPDATE:  	BillDao.Update (bill);  	break;  case ModelChangeEventArg.REMOVE:  	BillDao.Delete (bill);  	break;  }  
Missing Default,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,DatabaseProductPersist,The following switch statement is missing a default case: switch (changingType) {  case ModelChangeEventArg.INSERT:  	ProductDao.Insert (product);  	break;  case ModelChangeEventArg.UPDATE:  	ProductDao.Update (product);  	break;  case ModelChangeEventArg.REMOVE:  	ProductDao.Delete (product);  	break;  }  
Missing Default,Hoe.Basic.Controller,RepoController,C:\repos\hanleyChu_prj\hoe\prj\Examples\Hoe\Controller\RepoController.cs,DatabaseSemiProductPersist,The following switch statement is missing a default case: switch (changingType) {  case ModelChangeEventArg.INSERT:  	SemiProductDao.Insert (semiproduct);  	break;  case ModelChangeEventArg.UPDATE:  	SemiProductDao.Update (semiproduct);  	break;  case ModelChangeEventArg.REMOVE:  	SemiProductDao.Delete (semiproduct);  	break;  }  
