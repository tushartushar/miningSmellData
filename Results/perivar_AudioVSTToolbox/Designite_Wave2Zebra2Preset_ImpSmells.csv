Implementation smell,Namespace,Class,File,Method,Description
Long Method,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The method has 120 lines of code.
Long Method,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The method has 105 lines of code.
Long Method,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The method has 357 lines of code.
Long Method,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The method has 154 lines of code.
Complex Method,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,Cyclomatic complexity of the method is 8
Complex Method,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram1,Cyclomatic complexity of the method is 9
Complex Method,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,Cyclomatic complexity of the method is 9
Complex Method,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram3,Cyclomatic complexity of the method is 9
Complex Method,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,Cyclomatic complexity of the method is 12
Complex Method,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,Cyclomatic complexity of the method is 10
Complex Method,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,Cyclomatic complexity of the method is 11
Complex Method,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,MenuItem_Clicked,Cyclomatic complexity of the method is 12
Complex Method,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,Cyclomatic complexity of the method is 10
Complex Method,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,Cyclomatic complexity of the method is 10
Complex Method,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,ProcessTracks,Cyclomatic complexity of the method is 8
Complex Method,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,FindDuplicates,Cyclomatic complexity of the method is 11
Complex Method,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,calculatePeaks,Cyclomatic complexity of the method is 11
Complex Method,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,Cyclomatic complexity of the method is 16
Complex Method,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,Cyclomatic complexity of the method is 8
Complex Method,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,CalFFT,Cyclomatic complexity of the method is 8
Long Parameter List,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,Line,The method has 5 parameters. Parameters: g' x1' y1' x2' y2
Long Parameter List,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The method has 11 parameters. Parameters: axis' maxTics' ticLength' lowVal' highVal' screenStart' screenEnd' screenOffset' logScale' screenHeight' g
Long Parameter List,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,plotValue,The method has 7 parameters. Parameters: val' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight
Long Parameter List,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The method has 6 parameters. Parameters: prefix' filename' data' sampleRate' numberOfSamples' fftWindowsSize
Long Parameter List,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,MagnitudeSpectrum,The method has 5 parameters. Parameters: real' imag' arraysize' W0' magnitude
Long Parameter List,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The method has 5 parameters. Parameters: prefix' filename' Pixelmatrix' BitsPerPixel' PaletteDictionary
Long Parameter List,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The method has 6 parameters. Parameters: array' N' M' fStart' fStop' fSam
Long Parameter List,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,ProcessTracks,The method has 11 parameters. Parameters: files' audioProxy' queryStride' creationalStride' mintracklen' maxtracklen' milliSecondsToProcess' startMillisecond' hashTables' hashKeys' trackProcessed
Long Parameter List,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The method has 5 parameters. Parameters: proxy' filename' milliseconds' startmilliseconds' doNormalise
Long Parameter List,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateFingerprints,The method has 5 parameters. Parameters: proxy' filename' stride' milliseconds' startmilliseconds
Long Parameter List,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,GenerateLogFrequencies,The method has 6 parameters. Parameters: sampleRate' minFreq' maxFreq' logBins' fftWindowsSize' logarithmicBase
Long Parameter List,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,GetLogFrequenciesIndex,The method has 6 parameters. Parameters: sampleRate' minFreq' maxFreq' logBins' fftWindowsSize' logBase
Long Parameter List,Wave2Zebra2Preset.HermitGauges,Gauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Gauge.cs,findTextSize,The method has 5 parameters. Parameters: graphics' w' h' template' pen
Long Parameter List,Wave2Zebra2Preset.HermitGauges,WaveformGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\WaveformGauge.cs,Update,The method has 5 parameters. Parameters: buffer' off' len' bias' range
Long Parameter List,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The method has 6 parameters. Parameters: pitchShift' numSampsToProcess' fftFrameSize' osamp' sampleRate' indata
Long Parameter List,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The method has 7 parameters. Parameters: sampleRate' windowSize' numberCoefficients' useFirstCoefficient' minFreq' maxFreq' numberFilters
Long Parameter List,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,Initialize,The method has 7 parameters. Parameters: sampleRate' windowSize' numberCoefficients' useFirstCoefficient' minFreq' maxFreq' numberFilters
Long Parameter List,VIPSLib.Maths,Matrix,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Matrix.cs,SetMatrix,The method has 5 parameters. Parameters: i0' i1' j0' j1' X
Long Identifier,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,,The length of the parameter colorBackgroundHighlightedSection is 33.
Long Statement,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,DrawVerticalLines,The length of the statement  "			n = Convert.ToInt32(Math.Log(XRangeEnd' XLogBase) - Math.Log(XRangeStart' XLogBase)); //get the x width converted to log10 " is 122.
Long Statement,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,DrawData,The length of the statement  "					pts[i].X = Convert.ToInt32(x0 + (Math.Log(xdata[i]' XLogBase) - Math.Log(XRangeStart' XLogBase)) / (Math.Log(XRangeEnd' XLogBase) - Math.Log(XRangeStart' XLogBase)) * w0); " is 171.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The length of the statement  "				// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be: " is 121.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The length of the statement  "								if (max > 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMax * h2 * amplitude)' position' (int)(h2 - max * h2 * amplitude)); " is 128.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The length of the statement  "								if (min < 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMin * h2 * amplitude)' position' (int)(h2 - min * h2 * amplitude)); " is 128.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The length of the statement  "							g.DrawLine(wavePen' position++' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - data[i+resolution] * h2 * amplitude)); " is 130.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram1,The length of the statement  "			String filenameToSave = String.Format("C:\\{0}-{1}x{2}-{3}.png"' prefix' width' height' System.IO.Path.GetFileNameWithoutExtension(filename)); " is 142.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram1,The length of the statement  "			// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be: " is 121.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The length of the statement  "			String filenameToSave = String.Format("C:\\{0}-{1}x{2}-{3}.png"' prefix' width' height' System.IO.Path.GetFileNameWithoutExtension(filename)); " is 142.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The length of the statement  "			Axis.drawAxis(Axis.X_AXIS' 10' 10' 0' (float)MathUtils.ConvertToTime(sampleRate' numberOfSamples)' 50' width-50' 50' false' height' g); " is 135.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The length of the statement  "						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good) " is 153.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram3,The length of the statement  "			String filenameToSave = String.Format("C:\\{0}-{1}x{2}-{3}.png"' prefix' width' height' System.IO.Path.GetFileNameWithoutExtension(filename)); " is 142.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram3,The length of the statement  "			// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be: " is 121.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram4,The length of the statement  "			String filenameToSave = String.Format("C:\\{0}-{1}x{2}-{3}.png"' prefix' width' height' System.IO.Path.GetFileNameWithoutExtension(filename)); " is 142.
Long Statement,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram4,The length of the statement  "			// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be: " is 121.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			List<Color> photosounder_hsb_gradients = ColorUtils.GetHSBColorGradients(256' ColorUtils.ColorPaletteType.PHOTOSOUNDER); " is 120.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			List<Color> photosounder_hsl_gradients = ColorUtils.GetHSLColorGradients(256' ColorUtils.ColorPaletteType.PHOTOSOUNDER); " is 120.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			List<Color> photosounder_rgb_gradients = ColorUtils.GetRGBColorGradients(255' ColorUtils.ColorPaletteType.PHOTOSOUNDER); " is 120.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			int fftWindowsSize = 16384; //32768 16384 8192 4096 2048' default 256*8 (2048) to 256*128 (32768)' reccomended: 256*64 = 16384 " is 126.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			//System.Console.Out.WriteLine(String.Format("EXO: fftWindowsSize: {0}' Overlap samples: {1:n2}."' fftWindowsSize' fftOverlap )); " is 129.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			Bitmap spectro = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.PHOTOSOUNDER' true); " is 163.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			Bitmap spectro2 = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.REW' true); " is 155.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			Bitmap spectro3 = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.SOX' true); " is 155.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The length of the statement  "			//Bitmap logspectro = AudioAnalyzer.GetSpectrogramImage(logSpectrogram' 1200' 600' secondsToSample*1000' sampleRate' ColorUtils.ColorPaletteType.REW); " is 150.
Long Statement,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetTimeString,The length of the statement  "			DateTime date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' h % 100' m % 60' s % 60' msecs % 1000); " is 125.
Long Statement,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,MagnitudeSpectrum,The length of the statement  "            	magnitude[i] = (float)((Math.Sqrt(SquareSum(real[i]' imag[i]) + SquareSum(real[arraysize - i]' imag[arraysize - i]))) / W0); " is 124.
Long Statement,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The length of the statement  "			Console.Out.WriteLine(String.Format("Samples: {0}' Sample Rate {1}' Seconds: {2}."' NumSamples' sampleRate' NumSamples/sampleRate)); " is 132.
Long Statement,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The length of the statement  "			Console.Out.WriteLine(String.Format("NFFT (fftWindowsSize): {0}' Overlap percentage: {1}%' Overlap samples (NOverlap): {2:n2}."' fftWindowsSize' fftOverlapPercentage*100' fftOverlapSamples )); " is 192.
Long Statement,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The length of the statement  "			SaveBitmap ("VB6"' String.Format("VB-spectrogram-{0}x{1}"' NumCols' fftWindowsSize / 2)' Pixelmatrix' 8' LevelPaletteDictionary); " is 129.
Long Statement,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,GetTrack,The length of the statement  "				System.Diagnostics.Debug.WriteLine(String.Format("File {0} failed the duration validation. Duration: {1} [Min: {2}' Max: {3}]"' filename' duration' mintracklen' maxtracklen) ); " is 176.
Long Statement,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,GetSignatures,The length of the statement  "				Dictionary<int' long> buckets = _hasher.GroupMinHashToLSHBuckets(signature' hashTables' hashKeys); /*Group Min-Hash signature into LSH buckets*/ " is 144.
Long Statement,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,FindDuplicates,The length of the statement  "				HashSet<HashSignature> fingerprints = _storage.GetHashSignatures(track' HashType.Query); /*get all existing signatures for a specific track*/ " is 141.
Long Statement,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,FindDuplicates,The length of the statement  "					Dictionary<Track' int> results = _storage.GetTracks(fingerprint.Signature' threshold); /*get all duplicate track including the original track*/ " is 143.
Long Statement,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The length of the statement  "					//complexSignal[2*j] = (float) ((4.0/(fftWindowsSize - 1)) * windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/ " is 126.
Long Statement,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,GenerateLogFrequencies,The length of the statement  "					int index = FreqToIndex(freq' sampleRate' fftWindowsSize); /*Find the start index in array from which to start the summation*/ " is 126.
Long Statement,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,SetInput,The length of the statement  "				throw new System.ArgumentException("bad input count in FFT:" + " constructed for " + blockSize + "; given " + input.Length); " is 124.
Long Statement,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,SetInput,The length of the statement  "				throw new System.ArgumentException("bad input count in FFT:" + " constructed for " + blockSize + "; given " + input.Length); " is 124.
Long Statement,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The length of the statement  "				throw new System.ArgumentException("bad output buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + buffer.Length); " is 130.
Long Statement,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The length of the statement  "				throw new System.ArgumentException("bad history buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + average.Length); " is 132.
Long Statement,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The length of the statement  "				throw new System.ArgumentException("bad average buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + histories.Length); " is 134.
Long Statement,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,loadInstruments,The length of the statement  "			if ((i==InstrumentPanel.Instruments.SPECTRUM)||(i==InstrumentPanel.Instruments.SPECTRUM_SONAGRAM)||(i==InstrumentPanel.Instruments.SPECTRUM_P_W)) " is 145.
Long Statement,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,loadInstruments,The length of the statement  "			if ((i==InstrumentPanel.Instruments.SONAGRAM)||(i==InstrumentPanel.Instruments.SPECTRUM_SONAGRAM)||(i==InstrumentPanel.Instruments.SONAGRAM_P_W)) " is 145.
Long Statement,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,transform,The length of the statement  "				throw new System.ArgumentException("bad input count in Window:" + " constructed for " + blockSize + "; given " + input.Length); " is 127.
Long Statement,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,Initialize,The length of the statement  "				throw new Exception("the min. frequency must be greater 0 smaller than the max. frequency' which must be smaller than 88200.0");; " is 129.
Complex Conditional,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,plotValue,The conditional expression  "logScale && (lowVal == 0 || highVal == 0 || val == 0)"  is complex.
Complex Conditional,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The conditional expression  "x1 > 0 && x1 < width && y1 > 0 && y1 < height"  is complex.
Virtual Method Call from Constructor,Wave2Zebra2Preset.HermitGauges,Gauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Gauge.cs,Gauge,The constructor "Gauge" calls a virtual method "initializePen".
Virtual Method Call from Constructor,Wave2Zebra2Preset.HermitGauges,Gauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Gauge.cs,Gauge,The constructor "Gauge" calls a virtual method "initializePen".
Virtual Method Call from Constructor,Wave2Zebra2Preset.HermitGauges,TextGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\TextGauge.cs,TextGauge,The constructor "TextGauge" calls a virtual method "setTextFields".
Empty Catch Block,Wave2Zebra2Preset,Helper,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Helper.cs,GetMusicFiles,The method has an empty catch block.
Empty Catch Block,Wave2Zebra2Preset,Helper,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Helper.cs,GetMusicFiles,The method has an empty catch block.
Empty Catch Block,Wave2Zebra2Preset,Helper,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Helper.cs,GetMusicFiles,The method has an empty catch block.
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,DetermineColor,The following statement contains a magic number: if (colorSpectrogram) {  				Color c = ColorUtils.HsbToRgb((255 - f) / 360.0f' 1.0f'  				                   (float) (brightness + (1.0 - brightness) * f / 255.0));    				if (selected) {  					int f1 = (c.R * c1_r + (255 - c.R) * c2_r) / 255;  					int f2 = (c.G * c1_g + (255 - c.G) * c2_g) / 255;  					int f3 = (c.B * c1_b + (255 - c.B) * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return c;  			} else {  				f *= (int)((1 - brightness) * 2);  				if (f > 255) {  					f = 255;  				}    				if (selected) {  					int f1 = ((255 - f) * c1_r + f * c2_r) / 255;  					int f2 = ((255 - f) * c1_g + f * c2_g) / 255;  					int f3 = ((255 - f) * c1_b + f * c2_b) / 255;  					return Color.FromArgb(f1' f2' f3);  				}  				return Color.FromArgb(255 - f' 255 - f' 255 - f);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				for (int selected = 0; selected <= 1; selected++)  					for (int grayscale = 0; grayscale <= 1; grayscale++)  				{  					float r;  					float g;  					float b;  					  					int i;  					for (i = 0; i<gradientSteps; i++)  					{  						float value = (float)i/gradientSteps;  						  						if (grayscale != 0)  						{  							r = g = b = 0.84f - 0.84f * value;  						}  						else  						{  							int gsteps = 4;  							float['] gradient = {  								{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  								{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  								{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  								{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  								{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  							  							int left = (int) value * gsteps;  							int right = (left == gsteps && left != 0 ? gsteps : left + 1);  							  							float rweight = (value * gsteps) - left;  							float lweight = 1.0f - rweight;  							  							r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  							g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  							b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);  						}  						  						if (selected != 0)  						{  							r *= 0.77f;  							g *= 0.77f;  							b *= 0.885f;  						}  						gradient_pre[selected' grayscale' i' 0] = (byte)(255 * r);  						gradient_pre[selected' grayscale' i' 1] = (byte)(255 * g);  						gradient_pre[selected' grayscale' i' 2] = (byte)(255 * b);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,PreComputeGradient2,The following statement contains a magic number: if (!gradient_inited)  			{  				gradient_inited = true;  				  				float r;  				float g;  				float b;  				  				int i;  				for (i = 0; i < gradientSteps; i++)  				{  					float value = (float)i/gradientSteps;  					  					int gsteps = 4;  					float['] gradient = {  						{(float)(0.75)' (float)(0.75)' (float)(0.75)}'  						{(float)(0.30)' (float)(0.60)' (float)(1.00)}'  						{(float)(0.90)' (float)(0.10)' (float)(0.90)}'  						{(float)(1.00)' (float)(0.00)' (float)(0.00)}'  						{(float)(1.00)' (float)(1.00)' (float)(1.00)} };  					  					int left = (int) value * gsteps;  					int right = (left == gsteps && left != 0 ? gsteps : left + 1);  					  					float rweight = (value * gsteps) - left;  					float lweight = 1.0f - rweight;  					  					r = (gradient[left' 0] * lweight) + (gradient[right' 0] * rweight);  					g = (gradient[left' 1] * lweight) + (gradient[right' 1] * rweight);  					b = (gradient[left' 2] * lweight) + (gradient[right' 2] * rweight);    					if (r < 0 || r > 1) r = 1;  					if (g < 0 || g > 1) g = 1;  					if (b < 0 || b > 1) b = 1;  					  					byte red = (byte)(255 * r);  					byte green = (byte)(255 * g);  					byte blue = (byte)(255 * b);  					  					Color c = Color.FromArgb(red' green' blue);  					gradient_preloaded.Add(i' c);  					//System.Diagnostics.Debug.WriteLine(String.Format("Save Color: {0}={1}"' i' c));  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSL2RGB,The following statement contains a magic number: v = (l <= 0.5) ? (l * (1.0 + sl)) : (l + sl - l * sl);
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)  			{  				double m;  				double sv;  				int sextant;  				double fract' vsf' mid1' mid2;    				m = l + l - v;  				sv = (v - m ) / v;  				h *= 6.0;  				  				sextant = (int)h;  				fract = h - sextant;    				vsf = v * sv * fract;  				mid1 = m + vsf;  				mid2 = v - vsf;    				switch (sextant)  				{  					case 0:  						r = v;  						g = mid1;  						b = m;  						break;  					case 1:  						r = mid2;  						g = v;  						b = m;  						break;  					case 2:  						r = m;  						g = v;  						b = mid1;  						break;  					case 3:  						r = m;  						g = mid2;  						b = v;  						break;  					case 4:  						r = mid1;  						g = m;  						b = v;  						break;  					case 5:  						r = v;  						g = m;  						b = mid2;  						break;  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)  			{  				double m;  				double sv;  				int sextant;  				double fract' vsf' mid1' mid2;    				m = l + l - v;  				sv = (v - m ) / v;  				h *= 6.0;  				  				sextant = (int)h;  				fract = h - sextant;    				vsf = v * sv * fract;  				mid1 = m + vsf;  				mid2 = v - vsf;    				switch (sextant)  				{  					case 0:  						r = v;  						g = mid1;  						b = m;  						break;  					case 1:  						r = mid2;  						g = v;  						b = m;  						break;  					case 2:  						r = m;  						g = v;  						b = mid1;  						break;  					case 3:  						r = m;  						g = mid2;  						b = v;  						break;  					case 4:  						r = mid1;  						g = m;  						b = v;  						break;  					case 5:  						r = v;  						g = m;  						b = mid2;  						break;  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)  			{  				double m;  				double sv;  				int sextant;  				double fract' vsf' mid1' mid2;    				m = l + l - v;  				sv = (v - m ) / v;  				h *= 6.0;  				  				sextant = (int)h;  				fract = h - sextant;    				vsf = v * sv * fract;  				mid1 = m + vsf;  				mid2 = v - vsf;    				switch (sextant)  				{  					case 0:  						r = v;  						g = mid1;  						b = m;  						break;  					case 1:  						r = mid2;  						g = v;  						b = m;  						break;  					case 2:  						r = m;  						g = v;  						b = mid1;  						break;  					case 3:  						r = m;  						g = mid2;  						b = v;  						break;  					case 4:  						r = mid1;  						g = m;  						b = v;  						break;  					case 5:  						r = v;  						g = m;  						b = mid2;  						break;  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)  			{  				double m;  				double sv;  				int sextant;  				double fract' vsf' mid1' mid2;    				m = l + l - v;  				sv = (v - m ) / v;  				h *= 6.0;  				  				sextant = (int)h;  				fract = h - sextant;    				vsf = v * sv * fract;  				mid1 = m + vsf;  				mid2 = v - vsf;    				switch (sextant)  				{  					case 0:  						r = v;  						g = mid1;  						b = m;  						break;  					case 1:  						r = mid2;  						g = v;  						b = m;  						break;  					case 2:  						r = m;  						g = v;  						b = mid1;  						break;  					case 3:  						r = m;  						g = mid2;  						b = v;  						break;  					case 4:  						r = mid1;  						g = m;  						b = v;  						break;  					case 5:  						r = v;  						g = m;  						b = mid2;  						break;  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)  			{  				double m;  				double sv;  				int sextant;  				double fract' vsf' mid1' mid2;    				m = l + l - v;  				sv = (v - m ) / v;  				h *= 6.0;  				  				sextant = (int)h;  				fract = h - sextant;    				vsf = v * sv * fract;  				mid1 = m + vsf;  				mid2 = v - vsf;    				switch (sextant)  				{  					case 0:  						r = v;  						g = mid1;  						b = m;  						break;  					case 1:  						r = mid2;  						g = v;  						b = m;  						break;  					case 2:  						r = m;  						g = v;  						b = mid1;  						break;  					case 3:  						r = m;  						g = mid2;  						b = v;  						break;  					case 4:  						r = mid1;  						g = m;  						b = v;  						break;  					case 5:  						r = v;  						g = m;  						b = mid2;  						break;  				}  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: double r = rgb.R/255.0;
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: double g = rgb.G/255.0;
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: double b = rgb.B/255.0;
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: l = (m + v) / 2.0;
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: if (s > 0.0)  			{  				s /= (l <= 0.5) ? (v + m ) : (2.0 - v - m) ;  			}  			else  			{  				return;  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: if (s > 0.0)  			{  				s /= (l <= 0.5) ? (v + m ) : (2.0 - v - m) ;  			}  			else  			{  				return;  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: if (r == v)  			{  				h = (g == m ? 5.0 + b2 : 1.0 - g2);  			}  			else if (g == v)  			{  				h = (b == m ? 1.0 + r2 : 3.0 - b2);  			}  			else  			{  				h = (r == m ? 3.0 + g2 : 5.0 - r2);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: if (r == v)  			{  				h = (g == m ? 5.0 + b2 : 1.0 - g2);  			}  			else if (g == v)  			{  				h = (b == m ? 1.0 + r2 : 3.0 - b2);  			}  			else  			{  				h = (r == m ? 3.0 + g2 : 5.0 - r2);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: if (r == v)  			{  				h = (g == m ? 5.0 + b2 : 1.0 - g2);  			}  			else if (g == v)  			{  				h = (b == m ? 1.0 + r2 : 3.0 - b2);  			}  			else  			{  				h = (r == m ? 3.0 + g2 : 5.0 - r2);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: if (r == v)  			{  				h = (g == m ? 5.0 + b2 : 1.0 - g2);  			}  			else if (g == v)  			{  				h = (b == m ? 1.0 + r2 : 3.0 - b2);  			}  			else  			{  				h = (r == m ? 3.0 + g2 : 5.0 - r2);  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,RGB2HSL,The following statement contains a magic number: h /= 6.0;
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSVToColor,The following statement contains a magic number: if (paintColor.Length == 3) {  				return ColorUtils.HsbToRgb(paintColor[0]' paintColor[1]' paintColor[2]);  			} else {  				return Color.DeepPink;  			}
Magic Number,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSVToColor,The following statement contains a magic number: if (paintColor.Length == 3) {  				return ColorUtils.HsbToRgb(paintColor[0]' paintColor[1]' paintColor[2]);  			} else {  				return Color.DeepPink;  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: Font font = new Font("Arial"' 8);
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: int last_label_end = axis == X_AXIS ? -88888 : 88888;
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: int last_label_end = axis == X_AXIS ? -88888 : 88888;
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: for(IEnumerator e=tics.GetEnumerator(); e.MoveNext();)  			{  				string ticstr = (string)e.Current;  				if(DEBUG)  				{  					dbgstr += ticstr + "' ";  				}  				float ticval = Convert.ToSingle(ticstr);  				int tic_coord = screenStart;  				SizeF str_size = stringSize(ticstr' font' g);  				tic_coord += plotValue(ticval' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight);  				if (axis == X_AXIS) // horizontal axis == vertical tics  				{  					g.DrawLine(pen' tic_coord' screenHeight-screenOffset' tic_coord' screenHeight-screenOffset+ticLength);  					if (tic_coord-str_size.Width/2 > last_label_end)  					{  						g.DrawString(ticstr' font' brush' tic_coord-str_size.Width/2' screenHeight-screenOffset+str_size.Height+5);  						last_label_end = (int)(tic_coord + str_size.Width/2 + str_size.Height/2);  					}  				}  				else // vertical axis == horizontal tics  				{  					tic_coord = screenHeight - tic_coord; // flips Y coordinates  					g.DrawLine(pen' screenOffset-ticLength' tic_coord' screenOffset' tic_coord);  					if (tic_coord-str_size.Height/3 < last_label_end)  					{  						g.DrawString(ticstr' font' brush' screenOffset-ticLength-str_size.Width-5' tic_coord+str_size.Height/3);  						last_label_end = (int)(tic_coord - str_size.Height);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: for(IEnumerator e=tics.GetEnumerator(); e.MoveNext();)  			{  				string ticstr = (string)e.Current;  				if(DEBUG)  				{  					dbgstr += ticstr + "' ";  				}  				float ticval = Convert.ToSingle(ticstr);  				int tic_coord = screenStart;  				SizeF str_size = stringSize(ticstr' font' g);  				tic_coord += plotValue(ticval' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight);  				if (axis == X_AXIS) // horizontal axis == vertical tics  				{  					g.DrawLine(pen' tic_coord' screenHeight-screenOffset' tic_coord' screenHeight-screenOffset+ticLength);  					if (tic_coord-str_size.Width/2 > last_label_end)  					{  						g.DrawString(ticstr' font' brush' tic_coord-str_size.Width/2' screenHeight-screenOffset+str_size.Height+5);  						last_label_end = (int)(tic_coord + str_size.Width/2 + str_size.Height/2);  					}  				}  				else // vertical axis == horizontal tics  				{  					tic_coord = screenHeight - tic_coord; // flips Y coordinates  					g.DrawLine(pen' screenOffset-ticLength' tic_coord' screenOffset' tic_coord);  					if (tic_coord-str_size.Height/3 < last_label_end)  					{  						g.DrawString(ticstr' font' brush' screenOffset-ticLength-str_size.Width-5' tic_coord+str_size.Height/3);  						last_label_end = (int)(tic_coord - str_size.Height);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: for(IEnumerator e=tics.GetEnumerator(); e.MoveNext();)  			{  				string ticstr = (string)e.Current;  				if(DEBUG)  				{  					dbgstr += ticstr + "' ";  				}  				float ticval = Convert.ToSingle(ticstr);  				int tic_coord = screenStart;  				SizeF str_size = stringSize(ticstr' font' g);  				tic_coord += plotValue(ticval' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight);  				if (axis == X_AXIS) // horizontal axis == vertical tics  				{  					g.DrawLine(pen' tic_coord' screenHeight-screenOffset' tic_coord' screenHeight-screenOffset+ticLength);  					if (tic_coord-str_size.Width/2 > last_label_end)  					{  						g.DrawString(ticstr' font' brush' tic_coord-str_size.Width/2' screenHeight-screenOffset+str_size.Height+5);  						last_label_end = (int)(tic_coord + str_size.Width/2 + str_size.Height/2);  					}  				}  				else // vertical axis == horizontal tics  				{  					tic_coord = screenHeight - tic_coord; // flips Y coordinates  					g.DrawLine(pen' screenOffset-ticLength' tic_coord' screenOffset' tic_coord);  					if (tic_coord-str_size.Height/3 < last_label_end)  					{  						g.DrawString(ticstr' font' brush' screenOffset-ticLength-str_size.Width-5' tic_coord+str_size.Height/3);  						last_label_end = (int)(tic_coord - str_size.Height);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: for(IEnumerator e=tics.GetEnumerator(); e.MoveNext();)  			{  				string ticstr = (string)e.Current;  				if(DEBUG)  				{  					dbgstr += ticstr + "' ";  				}  				float ticval = Convert.ToSingle(ticstr);  				int tic_coord = screenStart;  				SizeF str_size = stringSize(ticstr' font' g);  				tic_coord += plotValue(ticval' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight);  				if (axis == X_AXIS) // horizontal axis == vertical tics  				{  					g.DrawLine(pen' tic_coord' screenHeight-screenOffset' tic_coord' screenHeight-screenOffset+ticLength);  					if (tic_coord-str_size.Width/2 > last_label_end)  					{  						g.DrawString(ticstr' font' brush' tic_coord-str_size.Width/2' screenHeight-screenOffset+str_size.Height+5);  						last_label_end = (int)(tic_coord + str_size.Width/2 + str_size.Height/2);  					}  				}  				else // vertical axis == horizontal tics  				{  					tic_coord = screenHeight - tic_coord; // flips Y coordinates  					g.DrawLine(pen' screenOffset-ticLength' tic_coord' screenOffset' tic_coord);  					if (tic_coord-str_size.Height/3 < last_label_end)  					{  						g.DrawString(ticstr' font' brush' screenOffset-ticLength-str_size.Width-5' tic_coord+str_size.Height/3);  						last_label_end = (int)(tic_coord - str_size.Height);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: for(IEnumerator e=tics.GetEnumerator(); e.MoveNext();)  			{  				string ticstr = (string)e.Current;  				if(DEBUG)  				{  					dbgstr += ticstr + "' ";  				}  				float ticval = Convert.ToSingle(ticstr);  				int tic_coord = screenStart;  				SizeF str_size = stringSize(ticstr' font' g);  				tic_coord += plotValue(ticval' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight);  				if (axis == X_AXIS) // horizontal axis == vertical tics  				{  					g.DrawLine(pen' tic_coord' screenHeight-screenOffset' tic_coord' screenHeight-screenOffset+ticLength);  					if (tic_coord-str_size.Width/2 > last_label_end)  					{  						g.DrawString(ticstr' font' brush' tic_coord-str_size.Width/2' screenHeight-screenOffset+str_size.Height+5);  						last_label_end = (int)(tic_coord + str_size.Width/2 + str_size.Height/2);  					}  				}  				else // vertical axis == horizontal tics  				{  					tic_coord = screenHeight - tic_coord; // flips Y coordinates  					g.DrawLine(pen' screenOffset-ticLength' tic_coord' screenOffset' tic_coord);  					if (tic_coord-str_size.Height/3 < last_label_end)  					{  						g.DrawString(ticstr' font' brush' screenOffset-ticLength-str_size.Width-5' tic_coord+str_size.Height/3);  						last_label_end = (int)(tic_coord - str_size.Height);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: for(IEnumerator e=tics.GetEnumerator(); e.MoveNext();)  			{  				string ticstr = (string)e.Current;  				if(DEBUG)  				{  					dbgstr += ticstr + "' ";  				}  				float ticval = Convert.ToSingle(ticstr);  				int tic_coord = screenStart;  				SizeF str_size = stringSize(ticstr' font' g);  				tic_coord += plotValue(ticval' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight);  				if (axis == X_AXIS) // horizontal axis == vertical tics  				{  					g.DrawLine(pen' tic_coord' screenHeight-screenOffset' tic_coord' screenHeight-screenOffset+ticLength);  					if (tic_coord-str_size.Width/2 > last_label_end)  					{  						g.DrawString(ticstr' font' brush' tic_coord-str_size.Width/2' screenHeight-screenOffset+str_size.Height+5);  						last_label_end = (int)(tic_coord + str_size.Width/2 + str_size.Height/2);  					}  				}  				else // vertical axis == horizontal tics  				{  					tic_coord = screenHeight - tic_coord; // flips Y coordinates  					g.DrawLine(pen' screenOffset-ticLength' tic_coord' screenOffset' tic_coord);  					if (tic_coord-str_size.Height/3 < last_label_end)  					{  						g.DrawString(ticstr' font' brush' screenOffset-ticLength-str_size.Width-5' tic_coord+str_size.Height/3);  						last_label_end = (int)(tic_coord - str_size.Height);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: for(IEnumerator e=tics.GetEnumerator(); e.MoveNext();)  			{  				string ticstr = (string)e.Current;  				if(DEBUG)  				{  					dbgstr += ticstr + "' ";  				}  				float ticval = Convert.ToSingle(ticstr);  				int tic_coord = screenStart;  				SizeF str_size = stringSize(ticstr' font' g);  				tic_coord += plotValue(ticval' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight);  				if (axis == X_AXIS) // horizontal axis == vertical tics  				{  					g.DrawLine(pen' tic_coord' screenHeight-screenOffset' tic_coord' screenHeight-screenOffset+ticLength);  					if (tic_coord-str_size.Width/2 > last_label_end)  					{  						g.DrawString(ticstr' font' brush' tic_coord-str_size.Width/2' screenHeight-screenOffset+str_size.Height+5);  						last_label_end = (int)(tic_coord + str_size.Width/2 + str_size.Height/2);  					}  				}  				else // vertical axis == horizontal tics  				{  					tic_coord = screenHeight - tic_coord; // flips Y coordinates  					g.DrawLine(pen' screenOffset-ticLength' tic_coord' screenOffset' tic_coord);  					if (tic_coord-str_size.Height/3 < last_label_end)  					{  						g.DrawString(ticstr' font' brush' screenOffset-ticLength-str_size.Width-5' tic_coord+str_size.Height/3);  						last_label_end = (int)(tic_coord - str_size.Height);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,drawAxis,The following statement contains a magic number: for(IEnumerator e=tics.GetEnumerator(); e.MoveNext();)  			{  				string ticstr = (string)e.Current;  				if(DEBUG)  				{  					dbgstr += ticstr + "' ";  				}  				float ticval = Convert.ToSingle(ticstr);  				int tic_coord = screenStart;  				SizeF str_size = stringSize(ticstr' font' g);  				tic_coord += plotValue(ticval' lowVal' highVal' screenStart' screenEnd' logScale' screenHeight);  				if (axis == X_AXIS) // horizontal axis == vertical tics  				{  					g.DrawLine(pen' tic_coord' screenHeight-screenOffset' tic_coord' screenHeight-screenOffset+ticLength);  					if (tic_coord-str_size.Width/2 > last_label_end)  					{  						g.DrawString(ticstr' font' brush' tic_coord-str_size.Width/2' screenHeight-screenOffset+str_size.Height+5);  						last_label_end = (int)(tic_coord + str_size.Width/2 + str_size.Height/2);  					}  				}  				else // vertical axis == horizontal tics  				{  					tic_coord = screenHeight - tic_coord; // flips Y coordinates  					g.DrawLine(pen' screenOffset-ticLength' tic_coord' screenOffset' tic_coord);  					if (tic_coord-str_size.Height/3 < last_label_end)  					{  						g.DrawString(ticstr' font' brush' screenOffset-ticLength-str_size.Width-5' tic_coord+str_size.Height/3);  						last_label_end = (int)(tic_coord - str_size.Height);  					}  				}  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,plotValue,The following statement contains a magic number: if (logScale)  			{  				float log_low = flog10(lowVal)' log_high = flog10(highVal)' log_val = flog10(val);  				float log_range = log_high - log_low;  				float pixels_per_log_unit = screen_range / log_range;  				return (int)((log_val - log_low) * pixels_per_log_unit +.5);  			}  			else  			{  				float value_range = highVal - lowVal; // in data value units  				float pixels_per_unit = screen_range / value_range;  				return (int)((val-lowVal) * pixels_per_unit +.5);  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,plotValue,The following statement contains a magic number: if (logScale)  			{  				float log_low = flog10(lowVal)' log_high = flog10(highVal)' log_val = flog10(val);  				float log_range = log_high - log_low;  				float pixels_per_log_unit = screen_range / log_range;  				return (int)((log_val - log_low) * pixels_per_log_unit +.5);  			}  			else  			{  				float value_range = highVal - lowVal; // in data value units  				float pixels_per_unit = screen_range / value_range;  				return (int)((val-lowVal) * pixels_per_unit +.5);  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,roundUp,The following statement contains a magic number: val *= Math.Pow(10' -exponent);
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,roundUp,The following statement contains a magic number: if (val > 5.0)  			{  				val = 10.0;  			}  			else if (val > 2.0)  			{  				val = 5.0;  			}  			else if (val > 1.0)  			{  				val = 2.0;  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,roundUp,The following statement contains a magic number: if (val > 5.0)  			{  				val = 10.0;  			}  			else if (val > 2.0)  			{  				val = 5.0;  			}  			else if (val > 1.0)  			{  				val = 2.0;  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,roundUp,The following statement contains a magic number: if (val > 5.0)  			{  				val = 10.0;  			}  			else if (val > 2.0)  			{  				val = 5.0;  			}  			else if (val > 1.0)  			{  				val = 2.0;  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,roundUp,The following statement contains a magic number: if (val > 5.0)  			{  				val = 10.0;  			}  			else if (val > 2.0)  			{  				val = 5.0;  			}  			else if (val > 1.0)  			{  				val = 2.0;  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,roundUp,The following statement contains a magic number: if (val > 5.0)  			{  				val = 10.0;  			}  			else if (val > 2.0)  			{  				val = 5.0;  			}  			else if (val > 1.0)  			{  				val = 2.0;  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,roundUp,The following statement contains a magic number: val *= Math.Pow(10' exponent);
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,numFracDigits,The following statement contains a magic number: while (numdigits <= 15 && num != Math.Floor(num))  			{  				num *= 10.0;  				numdigits += 1;  			}
Magic Number,Wave2Zebra2Preset,Axis,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Axis.cs,numFracDigits,The following statement contains a magic number: while (numdigits <= 15 && num != Math.Floor(num))  			{  				num *= 10.0;  				numdigits += 1;  			}
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,LogPlotter,The following statement contains a magic number: _yRangeEnd = 90;
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,LogPlotter,The following statement contains a magic number: _yGrid = 10;
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,LogPlotter,The following statement contains a magic number: _yRangeEnd = 260;
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,LogPlotter,The following statement contains a magic number: _yGrid = 20;
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,Render,The following statement contains a magic number: Bitmap outputBitmap = new Bitmap(600' 300);
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,Render,The following statement contains a magic number: Bitmap outputBitmap = new Bitmap(600' 300);
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,DrawVerticalLines,The following statement contains a magic number: for (int i = 0; i <= n; i++)  			{  				x = x0 + i * d;  				if (i < n)  				{  					for (int j = 1; j < XLogBase; j++)  					{  						d1 = Convert.ToInt32(Math.Log(j' XLogBase) * d);  						g.DrawLine(penGrid' x + d1' y0' x + d1' y1);  					}  				}  				s = this.LargeFormat(Convert.ToString(Math.Pow(XLogBase' Math.Log(XRangeStart' XLogBase) + i)));  				SizeF sf = g.MeasureString(s' FontAxis);  				g.DrawString(s' FontAxis' brushAxis' (float)(x - sf.Width / 2.0)' (float)(y1 + sf.Height / 2.0));  			}
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,DrawVerticalLines,The following statement contains a magic number: for (int i = 0; i <= n; i++)  			{  				x = x0 + i * d;  				if (i < n)  				{  					for (int j = 1; j < XLogBase; j++)  					{  						d1 = Convert.ToInt32(Math.Log(j' XLogBase) * d);  						g.DrawLine(penGrid' x + d1' y0' x + d1' y1);  					}  				}  				s = this.LargeFormat(Convert.ToString(Math.Pow(XLogBase' Math.Log(XRangeStart' XLogBase) + i)));  				SizeF sf = g.MeasureString(s' FontAxis);  				g.DrawString(s' FontAxis' brushAxis' (float)(x - sf.Width / 2.0)' (float)(y1 + sf.Height / 2.0));  			}
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,DrawHorizontalLines,The following statement contains a magic number: for (int i = 0; i <= n; i++)  			{  				y = y1 - i * d;  				g.DrawLine(penGrid' x0' y' x1' y);  				string s = Convert.ToString(YRangeStart + (YRangeEnd - YRangeStart) * i / (double)n);  				SizeF sf = g.MeasureString(s' FontAxis);  				g.DrawString(s' FontAxis' brushAxis' (float)(x0 - sf.Width - sf.Height / 4.0)' (float)(y - sf.Height / 2.0));  			}
Magic Number,Wave2Zebra2Preset,LogPlotter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\LogPlotter.cs,DrawHorizontalLines,The following statement contains a magic number: for (int i = 0; i <= n; i++)  			{  				y = y1 - i * d;  				g.DrawLine(penGrid' x0' y' x1' y);  				string s = Convert.ToString(YRangeStart + (YRangeEnd - YRangeStart) * i / (double)n);  				SizeF sf = g.MeasureString(s' FontAxis);  				g.DrawString(s' FontAxis' brushAxis' (float)(x0 - sf.Width - sf.Height / 4.0)' (float)(y - sf.Height / 2.0));  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = samples.Length;  				int width = 1200;  				int height = 300;  				  				// horizontalScaleFactor between 0.25 and 0.5 is quite good  				double horizontalScaleFactor = (double) width / numberOfSamples;  				double verticalScaleFactor = 150;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);    				// Mark the origin to start drawing at 0'0:  				int oldX = 0;  				int oldY = 0;  				if (startDrawingAtMiddle) {  					oldY = (int) (height / 2);  				} else {  					oldY = (int) (height);  				}  				int xIndex = 0;  				  				// Start by drawing the center line at 0:  				g.DrawLine(linePen' oldX' oldY' width' oldY);  				  				// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be:  				int increment = (int) (numberOfSamples / (numberOfSamples * horizontalScaleFactor));  				if (increment == 0) increment = 1;  				  				// The following code grabs the increment and paints a line from the origin to the first sample:  				int t = 0;  				for (t = 0; t < increment; t += increment) {  					g.DrawLine(wavePen' oldX' oldY' xIndex' oldY);  					xIndex++;  					oldX = xIndex;  				}    				// Finish up by iterating through the audio and drawing lines to the scaled samples:  				for (; t < numberOfSamples; t += increment) {  					double scaleFactor = verticalScaleFactor;  					double scaledSample = samples[t] * scaleFactor;  					int y = (int) ((height / 2) - (scaledSample));  					g.DrawLine(wavePen' oldX' oldY' xIndex' y);  					  					xIndex++;  					oldX = xIndex;  					oldY = y;  				}  				  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = samples.Length;  				int width = 1200;  				int height = 300;  				  				// horizontalScaleFactor between 0.25 and 0.5 is quite good  				double horizontalScaleFactor = (double) width / numberOfSamples;  				double verticalScaleFactor = 150;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);    				// Mark the origin to start drawing at 0'0:  				int oldX = 0;  				int oldY = 0;  				if (startDrawingAtMiddle) {  					oldY = (int) (height / 2);  				} else {  					oldY = (int) (height);  				}  				int xIndex = 0;  				  				// Start by drawing the center line at 0:  				g.DrawLine(linePen' oldX' oldY' width' oldY);  				  				// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be:  				int increment = (int) (numberOfSamples / (numberOfSamples * horizontalScaleFactor));  				if (increment == 0) increment = 1;  				  				// The following code grabs the increment and paints a line from the origin to the first sample:  				int t = 0;  				for (t = 0; t < increment; t += increment) {  					g.DrawLine(wavePen' oldX' oldY' xIndex' oldY);  					xIndex++;  					oldX = xIndex;  				}    				// Finish up by iterating through the audio and drawing lines to the scaled samples:  				for (; t < numberOfSamples; t += increment) {  					double scaleFactor = verticalScaleFactor;  					double scaledSample = samples[t] * scaleFactor;  					int y = (int) ((height / 2) - (scaledSample));  					g.DrawLine(wavePen' oldX' oldY' xIndex' y);  					  					xIndex++;  					oldX = xIndex;  					oldY = y;  				}  				  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = samples.Length;  				int width = 1200;  				int height = 300;  				  				// horizontalScaleFactor between 0.25 and 0.5 is quite good  				double horizontalScaleFactor = (double) width / numberOfSamples;  				double verticalScaleFactor = 150;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);    				// Mark the origin to start drawing at 0'0:  				int oldX = 0;  				int oldY = 0;  				if (startDrawingAtMiddle) {  					oldY = (int) (height / 2);  				} else {  					oldY = (int) (height);  				}  				int xIndex = 0;  				  				// Start by drawing the center line at 0:  				g.DrawLine(linePen' oldX' oldY' width' oldY);  				  				// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be:  				int increment = (int) (numberOfSamples / (numberOfSamples * horizontalScaleFactor));  				if (increment == 0) increment = 1;  				  				// The following code grabs the increment and paints a line from the origin to the first sample:  				int t = 0;  				for (t = 0; t < increment; t += increment) {  					g.DrawLine(wavePen' oldX' oldY' xIndex' oldY);  					xIndex++;  					oldX = xIndex;  				}    				// Finish up by iterating through the audio and drawing lines to the scaled samples:  				for (; t < numberOfSamples; t += increment) {  					double scaleFactor = verticalScaleFactor;  					double scaledSample = samples[t] * scaleFactor;  					int y = (int) ((height / 2) - (scaledSample));  					g.DrawLine(wavePen' oldX' oldY' xIndex' y);  					  					xIndex++;  					oldX = xIndex;  					oldY = y;  				}  				  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = samples.Length;  				int width = 1200;  				int height = 300;  				  				// horizontalScaleFactor between 0.25 and 0.5 is quite good  				double horizontalScaleFactor = (double) width / numberOfSamples;  				double verticalScaleFactor = 150;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);    				// Mark the origin to start drawing at 0'0:  				int oldX = 0;  				int oldY = 0;  				if (startDrawingAtMiddle) {  					oldY = (int) (height / 2);  				} else {  					oldY = (int) (height);  				}  				int xIndex = 0;  				  				// Start by drawing the center line at 0:  				g.DrawLine(linePen' oldX' oldY' width' oldY);  				  				// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be:  				int increment = (int) (numberOfSamples / (numberOfSamples * horizontalScaleFactor));  				if (increment == 0) increment = 1;  				  				// The following code grabs the increment and paints a line from the origin to the first sample:  				int t = 0;  				for (t = 0; t < increment; t += increment) {  					g.DrawLine(wavePen' oldX' oldY' xIndex' oldY);  					xIndex++;  					oldX = xIndex;  				}    				// Finish up by iterating through the audio and drawing lines to the scaled samples:  				for (; t < numberOfSamples; t += increment) {  					double scaleFactor = verticalScaleFactor;  					double scaledSample = samples[t] * scaleFactor;  					int y = (int) ((height / 2) - (scaledSample));  					g.DrawLine(wavePen' oldX' oldY' xIndex' y);  					  					xIndex++;  					oldX = xIndex;  					oldY = y;  				}  				  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = samples.Length;  				int width = 1200;  				int height = 300;  				  				// horizontalScaleFactor between 0.25 and 0.5 is quite good  				double horizontalScaleFactor = (double) width / numberOfSamples;  				double verticalScaleFactor = 150;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);    				// Mark the origin to start drawing at 0'0:  				int oldX = 0;  				int oldY = 0;  				if (startDrawingAtMiddle) {  					oldY = (int) (height / 2);  				} else {  					oldY = (int) (height);  				}  				int xIndex = 0;  				  				// Start by drawing the center line at 0:  				g.DrawLine(linePen' oldX' oldY' width' oldY);  				  				// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be:  				int increment = (int) (numberOfSamples / (numberOfSamples * horizontalScaleFactor));  				if (increment == 0) increment = 1;  				  				// The following code grabs the increment and paints a line from the origin to the first sample:  				int t = 0;  				for (t = 0; t < increment; t += increment) {  					g.DrawLine(wavePen' oldX' oldY' xIndex' oldY);  					xIndex++;  					oldX = xIndex;  				}    				// Finish up by iterating through the audio and drawing lines to the scaled samples:  				for (; t < numberOfSamples; t += increment) {  					double scaleFactor = verticalScaleFactor;  					double scaledSample = samples[t] * scaleFactor;  					int y = (int) ((height / 2) - (scaledSample));  					g.DrawLine(wavePen' oldX' oldY' xIndex' y);  					  					xIndex++;  					oldX = xIndex;  					oldY = y;  				}  				  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = samples.Length;  				int width = 1200;  				int height = 300;  				  				// horizontalScaleFactor between 0.25 and 0.5 is quite good  				double horizontalScaleFactor = (double) width / numberOfSamples;  				double verticalScaleFactor = 150;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);    				// Mark the origin to start drawing at 0'0:  				int oldX = 0;  				int oldY = 0;  				if (startDrawingAtMiddle) {  					oldY = (int) (height / 2);  				} else {  					oldY = (int) (height);  				}  				int xIndex = 0;  				  				// Start by drawing the center line at 0:  				g.DrawLine(linePen' oldX' oldY' width' oldY);  				  				// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be:  				int increment = (int) (numberOfSamples / (numberOfSamples * horizontalScaleFactor));  				if (increment == 0) increment = 1;  				  				// The following code grabs the increment and paints a line from the origin to the first sample:  				int t = 0;  				for (t = 0; t < increment; t += increment) {  					g.DrawLine(wavePen' oldX' oldY' xIndex' oldY);  					xIndex++;  					oldX = xIndex;  				}    				// Finish up by iterating through the audio and drawing lines to the scaled samples:  				for (; t < numberOfSamples; t += increment) {  					double scaleFactor = verticalScaleFactor;  					double scaledSample = samples[t] * scaleFactor;  					int y = (int) ((height / 2) - (scaledSample));  					g.DrawLine(wavePen' oldX' oldY' xIndex' y);  					  					xIndex++;  					oldX = xIndex;  					oldY = y;  				}  				  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = samples.Length;  				int width = 1200;  				int height = 300;  				  				// horizontalScaleFactor between 0.25 and 0.5 is quite good  				double horizontalScaleFactor = (double) width / numberOfSamples;  				double verticalScaleFactor = 150;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);    				// Mark the origin to start drawing at 0'0:  				int oldX = 0;  				int oldY = 0;  				if (startDrawingAtMiddle) {  					oldY = (int) (height / 2);  				} else {  					oldY = (int) (height);  				}  				int xIndex = 0;  				  				// Start by drawing the center line at 0:  				g.DrawLine(linePen' oldX' oldY' width' oldY);  				  				// Now' you need to figure out the incremental jump between samples to adjust for the scale factor. This works out to be:  				int increment = (int) (numberOfSamples / (numberOfSamples * horizontalScaleFactor));  				if (increment == 0) increment = 1;  				  				// The following code grabs the increment and paints a line from the origin to the first sample:  				int t = 0;  				for (t = 0; t < increment; t += increment) {  					g.DrawLine(wavePen' oldX' oldY' xIndex' oldY);  					xIndex++;  					oldX = xIndex;  				}    				// Finish up by iterating through the audio and drawing lines to the scaled samples:  				for (; t < numberOfSamples; t += increment) {  					double scaleFactor = verticalScaleFactor;  					double scaledSample = samples[t] * scaleFactor;  					int y = (int) ((height / 2) - (scaledSample));  					g.DrawLine(wavePen' oldX' oldY' xIndex' y);  					  					xIndex++;  					oldX = xIndex;  					oldY = y;  				}  				  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = data.Length;  				int width = 1200;  				int height = 200;  				int resolution = 2; //125 // low resolution (2+) means to zoom into the waveform  				int amplitude = 1;    				float max = 0.0f;  				float min = 0.0f;    				float drawMax' drawMin' currData;    				int h2 = height/2 - 1;  				int position = 0;  				int sampleStart = 0;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);  				  				// mid line  				g.DrawLine(linePen' 0' h2' width' h2);    				// draw wave  				int pixCount = Math.Min(data.Length - resolution' width * resolution);  				if (resolution == 1) {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						currData = data[i];  						g.DrawLine(linePen' position' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - currData * h2 * amplitude));  						position++;  					}  				} else {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						if( i < numberOfSamples ) {  							currData = data[i];  							  							// max and min  							max = 0.0f;  							min = 0.0f;  							for( int j=0; j< resolution; j++) {  								if (data[i+j] > max) max = data[i+j];  								if (data[i+j] < min) min = data[i+j];  							}  							  							// highest and lowest curve values  							if (resolution > 8) {  								drawMax = Math.Max(currData' data[i+resolution]);  								drawMin = Math.Min(currData' data[i+resolution]);  								  								if (max > 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMax * h2 * amplitude)' position' (int)(h2 - max * h2 * amplitude));  								  								if (min < 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMin * h2 * amplitude)' position' (int)(h2 - min * h2 * amplitude));  							}  							  							// draw wave  							g.DrawLine(wavePen' position++' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - data[i+resolution] * h2 * amplitude));  						}  					}  				}  				  				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = data.Length;  				int width = 1200;  				int height = 200;  				int resolution = 2; //125 // low resolution (2+) means to zoom into the waveform  				int amplitude = 1;    				float max = 0.0f;  				float min = 0.0f;    				float drawMax' drawMin' currData;    				int h2 = height/2 - 1;  				int position = 0;  				int sampleStart = 0;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);  				  				// mid line  				g.DrawLine(linePen' 0' h2' width' h2);    				// draw wave  				int pixCount = Math.Min(data.Length - resolution' width * resolution);  				if (resolution == 1) {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						currData = data[i];  						g.DrawLine(linePen' position' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - currData * h2 * amplitude));  						position++;  					}  				} else {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						if( i < numberOfSamples ) {  							currData = data[i];  							  							// max and min  							max = 0.0f;  							min = 0.0f;  							for( int j=0; j< resolution; j++) {  								if (data[i+j] > max) max = data[i+j];  								if (data[i+j] < min) min = data[i+j];  							}  							  							// highest and lowest curve values  							if (resolution > 8) {  								drawMax = Math.Max(currData' data[i+resolution]);  								drawMin = Math.Min(currData' data[i+resolution]);  								  								if (max > 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMax * h2 * amplitude)' position' (int)(h2 - max * h2 * amplitude));  								  								if (min < 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMin * h2 * amplitude)' position' (int)(h2 - min * h2 * amplitude));  							}  							  							// draw wave  							g.DrawLine(wavePen' position++' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - data[i+resolution] * h2 * amplitude));  						}  					}  				}  				  				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = data.Length;  				int width = 1200;  				int height = 200;  				int resolution = 2; //125 // low resolution (2+) means to zoom into the waveform  				int amplitude = 1;    				float max = 0.0f;  				float min = 0.0f;    				float drawMax' drawMin' currData;    				int h2 = height/2 - 1;  				int position = 0;  				int sampleStart = 0;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);  				  				// mid line  				g.DrawLine(linePen' 0' h2' width' h2);    				// draw wave  				int pixCount = Math.Min(data.Length - resolution' width * resolution);  				if (resolution == 1) {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						currData = data[i];  						g.DrawLine(linePen' position' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - currData * h2 * amplitude));  						position++;  					}  				} else {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						if( i < numberOfSamples ) {  							currData = data[i];  							  							// max and min  							max = 0.0f;  							min = 0.0f;  							for( int j=0; j< resolution; j++) {  								if (data[i+j] > max) max = data[i+j];  								if (data[i+j] < min) min = data[i+j];  							}  							  							// highest and lowest curve values  							if (resolution > 8) {  								drawMax = Math.Max(currData' data[i+resolution]);  								drawMin = Math.Min(currData' data[i+resolution]);  								  								if (max > 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMax * h2 * amplitude)' position' (int)(h2 - max * h2 * amplitude));  								  								if (min < 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMin * h2 * amplitude)' position' (int)(h2 - min * h2 * amplitude));  							}  							  							// draw wave  							g.DrawLine(wavePen' position++' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - data[i+resolution] * h2 * amplitude));  						}  					}  				}  				  				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = data.Length;  				int width = 1200;  				int height = 200;  				int resolution = 2; //125 // low resolution (2+) means to zoom into the waveform  				int amplitude = 1;    				float max = 0.0f;  				float min = 0.0f;    				float drawMax' drawMin' currData;    				int h2 = height/2 - 1;  				int position = 0;  				int sampleStart = 0;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);  				  				// mid line  				g.DrawLine(linePen' 0' h2' width' h2);    				// draw wave  				int pixCount = Math.Min(data.Length - resolution' width * resolution);  				if (resolution == 1) {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						currData = data[i];  						g.DrawLine(linePen' position' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - currData * h2 * amplitude));  						position++;  					}  				} else {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						if( i < numberOfSamples ) {  							currData = data[i];  							  							// max and min  							max = 0.0f;  							min = 0.0f;  							for( int j=0; j< resolution; j++) {  								if (data[i+j] > max) max = data[i+j];  								if (data[i+j] < min) min = data[i+j];  							}  							  							// highest and lowest curve values  							if (resolution > 8) {  								drawMax = Math.Max(currData' data[i+resolution]);  								drawMin = Math.Min(currData' data[i+resolution]);  								  								if (max > 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMax * h2 * amplitude)' position' (int)(h2 - max * h2 * amplitude));  								  								if (min < 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMin * h2 * amplitude)' position' (int)(h2 - min * h2 * amplitude));  							}  							  							// draw wave  							g.DrawLine(wavePen' position++' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - data[i+resolution] * h2 * amplitude));  						}  					}  				}  				  				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = data.Length;  				int width = 1200;  				int height = 200;  				int resolution = 2; //125 // low resolution (2+) means to zoom into the waveform  				int amplitude = 1;    				float max = 0.0f;  				float min = 0.0f;    				float drawMax' drawMin' currData;    				int h2 = height/2 - 1;  				int position = 0;  				int sampleStart = 0;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);  				  				// mid line  				g.DrawLine(linePen' 0' h2' width' h2);    				// draw wave  				int pixCount = Math.Min(data.Length - resolution' width * resolution);  				if (resolution == 1) {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						currData = data[i];  						g.DrawLine(linePen' position' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - currData * h2 * amplitude));  						position++;  					}  				} else {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						if( i < numberOfSamples ) {  							currData = data[i];  							  							// max and min  							max = 0.0f;  							min = 0.0f;  							for( int j=0; j< resolution; j++) {  								if (data[i+j] > max) max = data[i+j];  								if (data[i+j] < min) min = data[i+j];  							}  							  							// highest and lowest curve values  							if (resolution > 8) {  								drawMax = Math.Max(currData' data[i+resolution]);  								drawMin = Math.Min(currData' data[i+resolution]);  								  								if (max > 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMax * h2 * amplitude)' position' (int)(h2 - max * h2 * amplitude));  								  								if (min < 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMin * h2 * amplitude)' position' (int)(h2 - min * h2 * amplitude));  							}  							  							// draw wave  							g.DrawLine(wavePen' position++' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - data[i+resolution] * h2 * amplitude));  						}  					}  				}  				  				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = data.Length;  				int width = 1200;  				int height = 200;  				int resolution = 2; //125 // low resolution (2+) means to zoom into the waveform  				int amplitude = 1;    				float max = 0.0f;  				float min = 0.0f;    				float drawMax' drawMin' currData;    				int h2 = height/2 - 1;  				int position = 0;  				int sampleStart = 0;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);  				  				// mid line  				g.DrawLine(linePen' 0' h2' width' h2);    				// draw wave  				int pixCount = Math.Min(data.Length - resolution' width * resolution);  				if (resolution == 1) {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						currData = data[i];  						g.DrawLine(linePen' position' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - currData * h2 * amplitude));  						position++;  					}  				} else {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						if( i < numberOfSamples ) {  							currData = data[i];  							  							// max and min  							max = 0.0f;  							min = 0.0f;  							for( int j=0; j< resolution; j++) {  								if (data[i+j] > max) max = data[i+j];  								if (data[i+j] < min) min = data[i+j];  							}  							  							// highest and lowest curve values  							if (resolution > 8) {  								drawMax = Math.Max(currData' data[i+resolution]);  								drawMin = Math.Min(currData' data[i+resolution]);  								  								if (max > 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMax * h2 * amplitude)' position' (int)(h2 - max * h2 * amplitude));  								  								if (min < 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMin * h2 * amplitude)' position' (int)(h2 - min * h2 * amplitude));  							}  							  							// draw wave  							g.DrawLine(wavePen' position++' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - data[i+resolution] * h2 * amplitude));  						}  					}  				}  				  				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform,The following statement contains a magic number: try {  				//-----------------------  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int numberOfSamples = data.Length;  				int width = 1200;  				int height = 200;  				int resolution = 2; //125 // low resolution (2+) means to zoom into the waveform  				int amplitude = 1;    				float max = 0.0f;  				float min = 0.0f;    				float drawMax' drawMin' currData;    				int h2 = height/2 - 1;  				int position = 0;  				int sampleStart = 0;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				Pen linePen = new Pen(Color.DarkGray' 2);  				Pen wavePen = new Pen(Color.DarkBlue' 1);  				Pen boxPen = new Pen(Color.Black' 2);  				  				// Draw a rectangular box marking the boundaries of the graph  				Rectangle rect = new Rectangle(0' 0' width' height);  				g.DrawRectangle(boxPen' rect);  				  				// mid line  				g.DrawLine(linePen' 0' h2' width' h2);    				// draw wave  				int pixCount = Math.Min(data.Length - resolution' width * resolution);  				if (resolution == 1) {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						currData = data[i];  						g.DrawLine(linePen' position' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - currData * h2 * amplitude));  						position++;  					}  				} else {  					for (int i = sampleStart; i < sampleStart + pixCount; i += resolution) {  						if( i < numberOfSamples ) {  							currData = data[i];  							  							// max and min  							max = 0.0f;  							min = 0.0f;  							for( int j=0; j< resolution; j++) {  								if (data[i+j] > max) max = data[i+j];  								if (data[i+j] < min) min = data[i+j];  							}  							  							// highest and lowest curve values  							if (resolution > 8) {  								drawMax = Math.Max(currData' data[i+resolution]);  								drawMin = Math.Min(currData' data[i+resolution]);  								  								if (max > 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMax * h2 * amplitude)' position' (int)(h2 - max * h2 * amplitude));  								  								if (min < 0.0f) g.DrawLine(wavePen' position' (int)(h2 - drawMin * h2 * amplitude)' position' (int)(h2 - min * h2 * amplitude));  							}  							  							// draw wave  							g.DrawLine(wavePen' position++' (int)(h2 - currData * h2 * amplitude)' position' (int)(h2 - data[i+resolution] * h2 * amplitude));  						}  					}  				}  				  				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawWaveform2,The following statement contains a magic number: try {  				String filenameToSave = String.Format("C:\\{0}-{1}.png"' prefix' System.IO.Path.GetFileNameWithoutExtension(filename));  				System.Diagnostics.Debug.WriteLine("Writing " + filenameToSave);  				  				int width = 1200;  				int height = 200;  				int numberOfSamples = data.Length;  				  				Bitmap png = new Bitmap( width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				  				Pen pen = new Pen(Color.LightGreen' 1);  				  				float X_Slot = (float) (0.8 * width / 10);  				float Y_Slot = (float) (0.8 * height / 10);  				float X = 0;  				float Y = 0;  				float X_0 = (float) (width * 0.1);  				float X_1 = (float) (width * 0.9);  				float Y_0 = (float) (height * 0.1);  				float Y_1 = (float) (height * 0.9);  				float X_Unit = 1;  				float Y_Unit = 0;  				  				if (sampleBitMono) {  					Y_Unit = (float) (0.8 * height / 256);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 128;  					}  				} else {  					Y_Unit = (float) (0.8 * height / 65536);  					for (int i = 0; i < data.Length; i++) {  						data[i] = data[i] + 32768;  					}  				}    				g.Clear(Color.LightGray);  				g.DrawLine(Pens.Black' X_0' Y_0' X_0' Y_1);  				g.DrawLine(Pens.Black' X_0' Y_1' X_1' Y_1);  				  				for (int i = 1; i < 10; i++) {  					g.DrawLine(Pens.DarkGray' X_0' Y_0 + (i * Y_Slot)' X_1' Y_0 + (i * Y_Slot));  					g.DrawLine(Pens.DarkGray' X_0 + (i * X_Slot)' Y_0' X_0 + (i * X_Slot)' Y_1);  				}    				pen.Width = 2.0F;  				g.DrawLine(pen' X_0' Y_0 + (5 * Y_Slot)' X_1' Y_0 + (5 * Y_Slot));  				g.DrawLine(pen' X_0 + (5 * X_Slot)' Y_0' X_0 + (5 * X_Slot)' Y_1);  				  				X_Unit = (float) (0.8 * width / data.Length);  				  				PointF[] pointArray = new PointF[data.Length];  				for (int i = 0; i < data.Length; i++) {  					X = X_0 + (i * X_Unit);  					Y = Y_1 - (data[i] * Y_Unit);  					pointArray[i] = new PointF(X' Y);  				}  				  				g.DrawLines(Pens.DarkBlue' pointArray);  				g.Flush();    				// base line  				png.Save(filenameToSave);  				g.Dispose();  			} catch (Exception ex) {  				System.Diagnostics.Debug.WriteLine(ex);  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram1,The following statement contains a magic number: for (int i = 0; i < numberOfSamplesX; i += incrementX)  			{  				for (int j = 0; j < numberOfSamplesY; j += incrementY)  				{  					int x = (int) MathUtils.RoundDown(i*horizontalScaleFactor'0);  					int y = (int) MathUtils.RoundDown(j*verticalScaleFactor'0);    					float f = data[i][j];  					double d = (f + minIntensity) * scaleFactor;  					  					Color c = Color.White;  					int RangedB = 100;  					int RangePaletteIndex = 256;  					double indexDouble = VB6Spectrogram.MapToPixelIndex(f' RangedB' RangePaletteIndex);  					byte vb6Index = (byte) indexDouble;  					c = vb6Spectrogram.LevelPaletteDictionary[vb6Index];  					png.SetPixel(x' maxYIndex - y' c);  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram1,The following statement contains a magic number: for (int i = 0; i < numberOfSamplesX; i += incrementX)  			{  				for (int j = 0; j < numberOfSamplesY; j += incrementY)  				{  					int x = (int) MathUtils.RoundDown(i*horizontalScaleFactor'0);  					int y = (int) MathUtils.RoundDown(j*verticalScaleFactor'0);    					float f = data[i][j];  					double d = (f + minIntensity) * scaleFactor;  					  					Color c = Color.White;  					int RangedB = 100;  					int RangePaletteIndex = 256;  					double indexDouble = VB6Spectrogram.MapToPixelIndex(f' RangedB' RangePaletteIndex);  					byte vb6Index = (byte) indexDouble;  					c = vb6Spectrogram.LevelPaletteDictionary[vb6Index];  					png.SetPixel(x' maxYIndex - y' c);  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.X_AXIS' 10' 10' 0' (float)MathUtils.ConvertToTime(sampleRate' numberOfSamples)' 50' width-50' 50' false' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.X_AXIS' 10' 10' 0' (float)MathUtils.ConvertToTime(sampleRate' numberOfSamples)' 50' width-50' 50' false' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.X_AXIS' 10' 10' 0' (float)MathUtils.ConvertToTime(sampleRate' numberOfSamples)' 50' width-50' 50' false' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.X_AXIS' 10' 10' 0' (float)MathUtils.ConvertToTime(sampleRate' numberOfSamples)' 50' width-50' 50' false' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.X_AXIS' 10' 10' 0' (float)MathUtils.ConvertToTime(sampleRate' numberOfSamples)' 50' width-50' 50' false' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.Y_AXIS' 100' 10' 20' (float)(sampleRate/2)' 50' height-50' 50' true' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.Y_AXIS' 100' 10' 20' (float)(sampleRate/2)' 50' height-50' 50' true' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.Y_AXIS' 100' 10' 20' (float)(sampleRate/2)' 50' height-50' 50' true' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.Y_AXIS' 100' 10' 20' (float)(sampleRate/2)' 50' height-50' 50' true' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.Y_AXIS' 100' 10' 20' (float)(sampleRate/2)' 50' height-50' 50' true' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.Y_AXIS' 100' 10' 20' (float)(sampleRate/2)' 50' height-50' 50' true' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: Axis.drawAxis(Axis.Y_AXIS' 100' 10' 20' (float)(sampleRate/2)' 50' height-50' 50' true' height' g);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: for(int x = 0; x < numberOfSamplesX; x++)  			{  				int oldY = 1;  				for(int y = 0; y < numberOfSamplesY; y++)  				{  					int x1 = Axis.plotValue(x+1' 1' numberOfSamplesX+1' 50' width-50' false' height);  					int y1 = Axis.plotValue(y+1' 1' numberOfSamplesY+1' 50' height-50' true' height);    					/*  					float amplitude = data[x][y];  					float dB = MathUtils.ConvertAmplitudeToDB(amplitude' minDb' maxDb);  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					*/  					float amplitude = data[x][y];  					Color colorbw = Color.Black;  					if (amplitude > 0) {  						float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good)  						colorbw = Color.FromArgb(colorval' colorval' colorval);  					}  					  					  					if (x1 > 0 && x1 < width && y1 > 0 && y1 < height) {  						pen.Color = colorbw;  						xCoord = x1+50;  						g.DrawLine(pen' xCoord' height - oldY - 50' xCoord' height - y1 - 50);  						oldX = x1;  						oldY = y1;  					}  					  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: for(int x = 0; x < numberOfSamplesX; x++)  			{  				int oldY = 1;  				for(int y = 0; y < numberOfSamplesY; y++)  				{  					int x1 = Axis.plotValue(x+1' 1' numberOfSamplesX+1' 50' width-50' false' height);  					int y1 = Axis.plotValue(y+1' 1' numberOfSamplesY+1' 50' height-50' true' height);    					/*  					float amplitude = data[x][y];  					float dB = MathUtils.ConvertAmplitudeToDB(amplitude' minDb' maxDb);  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					*/  					float amplitude = data[x][y];  					Color colorbw = Color.Black;  					if (amplitude > 0) {  						float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good)  						colorbw = Color.FromArgb(colorval' colorval' colorval);  					}  					  					  					if (x1 > 0 && x1 < width && y1 > 0 && y1 < height) {  						pen.Color = colorbw;  						xCoord = x1+50;  						g.DrawLine(pen' xCoord' height - oldY - 50' xCoord' height - y1 - 50);  						oldX = x1;  						oldY = y1;  					}  					  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: for(int x = 0; x < numberOfSamplesX; x++)  			{  				int oldY = 1;  				for(int y = 0; y < numberOfSamplesY; y++)  				{  					int x1 = Axis.plotValue(x+1' 1' numberOfSamplesX+1' 50' width-50' false' height);  					int y1 = Axis.plotValue(y+1' 1' numberOfSamplesY+1' 50' height-50' true' height);    					/*  					float amplitude = data[x][y];  					float dB = MathUtils.ConvertAmplitudeToDB(amplitude' minDb' maxDb);  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					*/  					float amplitude = data[x][y];  					Color colorbw = Color.Black;  					if (amplitude > 0) {  						float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good)  						colorbw = Color.FromArgb(colorval' colorval' colorval);  					}  					  					  					if (x1 > 0 && x1 < width && y1 > 0 && y1 < height) {  						pen.Color = colorbw;  						xCoord = x1+50;  						g.DrawLine(pen' xCoord' height - oldY - 50' xCoord' height - y1 - 50);  						oldX = x1;  						oldY = y1;  					}  					  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: for(int x = 0; x < numberOfSamplesX; x++)  			{  				int oldY = 1;  				for(int y = 0; y < numberOfSamplesY; y++)  				{  					int x1 = Axis.plotValue(x+1' 1' numberOfSamplesX+1' 50' width-50' false' height);  					int y1 = Axis.plotValue(y+1' 1' numberOfSamplesY+1' 50' height-50' true' height);    					/*  					float amplitude = data[x][y];  					float dB = MathUtils.ConvertAmplitudeToDB(amplitude' minDb' maxDb);  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					*/  					float amplitude = data[x][y];  					Color colorbw = Color.Black;  					if (amplitude > 0) {  						float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good)  						colorbw = Color.FromArgb(colorval' colorval' colorval);  					}  					  					  					if (x1 > 0 && x1 < width && y1 > 0 && y1 < height) {  						pen.Color = colorbw;  						xCoord = x1+50;  						g.DrawLine(pen' xCoord' height - oldY - 50' xCoord' height - y1 - 50);  						oldX = x1;  						oldY = y1;  					}  					  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: for(int x = 0; x < numberOfSamplesX; x++)  			{  				int oldY = 1;  				for(int y = 0; y < numberOfSamplesY; y++)  				{  					int x1 = Axis.plotValue(x+1' 1' numberOfSamplesX+1' 50' width-50' false' height);  					int y1 = Axis.plotValue(y+1' 1' numberOfSamplesY+1' 50' height-50' true' height);    					/*  					float amplitude = data[x][y];  					float dB = MathUtils.ConvertAmplitudeToDB(amplitude' minDb' maxDb);  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					*/  					float amplitude = data[x][y];  					Color colorbw = Color.Black;  					if (amplitude > 0) {  						float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good)  						colorbw = Color.FromArgb(colorval' colorval' colorval);  					}  					  					  					if (x1 > 0 && x1 < width && y1 > 0 && y1 < height) {  						pen.Color = colorbw;  						xCoord = x1+50;  						g.DrawLine(pen' xCoord' height - oldY - 50' xCoord' height - y1 - 50);  						oldX = x1;  						oldY = y1;  					}  					  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: for(int x = 0; x < numberOfSamplesX; x++)  			{  				int oldY = 1;  				for(int y = 0; y < numberOfSamplesY; y++)  				{  					int x1 = Axis.plotValue(x+1' 1' numberOfSamplesX+1' 50' width-50' false' height);  					int y1 = Axis.plotValue(y+1' 1' numberOfSamplesY+1' 50' height-50' true' height);    					/*  					float amplitude = data[x][y];  					float dB = MathUtils.ConvertAmplitudeToDB(amplitude' minDb' maxDb);  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					*/  					float amplitude = data[x][y];  					Color colorbw = Color.Black;  					if (amplitude > 0) {  						float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good)  						colorbw = Color.FromArgb(colorval' colorval' colorval);  					}  					  					  					if (x1 > 0 && x1 < width && y1 > 0 && y1 < height) {  						pen.Color = colorbw;  						xCoord = x1+50;  						g.DrawLine(pen' xCoord' height - oldY - 50' xCoord' height - y1 - 50);  						oldX = x1;  						oldY = y1;  					}  					  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: for(int x = 0; x < numberOfSamplesX; x++)  			{  				int oldY = 1;  				for(int y = 0; y < numberOfSamplesY; y++)  				{  					int x1 = Axis.plotValue(x+1' 1' numberOfSamplesX+1' 50' width-50' false' height);  					int y1 = Axis.plotValue(y+1' 1' numberOfSamplesY+1' 50' height-50' true' height);    					/*  					float amplitude = data[x][y];  					float dB = MathUtils.ConvertAmplitudeToDB(amplitude' minDb' maxDb);  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					*/  					float amplitude = data[x][y];  					Color colorbw = Color.Black;  					if (amplitude > 0) {  						float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good)  						colorbw = Color.FromArgb(colorval' colorval' colorval);  					}  					  					  					if (x1 > 0 && x1 < width && y1 > 0 && y1 < height) {  						pen.Color = colorbw;  						xCoord = x1+50;  						g.DrawLine(pen' xCoord' height - oldY - 50' xCoord' height - y1 - 50);  						oldX = x1;  						oldY = y1;  					}  					  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: for(int x = 0; x < numberOfSamplesX; x++)  			{  				int oldY = 1;  				for(int y = 0; y < numberOfSamplesY; y++)  				{  					int x1 = Axis.plotValue(x+1' 1' numberOfSamplesX+1' 50' width-50' false' height);  					int y1 = Axis.plotValue(y+1' 1' numberOfSamplesY+1' 50' height-50' true' height);    					/*  					float amplitude = data[x][y];  					float dB = MathUtils.ConvertAmplitudeToDB(amplitude' minDb' maxDb);  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					*/  					float amplitude = data[x][y];  					Color colorbw = Color.Black;  					if (amplitude > 0) {  						float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  						int colorval = (int) MathUtils.ConvertAndMainainRatio(dB' minDb' maxDb' 0' 255); // 255 is full brightness' and good for REW colors (for SOX 220 is good)  						colorbw = Color.FromArgb(colorval' colorval' colorval);  					}  					  					  					if (x1 > 0 && x1 < width && y1 > 0 && y1 < height) {  						pen.Color = colorbw;  						xCoord = x1+50;  						g.DrawLine(pen' xCoord' height - oldY - 50' xCoord' height - y1 - 50);  						oldX = x1;  						oldY = y1;  					}  					  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram2,The following statement contains a magic number: png = ColorUtils.Colorize(png' 255' ColorUtils.ColorPaletteType.REW);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram3,The following statement contains a magic number: for (int i = 0; i < numberOfSamplesX; i += incrementX)  			{  				for (int j = 0; j < numberOfSamplesY; j += incrementY)  				{  					int x = (int) MathUtils.RoundDown(i*horizontalScaleFactor'0);  					int y = (int) MathUtils.RoundDown(j*verticalScaleFactor'0);    					float amplitude = data[i][j];  					float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  					  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					//Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					Color c = VB6Spectrogram.GreyPaletteValueColor(color' 256);  					png.SetPixel(x' maxYIndex - y' c);  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram3,The following statement contains a magic number: for (int i = 0; i < numberOfSamplesX; i += incrementX)  			{  				for (int j = 0; j < numberOfSamplesY; j += incrementY)  				{  					int x = (int) MathUtils.RoundDown(i*horizontalScaleFactor'0);  					int y = (int) MathUtils.RoundDown(j*verticalScaleFactor'0);    					float amplitude = data[i][j];  					float dB = MathUtils.AmplitudeToDecibel(amplitude' minDb' maxDb);  					  					int color = (int) MathUtils.ConvertAndMainainRatio(dB' minValdB' maxValdB' 0' 256);  					//Color c = VB6Spectrogram.PaletteValueColor(color' 256);  					Color c = VB6Spectrogram.GreyPaletteValueColor(color' 256);  					png.SetPixel(x' maxYIndex - y' c);  				}  			}
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram3,The following statement contains a magic number: png = ColorUtils.Colorize(png' 255' ColorUtils.ColorPaletteType.SOX);
Magic Number,Wave2Zebra2Preset,RepositoryGateway,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\RepositoryGateway.cs,drawSpectrogram4,The following statement contains a magic number: for (x = 0; x < numberOfSamplesX; x += incrementX)  			{  				for (y = 0; y < numberOfSamplesY; y += incrementY)  				{  					int xCoord = (int) MathUtils.RoundDown(x*horizontalScaleFactor'0);  					int yCoord = (int) MathUtils.RoundDown(y*verticalScaleFactor'0);    					amplitude = data[x][y];  					  					// Convert float to dB  					float MinDb = -60.0f;  					float MaxDb = 0.0f;    					float db = 20 * (float) Math.Log10( (float) amplitude);  					if (db < MinDb) db = MinDb;  					if (db > MaxDb) db = MaxDb;  					float percentage = (db - MinDb) / (MaxDb - MinDb);  					  					Color c = AColor.GetColorGradient(percentage);  					png.SetPixel(xCoord' yCoord' c);  				}  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: const int width = 33;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: const int height = 305;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorbar,The following statement contains a magic number: for(int y = 0; y <= height; y++)  			{  				// when yellow  				if (y > 0 && y <= 58) {  					h = y;  				} else  if (y > 59 && y <= 118) {  					// decrease v from 0.99 to 0.70  					v = v - (0.3f / 60);  					h = y;  				} else if (y > 118 && y < 240) {  					v = 0.69f;  					h = y;  				} else  if (y >= 240) {  					// decrease v from 0.68 to 0.48  					v = v - (0.2f / 60);  					  					// incease h slowly from 240 - 270  					// for y = 240 - 305  					h = h + (30.0f / 65);  				}  				  				Color c = ColorUtils.AhsbToArgb(255' h' s' v);  				  				pen.Color = c;  				g.DrawLine(pen' 1' y' width' y);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetREWColorPaletteValue,The following statement contains a magic number: if (value < 20) {  				h = 0.05f * value;  				l = 0.5f;  			} else if (value >= 20 && value < 40) {  				h = 0.05f * value;  				l = -0.0075f * value + 0.6499f;  			} else if (value >= 40 && value < 80) {  				h = 0.05f * value;  				l = 0.3490196f;  			} else if (value >= 80) {  				h = 0.0244f * value + 2.0189f;  				l = -0.0053f * value + 0.7699f;  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetREWColorPaletteValue,The following statement contains a magic number: if (value < 20) {  				h = 0.05f * value;  				l = 0.5f;  			} else if (value >= 20 && value < 40) {  				h = 0.05f * value;  				l = -0.0075f * value + 0.6499f;  			} else if (value >= 40 && value < 80) {  				h = 0.05f * value;  				l = 0.3490196f;  			} else if (value >= 80) {  				h = 0.0244f * value + 2.0189f;  				l = -0.0053f * value + 0.7699f;  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetREWColorPaletteValue,The following statement contains a magic number: if (value < 20) {  				h = 0.05f * value;  				l = 0.5f;  			} else if (value >= 20 && value < 40) {  				h = 0.05f * value;  				l = -0.0075f * value + 0.6499f;  			} else if (value >= 40 && value < 80) {  				h = 0.05f * value;  				l = 0.3490196f;  			} else if (value >= 80) {  				h = 0.0244f * value + 2.0189f;  				l = -0.0053f * value + 0.7699f;  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetREWColorPaletteValue,The following statement contains a magic number: if (value < 20) {  				h = 0.05f * value;  				l = 0.5f;  			} else if (value >= 20 && value < 40) {  				h = 0.05f * value;  				l = -0.0075f * value + 0.6499f;  			} else if (value >= 40 && value < 80) {  				h = 0.05f * value;  				l = 0.3490196f;  			} else if (value >= 80) {  				h = 0.0244f * value + 2.0189f;  				l = -0.0053f * value + 0.7699f;  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetREWColorPaletteValue,The following statement contains a magic number: if (value < 20) {  				h = 0.05f * value;  				l = 0.5f;  			} else if (value >= 20 && value < 40) {  				h = 0.05f * value;  				l = -0.0075f * value + 0.6499f;  			} else if (value >= 40 && value < 80) {  				h = 0.05f * value;  				l = 0.3490196f;  			} else if (value >= 80) {  				h = 0.0244f * value + 2.0189f;  				l = -0.0053f * value + 0.7699f;  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetREWColorPaletteValue,The following statement contains a magic number: if (value < 20) {  				h = 0.05f * value;  				l = 0.5f;  			} else if (value >= 20 && value < 40) {  				h = 0.05f * value;  				l = -0.0075f * value + 0.6499f;  			} else if (value >= 40 && value < 80) {  				h = 0.05f * value;  				l = 0.3490196f;  			} else if (value >= 80) {  				h = 0.0244f * value + 2.0189f;  				l = -0.0053f * value + 0.7699f;  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetREWColorPaletteValue,The following statement contains a magic number: if (hue < 0) hue += 360;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetREWColorPaletteValue,The following statement contains a magic number: var hslcolor = new HSBColor(hue/360' s' l);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorPaletteBar,The following statement contains a magic number: int width = 40;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorPaletteBar,The following statement contains a magic number: int height = 400;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorPaletteBar,The following statement contains a magic number: for (float i = 0; i < 100; i = i + 0.25f) {  				mycolor = GetREWColorPaletteValue(i);  				pixels.Add(mycolor);  				pen.Color = mycolor.Color;  				g.DrawLine(pen' 0' i*4' width' i*4);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorPaletteBar,The following statement contains a magic number: for (float i = 0; i < 100; i = i + 0.25f) {  				mycolor = GetREWColorPaletteValue(i);  				pixels.Add(mycolor);  				pen.Color = mycolor.Color;  				g.DrawLine(pen' 0' i*4' width' i*4);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,SaveColorPaletteBar,The following statement contains a magic number: for (float i = 0; i < 100; i = i + 0.25f) {  				mycolor = GetREWColorPaletteValue(i);  				pixels.Add(mycolor);  				pen.Color = mycolor.Color;  				g.DrawLine(pen' 0' i*4' width' i*4);  			}
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: int sampleRate = 44100;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: int fftWindowsSize = 16384;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: int fftOverlap = fftWindowsSize / 2;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: Bitmap spectro = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.PHOTOSOUNDER' true);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: Bitmap spectro = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.PHOTOSOUNDER' true);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: Bitmap spectro2 = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.REW' true);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: Bitmap spectro2 = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.REW' true);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: Bitmap spectro3 = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.SOX' true);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,Main,The following statement contains a magic number: Bitmap spectro3 = AudioAnalyzer.GetSpectrogramImage(wavDataBass' 1200' 600' sampleRate' fftWindowsSize' fftOverlap' ColorUtils.ColorPaletteType.SOX' true);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetSampleForTime,The following statement contains a magic number: return (int)(msecs / 1000.0 / t);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetSampleTime,The following statement contains a magic number: return (int)(nSample * 1000.0 / nSamplesPerSec);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetSampleTimeString,The following statement contains a magic number: int ms = (int)(nSample * 1000.0 / nSamplesPerSec);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetTimeString,The following statement contains a magic number: int s = msecs / 1000;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetTimeString,The following statement contains a magic number: int m = msecs / 60000;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetTimeString,The following statement contains a magic number: int h = msecs / 3600000;
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetTimeString,The following statement contains a magic number: DateTime date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' h % 100' m % 60' s % 60' msecs % 1000);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetTimeString,The following statement contains a magic number: DateTime date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' h % 100' m % 60' s % 60' msecs % 1000);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetTimeString,The following statement contains a magic number: DateTime date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' h % 100' m % 60' s % 60' msecs % 1000);
Magic Number,Wave2Zebra2Preset,Program,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Program.cs,GetTimeString,The following statement contains a magic number: DateTime date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' h % 100' m % 60' s % 60' msecs % 1000);
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,MagnitudeSpectrum,The following statement contains a magic number: magnitude = new float[arraysize / 2];
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,MagnitudeSpectrum,The following statement contains a magic number: for(i = 1;                  i <= arraysize / 2.0 - 1.0;                  i = Convert.ToInt64(i + 1))              {              	magnitude[i] = (float)((Math.Sqrt(SquareSum(real[i]' imag[i]) + SquareSum(real[arraysize - i]' imag[arraysize - i]))) / W0);              }
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,Hanning,The following statement contains a magic number: return W0Hanning - 0.5 * Math.Cos(2D * pi * j / n);
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,Hamming,The following statement contains a magic number: return W0Hamming - 0.46 * Math.Cos(2D * pi * j / n);
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,Blackman,The following statement contains a magic number: return W0Blackman - 0.5 * Math.Cos(2D * pi * j / n) + 0.08 * Math.Cos(4D * pi * j / n);
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,Blackman,The following statement contains a magic number: return W0Blackman - 0.5 * Math.Cos(2D * pi * j / n) + 0.08 * Math.Cos(4D * pi * j / n);
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The following statement contains a magic number: for(i = 0;                  i <= arraysize - 2;                  i = Convert.ToInt64(i + 1))              {                  if (i < j)                  {                      Swap(ref real[i]' ref real[j]);                      Swap(ref imag[i]' ref imag[j]);                  }                  k = arraysize / 2;                  while(k <= j)                  {                      j = j - k;                      k = k / 2;                  }                  j = j + k;              }
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The following statement contains a magic number: for(i = 0;                  i <= arraysize - 2;                  i = Convert.ToInt64(i + 1))              {                  if (i < j)                  {                      Swap(ref real[i]' ref real[j]);                      Swap(ref imag[i]' ref imag[j]);                  }                  k = arraysize / 2;                  while(k <= j)                  {                      j = j - k;                      k = k / 2;                  }                  j = j + k;              }
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The following statement contains a magic number: for(i = 0;                  i <= arraysize - 2;                  i = Convert.ToInt64(i + 1))              {                  if (i < j)                  {                      Swap(ref real[i]' ref real[j]);                      Swap(ref imag[i]' ref imag[j]);                  }                  k = arraysize / 2;                  while(k <= j)                  {                      j = j - k;                      k = k / 2;                  }                  j = j + k;              }
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The following statement contains a magic number: while((i != 1))              {                  LdArraysize = LdArraysize + 1;                  i = i / 2;              }
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The following statement contains a magic number: phase0 = 2.0 * pi / arraysize;
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The following statement contains a magic number: a = 2;
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The following statement contains a magic number: for(count = 1;                  count <= LdArraysize;                  count = Convert.ToInt64(count + 1))              {                  c0 = Convert.ToInt64(arraysize / a);                  c1 = 0;                  for(k = 0;                      k <= b - 1;                      k = Convert.ToInt64(k + 1))                  {                      i = k;                      while((i < arraysize))                      {                          arg = i + b;                          if (k == 0)                          {                              prodreal = Convert.ToDouble(real[arg]);                              prodimag = Convert.ToDouble(imag[arg]);                          }                          else                          {                              prodreal = Convert.ToDouble(real[arg]) * cosarray[(int)(c1)] - Convert.ToDouble(imag[arg]) * sinarray[(int)(c1)];                              prodimag = Convert.ToDouble(real[arg]) * sinarray[(int)(c1)] + Convert.ToDouble(imag[arg]) * cosarray[(int)(c1)];                          }                          real[arg] = Convert.ToDouble(real[i]) - prodreal;                          imag[arg] = Convert.ToDouble(imag[i]) - prodimag;                          real[i] = Convert.ToDouble(real[i]) + prodreal;                          imag[i] = Convert.ToDouble(imag[i]) + prodimag;                          i = i + a;                      }                      c1 = c1 + c0;                  }                  a = a * 2;                  b = b * 2;              }
Magic Number,Wave2Zebra2Preset,VB6Fourier,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Fourier.cs,FourierTransform,The following statement contains a magic number: for(count = 1;                  count <= LdArraysize;                  count = Convert.ToInt64(count + 1))              {                  c0 = Convert.ToInt64(arraysize / a);                  c1 = 0;                  for(k = 0;                      k <= b - 1;                      k = Convert.ToInt64(k + 1))                  {                      i = k;                      while((i < arraysize))                      {                          arg = i + b;                          if (k == 0)                          {                              prodreal = Convert.ToDouble(real[arg]);                              prodimag = Convert.ToDouble(imag[arg]);                          }                          else                          {                              prodreal = Convert.ToDouble(real[arg]) * cosarray[(int)(c1)] - Convert.ToDouble(imag[arg]) * sinarray[(int)(c1)];                              prodimag = Convert.ToDouble(real[arg]) * sinarray[(int)(c1)] + Convert.ToDouble(imag[arg]) * cosarray[(int)(c1)];                          }                          real[arg] = Convert.ToDouble(real[i]) - prodreal;                          imag[arg] = Convert.ToDouble(imag[i]) - prodimag;                          real[i] = Convert.ToDouble(real[i]) + prodreal;                          imag[i] = Convert.ToDouble(imag[i]) + prodimag;                          i = i + a;                      }                      c1 = c1 + c0;                  }                  a = a * 2;                  b = b * 2;              }
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,ComputeColorPalette,The following statement contains a magic number: const int imageHeight = 200;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,ComputeColorPalette,The following statement contains a magic number: SaveBitmap("VB6"' "Colorpalette"' Legendpixelmatrix' 8' LevelPaletteDictionary);
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: fftOverlapPercentage = fftOverlapPercentage / 100;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: Console.Out.WriteLine(String.Format("NFFT (fftWindowsSize): {0}' Overlap percentage: {1}%' Overlap samples (NOverlap): {2:n2}."' fftWindowsSize' fftOverlapPercentage*100' fftOverlapSamples ));
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: Console.Out.WriteLine(String.Format("Height: {0}."' fftWindowsSize/2));
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: var magnitude = new float[fftWindowsSize / 2];
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: var Pixelmatrix = new byte[fftWindowsSize / 2' NumCols];
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: for (col = 0; col < NumCols; col++)  			{  				// read a segment of the audio file  				for (c = 0; c < fftWindowsSize; c++)  				{  					sampleIndex = col * ColSampleWidth + c;  					// make sure we don't step beyond the end of the recording  					if (sampleIndex < NumSamples) {  						real[c] = data[sampleIndex] * VB6Fourier.Hanning(fftWindowsSize' c);  						imag[c] = 0; // clear the phase  					} else {  						//System.Console.Out.WriteLine(String.Format("Outside boundries: col: {0} c: {1}"' col' c));  					}  				}    				// transform to the frequency domain  				VB6Fourier.FourierTransform(real' imag' fftWindowsSize' true);    				// and compute the magnitude spectrum  				VB6Fourier.MagnitudeSpectrum(real' imag' fftWindowsSize' VB6Fourier.W0Hanning' out magnitude);    				// set up one column of the spectrogram  				for (c = 0; c < fftWindowsSize / 2; c++)  				{  					Pixelmatrix[c' col] = (byte) MapToPixelIndex(magnitude[c]' RangedB' RangePaletteIndex);  				}    				frames[col] = magnitude;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: double nyquistFreq = sampleRate / 2;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: var F = new float[fftWindowsSize/2];
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: for (int i = 1; i < fftWindowsSize/2 + 1; i++) {  				F[i-1] = (float) ((double)i / fftWindowsSize * sampleRate); // in hz  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: double TimeslotWidth = (fftWindowsSize / (double) sampleRate) * 1000;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: double TimeslotIncrement = (ColSampleWidth / (double) sampleRate) * 1000;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: double timeIncrement = (NumSamples/sampleRate*1000) / NumCols;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: SaveBitmap ("VB6"' String.Format("VB-spectrogram-{0}x{1}"' NumCols' fftWindowsSize / 2)' Pixelmatrix' 8' LevelPaletteDictionary);
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,Compute,The following statement contains a magic number: SaveBitmap ("VB6"' String.Format("VB-spectrogram-{0}x{1}"' NumCols' fftWindowsSize / 2)' Pixelmatrix' 8' LevelPaletteDictionary);
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,MapToPixelIndex,The following statement contains a magic number: if (Mag == 0)  			{  				tempMapToPixelIndex = 0;  			}  			else  			{  				LevelIndB = 20 * Math.Log(Mag) / Log10;  				if (LevelIndB < -RangedB) {  					tempMapToPixelIndex = 0;  				} else if (LevelIndB > 0) {  					tempMapToPixelIndex  = Rangeindex;  				} else {  					tempMapToPixelIndex = Rangeindex * (LevelIndB + RangedB) / RangedB;  				}  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValue,The following statement contains a magic number: r4 = range / 4.0;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValue,The following statement contains a magic number: U = 255;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValue,The following statement contains a magic number: if (x < r4)  			{  				B = x / r4;  				G = 0;  				R = 0;  			}  			else if (x < 2 * r4)  			{  				B = (1 - (x - r4) / r4);  				G = 1 - B;  				R = 0;  			}  			else if (x < 3 * r4)  			{  				B = 0;  				G = (2 - (x - r4) / r4);  				R = 1 - G;  			}  			else  			{  				B = (x - 3 * r4) / r4;  				G = 0;  				R = 1 - B;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValue,The following statement contains a magic number: if (x < r4)  			{  				B = x / r4;  				G = 0;  				R = 0;  			}  			else if (x < 2 * r4)  			{  				B = (1 - (x - r4) / r4);  				G = 1 - B;  				R = 0;  			}  			else if (x < 3 * r4)  			{  				B = 0;  				G = (2 - (x - r4) / r4);  				R = 1 - G;  			}  			else  			{  				B = (x - 3 * r4) / r4;  				G = 0;  				R = 1 - B;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValue,The following statement contains a magic number: if (x < r4)  			{  				B = x / r4;  				G = 0;  				R = 0;  			}  			else if (x < 2 * r4)  			{  				B = (1 - (x - r4) / r4);  				G = 1 - B;  				R = 0;  			}  			else if (x < 3 * r4)  			{  				B = 0;  				G = (2 - (x - r4) / r4);  				R = 1 - G;  			}  			else  			{  				B = (x - 3 * r4) / r4;  				G = 0;  				R = 1 - B;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValue,The following statement contains a magic number: if (x < r4)  			{  				B = x / r4;  				G = 0;  				R = 0;  			}  			else if (x < 2 * r4)  			{  				B = (1 - (x - r4) / r4);  				G = 1 - B;  				R = 0;  			}  			else if (x < 3 * r4)  			{  				B = 0;  				G = (2 - (x - r4) / r4);  				R = 1 - G;  			}  			else  			{  				B = (x - 3 * r4) / r4;  				G = 0;  				R = 1 - B;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValueColor,The following statement contains a magic number: r4 = range / 4.0;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValueColor,The following statement contains a magic number: U = 255;
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValueColor,The following statement contains a magic number: if (x < r4)  			{  				B = x / r4;  				G = 0;  				R = 0;  			}  			else if (x < 2 * r4)  			{  				B = (1 - (x - r4) / r4);  				G = 1 - B;  				R = 0;  			}  			else if (x < 3 * r4)  			{  				B = 0;  				G = (2 - (x - r4) / r4);  				R = 1 - G;  			}  			else  			{  				B = (x - 3 * r4) / r4;  				G = 0;  				R = 1 - B;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValueColor,The following statement contains a magic number: if (x < r4)  			{  				B = x / r4;  				G = 0;  				R = 0;  			}  			else if (x < 2 * r4)  			{  				B = (1 - (x - r4) / r4);  				G = 1 - B;  				R = 0;  			}  			else if (x < 3 * r4)  			{  				B = 0;  				G = (2 - (x - r4) / r4);  				R = 1 - G;  			}  			else  			{  				B = (x - 3 * r4) / r4;  				G = 0;  				R = 1 - B;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValueColor,The following statement contains a magic number: if (x < r4)  			{  				B = x / r4;  				G = 0;  				R = 0;  			}  			else if (x < 2 * r4)  			{  				B = (1 - (x - r4) / r4);  				G = 1 - B;  				R = 0;  			}  			else if (x < 3 * r4)  			{  				B = 0;  				G = (2 - (x - r4) / r4);  				R = 1 - G;  			}  			else  			{  				B = (x - 3 * r4) / r4;  				G = 0;  				R = 1 - B;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,PaletteValueColor,The following statement contains a magic number: if (x < r4)  			{  				B = x / r4;  				G = 0;  				R = 0;  			}  			else if (x < 2 * r4)  			{  				B = (1 - (x - r4) / r4);  				G = 1 - B;  				R = 0;  			}  			else if (x < 3 * r4)  			{  				B = 0;  				G = (2 - (x - r4) / r4);  				R = 1 - G;  			}  			else  			{  				B = (x - 3 * r4) / r4;  				G = 0;  				R = 1 - B;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Magic Number,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following statement contains a magic number: try {  				String filenameToSave = String.Format("{0}-{1}.png"' prefix' Path.GetFileNameWithoutExtension(filename));  				Console.Out.WriteLine("Writing " + filenameToSave);    				var png = new Bitmap(width' height' PixelFormat.Format32bppArgb );  				Graphics g = Graphics.FromImage(png);  				var OneRow = new byte[(int)(4 * NumQuadsPerRow - 1) + 1];  				  				for(row = 0; row <= height - 1; row += 1)  				{  					for(col = 0; col <= width - 1; col += 1)  					{  						OneRow[col] = Convert.ToByte(Convert.ToInt32(Pixelmatrix[row' col]) & 0xFF);  						Color c = PaletteDictionary[OneRow[col]];  						png.SetPixel(col' height-row-1' c);  					}  				}  				  				png.Save(filenameToSave);  			} catch (Exception ex) {  				Console.Out.WriteLine(ex);  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: if( (N+M) > 512){  				L = 1024;  			}else if( ((N+M) > 256) && ((N+M) <= 512) ){  				L = 512;  			}else if( ((N+M) > 128) && ((N+M) <= 256) ){  				L = 256;  			}else if( ((N+M) > 64 ) && ((N+M) <= 128) ){  				L = 128;  			}else if( ((N+M) > 32 ) && ((N+M) <= 64) ){  				L = 64;  			}else if( ((N+M) > 16 ) && ((N+M) <= 32) ){  				L = 32;  			}else{  				L = 16;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: phi0 = 2.0 * Math.PI*(fStop-fStart)/fSam/(M-1);
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: theta0 = 2.0 * Math.PI*fStart/fSam;
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: for( n = 0; n < M; n++ ){  				h[n][0] = Math.Cos( n*n/2.0 * phi0 );  				h[n][1] = Math.Sin( n*n/2.0 * phi0 );  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: for( n = 0; n < M; n++ ){  				h[n][0] = Math.Cos( n*n/2.0 * phi0 );  				h[n][1] = Math.Sin( n*n/2.0 * phi0 );  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: for( n = L-N; n < L; n++){  				h[n][0] = Math.Cos( (L-n)*(L-n)/2.0 * phi0 );  				h[n][1] = Math.Sin( (L-n)*(L-n)/2.0 * phi0 );  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: for( n = L-N; n < L; n++){  				h[n][0] = Math.Cos( (L-n)*(L-n)/2.0 * phi0 );  				h[n][1] = Math.Sin( (L-n)*(L-n)/2.0 * phi0 );  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: for( n = 0; n < N; n++ ){  				psi = n*theta0 + n*n/2.0 * phi0;  				c =  Math.Cos( psi);  				s = -Math.Sin( psi );  				a = c*g[n][0] - s*g[n][1];  				b = s*g[n][0] + c*g[n][1];  				g[n][0] = a;  				g[n][1] = b;  			}
Magic Number,CommonUtils,ChirpZTransform,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\ChirpZTransform.cs,czt,The following statement contains a magic number: for( k = 0; k < M; k++ ){  				psi = k*k/2.0 * phi0;  				c =  Math.Cos( psi );  				s = -Math.Sin( psi );  				a = c*g[k][0] - s*g[k][1];  				b = s*g[k][0] + c*g[k][1];  				g[k][0] = a;  				g[k][1] = b;  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: int i ' j ' o ' t ' n=120' m=100;
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: int i ' j ' o ' t ' n=120' m=100;
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: double[] input = new double[1024];
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: double tau ' dtau ' omega ' domega ' WTreal ' WTimag ' max ' omega2 = 5.0' tau1 = -81.92;
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: double tau ' dtau ' omega ' domega ' WTreal ' WTimag ' max ' omega2 = 5.0' tau1 = -81.92;
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: double[] PsiReal = new double[16834];
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: double[] PsiImag = new double[16834];
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for(t=0; t < 750; t++)  			{  				if(t > 0 && t <= 250)  				{  					input[t] = 5*Math.Sin(6.28*t);  				}  				if(t >= 250 && t <= 750)  				{  					input[t] = 10*Math.Sin(2.0*6.28*t);  				}  				q.WriteLine(""+input[t]+"");  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for (i = 0; i < m; i++) // Compute daughter wavelet  			{  				// compute new kernels for current frequency  				tau = tau1;  				for (o=0; o<16834; o++) // For signals up to 2^13 = 8192 long  				{  					PsiReal[o] = WaveletReal(tau*omega);  					PsiImag[o] = WaveletImag(tau*omega);  					tau = tau + dtau; // Translation  				}				  				// compute values of CWT across row  				for (j=0; j<n; j++) // Compute CWT  				{  					WTreal = 0.0;  					WTimag = 0.0;  					for (o=0;o<input.Length;o++)  					{  						WTreal += input[o]*PsiReal[8192-(j*input.Length)/n+o];  						WTimag += input[o]*PsiImag[8192-(j*input.Length)/n+o];  					}  					c[i][j] = Math.Sqrt(WTreal*WTreal+WTimag*WTimag);  				}  				omega = omega*domega; // Scaling  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for (i = 0; i < m; i++) // Compute daughter wavelet  			{  				// compute new kernels for current frequency  				tau = tau1;  				for (o=0; o<16834; o++) // For signals up to 2^13 = 8192 long  				{  					PsiReal[o] = WaveletReal(tau*omega);  					PsiImag[o] = WaveletImag(tau*omega);  					tau = tau + dtau; // Translation  				}				  				// compute values of CWT across row  				for (j=0; j<n; j++) // Compute CWT  				{  					WTreal = 0.0;  					WTimag = 0.0;  					for (o=0;o<input.Length;o++)  					{  						WTreal += input[o]*PsiReal[8192-(j*input.Length)/n+o];  						WTimag += input[o]*PsiImag[8192-(j*input.Length)/n+o];  					}  					c[i][j] = Math.Sqrt(WTreal*WTreal+WTimag*WTimag);  				}  				omega = omega*domega; // Scaling  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: for (i = 0; i < m; i++) // Compute daughter wavelet  			{  				// compute new kernels for current frequency  				tau = tau1;  				for (o=0; o<16834; o++) // For signals up to 2^13 = 8192 long  				{  					PsiReal[o] = WaveletReal(tau*omega);  					PsiImag[o] = WaveletImag(tau*omega);  					tau = tau + dtau; // Translation  				}				  				// compute values of CWT across row  				for (j=0; j<n; j++) // Compute CWT  				{  					WTreal = 0.0;  					WTimag = 0.0;  					for (o=0;o<input.Length;o++)  					{  						WTreal += input[o]*PsiReal[8192-(j*input.Length)/n+o];  						WTimag += input[o]*PsiImag[8192-(j*input.Length)/n+o];  					}  					c[i][j] = Math.Sqrt(WTreal*WTreal+WTimag*WTimag);  				}  				omega = omega*domega; // Scaling  			}
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,Main,The following statement contains a magic number: max = 0.0001;
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,WaveletReal,The following statement contains a magic number: double sigma = 4.0;
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,WaveletReal,The following statement contains a magic number: return Math.Cos(2.0*Math.PI*t)* Math.Exp(-t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,WaveletReal,The following statement contains a magic number: return Math.Cos(2.0*Math.PI*t)* Math.Exp(-t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,WaveletReal,The following statement contains a magic number: return Math.Cos(2.0*Math.PI*t)* Math.Exp(-t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,WaveletImag,The following statement contains a magic number: double sigma = 4.0;
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,WaveletImag,The following statement contains a magic number: return Math.Sin(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,WaveletImag,The following statement contains a magic number: return Math.Sin(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWT.cs,WaveletImag,The following statement contains a magic number: return Math.Sin(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: Size = new System.Drawing.Size(240'240);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: Size = new System.Drawing.Size(240'240);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: OKButton.Size = new System.Drawing.Size(40'25);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: OKButton.Size = new System.Drawing.Size(40'25);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: OKButton.Location = new Point(100'160);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: OKButton.Location = new Point(100'160);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: Cancel_Button.Size = new System.Drawing.Size(60'25);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: Cancel_Button.Size = new System.Drawing.Size(60'25);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: Cancel_Button.Location = new Point(150'160);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: Cancel_Button.Location = new Point(150'160);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: sigmaLabel.Location = new Point(20'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: sigmaLabel.Location = new Point(20'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: sigmaLabel.Size = new System.Drawing.Size(70'16);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: sigmaLabel.Size = new System.Drawing.Size(70'16);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: sigmaBox.Location = new Point(90'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: sigmaBox.Location = new Point(90'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: sigmaBox.Size = new System.Drawing.Size(60'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: sigmaBox.Size = new System.Drawing.Size(60'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: lowerfreqLabel.Location = new Point(20'50);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: lowerfreqLabel.Location = new Point(20'50);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: lowerfreqLabel.Size = new System.Drawing.Size(70'16);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: lowerfreqLabel.Size = new System.Drawing.Size(70'16);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: lowerfreqBox.Location = new Point(90'50);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: lowerfreqBox.Location = new Point(90'50);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: lowerfreqBox.Size = new System.Drawing.Size(60'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: lowerfreqBox.Size = new System.Drawing.Size(60'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: upperfreqLabel.Location = new Point(20'80);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: upperfreqLabel.Location = new Point(20'80);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: upperfreqLabel.Size = new System.Drawing.Size(70'16);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: upperfreqLabel.Size = new System.Drawing.Size(70'16);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: upperfreqBox.Location = new Point(90'80);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: upperfreqBox.Location = new Point(90'80);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: upperfreqBox.Size = new System.Drawing.Size(60'20);
Magic Number,CWT,Wavelet_Dialog,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Wavelet_Dialog,The following statement contains a magic number: upperfreqBox.Size = new System.Drawing.Size(60'20);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,RealWavelet,The following statement contains a magic number: return Math.Cos(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,RealWavelet,The following statement contains a magic number: return Math.Cos(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,RealWavelet,The following statement contains a magic number: return Math.Cos(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ImagWavelet,The following statement contains a magic number: return Math.Sin(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ImagWavelet,The following statement contains a magic number: return Math.Sin(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ImagWavelet,The following statement contains a magic number: return Math.Sin(2.0*Math.PI*t)* Math.Exp(-1.0*t*t/(2.0*sigma*sigma)) / (sigma*Math.Sqrt(2.0*Math.PI));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: double[] realkernel = new double[signal_size*2];
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: double[] imagkernel = new double[signal_size*2];
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: df = Math.Pow(upper_freq/lower_freq' 1.0/256.0);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: max = 0.0001;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (row = 0; row < 256 ; row++)  			{  				// compute new kernels for current frequency  				//t = -8192.0 * dt;  				t = -1.0 * signal_size * dt;  				for (i = 0; i < signal_size*2; i++) //16384  				{  					realkernel[i] = RealWavelet(t * f);  					imagkernel[i] = ImagWavelet(t * f);  					t = t + dt;  				}  				// compute values of CWT across row  				for (col = 0; col < 512; col++)  				{  					realval = 0.0;  					imagval = 0.0;  					loc = (col * signal_size) / 512;  					for (i = 0; i < signal_size; i++)  					{  						realval = realval + signal_data[i]*realkernel[signal_size-loc+i]; // 8192-loc+i  						imagval = imagval + signal_data[i]*imagkernel[signal_size-loc+i]; // 8192-loc+i  					}  					x = Math.Sqrt(realval * realval + imagval * imagval);  					k = 512 * row + col;  					image_data[k] = x;    					// store max value					  					if (max<x)  						max = x;  				}  				f = f * df;  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (row = 0; row < 256 ; row++)  			{  				// compute new kernels for current frequency  				//t = -8192.0 * dt;  				t = -1.0 * signal_size * dt;  				for (i = 0; i < signal_size*2; i++) //16384  				{  					realkernel[i] = RealWavelet(t * f);  					imagkernel[i] = ImagWavelet(t * f);  					t = t + dt;  				}  				// compute values of CWT across row  				for (col = 0; col < 512; col++)  				{  					realval = 0.0;  					imagval = 0.0;  					loc = (col * signal_size) / 512;  					for (i = 0; i < signal_size; i++)  					{  						realval = realval + signal_data[i]*realkernel[signal_size-loc+i]; // 8192-loc+i  						imagval = imagval + signal_data[i]*imagkernel[signal_size-loc+i]; // 8192-loc+i  					}  					x = Math.Sqrt(realval * realval + imagval * imagval);  					k = 512 * row + col;  					image_data[k] = x;    					// store max value					  					if (max<x)  						max = x;  				}  				f = f * df;  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (row = 0; row < 256 ; row++)  			{  				// compute new kernels for current frequency  				//t = -8192.0 * dt;  				t = -1.0 * signal_size * dt;  				for (i = 0; i < signal_size*2; i++) //16384  				{  					realkernel[i] = RealWavelet(t * f);  					imagkernel[i] = ImagWavelet(t * f);  					t = t + dt;  				}  				// compute values of CWT across row  				for (col = 0; col < 512; col++)  				{  					realval = 0.0;  					imagval = 0.0;  					loc = (col * signal_size) / 512;  					for (i = 0; i < signal_size; i++)  					{  						realval = realval + signal_data[i]*realkernel[signal_size-loc+i]; // 8192-loc+i  						imagval = imagval + signal_data[i]*imagkernel[signal_size-loc+i]; // 8192-loc+i  					}  					x = Math.Sqrt(realval * realval + imagval * imagval);  					k = 512 * row + col;  					image_data[k] = x;    					// store max value					  					if (max<x)  						max = x;  				}  				f = f * df;  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (row = 0; row < 256 ; row++)  			{  				// compute new kernels for current frequency  				//t = -8192.0 * dt;  				t = -1.0 * signal_size * dt;  				for (i = 0; i < signal_size*2; i++) //16384  				{  					realkernel[i] = RealWavelet(t * f);  					imagkernel[i] = ImagWavelet(t * f);  					t = t + dt;  				}  				// compute values of CWT across row  				for (col = 0; col < 512; col++)  				{  					realval = 0.0;  					imagval = 0.0;  					loc = (col * signal_size) / 512;  					for (i = 0; i < signal_size; i++)  					{  						realval = realval + signal_data[i]*realkernel[signal_size-loc+i]; // 8192-loc+i  						imagval = imagval + signal_data[i]*imagkernel[signal_size-loc+i]; // 8192-loc+i  					}  					x = Math.Sqrt(realval * realval + imagval * imagval);  					k = 512 * row + col;  					image_data[k] = x;    					// store max value					  					if (max<x)  						max = x;  				}  				f = f * df;  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (row = 0; row < 256 ; row++)  			{  				// compute new kernels for current frequency  				//t = -8192.0 * dt;  				t = -1.0 * signal_size * dt;  				for (i = 0; i < signal_size*2; i++) //16384  				{  					realkernel[i] = RealWavelet(t * f);  					imagkernel[i] = ImagWavelet(t * f);  					t = t + dt;  				}  				// compute values of CWT across row  				for (col = 0; col < 512; col++)  				{  					realval = 0.0;  					imagval = 0.0;  					loc = (col * signal_size) / 512;  					for (i = 0; i < signal_size; i++)  					{  						realval = realval + signal_data[i]*realkernel[signal_size-loc+i]; // 8192-loc+i  						imagval = imagval + signal_data[i]*imagkernel[signal_size-loc+i]; // 8192-loc+i  					}  					x = Math.Sqrt(realval * realval + imagval * imagval);  					k = 512 * row + col;  					image_data[k] = x;    					// store max value					  					if (max<x)  						max = x;  				}  				f = f * df;  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,ComputeSpectrogram,The following statement contains a magic number: for (i = 0;i<512;i++)  			{  				for (j = 0;j<256;j++)  				{  					k = 512 *j+i;  					c = 255 - (int)(255.0 *image_data[k]/max);  					if (c<0)  						c = 0;  					if (c>255)  						c = 255;  					bmp.SetPixel(i'255-j'System.Drawing.Color.FromArgb(255'c'c'c));  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: height = 256;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: width = 512;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following statement contains a magic number: for (j = 0;j<height;j++)  			{  				for (i = 0;i<width;i++)  				{  					k++;  					red = bmp.GetPixel(i'j).R;  					hibyte = red/16;  					lowbyte = red - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					green = bmp.GetPixel(i'j).G;  					hibyte = green/16;  					lowbyte = green - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					blue = bmp.GetPixel(i'j).B;  					hibyte = blue/16;  					lowbyte = blue - hibyte *16;  					switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}  					switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}    					if (k%12 == 0)  						sw.WriteLine();  				}  			}
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,CWTForm,The following statement contains a magic number: Size = new System.Drawing.Size(600' 600);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,CWTForm,The following statement contains a magic number: Size = new System.Drawing.Size(600' 600);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,CWTForm,The following statement contains a magic number: image_width = 512;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,CWTForm,The following statement contains a magic number: image_height = 256;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,CWTForm,The following statement contains a magic number: sigma = 4.0;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,CWTForm,The following statement contains a magic number: upper_freq = 5000;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,CWTForm,The following statement contains a magic number: lower_freq = 20;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,CWTForm,The following statement contains a magic number: signal_data = new Double[55120];
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: string test_string = new string(new char[255]);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: System.Drawing.Brush sb = new SolidBrush(System.Drawing.Color.FromArgb(240'240'240));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: System.Drawing.Brush sb = new SolidBrush(System.Drawing.Color.FromArgb(240'240'240));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: System.Drawing.Brush sb = new SolidBrush(System.Drawing.Color.FromArgb(240'240'240));
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: gr.FillRectangle(sb' 0'0'600'600);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: gr.FillRectangle(sb' 0'0'600'600);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: gr.DrawImage(bmp' 20' 20);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: gr.DrawImage(bmp' 20' 20);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: font1 = new System.Drawing.Font("Arial"' 12' FontStyle.Regular' GraphicsUnit.Pixel);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: ix = 20;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: iy = 300;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: idx = 125;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,Form_Paint,The following statement contains a magic number: idy = 25;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,PrintCWT,The following statement contains a magic number: string test_string = new string(new char[255]);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,PrintCWT,The following statement contains a magic number: gr.DrawImage(bmp' 20' 20);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,PrintCWT,The following statement contains a magic number: gr.DrawImage(bmp' 20' 20);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,PrintCWT,The following statement contains a magic number: font1 = new System.Drawing.Font("Arial"' 12' FontStyle.Regular' GraphicsUnit.Pixel);
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,PrintCWT,The following statement contains a magic number: ix = 20;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,PrintCWT,The following statement contains a magic number: iy = 300;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,PrintCWT,The following statement contains a magic number: idx = 125;
Magic Number,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,PrintCWT,The following statement contains a magic number: idy = 25;
Magic Number,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,ProcessTracks,The following statement contains a magic number: foreach (string file in files) //filter files that can be processed  			{  				if (_aborted) break;    				Track track = GetTrack(mintracklen' maxtracklen' file' audioProxy);  				if (track == null)  					continue; /*track is not eligible because of min/max parameters*/  				//create spectrogram of the file  				float[][] logSpectrum = null;  				try  				{  					//try creating the spectrum from a file  					logSpectrum = _manager.CreateLogSpectrogram(audioProxy' track.Path' milliSecondsToProcess' startMillisecond);  				}  				catch (Exception ex)  				{  					if (ex is ThreadAbortException)  						throw;  					/*the file might be corrupted or missing*/  					continue; /*Continue processing even if creation of the spectrogram failed*/  				}  				_storage.InsertTrack(track); /*Insert track into the storage*/  				/*Create fingerprints that will be used as initial fingerprints to be queried*/  				List<bool[]> dbFingers = _manager.CreateFingerprints(logSpectrum' creationalStride);  				/*Get fingerprint's hash signature' and associate it to a specific track*/  				List<HashSignature> creationalsignatures = GetSignatures(dbFingers' track' hashTables' hashKeys);  				foreach (HashSignature hash in creationalsignatures)  				{  					_storage.InsertHash(hash' HashType.Creational);  					/*Set this hashes as also the query hashes*/  					_storage.InsertHash(hash' HashType.Query);  				}  				/*Create fingerprints for query*/  				List<bool[]> queryFingers = _manager.CreateFingerprints(logSpectrum' queryStride); /*Create fingerprints*/  				List<HashSignature> querysignatures = GetSignatures(queryFingers' track' hashTables' hashKeys);  				  				// ***** PIN TODO: CHANGE THIS  				object[][] arr = new object[querysignatures.Count][];  				int count = 0;  				foreach (HashSignature hash in querysignatures) {  					_storage.InsertHash(hash' HashType.Query); /*Insert hash-buckets into hash-tables*/    					String signatureText = "{";  					for (int s = 0; s < hash.Signature.Length; s++) {  						signatureText += hash.Signature[s];  						signatureText += " ";  					}  					signatureText += "}";  					  					arr[count++] = new object[5] {  						hash.Id'  						hash.Track.Title'  						hash.Track.Artist'  						hash.Track.TrackLength'  						signatureText  					};  				}  				String filenameToSave = String.Format("C:\\{0}-hash-buckets.txt"' System.IO.Path.GetFileNameWithoutExtension(file));  				CSVWriter csv = new CSVWriter(filenameToSave);  				csv.Write(arr);  				// ***** end PIN  				  				if (trackProcessed != null)  					trackProcessed.Invoke(track);  				tracks.Add(track);  			}
Magic Number,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,GetTrack,The following statement contains a magic number: if (tags == null)  			{  				/*The song does not contain any tags*/  				artist = "Unknown";  				title = "Unknown";  				duration = 60;  			}  			else  			{  				/*The song contains related tags*/  				artist = tags.artist;  				title = tags.title;  				duration = tags.duration;  			}
Magic Number,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,FindDuplicates,The following statement contains a magic number: foreach (Track track in tracks)  			{  				Dictionary<Track' int> trackDuplicates = new Dictionary<Track' int>(); /*this will be a set with duplicates*/  				HashSet<HashSignature> fingerprints = _storage.GetHashSignatures(track' HashType.Query); /*get all existing signatures for a specific track*/  				int fingerthreshold = (int) ((float) fingerprints.Count/100*percentageThreshold);  				foreach (HashSignature fingerprint in fingerprints)  				{  					Dictionary<Track' int> results = _storage.GetTracks(fingerprint.Signature' threshold); /*get all duplicate track including the original track*/  					foreach (KeyValuePair<Track' int> result in results)  					{  						if (!trackDuplicates.ContainsKey(result.Key))  							trackDuplicates.Add(result.Key' 1);  						else  							trackDuplicates[result.Key]++;  					}  				}  				if (trackDuplicates.Count > 1)  				{  					IEnumerable<KeyValuePair<Track' int>> d = trackDuplicates.Where((pair) => pair.Value > fingerthreshold);  					if (d.Count() > 1)  						duplicates.Add(new HashSet<Track>(d.Select((pair) => pair.Key)));  				}  				if (callback != null)  					callback.Invoke(track' total' ++current);  			}
Magic Number,Wave2Zebra2Preset.DataAccess,Repository,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\Repository.cs,AbortProcessing,The following statement contains a magic number: while(_threadCounts != 0)  			{  				Thread.Sleep(10);  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting.MathUtils,HaarWavelet,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MathUtils\HaarWavelet.cs,DecomposeArray,The following statement contains a magic number: while (h > 1)              {                  h /= 2;                  for (int i = 0; i < h; i++)                  {                      temp[i] = (float) ((array[2*i] + array[2*i + 1])/Math.Sqrt(2));                      temp[h + i] = (float) ((array[2*i] - array[2*i + 1])/Math.Sqrt(2));                  }                  for (int i = 0; i < 2*h; i++)                  {                      array[i] = temp[i];                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting.MathUtils,HaarWavelet,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MathUtils\HaarWavelet.cs,DecomposeArray,The following statement contains a magic number: while (h > 1)              {                  h /= 2;                  for (int i = 0; i < h; i++)                  {                      temp[i] = (float) ((array[2*i] + array[2*i + 1])/Math.Sqrt(2));                      temp[h + i] = (float) ((array[2*i] - array[2*i + 1])/Math.Sqrt(2));                  }                  for (int i = 0; i < 2*h; i++)                  {                      array[i] = temp[i];                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting.MathUtils,HaarWavelet,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MathUtils\HaarWavelet.cs,DecomposeArray,The following statement contains a magic number: while (h > 1)              {                  h /= 2;                  for (int i = 0; i < h; i++)                  {                      temp[i] = (float) ((array[2*i] + array[2*i + 1])/Math.Sqrt(2));                      temp[h + i] = (float) ((array[2*i] - array[2*i + 1])/Math.Sqrt(2));                  }                  for (int i = 0; i < 2*h; i++)                  {                      array[i] = temp[i];                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting.MathUtils,HaarWavelet,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MathUtils\HaarWavelet.cs,DecomposeArray,The following statement contains a magic number: while (h > 1)              {                  h /= 2;                  for (int i = 0; i < h; i++)                  {                      temp[i] = (float) ((array[2*i] + array[2*i + 1])/Math.Sqrt(2));                      temp[h + i] = (float) ((array[2*i] - array[2*i + 1])/Math.Sqrt(2));                  }                  for (int i = 0; i < 2*h; i++)                  {                      array[i] = temp[i];                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting.MathUtils,HaarWavelet,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MathUtils\HaarWavelet.cs,DecomposeArray,The following statement contains a magic number: while (h > 1)              {                  h /= 2;                  for (int i = 0; i < h; i++)                  {                      temp[i] = (float) ((array[2*i] + array[2*i + 1])/Math.Sqrt(2));                      temp[h + i] = (float) ((array[2*i] - array[2*i + 1])/Math.Sqrt(2));                  }                  for (int i = 0; i < 2*h; i++)                  {                      array[i] = temp[i];                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting.MathUtils,HaarWavelet,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MathUtils\HaarWavelet.cs,DecomposeArray,The following statement contains a magic number: while (h > 1)              {                  h /= 2;                  for (int i = 0; i < h; i++)                  {                      temp[i] = (float) ((array[2*i] + array[2*i + 1])/Math.Sqrt(2));                      temp[h + i] = (float) ((array[2*i] - array[2*i + 1])/Math.Sqrt(2));                  }                  for (int i = 0; i < 2*h; i++)                  {                      array[i] = temp[i];                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting.MathUtils,HaarWavelet,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MathUtils\HaarWavelet.cs,DecomposeArray,The following statement contains a magic number: while (h > 1)              {                  h /= 2;                  for (int i = 0; i < h; i++)                  {                      temp[i] = (float) ((array[2*i] + array[2*i + 1])/Math.Sqrt(2));                      temp[h + i] = (float) ((array[2*i] - array[2*i + 1])/Math.Sqrt(2));                  }                  for (int i = 0; i < 2*h; i++)                  {                      array[i] = temp[i];                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting.MathUtils,HaarWavelet,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MathUtils\HaarWavelet.cs,DecomposeArray,The following statement contains a magic number: while (h > 1)              {                  h /= 2;                  for (int i = 0; i < h; i++)                  {                      temp[i] = (float) ((array[2*i] + array[2*i + 1])/Math.Sqrt(2));                      temp[h + i] = (float) ((array[2*i] - array[2*i + 1])/Math.Sqrt(2));                  }                  for (int i = 0; i < 2*h; i++)                  {                      array[i] = temp[i];                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FingerprintManager,The following statement contains a magic number: LogBins = 256;
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FingerprintManager,The following statement contains a magic number: FingerprintLength = 128;
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FingerprintManager,The following statement contains a magic number: Overlap = 64;
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FingerprintManager,The following statement contains a magic number: WdftSize = 2048;
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FingerprintManager,The following statement contains a magic number: MaxFrequency = 5512;
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FingerprintManager,The following statement contains a magic number: TopWavelets = 200;
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FingerprintManager,The following statement contains a magic number: SampleRate = 44100;
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,NormalizeInPlace,The following statement contains a magic number: float rms = (float) Math.Sqrt(squares/nsamples)*10;
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The following statement contains a magic number: float[] complexSignal = new float[2*fftWindowsSize];
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++)  			{  				//take 371 ms each 11.6 ms (2048 samples each 64 samples)  				// apply Hanning Window  				for (int j = 0; j < fftWindowsSize /*2048*/; j++)  				{  					// Weight by Hann Window  					complexSignal[2*j] = (float) (windowArray[j] * samples[i * overlap + j]);  					//complexSignal[2*j] = (float) ((4.0/(fftWindowsSize - 1)) * windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/  					complexSignal[2*j + 1] = 0;  // need to clear out as fft modifies buffer  				}  				//FFT transform for gathering the spectrum  				Fourier.FFT(complexSignal' fftWindowsSize' FourierDirection.Forward);  				float[] band = new float[fftWindowsSize/2 + 1];  				for (int j = 0; j < fftWindowsSize/2 + 1; j++)  				{  					double re = complexSignal[2*j];  					double img = complexSignal[2*j + 1];  					//double img = 0.0; // TODO: Zero out the imaginary component (phase) ? / need to clear out as fft modifies buffer  					band[j] = (float) Math.Sqrt(re*re + img*img);  				}  				frames[i] = band;  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++)  			{  				//take 371 ms each 11.6 ms (2048 samples each 64 samples)  				// apply Hanning Window  				for (int j = 0; j < fftWindowsSize /*2048*/; j++)  				{  					// Weight by Hann Window  					complexSignal[2*j] = (float) (windowArray[j] * samples[i * overlap + j]);  					//complexSignal[2*j] = (float) ((4.0/(fftWindowsSize - 1)) * windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/  					complexSignal[2*j + 1] = 0;  // need to clear out as fft modifies buffer  				}  				//FFT transform for gathering the spectrum  				Fourier.FFT(complexSignal' fftWindowsSize' FourierDirection.Forward);  				float[] band = new float[fftWindowsSize/2 + 1];  				for (int j = 0; j < fftWindowsSize/2 + 1; j++)  				{  					double re = complexSignal[2*j];  					double img = complexSignal[2*j + 1];  					//double img = 0.0; // TODO: Zero out the imaginary component (phase) ? / need to clear out as fft modifies buffer  					band[j] = (float) Math.Sqrt(re*re + img*img);  				}  				frames[i] = band;  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++)  			{  				//take 371 ms each 11.6 ms (2048 samples each 64 samples)  				// apply Hanning Window  				for (int j = 0; j < fftWindowsSize /*2048*/; j++)  				{  					// Weight by Hann Window  					complexSignal[2*j] = (float) (windowArray[j] * samples[i * overlap + j]);  					//complexSignal[2*j] = (float) ((4.0/(fftWindowsSize - 1)) * windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/  					complexSignal[2*j + 1] = 0;  // need to clear out as fft modifies buffer  				}  				//FFT transform for gathering the spectrum  				Fourier.FFT(complexSignal' fftWindowsSize' FourierDirection.Forward);  				float[] band = new float[fftWindowsSize/2 + 1];  				for (int j = 0; j < fftWindowsSize/2 + 1; j++)  				{  					double re = complexSignal[2*j];  					double img = complexSignal[2*j + 1];  					//double img = 0.0; // TODO: Zero out the imaginary component (phase) ? / need to clear out as fft modifies buffer  					band[j] = (float) Math.Sqrt(re*re + img*img);  				}  				frames[i] = band;  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++)  			{  				//take 371 ms each 11.6 ms (2048 samples each 64 samples)  				// apply Hanning Window  				for (int j = 0; j < fftWindowsSize /*2048*/; j++)  				{  					// Weight by Hann Window  					complexSignal[2*j] = (float) (windowArray[j] * samples[i * overlap + j]);  					//complexSignal[2*j] = (float) ((4.0/(fftWindowsSize - 1)) * windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/  					complexSignal[2*j + 1] = 0;  // need to clear out as fft modifies buffer  				}  				//FFT transform for gathering the spectrum  				Fourier.FFT(complexSignal' fftWindowsSize' FourierDirection.Forward);  				float[] band = new float[fftWindowsSize/2 + 1];  				for (int j = 0; j < fftWindowsSize/2 + 1; j++)  				{  					double re = complexSignal[2*j];  					double img = complexSignal[2*j + 1];  					//double img = 0.0; // TODO: Zero out the imaginary component (phase) ? / need to clear out as fft modifies buffer  					band[j] = (float) Math.Sqrt(re*re + img*img);  				}  				frames[i] = band;  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++)  			{  				//take 371 ms each 11.6 ms (2048 samples each 64 samples)  				// apply Hanning Window  				for (int j = 0; j < fftWindowsSize /*2048*/; j++)  				{  					// Weight by Hann Window  					complexSignal[2*j] = (float) (windowArray[j] * samples[i * overlap + j]);  					//complexSignal[2*j] = (float) ((4.0/(fftWindowsSize - 1)) * windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/  					complexSignal[2*j + 1] = 0;  // need to clear out as fft modifies buffer  				}  				//FFT transform for gathering the spectrum  				Fourier.FFT(complexSignal' fftWindowsSize' FourierDirection.Forward);  				float[] band = new float[fftWindowsSize/2 + 1];  				for (int j = 0; j < fftWindowsSize/2 + 1; j++)  				{  					double re = complexSignal[2*j];  					double img = complexSignal[2*j + 1];  					//double img = 0.0; // TODO: Zero out the imaginary component (phase) ? / need to clear out as fft modifies buffer  					band[j] = (float) Math.Sqrt(re*re + img*img);  				}  				frames[i] = band;  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++)  			{  				//take 371 ms each 11.6 ms (2048 samples each 64 samples)  				// apply Hanning Window  				for (int j = 0; j < fftWindowsSize /*2048*/; j++)  				{  					// Weight by Hann Window  					complexSignal[2*j] = (float) (windowArray[j] * samples[i * overlap + j]);  					//complexSignal[2*j] = (float) ((4.0/(fftWindowsSize - 1)) * windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/  					complexSignal[2*j + 1] = 0;  // need to clear out as fft modifies buffer  				}  				//FFT transform for gathering the spectrum  				Fourier.FFT(complexSignal' fftWindowsSize' FourierDirection.Forward);  				float[] band = new float[fftWindowsSize/2 + 1];  				for (int j = 0; j < fftWindowsSize/2 + 1; j++)  				{  					double re = complexSignal[2*j];  					double img = complexSignal[2*j + 1];  					//double img = 0.0; // TODO: Zero out the imaginary component (phase) ? / need to clear out as fft modifies buffer  					band[j] = (float) Math.Sqrt(re*re + img*img);  				}  				frames[i] = band;  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateLogSpectrogram,The following statement contains a magic number: float[] complexSignal = new float[2*fftWindowsSize];
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateLogSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++)  			{  				//take 371 ms each 11.6 ms (2048 samples each 64 samples)  				for (int j = 0; j < fftWindowsSize /*2048*/; j++)  				{  					// Weight by Hann Window  					complexSignal[2*j] = (float) (windowArray[j] * samples[i * overlap + j]);  					//complexSignal[2*j] = (float) (_windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/  					complexSignal[2*j + 1] = 0;  				}  				//FFT transform for gathering the spectrum  				Fourier.FFT(complexSignal' fftWindowsSize' FourierDirection.Forward);  				frames[i] = ExtractLogBins(complexSignal);  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,CreateLogSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++)  			{  				//take 371 ms each 11.6 ms (2048 samples each 64 samples)  				for (int j = 0; j < fftWindowsSize /*2048*/; j++)  				{  					// Weight by Hann Window  					complexSignal[2*j] = (float) (windowArray[j] * samples[i * overlap + j]);  					//complexSignal[2*j] = (float) (_windowArray[j]*samples[i*overlap + j]); /*Weight by Hann Window*/  					complexSignal[2*j + 1] = 0;  				}  				//FFT transform for gathering the spectrum  				Fourier.FFT(complexSignal' fftWindowsSize' FourierDirection.Forward);  				frames[i] = ExtractLogBins(complexSignal);  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,ExtractLogBins,The following statement contains a magic number: for (int i = 0; i < logBins; i++)  			{  				int lowBound = _logFrequenciesIndex[i];  				int hiBound = _logFrequenciesIndex[i + 1];    				for (int k = lowBound; k < hiBound; k++)  				{  					double re = spectrum[2*k];  					double img = spectrum[2*k + 1];  					sumFreq[i] += (float) (Math.Sqrt(re*re + img*img));  				}  				sumFreq[i] = sumFreq[i]/(hiBound - lowBound);  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,ExtractLogBins,The following statement contains a magic number: for (int i = 0; i < logBins; i++)  			{  				int lowBound = _logFrequenciesIndex[i];  				int hiBound = _logFrequenciesIndex[i + 1];    				for (int k = lowBound; k < hiBound; k++)  				{  					double re = spectrum[2*k];  					double img = spectrum[2*k + 1];  					sumFreq[i] += (float) (Math.Sqrt(re*re + img*img));  				}  				sumFreq[i] = sumFreq[i]/(hiBound - lowBound);  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,ExtractTopWavelets,The following statement contains a magic number: bool[] result = new bool[concatenated.Length * 2];
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,ExtractTopWavelets,The following statement contains a magic number: for (int i = 0; i < topWavelets; i++)  			{  				int index = indexes[i];  				double value = concatenated[i];  				if (value > 0)                  /*positive wavelet*/  				result[index * 2] = true;  				else if (value < 0)             /*negative wavelet*/  				result[index * 2 + 1] = true;  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,ExtractTopWavelets,The following statement contains a magic number: for (int i = 0; i < topWavelets; i++)  			{  				int index = indexes[i];  				double value = concatenated[i];  				if (value > 0)                  /*positive wavelet*/  				result[index * 2] = true;  				else if (value < 0)             /*negative wavelet*/  				result[index * 2 + 1] = true;  			}
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FreqToIndex,The following statement contains a magic number: float fraction = freq/((float) sampleRate/2);
Magic Number,Wave2Zebra2Preset.Fingerprinting,FingerprintManager,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\FingerprintManager.cs,FreqToIndex,The following statement contains a magic number: int i = (int) Math.Round((spectrumLength/2 + 1)*fraction);
Magic Number,Wave2Zebra2Preset.Fingerprinting,MinHash,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MinHash.cs,ComputeMinHashSignature,The following statement contains a magic number: for (int i = 0; i < _permutationsCount /*100*/; i++)              {                  minHash[i] = 255; /*The probability of occurrence of 1 after position 255 is very insignificant*/                  int len = _permutations[i].Length;                  for (int j = 0; j < len /*256*/; j++)                  {                      if (fingerprint[_permutations[i][j]])                      {                          minHash[i] = j; /*Looking for first occurrence of '1'*/                          break;                      }                  }              }
Magic Number,Wave2Zebra2Preset.Fingerprinting,MinHash,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\Fingerprinting\MinHash.cs,GroupMinHashToLSHBuckets,The following statement contains a magic number: const int maxNumber = 8;
Magic Number,Wave2Zebra2Preset.HermitGauges,AudioAnalyser,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\AudioAnalyser.cs,AudioAnalyser,The following statement contains a magic number: spectrumData = new float[inputBlockSize / 2];
Magic Number,Wave2Zebra2Preset.HermitGauges,AudioAnalyser,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\AudioAnalyser.cs,AudioAnalyser,The following statement contains a magic number: spectrumHist = RectangularArrays.ReturnRectangularFloatArray(inputBlockSize / 2' historyLen);
Magic Number,Wave2Zebra2Preset.HermitGauges,AudioAnalyser,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\AudioAnalyser.cs,AudioAnalyser,The following statement contains a magic number: biasRange = new float[2];
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,SetInput,The following statement contains a magic number: for (int i = 0; i < blockSize; i++)  			{  				xre[i] = (double) input[off + i] / 32768.0;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: if (buffer.Length != blockSize / 2)  			{  				throw new System.ArgumentException("bad output buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + buffer.Length);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: if (buffer.Length != blockSize / 2)  			{  				throw new System.ArgumentException("bad output buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + buffer.Length);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: for (int i = 0; i < blockSize / 2; i++)  			{  				double r = xre[i * 2];  				double im = i == 0 ? 0.0 : xre[i * 2 - 1];  				buffer[i] = (float)(Math.Sqrt(r * r + im * im)) / scale;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: for (int i = 0; i < blockSize / 2; i++)  			{  				double r = xre[i * 2];  				double im = i == 0 ? 0.0 : xre[i * 2 - 1];  				buffer[i] = (float)(Math.Sqrt(r * r + im * im)) / scale;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: for (int i = 0; i < blockSize / 2; i++)  			{  				double r = xre[i * 2];  				double im = i == 0 ? 0.0 : xre[i * 2 - 1];  				buffer[i] = (float)(Math.Sqrt(r * r + im * im)) / scale;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: if (average.Length != blockSize / 2)  			{  				throw new System.ArgumentException("bad history buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + average.Length);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: if (average.Length != blockSize / 2)  			{  				throw new System.ArgumentException("bad history buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + average.Length);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: if (histories.Length != blockSize / 2)  			{  				throw new System.ArgumentException("bad average buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + histories.Length);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: if (histories.Length != blockSize / 2)  			{  				throw new System.ArgumentException("bad average buffer size in FFT:" + " must be " + (blockSize / 2) + "; given " + histories.Length);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: for (int i = 0; i < blockSize / 2; i++)  			{  				double r = xre[i * 2];  				double im = i == 0 ? 0.0 : xre[i * 2 - 1];  				float val = (float)(Math.Sqrt(r * r + im * im)) / scale;    				float[] hist = histories[i];  				float prev = hist[index];  				hist[index] = val;  				average[i] = average[i] - prev / historyLen + val / historyLen;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: for (int i = 0; i < blockSize / 2; i++)  			{  				double r = xre[i * 2];  				double im = i == 0 ? 0.0 : xre[i * 2 - 1];  				float val = (float)(Math.Sqrt(r * r + im * im)) / scale;    				float[] hist = histories[i];  				float prev = hist[index];  				hist[index] = val;  				average[i] = average[i] - prev / historyLen + val / historyLen;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,getResults,The following statement contains a magic number: for (int i = 0; i < blockSize / 2; i++)  			{  				double r = xre[i * 2];  				double im = i == 0 ? 0.0 : xre[i * 2 - 1];  				float val = (float)(Math.Sqrt(r * r + im * im)) / scale;    				float[] hist = histories[i];  				float prev = hist[index];  				hist[index] = val;  				average[i] = average[i] - prev / historyLen + val / historyLen;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,findKeyFrequencies,The following statement contains a magic number: for (int i = 0; i < len && count < results.Length; ++i)  			{  				if (spectrum[i] > 2 * average)  				{  					// Compute the weighted average frequency of this peak.  					float tot = 0f;  					float wavg = 0f;  					int j;  					for (j = i; j < len && spectrum[j] > 3 * average; ++j)  					{  						tot += spectrum[j];  						wavg += spectrum[j] * (float) j;  					}  					wavg /= tot;  					results[count++] = wavg;    					// Skip past this peak.  					i = j;  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,FFTTransformer,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\FFTTransformer.cs,findKeyFrequencies,The following statement contains a magic number: for (int i = 0; i < len && count < results.Length; ++i)  			{  				if (spectrum[i] > 2 * average)  				{  					// Compute the weighted average frequency of this peak.  					float tot = 0f;  					float wavg = 0f;  					int j;  					for (j = i; j < len && spectrum[j] > 3 * average; ++j)  					{  						tot += spectrum[j];  						wavg += spectrum[j] * (float) j;  					}  					wavg /= tot;  					results[count++] = wavg;    					// Skip past this peak.  					i = j;  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,Gauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Gauge.cs,findTextSize,The following statement contains a magic number: do  			{  				//pen.TextSize = size;  				int sw = (int) graphics.MeasureString(template' TextFont).Width;  				if (sw <= w)  				{  					break;  				}  				--size;  			} while (size > 12);
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,refreshLayout,The following statement contains a magic number: int gutter = min / (min > 400 ? 15 : 20);
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,refreshLayout,The following statement contains a magic number: int gutter = min / (min > 400 ? 15 : 20);
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,refreshLayout,The following statement contains a magic number: int gutter = min / (min > 400 ? 15 : 20);
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutLandscape,The following statement contains a magic number: int col = (width - gutter * 3) / 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutLandscape,The following statement contains a magic number: int col = (width - gutter * 3) / 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutLandscape,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the left pane in two.  				int row = (height - gutter * 3) / 2;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + row);  				y += row + gutter;  				powerRect = new Rectangle(x' y' x + col' height - gutter);  				x += col + gutter;  				y = gutter;    				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' height - gutter);  				}  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' height - gutter);  				x += col + gutter;  				sonaRect = new Rectangle(x' y' x + col' height - gutter);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutLandscape,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the left pane in two.  				int row = (height - gutter * 3) / 2;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + row);  				y += row + gutter;  				powerRect = new Rectangle(x' y' x + col' height - gutter);  				x += col + gutter;  				y = gutter;    				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' height - gutter);  				}  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' height - gutter);  				x += col + gutter;  				sonaRect = new Rectangle(x' y' x + col' height - gutter);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutPortrait,The following statement contains a magic number: int col = width - gutter * 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutPortrait,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the display into three vertical elements' the  				// spectrum or sonagram display being double-height.  				int unit = (height - gutter * 4) / 4;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;    				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' y + unit * 2);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' y + unit * 2);  				}    				y += unit * 2 + gutter;  				powerRect = new Rectangle(x' y' x + col' y + unit);  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				// Divide the display into two vertical elements  				int unit = (height - gutter * 3) / 2;    				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;  				sonaRect = new Rectangle(x' y' x + col' y + unit);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutPortrait,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the display into three vertical elements' the  				// spectrum or sonagram display being double-height.  				int unit = (height - gutter * 4) / 4;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;    				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' y + unit * 2);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' y + unit * 2);  				}    				y += unit * 2 + gutter;  				powerRect = new Rectangle(x' y' x + col' y + unit);  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				// Divide the display into two vertical elements  				int unit = (height - gutter * 3) / 2;    				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;  				sonaRect = new Rectangle(x' y' x + col' y + unit);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutPortrait,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the display into three vertical elements' the  				// spectrum or sonagram display being double-height.  				int unit = (height - gutter * 4) / 4;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;    				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' y + unit * 2);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' y + unit * 2);  				}    				y += unit * 2 + gutter;  				powerRect = new Rectangle(x' y' x + col' y + unit);  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				// Divide the display into two vertical elements  				int unit = (height - gutter * 3) / 2;    				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;  				sonaRect = new Rectangle(x' y' x + col' y + unit);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutPortrait,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the display into three vertical elements' the  				// spectrum or sonagram display being double-height.  				int unit = (height - gutter * 4) / 4;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;    				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' y + unit * 2);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' y + unit * 2);  				}    				y += unit * 2 + gutter;  				powerRect = new Rectangle(x' y' x + col' y + unit);  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				// Divide the display into two vertical elements  				int unit = (height - gutter * 3) / 2;    				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;  				sonaRect = new Rectangle(x' y' x + col' y + unit);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutPortrait,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the display into three vertical elements' the  				// spectrum or sonagram display being double-height.  				int unit = (height - gutter * 4) / 4;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;    				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' y + unit * 2);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' y + unit * 2);  				}    				y += unit * 2 + gutter;  				powerRect = new Rectangle(x' y' x + col' y + unit);  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				// Divide the display into two vertical elements  				int unit = (height - gutter * 3) / 2;    				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;  				sonaRect = new Rectangle(x' y' x + col' y + unit);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutPortrait,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the display into three vertical elements' the  				// spectrum or sonagram display being double-height.  				int unit = (height - gutter * 4) / 4;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;    				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' y + unit * 2);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' y + unit * 2);  				}    				y += unit * 2 + gutter;  				powerRect = new Rectangle(x' y' x + col' y + unit);  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				// Divide the display into two vertical elements  				int unit = (height - gutter * 3) / 2;    				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;  				sonaRect = new Rectangle(x' y' x + col' y + unit);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,InstrumentPanel,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\InstrumentPanel.cs,layoutPortrait,The following statement contains a magic number: if (waveformGauge!=null)  			{  				// Divide the display into three vertical elements' the  				// spectrum or sonagram display being double-height.  				int unit = (height - gutter * 4) / 4;    				//Wave+Spectrum+Power or Wave+Sonagram+Power  				waveRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;    				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' x + col' y + unit * 2);  				}  				else  				{  					sonaRect = new Rectangle(x' y' x + col' y + unit * 2);  				}    				y += unit * 2 + gutter;  				powerRect = new Rectangle(x' y' x + col' y + unit);  			}  			else if ((spectrumGauge!=null)&&(sonagramGauge!=null))  			{  				// Divide the display into two vertical elements  				int unit = (height - gutter * 3) / 2;    				//Spectrum + Sonagram  				specRect = new Rectangle(x' y' x + col' y + unit);  				y += unit + gutter;  				sonaRect = new Rectangle(x' y' x + col' y + unit);  			}  			else  			{  				//Spectrum or Sonagram fullscreen  				if (spectrumGauge!=null)  				{  					specRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  				else  				{  					sonaRect = new Rectangle(x' y' width - gutter' height - gutter);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBackgroundBody,The following statement contains a magic number: float mw = dispWidth - meterBarMargin * 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBackgroundBody,The following statement contains a magic number: for (int i = 1; i < 10; ++i)  			{  				float x = (float) i * (float) bw / 10f;  				graphics.DrawLine(pen' mx + x' by' mx + x' by + bh);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBackgroundBody,The following statement contains a magic number: int step = (int)(MeasureString(graphics' "-99")) > bw / 10f - 1 ? 2 : 1;
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBackgroundBody,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				string text = "" + (i * 10 - 100);  				float tw = MeasureString(graphics' text);  				float lx = mx + i * gw + 1 - (tw / 2);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBackgroundBody,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				string text = "" + (i * 10 - 100);  				float tw = MeasureString(graphics' text);  				float lx = mx + i * gw + 1 - (tw / 2);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBackgroundBody,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				string text = "" + (i * 10 - 100);  				float tw = MeasureString(graphics' text);  				float lx = mx + i * gw + 1 - (tw / 2);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBackgroundBody,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				string text = "" + (i * 10 - 100);  				float tw = MeasureString(graphics' text);  				float lx = mx + i * gw + 1 - (tw / 2);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,Update,The following statement contains a magic number: lock (this)  			{  				// Save the current level. Clip it to a reasonable range.  				if (power < -100.0)  				{  					power = -100.0;  				}  				else if (power > 0.0)  				{  					power = 0.0;  				}  				currentPower = (float) power;    				// Get the previous power value' and add the new value into the  				// history buffer. Re-calculate the rolling average power value.  				if (++historyIndex >= powerHistory.Length)  				{  					historyIndex = 0;  				}  				prevPower = powerHistory[historyIndex];  				powerHistory[historyIndex] = (float) power;  				averagePower -= prevPower / METER_AVERAGE_COUNT;  				averagePower += (float) power / METER_AVERAGE_COUNT;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,Update,The following statement contains a magic number: lock (this)  			{  				// Save the current level. Clip it to a reasonable range.  				if (power < -100.0)  				{  					power = -100.0;  				}  				else if (power > 0.0)  				{  					power = 0.0;  				}  				currentPower = (float) power;    				// Get the previous power value' and add the new value into the  				// history buffer. Re-calculate the rolling average power value.  				if (++historyIndex >= powerHistory.Length)  				{  					historyIndex = 0;  				}  				prevPower = powerHistory[historyIndex];  				powerHistory[historyIndex] = (float) power;  				averagePower -= prevPower / METER_AVERAGE_COUNT;  				averagePower += (float) power / METER_AVERAGE_COUNT;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBody,The following statement contains a magic number: lock (this)  			{  				// Re-calculate the peak markers.  				calculatePeaks(now' currentPower' prevPower);    				pen.Color = ColorUtils.UIntToColor(0xffffff00);  				pen.DashStyle = DashStyle.Dash;    				// Position parameters.  				float mx = dispX + meterBarMargin;  				float mw = dispWidth - meterBarMargin * 2;  				float by = dispY + meterBarTop;  				float bh = barWidth;  				float gap = meterBarGap;  				float bw = mw - 2f;    				// Draw the average bar.  				float pa = (averagePower / 100f + 1f) * bw;  				//pen.Style = Graphics.Style.FILL;  				pen.Color = ColorUtils.UIntToColor(METER_AVERAGE_COL);    				graphics.DrawRectangle(pen' mx + 1' by + 1' mx + pa + 1' by + bh - 1);    				// Draw the power bar.  				float p = (currentPower / 100f + 1f) * bw;  				//pen.Style = Graphics.Style.FILL;  				pen.Color = ColorUtils.UIntToColor(METER_POWER_COL);  				graphics.DrawRectangle(pen' mx + 1' by + gap' mx + p + 1' by + bh - gap);    				// Now' draw in the peaks.  				//pen.Style = Graphics.Style.FILL;  				for (int i = 0; i < METER_PEAKS; ++i)  				{  					if (meterPeakTimes[i] != 0)  					{  						// Fade the peak according to its age.  						long age = now - meterPeakTimes[i];  						float fac = 1f - ((float) age / (float) METER_PEAK_TIME);  						int alpha = (int)(fac * 255f);  						pen.Color = ColorUtils.UIntToColor((uint)(METER_PEAK_COL | (alpha << 24)));  						// Draw it in.  						float pp = (meterPeaks[i] / 100f + 1f) * bw;  						graphics.DrawRectangle(pen' mx + pp - 1' by + gap' mx + pp + 3' by + bh - gap);  					}  				}    				// Draw the text below the meter.  				float tx = dispX + meterTextX;  				float ty = dispY + meterTextY;  				dbBuffer = String.Format("{0:0.#}"' averagePower);  				pen.DashStyle = DashStyle.Dash;  				pen.Color = ColorUtils.UIntToColor(0xff00ffff);  				//pen.TextSize = meterTextSize;  				graphics.DrawString(dbBuffer' TextFont' TextBrush' tx' ty);    				float px = dispX + meterSubTextX;  				float py = dispY + meterSubTextY;  				pkBuffer = String.Format("{0:0.#}"' meterPeakMax);  				//pen.TextSize = meterSubTextSize;  				graphics.DrawString(pkBuffer' TextFont' TextBrush' px' py);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBody,The following statement contains a magic number: lock (this)  			{  				// Re-calculate the peak markers.  				calculatePeaks(now' currentPower' prevPower);    				pen.Color = ColorUtils.UIntToColor(0xffffff00);  				pen.DashStyle = DashStyle.Dash;    				// Position parameters.  				float mx = dispX + meterBarMargin;  				float mw = dispWidth - meterBarMargin * 2;  				float by = dispY + meterBarTop;  				float bh = barWidth;  				float gap = meterBarGap;  				float bw = mw - 2f;    				// Draw the average bar.  				float pa = (averagePower / 100f + 1f) * bw;  				//pen.Style = Graphics.Style.FILL;  				pen.Color = ColorUtils.UIntToColor(METER_AVERAGE_COL);    				graphics.DrawRectangle(pen' mx + 1' by + 1' mx + pa + 1' by + bh - 1);    				// Draw the power bar.  				float p = (currentPower / 100f + 1f) * bw;  				//pen.Style = Graphics.Style.FILL;  				pen.Color = ColorUtils.UIntToColor(METER_POWER_COL);  				graphics.DrawRectangle(pen' mx + 1' by + gap' mx + p + 1' by + bh - gap);    				// Now' draw in the peaks.  				//pen.Style = Graphics.Style.FILL;  				for (int i = 0; i < METER_PEAKS; ++i)  				{  					if (meterPeakTimes[i] != 0)  					{  						// Fade the peak according to its age.  						long age = now - meterPeakTimes[i];  						float fac = 1f - ((float) age / (float) METER_PEAK_TIME);  						int alpha = (int)(fac * 255f);  						pen.Color = ColorUtils.UIntToColor((uint)(METER_PEAK_COL | (alpha << 24)));  						// Draw it in.  						float pp = (meterPeaks[i] / 100f + 1f) * bw;  						graphics.DrawRectangle(pen' mx + pp - 1' by + gap' mx + pp + 3' by + bh - gap);  					}  				}    				// Draw the text below the meter.  				float tx = dispX + meterTextX;  				float ty = dispY + meterTextY;  				dbBuffer = String.Format("{0:0.#}"' averagePower);  				pen.DashStyle = DashStyle.Dash;  				pen.Color = ColorUtils.UIntToColor(0xff00ffff);  				//pen.TextSize = meterTextSize;  				graphics.DrawString(dbBuffer' TextFont' TextBrush' tx' ty);    				float px = dispX + meterSubTextX;  				float py = dispY + meterSubTextY;  				pkBuffer = String.Format("{0:0.#}"' meterPeakMax);  				//pen.TextSize = meterSubTextSize;  				graphics.DrawString(pkBuffer' TextFont' TextBrush' px' py);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,drawBody,The following statement contains a magic number: lock (this)  			{  				// Re-calculate the peak markers.  				calculatePeaks(now' currentPower' prevPower);    				pen.Color = ColorUtils.UIntToColor(0xffffff00);  				pen.DashStyle = DashStyle.Dash;    				// Position parameters.  				float mx = dispX + meterBarMargin;  				float mw = dispWidth - meterBarMargin * 2;  				float by = dispY + meterBarTop;  				float bh = barWidth;  				float gap = meterBarGap;  				float bw = mw - 2f;    				// Draw the average bar.  				float pa = (averagePower / 100f + 1f) * bw;  				//pen.Style = Graphics.Style.FILL;  				pen.Color = ColorUtils.UIntToColor(METER_AVERAGE_COL);    				graphics.DrawRectangle(pen' mx + 1' by + 1' mx + pa + 1' by + bh - 1);    				// Draw the power bar.  				float p = (currentPower / 100f + 1f) * bw;  				//pen.Style = Graphics.Style.FILL;  				pen.Color = ColorUtils.UIntToColor(METER_POWER_COL);  				graphics.DrawRectangle(pen' mx + 1' by + gap' mx + p + 1' by + bh - gap);    				// Now' draw in the peaks.  				//pen.Style = Graphics.Style.FILL;  				for (int i = 0; i < METER_PEAKS; ++i)  				{  					if (meterPeakTimes[i] != 0)  					{  						// Fade the peak according to its age.  						long age = now - meterPeakTimes[i];  						float fac = 1f - ((float) age / (float) METER_PEAK_TIME);  						int alpha = (int)(fac * 255f);  						pen.Color = ColorUtils.UIntToColor((uint)(METER_PEAK_COL | (alpha << 24)));  						// Draw it in.  						float pp = (meterPeaks[i] / 100f + 1f) * bw;  						graphics.DrawRectangle(pen' mx + pp - 1' by + gap' mx + pp + 3' by + bh - gap);  					}  				}    				// Draw the text below the meter.  				float tx = dispX + meterTextX;  				float ty = dispY + meterTextY;  				dbBuffer = String.Format("{0:0.#}"' averagePower);  				pen.DashStyle = DashStyle.Dash;  				pen.Color = ColorUtils.UIntToColor(0xff00ffff);  				//pen.TextSize = meterTextSize;  				graphics.DrawString(dbBuffer' TextFont' TextBrush' tx' ty);    				float px = dispX + meterSubTextX;  				float py = dispY + meterSubTextY;  				pkBuffer = String.Format("{0:0.#}"' meterPeakMax);  				//pen.TextSize = meterSubTextSize;  				graphics.DrawString(pkBuffer' TextFont' TextBrush' px' py);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,PowerGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\PowerGauge.cs,calculatePeaks,The following statement contains a magic number: if (power > prev)  			{  				bool done = false;    				// First' check for a slightly-higher existing peak. If there  				// is one' just bump its time.  				for (int i = 0; i < METER_PEAKS; ++i)  				{  					if (meterPeakTimes[i] != 0 && meterPeaks[i] - power < 2.5)  					{  						meterPeakTimes[i] = now;  						done = true;  						break;  					}  				}    				if (!done)  				{  					// Now scan for an empty slot.  					for (int i = 0; i < METER_PEAKS; ++i)  					{  						if (meterPeakTimes[i] == 0)  						{  							meterPeaks[i] = power;  							meterPeakTimes[i] = now;  							break;  						}  					}  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SignalPower,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SignalPower.cs,BiasAndRange,The following statement contains a magic number: short min = 32767;
Magic Number,Wave2Zebra2Preset.HermitGauges,SignalPower,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SignalPower.cs,BiasAndRange,The following statement contains a magic number: short max = -32768;
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=0;i<50;i++)  			{  				paintColors[i]= Color.FromArgb(0' i' i*5).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=0;i<50;i++)  			{  				paintColors[i]= Color.FromArgb(0' i' i*5).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=50;i<100;i++)  			{  				paintColors[i]= Color.FromArgb(0' i' (100-i)*5).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=50;i<100;i++)  			{  				paintColors[i]= Color.FromArgb(0' i' (100-i)*5).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=50;i<100;i++)  			{  				paintColors[i]= Color.FromArgb(0' i' (100-i)*5).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=50;i<100;i++)  			{  				paintColors[i]= Color.FromArgb(0' i' (100-i)*5).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=100;i<150;i++)  			{  				paintColors[i]= Color.FromArgb((i-100)*3'(i-50)*2'0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=100;i<150;i++)  			{  				paintColors[i]= Color.FromArgb((i-100)*3'(i-50)*2'0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=100;i<150;i++)  			{  				paintColors[i]= Color.FromArgb((i-100)*3'(i-50)*2'0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=100;i<150;i++)  			{  				paintColors[i]= Color.FromArgb((i-100)*3'(i-50)*2'0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=100;i<150;i++)  			{  				paintColors[i]= Color.FromArgb((i-100)*3'(i-50)*2'0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=100;i<150;i++)  			{  				paintColors[i]= Color.FromArgb((i-100)*3'(i-50)*2'0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=150;i<=250;i++)  			{  				paintColors[i]= Color.FromArgb(i' 550-i*2' 0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=150;i<=250;i++)  			{  				paintColors[i]= Color.FromArgb(i' 550-i*2' 0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=150;i<=250;i++)  			{  				paintColors[i]= Color.FromArgb(i' 550-i*2' 0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,SonagramGauge,The following statement contains a magic number: for (int i=150;i<=250;i++)  			{  				paintColors[i]= Color.FromArgb(i' 550-i*2' 0).ToArgb();  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += 1)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				ly = sy + bh - i * (float) bh / 10f + 1;  				// label  				graphics.DrawString(text' TextFont' TextBrush' lx + 7' ly + labelSize/3);			  				// ticks  				graphics.DrawLine(pen' lx' ly' lx+3' ly);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: ly = sy + bh + (labelSize/2);
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 9; i += 1)  			{  				float time = totaltime * i / 10;  				string text = "" + time + "s";  				float tw = MeasureString(graphics' text);  				lx = sx + i * (float) bw / 10f + 1;  				// label string x position  				float lxs = lx - (tw / 2); // OLD java version - draws offscreen?!  				if (lxs < 0) lxs = 0;  				graphics.DrawString(text' TextFont' TextBrush' lxs' ly);  				//graphics.DrawString(text' TextFont' TextBrush' lx - (tw / 2)' ly);  				graphics.DrawLine(pen' lx' sy + bh - 1' lx' sy + bh + 2);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 9; i += 1)  			{  				float time = totaltime * i / 10;  				string text = "" + time + "s";  				float tw = MeasureString(graphics' text);  				lx = sx + i * (float) bw / 10f + 1;  				// label string x position  				float lxs = lx - (tw / 2); // OLD java version - draws offscreen?!  				if (lxs < 0) lxs = 0;  				graphics.DrawString(text' TextFont' TextBrush' lxs' ly);  				//graphics.DrawString(text' TextFont' TextBrush' lx - (tw / 2)' ly);  				graphics.DrawLine(pen' lx' sy + bh - 1' lx' sy + bh + 2);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 9; i += 1)  			{  				float time = totaltime * i / 10;  				string text = "" + time + "s";  				float tw = MeasureString(graphics' text);  				lx = sx + i * (float) bw / 10f + 1;  				// label string x position  				float lxs = lx - (tw / 2); // OLD java version - draws offscreen?!  				if (lxs < 0) lxs = 0;  				graphics.DrawString(text' TextFont' TextBrush' lxs' ly);  				//graphics.DrawString(text' TextFont' TextBrush' lx - (tw / 2)' ly);  				graphics.DrawLine(pen' lx' sy + bh - 1' lx' sy + bh + 2);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 9; i += 1)  			{  				float time = totaltime * i / 10;  				string text = "" + time + "s";  				float tw = MeasureString(graphics' text);  				lx = sx + i * (float) bw / 10f + 1;  				// label string x position  				float lxs = lx - (tw / 2); // OLD java version - draws offscreen?!  				if (lxs < 0) lxs = 0;  				graphics.DrawString(text' TextFont' TextBrush' lxs' ly);  				//graphics.DrawString(text' TextFont' TextBrush' lx - (tw / 2)' ly);  				graphics.DrawLine(pen' lx' sy + bh - 1' lx' sy + bh + 2);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,linearGraph,The following statement contains a magic number: for (int i = 1; i < len; ++i)  			{  				// Draw the new line.  				float y = sonaGraphHeight- i * bh + 1;    				// Cycle the hue angle from 0° to 300°; i.e. red to purple.  				float v = (float)(Math.Log10(data[i]) / RANGE_BELS + 2f);  				int colorIndex =(int)(v*maxColors);  				if (colorIndex<0)  				{  					colorIndex=0;  				}  				if (colorIndex>maxColors)  				{  					colorIndex=maxColors;  				}  				pen.Color = Color.FromArgb(paintColors[colorIndex]);    				if (bh <= 1.0f)  				{  					graphics.DrawEllipse(pen' 0' y' 2' 2);  				}  				else  				{  					graphics.DrawLine(pen' 0' y' 0' y - bh);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SonagramGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SonagramGauge.cs,linearGraph,The following statement contains a magic number: for (int i = 1; i < len; ++i)  			{  				// Draw the new line.  				float y = sonaGraphHeight- i * bh + 1;    				// Cycle the hue angle from 0° to 300°; i.e. red to purple.  				float v = (float)(Math.Log10(data[i]) / RANGE_BELS + 2f);  				int colorIndex =(int)(v*maxColors);  				if (colorIndex<0)  				{  					colorIndex=0;  				}  				if (colorIndex>maxColors)  				{  					colorIndex=maxColors;  				}  				pen.Color = Color.FromArgb(paintColors[colorIndex]);    				if (bh <= 1.0f)  				{  					graphics.DrawEllipse(pen' 0' y' 2' 2);  				}  				else  				{  					graphics.DrawLine(pen' 0' y' 0' y - bh);  				}  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,SpectrumGauge,The following statement contains a magic number: nyquistFreq = rate / 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 1; i < 10; ++i)  			{  				float x = (float) i * (float) bw / 10f;  				graphics.DrawLine(pen' sx + x' sy' sx + x' sy + bh);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: int step = MeasureString(graphics' "8.8k") > bw / 10f - 1 ? 2 : 1;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,drawBg,The following statement contains a magic number: for (int i = 0; i <= 10; i += step)  			{  				int f = nyquistFreq * i / 10;  				string text = f >= 10000 ? "" + (f / 1000) + "k" : f >= 1000 ? "" + (f / 1000) + "." + (f / 100 % 10) + "k" : "" + f;  				float tw = MeasureString(graphics' text);  				float lx = sx + i * (float) bw / 10f + 1 - (tw / 2);  				//graphics.DrawString(text' TextFont' TextBrush' lx' ly);  				graphics.DrawString(text' TextFont' TextBrush' lx' ly-20);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,logGraph,The following statement contains a magic number: paintColor[2] = 1f;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,logGraph,The following statement contains a magic number: float bw = (float)(spectGraphWidth - 2) / (float) len;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,logGraph,The following statement contains a magic number: float bh = spectGraphHeight - 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,logGraph,The following statement contains a magic number: int octaves = (int) Math.Floor(log2(rightFrequency / leftFrequency)) - 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,logGraph,The following statement contains a magic number: float octWidth = (float)(spectGraphWidth - 2) / (float) octaves;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,logGraph,The following statement contains a magic number: float baseFrequency = rightFrequency / (float) Math.Pow(2' octaves);
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,linearGraph,The following statement contains a magic number: paintColor[2] = 1f;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,linearGraph,The following statement contains a magic number: float bw = (float)(spectGraphWidth - 2) / (float) len;
Magic Number,Wave2Zebra2Preset.HermitGauges,SpectrumGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\SpectrumGauge.cs,linearGraph,The following statement contains a magic number: float bh = spectGraphHeight - 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,TextGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\TextGauge.cs,positionText,The following statement contains a magic number: for (int i = 0; i < numRows; ++i)  			{  				int tp = i > 0 ? textPadTop : marginTop;  				int bp = i < numRows - 1 ? textPadBottom : marginBottom;  				rowsY[i] = y + tp - fm.GetCellAscent(FontStyle.Regular) - 2;  				y += -fm.GetCellAscent(FontStyle.Regular) - 2 + fm.GetCellDescent(FontStyle.Regular) + tp + bp;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,TextGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\TextGauge.cs,positionText,The following statement contains a magic number: for (int i = 0; i < numRows; ++i)  			{  				int tp = i > 0 ? textPadTop : marginTop;  				int bp = i < numRows - 1 ? textPadBottom : marginBottom;  				rowsY[i] = y + tp - fm.GetCellAscent(FontStyle.Regular) - 2;  				y += -fm.GetCellAscent(FontStyle.Regular) - 2 + fm.GetCellDescent(FontStyle.Regular) + tp + bp;  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,WaveformGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\WaveformGauge.cs,Update,The following statement contains a magic number: float scale = (float) Math.Pow(1f / (range / 6500f)' 0.7) / 16384 * dispHeight;
Magic Number,Wave2Zebra2Preset.HermitGauges,WaveformGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\WaveformGauge.cs,Update,The following statement contains a magic number: float scale = (float) Math.Pow(1f / (range / 6500f)' 0.7) / 16384 * dispHeight;
Magic Number,Wave2Zebra2Preset.HermitGauges,WaveformGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\WaveformGauge.cs,Update,The following statement contains a magic number: float margin = dispWidth / 24;
Magic Number,Wave2Zebra2Preset.HermitGauges,WaveformGauge,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\WaveformGauge.cs,Update,The following statement contains a magic number: float gwidth = dispWidth - margin * 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeBlackmanHarris,The following statement contains a magic number: for (int i = 0; i < len; ++i)  			{  				double f = Math.PI * (double) i / n;  				buf[i] = BH_A0 - BH_A1 * Math.Cos(2.0 * f) + BH_A2 * Math.Cos(4.0 * f) - BH_A3 * Math.Cos(6.0 * f);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeBlackmanHarris,The following statement contains a magic number: for (int i = 0; i < len; ++i)  			{  				double f = Math.PI * (double) i / n;  				buf[i] = BH_A0 - BH_A1 * Math.Cos(2.0 * f) + BH_A2 * Math.Cos(4.0 * f) - BH_A3 * Math.Cos(6.0 * f);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeBlackmanHarris,The following statement contains a magic number: for (int i = 0; i < len; ++i)  			{  				double f = Math.PI * (double) i / n;  				buf[i] = BH_A0 - BH_A1 * Math.Cos(2.0 * f) + BH_A2 * Math.Cos(4.0 * f) - BH_A3 * Math.Cos(6.0 * f);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeGauss,The following statement contains a magic number: double k = (double)(len - 1) / 2;
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeGauss,The following statement contains a magic number: for (int i = 0; i < len; ++i)  			{  				double d = (i - k) / (0.4 * k);  				buf[i] = Math.Exp(-0.5 * d * d);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeGauss,The following statement contains a magic number: for (int i = 0; i < len; ++i)  			{  				double d = (i - k) / (0.4 * k);  				buf[i] = Math.Exp(-0.5 * d * d);  			}
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeWeedonGauss,The following statement contains a magic number: double k = (-250.0 * 0.4605) / (double)(len * len);
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeWeedonGauss,The following statement contains a magic number: double k = (-250.0 * 0.4605) / (double)(len * len);
Magic Number,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,makeWeedonGauss,The following statement contains a magic number: double d = (double) len / 2.0;
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: PitchShift(pitchShift' numSampsToProcess' (long)2048' (long)10' sampleRate' indata);
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: PitchShift(pitchShift' numSampsToProcess' (long)2048' (long)10' sampleRate' indata);
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: fftFrameSize2 = fftFrameSize / 2;
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: expct = 2.0 * Math.PI * (double)stepSize / (double)fftFrameSize;
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,PitchShift,The following statement contains a magic number: for (i = 0; i < numSampsToProcess; i++)  			{  				  				/* As long as we have not yet collected enough data just read in */  				gInFIFO[gRover] = indata[i];  				outdata[i] = gOutFIFO[gRover - inFifoLatency];  				gRover++;  				  				/* now we have enough data for processing */  				if (gRover >= fftFrameSize)  				{  					gRover = inFifoLatency;  					  					/* do windowing and re'im interleave */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gFFTworksp[2 * k] = (float)(gInFIFO[k] * window);  						gFFTworksp[2 * k + 1] = 0.0F;  					}  					  					  					/* ***************** ANALYSIS ******************* */  					/* do transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' -1);  					  					/* this is the analysis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* de-interlace FFT buffer */  						real = gFFTworksp[2 * k];  						imag = gFFTworksp[2 * k + 1];  						  						/* compute magnitude and phase */  						magn = 2.0 * Math.Sqrt(real * real + imag * imag);  						phase = Math.Atan2(imag' real);  						  						/* compute phase difference */  						tmp = phase - gLastPhase[k];  						gLastPhase[k] = (float)phase;  						  						/* subtract expected phase difference */  						tmp -= (double)k * expct;  						  						/* map delta phase into +/- Pi interval */  						qpd = (long)(tmp / Math.PI);  						if (qpd >= 0) qpd += qpd & 1;  						else qpd -= qpd & 1;  						tmp -= Math.PI * (double)qpd;  						  						/* get deviation from bin frequency from the +/- Pi interval */  						tmp = osamp * tmp / (2.0 * Math.PI);  						  						/* compute the k-th partials' true frequency */  						tmp = (double)k * freqPerBin + tmp * freqPerBin;  						  						/* store magnitude and true frequency in analysis arrays */  						gAnaMagn[k] = (float)magn;  						gAnaFreq[k] = (float)tmp;  						  					}  					  					/* ***************** PROCESSING ******************* */  					/* this does the actual pitch shifting */  					for (int zero = 0; zero < fftFrameSize; zero++)  					{  						gSynMagn[zero] = 0;  						gSynFreq[zero] = 0;  					}  					  					for (k = 0; k <= fftFrameSize2; k++)  					{  						index = (long)(k * pitchShift);  						if (index <= fftFrameSize2)  						{  							gSynMagn[index] += gAnaMagn[k];  							gSynFreq[index] = gAnaFreq[k] * pitchShift;  						}  					}  					  					/* ***************** SYNTHESIS ******************* */  					/* this is the synthesis step */  					for (k = 0; k <= fftFrameSize2; k++)  					{  						  						/* get magnitude and true frequency from synthesis arrays */  						magn = gSynMagn[k];  						tmp = gSynFreq[k];  						  						/* subtract bin mid frequency */  						tmp -= (double)k * freqPerBin;  						  						/* get bin deviation from freq deviation */  						tmp /= freqPerBin;  						  						/* take osamp into account */  						tmp = 2.0 * Math.PI * tmp / osamp;  						  						/* add the overlap phase advance back in */  						tmp += (double)k * expct;  						  						/* accumulate delta phase to get bin phase */  						gSumPhase[k] += (float)tmp;  						phase = gSumPhase[k];  						  						/* get real and imag part and re-interleave */  						gFFTworksp[2 * k] = (float)(magn * Math.Cos(phase));  						gFFTworksp[2 * k + 1] = (float)(magn * Math.Sin(phase));  					}  					  					/* zero negative frequencies */  					for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) gFFTworksp[k] = 0.0F;  					  					/* do inverse transform */  					ShortTimeFourierTransform(gFFTworksp' fftFrameSize' 1);  					  					/* do windowing and add to output accumulator */  					for (k = 0; k < fftFrameSize; k++)  					{  						window = -.5 * Math.Cos(2.0 * Math.PI * (double)k / (double)fftFrameSize) + .5;  						gOutputAccum[k] += (float)(2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));  					}  					for (k = 0; k < stepSize; k++) gOutFIFO[k] = gOutputAccum[k];  					  					/* shift accumulator */  					//memmove(gOutputAccum' gOutputAccum + stepSize' fftFrameSize * sizeof(float));  					for (k = 0; k < fftFrameSize; k++)  					{  						gOutputAccum[k] = gOutputAccum[k + stepSize];  					}  					  					/* move input FIFO */  					for (k = 0; k < inFifoLatency; k++) gInFIFO[k] = gInFIFO[k + stepSize];  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (i = 2; i < 2 * fftFrameSize - 2; i += 2)  			{  				for (bitm = 2' j = 0; bitm < 2 * fftFrameSize; bitm <<= 1)  				{  					if ((i & bitm) != 0) j++;  					j <<= 1;  				}  				if (i < j)  				{  					temp = fftBuffer[i];  					fftBuffer[i] = fftBuffer[j];  					fftBuffer[j] = temp;  					temp = fftBuffer[i + 1];  					fftBuffer[i + 1] = fftBuffer[j + 1];  					fftBuffer[j + 1] = temp;  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (i = 2; i < 2 * fftFrameSize - 2; i += 2)  			{  				for (bitm = 2' j = 0; bitm < 2 * fftFrameSize; bitm <<= 1)  				{  					if ((i & bitm) != 0) j++;  					j <<= 1;  				}  				if (i < j)  				{  					temp = fftBuffer[i];  					fftBuffer[i] = fftBuffer[j];  					fftBuffer[j] = temp;  					temp = fftBuffer[i + 1];  					fftBuffer[i + 1] = fftBuffer[j + 1];  					fftBuffer[j + 1] = temp;  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (i = 2; i < 2 * fftFrameSize - 2; i += 2)  			{  				for (bitm = 2' j = 0; bitm < 2 * fftFrameSize; bitm <<= 1)  				{  					if ((i & bitm) != 0) j++;  					j <<= 1;  				}  				if (i < j)  				{  					temp = fftBuffer[i];  					fftBuffer[i] = fftBuffer[j];  					fftBuffer[j] = temp;  					temp = fftBuffer[i + 1];  					fftBuffer[i + 1] = fftBuffer[j + 1];  					fftBuffer[j + 1] = temp;  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (i = 2; i < 2 * fftFrameSize - 2; i += 2)  			{  				for (bitm = 2' j = 0; bitm < 2 * fftFrameSize; bitm <<= 1)  				{  					if ((i & bitm) != 0) j++;  					j <<= 1;  				}  				if (i < j)  				{  					temp = fftBuffer[i];  					fftBuffer[i] = fftBuffer[j];  					fftBuffer[j] = temp;  					temp = fftBuffer[i + 1];  					fftBuffer[i + 1] = fftBuffer[j + 1];  					fftBuffer[j + 1] = temp;  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (i = 2; i < 2 * fftFrameSize - 2; i += 2)  			{  				for (bitm = 2' j = 0; bitm < 2 * fftFrameSize; bitm <<= 1)  				{  					if ((i & bitm) != 0) j++;  					j <<= 1;  				}  				if (i < j)  				{  					temp = fftBuffer[i];  					fftBuffer[i] = fftBuffer[j];  					fftBuffer[j] = temp;  					temp = fftBuffer[i + 1];  					fftBuffer[i + 1] = fftBuffer[j + 1];  					fftBuffer[j + 1] = temp;  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (i = 2; i < 2 * fftFrameSize - 2; i += 2)  			{  				for (bitm = 2' j = 0; bitm < 2 * fftFrameSize; bitm <<= 1)  				{  					if ((i & bitm) != 0) j++;  					j <<= 1;  				}  				if (i < j)  				{  					temp = fftBuffer[i];  					fftBuffer[i] = fftBuffer[j];  					fftBuffer[j] = temp;  					temp = fftBuffer[i + 1];  					fftBuffer[i + 1] = fftBuffer[j + 1];  					fftBuffer[j + 1] = temp;  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: long max = (long)(Math.Log(fftFrameSize) / Math.Log(2.0) + .5);
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: long max = (long)(Math.Log(fftFrameSize) / Math.Log(2.0) + .5);
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (k = 0' le = 2; k < max; k++)  			{  				le <<= 1;  				le2 = le >> 1;  				ur = 1.0F;  				ui = 0.0F;  				arg = (float)Math.PI / (le2 >> 1);  				wr = (float)Math.Cos(arg);  				wi = (float)(sign * Math.Sin(arg));  				for (j = 0; j < le2; j += 2)  				{  					  					for (i = j; i < 2 * fftFrameSize; i += le)  					{  						tr = fftBuffer[i + le2] * ur - fftBuffer[i + le2 + 1] * ui;  						ti = fftBuffer[i + le2] * ui + fftBuffer[i + le2 + 1] * ur;  						fftBuffer[i + le2] = fftBuffer[i] - tr;  						fftBuffer[i + le2 + 1] = fftBuffer[i + 1] - ti;  						fftBuffer[i] += tr;  						fftBuffer[i + 1] += ti;  						  					}  					tr = ur * wr - ui * wi;  					ui = ur * wi + ui * wr;  					ur = tr;  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (k = 0' le = 2; k < max; k++)  			{  				le <<= 1;  				le2 = le >> 1;  				ur = 1.0F;  				ui = 0.0F;  				arg = (float)Math.PI / (le2 >> 1);  				wr = (float)Math.Cos(arg);  				wi = (float)(sign * Math.Sin(arg));  				for (j = 0; j < le2; j += 2)  				{  					  					for (i = j; i < 2 * fftFrameSize; i += le)  					{  						tr = fftBuffer[i + le2] * ur - fftBuffer[i + le2 + 1] * ui;  						ti = fftBuffer[i + le2] * ui + fftBuffer[i + le2 + 1] * ur;  						fftBuffer[i + le2] = fftBuffer[i] - tr;  						fftBuffer[i + le2 + 1] = fftBuffer[i + 1] - ti;  						fftBuffer[i] += tr;  						fftBuffer[i + 1] += ti;  						  					}  					tr = ur * wr - ui * wi;  					ui = ur * wi + ui * wr;  					ur = tr;  				}  			}
Magic Number,Mike.Rules,PitchShifter,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\PitchShift.cs,ShortTimeFourierTransform,The following statement contains a magic number: for (k = 0' le = 2; k < max; k++)  			{  				le <<= 1;  				le2 = le >> 1;  				ur = 1.0F;  				ui = 0.0F;  				arg = (float)Math.PI / (le2 >> 1);  				wr = (float)Math.Cos(arg);  				wi = (float)(sign * Math.Sin(arg));  				for (j = 0; j < le2; j += 2)  				{  					  					for (i = j; i < 2 * fftFrameSize; i += le)  					{  						tr = fftBuffer[i + le2] * ur - fftBuffer[i + le2 + 1] * ui;  						ti = fftBuffer[i + le2] * ui + fftBuffer[i + le2 + 1] * ur;  						fftBuffer[i + le2] = fftBuffer[i] - tr;  						fftBuffer[i + le2 + 1] = fftBuffer[i + 1] - ti;  						fftBuffer[i] += tr;  						fftBuffer[i + 1] += ti;  						  					}  					tr = ur * wr - ui * wi;  					ui = ur * wi + ui * wr;  					ur = tr;  				}  			}
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Initialize,The following statement contains a magic number: if(transformationType < -1 || transformationType > 7)  			{  				transformationType = FFT_FORWARD;  				throw new Exception("unknown fft type");  			}
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Initialize,The following statement contains a magic number: if (windowSize != (1 << ((int)Math.Round(Math.Log(windowSize) / Math.Log(2)' 0))))  				throw new Exception("fft data must be power of 2");
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,CalFFT,The following statement contains a magic number: int bits = (int)Math.Round(Math.Log(n) / Math.Log(2)' 0);
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,CalFFT,The following statement contains a magic number: for (int i = 0; i < n-1; i++)  			{  				if (i < j)  				{  					double temp = re[j];  					re[j] = re[i];  					re[i] = temp;  					temp = im[j];  					im[j] = im[i];  					im[i] = temp;  				}    				int k = n / 2;    				while ((k >= 1) &&  (k - 1 < j))  				{  					j = j - k;  					k = k / 2;  				}    				j = j + k;  			}
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,CalFFT,The following statement contains a magic number: for (int i = 0; i < n-1; i++)  			{  				if (i < j)  				{  					double temp = re[j];  					re[j] = re[i];  					re[i] = temp;  					temp = im[j];  					im[j] = im[i];  					im[i] = temp;  				}    				int k = n / 2;    				while ((k >= 1) &&  (k - 1 < j))  				{  					j = j - k;  					k = k / 2;  				}    				j = j + k;  			}
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,CalFFT,The following statement contains a magic number: for(int m = 1; m <= bits; m++)  			{  				localN = 1 << m;  				double Wjk_r = 1;  				double Wjk_i = 0;  				double theta = PI2 / localN;  				double Wj_r = Math.Cos(theta);  				double Wj_i = direction * Math.Sin(theta);  				int nby2 = localN / 2;  				for (j = 0; j < nby2; j++)  				{  					for (int k = j; k < n; k += localN)  					{  						int id = k + nby2;  						double tempr = Wjk_r * re[id] - Wjk_i * im[id];  						double tempi = Wjk_r * im[id] + Wjk_i * re[id];  						re[id] = re[k] - tempr;  						im[id] = im[k] - tempi;  						re[k] += tempr;  						im[k] += tempi;  					}  					double wtemp = Wjk_r;  					Wjk_r = Wj_r * Wjk_r  - Wj_i * Wjk_i;  					Wjk_i = Wj_r * Wjk_i  + Wj_i * wtemp;  				}  			}
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,NormalizedPowerFFT,The following statement contains a magic number: for (int j = 0; j < re.Length; j++)  			{  				r = re[j] / windowFunctionSum * 2;  				i = im[j] / windowFunctionSum * 2;  				re[j] = r * r + i * i;  			}
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,NormalizedPowerFFT,The following statement contains a magic number: for (int j = 0; j < re.Length; j++)  			{  				r = re[j] / windowFunctionSum * 2;  				i = im[j] / windowFunctionSum * 2;  				re[j] = r * r + i * i;  			}
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hamming,The following statement contains a magic number: int start = (windowFunction.Length - size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hamming,The following statement contains a magic number: int stop = (windowFunction.Length + size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hamming,The following statement contains a magic number: double scale = 1.0 / (double)size / 0.54;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hamming,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * (25.0/46.0 - 21.0/46.0 * Math.Cos(factor * i));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hamming,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * (25.0/46.0 - 21.0/46.0 * Math.Cos(factor * i));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hamming,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * (25.0/46.0 - 21.0/46.0 * Math.Cos(factor * i));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hamming,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * (25.0/46.0 - 21.0/46.0 * Math.Cos(factor * i));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hanning,The following statement contains a magic number: int start = (windowFunction.Length - size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hanning,The following statement contains a magic number: int stop = (windowFunction.Length + size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Hanning,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = 0.5 * (1 - Math.Cos(factor * i));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: int start = (windowFunction.Length - size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: int stop = (windowFunction.Length + size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: double scale = 1.0 / (double)size / 0.36;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.35875 -  				                             0.48829 * Math.Cos(PI2 * i / size) +  				                             0.14128 * Math.Cos(2 * PI2 * i / size) -  				                             0.01168 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.35875 -  				                             0.48829 * Math.Cos(PI2 * i / size) +  				                             0.14128 * Math.Cos(2 * PI2 * i / size) -  				                             0.01168 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.35875 -  				                             0.48829 * Math.Cos(PI2 * i / size) +  				                             0.14128 * Math.Cos(2 * PI2 * i / size) -  				                             0.01168 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.35875 -  				                             0.48829 * Math.Cos(PI2 * i / size) +  				                             0.14128 * Math.Cos(2 * PI2 * i / size) -  				                             0.01168 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.35875 -  				                             0.48829 * Math.Cos(PI2 * i / size) +  				                             0.14128 * Math.Cos(2 * PI2 * i / size) -  				                             0.01168 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.35875 -  				                             0.48829 * Math.Cos(PI2 * i / size) +  				                             0.14128 * Math.Cos(2 * PI2 * i / size) -  				                             0.01168 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: int start = (windowFunction.Length - size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: int stop = (windowFunction.Length + size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: double scale = 1.0 / (double)size / 0.4;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.40217 -  				                             0.49703 * Math.Cos(PI2 * i / size) +  				                             0.09392 * Math.Cos(2 * PI2 * i / size) -  				                             0.00183 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.40217 -  				                             0.49703 * Math.Cos(PI2 * i / size) +  				                             0.09392 * Math.Cos(2 * PI2 * i / size) -  				                             0.00183 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.40217 -  				                             0.49703 * Math.Cos(PI2 * i / size) +  				                             0.09392 * Math.Cos(2 * PI2 * i / size) -  				                             0.00183 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.40217 -  				                             0.49703 * Math.Cos(PI2 * i / size) +  				                             0.09392 * Math.Cos(2 * PI2 * i / size) -  				                             0.00183 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.40217 -  				                             0.49703 * Math.Cos(PI2 * i / size) +  				                             0.09392 * Math.Cos(2 * PI2 * i / size) -  				                             0.00183 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris4s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.40217 -  				                             0.49703 * Math.Cos(PI2 * i / size) +  				                             0.09392 * Math.Cos(2 * PI2 * i / size) -  				                             0.00183 * Math.Cos(3 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3sMin,The following statement contains a magic number: int start = (windowFunction.Length - size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3sMin,The following statement contains a magic number: int stop = (windowFunction.Length + size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3sMin,The following statement contains a magic number: double scale = 1.0 / (double) size / 0.42;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.42323 -  				                             0.49755 * Math.Cos(PI2 * i / size) +  				                             0.07922 * Math.Cos(2 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.42323 -  				                             0.49755 * Math.Cos(PI2 * i / size) +  				                             0.07922 * Math.Cos(2 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.42323 -  				                             0.49755 * Math.Cos(PI2 * i / size) +  				                             0.07922 * Math.Cos(2 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3sMin,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.42323 -  				                             0.49755 * Math.Cos(PI2 * i / size) +  				                             0.07922 * Math.Cos(2 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3s,The following statement contains a magic number: int start = (windowFunction.Length - size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3s,The following statement contains a magic number: int stop = (windowFunction.Length + size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3s,The following statement contains a magic number: double scale = 1.0 / (double) size / 0.45;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.44959 -  				                             0.49364 * Math.Cos(PI2 * i / size) +  				                             0.05677 * Math.Cos(2 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.44959 -  				                             0.49364 * Math.Cos(PI2 * i / size) +  				                             0.05677 * Math.Cos(2 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.44959 -  				                             0.49364 * Math.Cos(PI2 * i / size) +  				                             0.05677 * Math.Cos(2 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,BlackmanHarris3s,The following statement contains a magic number: for (int i = 0; start < stop; start++' i++)  				windowFunction[i] = scale * ( 0.44959 -  				                             0.49364 * Math.Cos(PI2 * i / size) +  				                             0.05677 * Math.Cos(2 * PI2 * i / size));
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Gauss,The following statement contains a magic number: int start = (windowFunction.Length - size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Gauss,The following statement contains a magic number: int stop = (windowFunction.Length + size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Gauss,The following statement contains a magic number: double delta = 5.0 / size;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Gauss,The following statement contains a magic number: double x = (1 - size) / 2.0 * delta;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Gauss,The following statement contains a magic number: double c = -Math.PI * Math.Exp(1.0) / 10.0;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Rectangle,The following statement contains a magic number: int start = (windowFunction.Length - size) / 2;
Magic Number,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Rectangle,The following statement contains a magic number: int stop = (windowFunction.Length + size) / 2;
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    //binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                                    if (_Subchunk1Size != 16)                  {                  	this._ExtraParamSize = binReader.ReadInt16();                  	this._ExtraParam = binReader.ReadBytes(this._ExtraParamSize);                  }                                    this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following statement contains a magic number: try              {                  BinaryReader binReader = new BinaryReader(File.OpenRead(filename));                    this._ID = binReader.ReadBytes(4);                  this._ChunkSize = binReader.ReadUInt32();                  this._Format = binReader.ReadBytes(4);                    this._Subchunk1ID = binReader.ReadBytes(4);                  this._Subchunk1Size = binReader.ReadUInt32();                  this._AudioFormat = binReader.ReadInt16();                  this._NumChannels = binReader.ReadInt16();                  this._SampleRate = binReader.ReadUInt32();                  this._ByteRate = binReader.ReadUInt32();                    this._BlockAlign = binReader.ReadInt16();                  this._BitsPerSample = binReader.ReadInt16();                    binReader.BaseStream.Seek(_Subchunk1Size + 20' SeekOrigin.Begin);                  this._Subchunk2ID = binReader.ReadBytes(4);                  this._Subchunk2Size = binReader.ReadUInt32();                    this._BitsPerSample = (short)Math.Max((short)8' this._BitsPerSample);                  int len = (int)_Subchunk2Size;                  switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }                    binReader.Close();                  binReader.Dispose();              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The following statement contains a magic number: Initialize(sampleRate' 512' 20' true' 20.0' 16000.0' 40);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The following statement contains a magic number: Initialize(sampleRate' 512' 20' true' 20.0' 16000.0' 40);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The following statement contains a magic number: Initialize(sampleRate' 512' 20' true' 20.0' 16000.0' 40);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The following statement contains a magic number: Initialize(sampleRate' 512' 20' true' 20.0' 16000.0' 40);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The following statement contains a magic number: Initialize(sampleRate' 512' 20' true' 20.0' 16000.0' 40);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The following statement contains a magic number: Initialize(sampleRate' windowSize' numberCoefficients' useFirstCoefficient' 20.0' 16000.0' 40);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The following statement contains a magic number: Initialize(sampleRate' windowSize' numberCoefficients' useFirstCoefficient' 20.0' 16000.0' 40);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MFCC,The following statement contains a magic number: Initialize(sampleRate' windowSize' numberCoefficients' useFirstCoefficient' 20.0' 16000.0' 40);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,Initialize,The following statement contains a magic number: if(windowSize < 32)  			{  				throw new Exception("window size must be at least 32");  			}  			else  			{  				int i = 32;  				while(i < windowSize && i < Int32.MaxValue)  					i = i << 1;    				if(i != windowSize)  					throw new Exception("window size must be 2^n");  			}
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,Initialize,The following statement contains a magic number: if(windowSize < 32)  			{  				throw new Exception("window size must be at least 32");  			}  			else  			{  				int i = 32;  				while(i < windowSize && i < Int32.MaxValue)  					i = i << 1;    				if(i != windowSize)  					throw new Exception("window size must be 2^n");  			}
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,Initialize,The following statement contains a magic number: if(numberFilters < 2 || numberFilters > (windowSize/2) + 1)  				throw new Exception("number filters must be at least 2 and smaller than the nyquist frequency");
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,Initialize,The following statement contains a magic number: if(numberFilters < 2 || numberFilters > (windowSize/2) + 1)  				throw new Exception("number filters must be at least 2 and smaller than the nyquist frequency");
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,Initialize,The following statement contains a magic number: this.hopSize = windowSize/2;
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,GetMelFilterBankBoundaries,The following statement contains a magic number: double[] centers = new double[numberFilters + 2];
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,GetMelFilterBanks,The following statement contains a magic number: for(int i = 1; i < boundaries.Length-1; i++)  			{  				if(boundaries[i] > sampleRate/2 )  				{  					numberFilters = i-1;  					break;  				}  			}
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,GetMelFilterBanks,The following statement contains a magic number: for(int i = 1; i <= numberFilters; i++)  			{  				double[] filter = new double[(windowSize/2)+1];    				//for each frequency of the fft  				for(int j = 0; j < filter.Length; j++)  				{  					//compute the filter weight of the current triangular mel filter  					double freq = baseFreq * j;  					filter[j] = GetMelFilterWeight(i' freq' boundaries);  				}    				//add the computed mel filter to the filter bank  				matrix[i-1] = filter;  			}
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,GetMelFilterBanks,The following statement contains a magic number: return new Matrix(matrix' numberFilters' (windowSize/2)+1);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,LinToMelFreq,The following statement contains a magic number: return (2595.0 * (Math.Log(1.0 + inputFreq / 700.0) / Math.Log(10.0)));
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,LinToMelFreq,The following statement contains a magic number: return (2595.0 * (Math.Log(1.0 + inputFreq / 700.0) / Math.Log(10.0)));
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,LinToMelFreq,The following statement contains a magic number: return (2595.0 * (Math.Log(1.0 + inputFreq / 700.0) / Math.Log(10.0)));
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MelToLinFreq,The following statement contains a magic number: return (700.0 * (Math.Pow(10.0' (inputFreq / 2595.0)) - 1.0));
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MelToLinFreq,The following statement contains a magic number: return (700.0 * (Math.Pow(10.0' (inputFreq / 2595.0)) - 1.0));
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,MelToLinFreq,The following statement contains a magic number: return (700.0 * (Math.Pow(10.0' (inputFreq / 2595.0)) - 1.0));
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,GetDCTMatrix,The following statement contains a magic number: double w2 = Math.Sqrt(2.0/numberFilters);
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,ProcessWindow,The following statement contains a magic number: int fftSize = (windowSize / 2) + 1;
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,ProcessWindow,The following statement contains a magic number: double log10 = 10 * (1 / Math.Log(10));
Magic Number,VIPSLib.Audio,MFCC,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\MFCC.cs,ProcessWindow,The following statement contains a magic number: double log10 = 10 * (1 / Math.Log(10));
Magic Number,VIPSLib.Maths,Matrix,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Matrix.cs,Mean,The following statement contains a magic number: switch (dim) {  				case 1:  					result = new Matrix(1' n);  					for (int currN = 0; currN < n; currN++) {  						for (int currM = 0; currM < m; currM++)  							result.A[0][currN] += A[currM][currN];  						result.A[0][currN] /= m;  					}  					return result;  				case 2:  					result = new Matrix(m' 1);  					for (int currM = 0; currM < m; currM++) {  						for (int currN = 0; currN < n; currN++) {  							result.A[currM][0] += A[currM][currN];  						}  						result.A[currM][0] /= n;  					}  					return result;  				default:  					throw new Exception("dim must be either 1 or 2' and not: " + dim);  			}
Duplicate Code,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The method contains a code clone-set at the following line numbers (starting from the method definition): ((40' 110)' (146' 216)' (252' 322))
Duplicate Code,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 90)' (92' 141))
Duplicate Code,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 60)' (92' 111)' (147' 166)' (198' 217)' (253' 272)' (304' 323))
Duplicate Code,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 90)' (198' 247)' (304' 353)' (92' 141)' (147' 196)' (253' 302))
Duplicate Code,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The method contains a code clone-set at the following line numbers (starting from the method definition): ((92' 142)' (198' 248)' (304' 354))
Missing Default,Wave2Zebra2Preset,AColor,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\AColor.cs,HSL2RGB,The following switch statement is missing a default case: switch (sextant)  				{  					case 0:  						r = v;  						g = mid1;  						b = m;  						break;  					case 1:  						r = mid2;  						g = v;  						b = m;  						break;  					case 2:  						r = m;  						g = v;  						b = mid1;  						break;  					case 3:  						r = m;  						g = mid2;  						b = v;  						break;  					case 4:  						r = mid1;  						g = m;  						b = v;  						break;  					case 5:  						r = v;  						g = m;  						b = mid2;  						break;  				}
Missing Default,Wave2Zebra2Preset,VB6Spectrogram,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VB6Spectrogram.cs,SaveBitmap,The following switch statement is missing a default case: switch (BitsPerPixel)  			{  				case 24:  					NumQuadsPerRow = 3 * width / 4;  					if (4 * NumQuadsPerRow / 3 < width)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 8:  					NumQuadsPerRow = width / 4;  					if (width % 4 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 4:  					NumQuadsPerRow = width / 8;  					if (width % 8 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}    					break;  				case 1:  					NumQuadsPerRow = width / 32;  					if (width % 32 > 0)  					{  						NumQuadsPerRow = NumQuadsPerRow + 1;  					}  					break;  			}
Missing Default,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following switch statement is missing a default case: switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}
Missing Default,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following switch statement is missing a default case: switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}
Missing Default,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following switch statement is missing a default case: switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}
Missing Default,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following switch statement is missing a default case: switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}
Missing Default,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following switch statement is missing a default case: switch (hibyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}
Missing Default,CWT,CWTForm,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\CWTForm.cs,writeepsfile,The following switch statement is missing a default case: switch (lowbyte)  					{  						case 0:  							sw.Write("0");  							break;  						case 1:  							sw.Write("1");  							break;  						case 2:  							sw.Write("2");  							break;  						case 3:  							sw.Write("3");  							break;  						case 4:  							sw.Write("4");  							break;  						case 5:  							sw.Write("5");  							break;  						case 6:  							sw.Write("6");  							break;  						case 7:  							sw.Write("7");  							break;  						case 8:  							sw.Write("8");  							break;  						case 9:  							sw.Write("9");  							break;  						case 10:  							sw.Write("a");  							break;  						case 11:  							sw.Write("b");  							break;  						case 12:  							sw.Write("c");  							break;  						case 13:  							sw.Write("d");  							break;  						case 14:  							sw.Write("e");  							break;  						case 15:  							sw.Write("f");  							break;  					}
Missing Default,Wave2Zebra2Preset.DataAccess,RamStorage,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\RamStorage.cs,InsertHash,The following switch statement is missing a default case: switch (type)              {                  case HashType.Query:                      _fingerprints[hash.Track].Query.Add(hash);                      break;                  case HashType.Creational:                      {                          _fingerprints[hash.Track].Creational.Add(hash);                          int[] signature = hash.Signature;                          lock (_hashTables.SyncRoot) /*Lock insertion in the hash-tables as it keys are verified*/                          {                              for (int i = 0; i < _numberOfHashTables; i++)                              {                                  if (!_hashTables[i].ContainsKey(signature[i]))                                      _hashTables[i][signature[i]] = new HashSet<Track>();                                  _hashTables[i][signature[i]].Add(hash.Track);                              }                          }                      }                      break;              }
Missing Default,Wave2Zebra2Preset.DataAccess,RamStorage,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\DataAccess\RamStorage.cs,GetHashSignatures,The following switch statement is missing a default case: switch (type)                  {                      case HashType.Creational:                          return _fingerprints[track].Creational;                      case HashType.Query:                          return _fingerprints[track].Query;                  }
Missing Default,Wave2Zebra2Preset.HermitGauges,Window,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\HermitGauges\Window.cs,Window,The following switch statement is missing a default case: switch (function)  			{  				case Function.RECTANGULAR:  					// Nothing to do.  					break;  				case Function.BLACKMAN_HARRIS:  					makeBlackmanHarris(kernel' size);  					break;  				case Function.GAUSS:  					makeGauss(kernel' size);  					break;  				case Function.WEEDON_GAUSS:  					makeWeedonGauss(kernel' size);  					break;  			}
Missing Default,VIPSLib.Audio,FFT,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FFT.cs,Transform,The following switch statement is missing a default case: switch(transformationType)  			{  				case FFT_FORWARD:  					//check for correct size of the imaginary part data array  					if(im.Length < windowSize)  						throw new Exception("data array smaller than fft window size");  					else  						CalFFT(re' im' FFT_FORWARD);  					break;  				case FFT_INLINE_POWER_PHASE:  					if(im.Length < windowSize)  						throw new Exception("data array smaller than fft window size");  					else  						PowerPhaseIFFT(re' im);  					break;  				case FFT_MAGNITUDE:  					MagnitudeFFT(re);  					break;  				case FFT_MAGNITUDE_PHASE:  					if(im.Length < windowSize)  						throw new Exception("data array smaller than fft window size");  					else  						MagnitudePhaseFFT(re' im);  					break;  				case FFT_NORMALIZED_POWER:  					NormalizedPowerFFT(re);  					break;  				case FFT_POWER:  					PowerFFT(re);  					break;  				case FFT_POWER_PHASE:  					if(im.Length < windowSize)  						throw new Exception("data array smaller than fft window size");  					else  						PowerPhaseFFT(re' im);  					break;  				case FFT_REVERSE:  					if(im.Length < windowSize)  						throw new Exception("data array smaller than fft window size");  					else  						CalFFT(re' im' FFT_REVERSE);  					break;  			}
Missing Default,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFileToDouble,The following switch statement is missing a default case: switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)_Data8[i];                          _Data8 = null;                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data = new double[len];                          for (int i = 0; i < len; i++)                              _Data[i] = (double)binReader.ReadInt32();                          break;                  }
Missing Default,VIPSLib.Audio,WAVFile,C:\repos\perivar_AudioVSTToolbox\Wave2Zebra2Preset\VIPSLib\Audio\FileFormats\WAVFile.cs,ReadFromFile,The following switch statement is missing a default case: switch (this._BitsPerSample)                  {                      case 8:                          _Data8 = binReader.ReadBytes((int)len);                          break;                      case 16:                          len = (int)_Subchunk2Size / 2;                          _Data16 = new short[len];                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = _Data16[i] = binReader.ReadInt16();                          break;                      case 32:                          len = (int)_Subchunk2Size / 4;                          _Data32 = new int[len];                          for (int i = 0; i < len; i++)                              _Data32[i] = binReader.ReadInt32();                          break;                  }
