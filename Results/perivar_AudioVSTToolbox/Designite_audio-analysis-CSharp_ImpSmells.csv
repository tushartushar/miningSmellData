Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The method has 5 parameters. Parameters: samples' samplesPerPixel' offset' useLastScale' color
Long Parameter List,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The method has 5 parameters. Parameters: samples' samplesPerPixel' offset' useLastScale' color
Long Statement,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,Forward,The length of the statement  "				throw new ArgumentException("FourierTransform.forward: not enough samples in the buffer between " + startAt + " and " + buffer.Length + " to perform a transform."); " is 164.
Long Statement,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The length of the statement  "					//g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value); " is 148.
Long Statement,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The length of the statement  "					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value); " is 146.
Long Statement,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The length of the statement  "					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value); " is 146.
Long Statement,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The length of the statement  "					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value); " is 146.
Virtual Method Call from Constructor,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,FourierTransform,The constructor "FourierTransform" calls a virtual method "AllocateArrays".
Magic Number,audio_analysis_CSharp,MainForm,C:\repos\perivar_AudioVSTToolbox\audio-analysis\MainForm.cs,MainFormPaint,The following statement contains a magic number: Pen myPen = new Pen(System.Drawing.Color.Red' 5);
Magic Number,audio_analysis_CSharp,MainForm,C:\repos\perivar_AudioVSTToolbox\audio-analysis\MainForm.cs,MainFormPaint,The following statement contains a magic number: graphicsObj.DrawLine(myPen' 20' 20' 200' 210);
Magic Number,audio_analysis_CSharp,MainForm,C:\repos\perivar_AudioVSTToolbox\audio-analysis\MainForm.cs,MainFormPaint,The following statement contains a magic number: graphicsObj.DrawLine(myPen' 20' 20' 200' 210);
Magic Number,audio_analysis_CSharp,MainForm,C:\repos\perivar_AudioVSTToolbox\audio-analysis\MainForm.cs,MainFormPaint,The following statement contains a magic number: graphicsObj.DrawLine(myPen' 20' 20' 200' 210);
Magic Number,audio_analysis_CSharp,MainForm,C:\repos\perivar_AudioVSTToolbox\audio-analysis\MainForm.cs,MainFormPaint,The following statement contains a magic number: graphicsObj.DrawLine(myPen' 20' 20' 200' 210);
Magic Number,audio_analysis_CSharp,MainForm,C:\repos\perivar_AudioVSTToolbox\audio-analysis\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(554' 372);
Magic Number,audio_analysis_CSharp,MainForm,C:\repos\perivar_AudioVSTToolbox\audio-analysis\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(554' 372);
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,DFT,The following statement contains a magic number: if (timeSize % 2 != 0)  				throw new ArgumentException("DFT: timeSize must be even.");
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,AllocateArrays,The following statement contains a magic number: spectrum = new float[timeSize / 2 + 1];
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,AllocateArrays,The following statement contains a magic number: real = new float[timeSize / 2 + 1];
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,AllocateArrays,The following statement contains a magic number: imag = new float[timeSize / 2 + 1];
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Forward,The following statement contains a magic number: for (int f = 0; f <= N / 2; f++)  			{  				real[f] = 0.0f;  				imag[f] = 0.0f;  				for (int t = 0; t < N; t++)  				{  					real[f] += samples[t] * cos(t * f);  					imag[f] += samples[t] * -sin(t * f);  				}  			}
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Inverse,The following statement contains a magic number: imag[0] = -imag[0] / (N / 2);
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Inverse,The following statement contains a magic number: real[N / 2] /= N;
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Inverse,The following statement contains a magic number: imag[N / 2] = -imag[0] / (N / 2);
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Inverse,The following statement contains a magic number: imag[N / 2] = -imag[0] / (N / 2);
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Inverse,The following statement contains a magic number: for (int i = 0; i < N / 2; i++)  			{  				real[i] /= (N / 2);  				imag[i] = -imag[i] / (N / 2);  			}
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Inverse,The following statement contains a magic number: for (int i = 0; i < N / 2; i++)  			{  				real[i] /= (N / 2);  				imag[i] = -imag[i] / (N / 2);  			}
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Inverse,The following statement contains a magic number: for (int i = 0; i < N / 2; i++)  			{  				real[i] /= (N / 2);  				imag[i] = -imag[i] / (N / 2);  			}
Magic Number,com.badlogic.audio.analysis,DFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\DFT.cs,Inverse,The following statement contains a magic number: for (int t = 0; t < N; t++)  			{  				buffer[t] = 0.0f;  				for (int f = 0; f < N / 2; f++)  				{  					buffer[t] += real[f] * cos(t * f) + imag[f] * sin(t * f);  				}  			}
Magic Number,com.badlogic.audio.analysis,FFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FFT.cs,AllocateArrays,The following statement contains a magic number: spectrum = new float[timeSize / 2 + 1];
Magic Number,com.badlogic.audio.analysis,FFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FFT.cs,ScaleBand,The following statement contains a magic number: if (i != 0 && i != timeSize / 2)  			{  				real[timeSize - i] = real[i];  				imag[timeSize - i] = -imag[i];  			}
Magic Number,com.badlogic.audio.analysis,FFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FFT.cs,SetBand,The following statement contains a magic number: if (i != 0 && i != timeSize / 2)  			{  				real[timeSize - i] = real[i];  				imag[timeSize - i] = -imag[i];  			}
Magic Number,com.badlogic.audio.analysis,FFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FFT.cs,fft,The following statement contains a magic number: for (int halfSize = 1; halfSize < real.Length; halfSize *= 2)  			{  				// float k = -(float)Math.PI/halfSize;  				// phase shift step  				// float phaseShiftStepR = (float)Math.cos(k);  				// float phaseShiftStepI = (float)Math.sin(k);  				// using lookup table  				float phaseShiftStepR = cos(halfSize);  				float phaseShiftStepI = sin(halfSize);  				// current phase shift  				float currentPhaseShiftR = 1.0f;  				float currentPhaseShiftI = 0.0f;  				for (int fftStep = 0; fftStep < halfSize; fftStep++)  				{  					for (int i = fftStep; i < real.Length; i += 2 * halfSize)  					{  						int off = i + halfSize;  						float tr = (currentPhaseShiftR * real[off]) - (currentPhaseShiftI * imag[off]);  						float ti = (currentPhaseShiftR * imag[off]) + (currentPhaseShiftI * real[off]);  						real[off] = real[i] - tr;  						imag[off] = imag[i] - ti;  						real[i] += tr;  						imag[i] += ti;  					}  					float tmpR = currentPhaseShiftR;  					currentPhaseShiftR = (tmpR * phaseShiftStepR) - (currentPhaseShiftI * phaseShiftStepI);  					currentPhaseShiftI = (tmpR * phaseShiftStepI) + (currentPhaseShiftI * phaseShiftStepR);  				}  			}
Magic Number,com.badlogic.audio.analysis,FFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FFT.cs,fft,The following statement contains a magic number: for (int halfSize = 1; halfSize < real.Length; halfSize *= 2)  			{  				// float k = -(float)Math.PI/halfSize;  				// phase shift step  				// float phaseShiftStepR = (float)Math.cos(k);  				// float phaseShiftStepI = (float)Math.sin(k);  				// using lookup table  				float phaseShiftStepR = cos(halfSize);  				float phaseShiftStepI = sin(halfSize);  				// current phase shift  				float currentPhaseShiftR = 1.0f;  				float currentPhaseShiftI = 0.0f;  				for (int fftStep = 0; fftStep < halfSize; fftStep++)  				{  					for (int i = fftStep; i < real.Length; i += 2 * halfSize)  					{  						int off = i + halfSize;  						float tr = (currentPhaseShiftR * real[off]) - (currentPhaseShiftI * imag[off]);  						float ti = (currentPhaseShiftR * imag[off]) + (currentPhaseShiftI * real[off]);  						real[off] = real[i] - tr;  						imag[off] = imag[i] - ti;  						real[i] += tr;  						imag[i] += ti;  					}  					float tmpR = currentPhaseShiftR;  					currentPhaseShiftR = (tmpR * phaseShiftStepR) - (currentPhaseShiftI * phaseShiftStepI);  					currentPhaseShiftI = (tmpR * phaseShiftStepI) + (currentPhaseShiftI * phaseShiftStepR);  				}  			}
Magic Number,com.badlogic.audio.analysis,FFT,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FFT.cs,buildReverseTable,The following statement contains a magic number: for (int limit = 1' bit = N / 2; limit < N; limit <<= 1' bit >>= 1)  				for (int i = 0; i < limit; i++)  					reverse[i + limit] = reverse[i] + bit;
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,FillSpectrum,The following statement contains a magic number: if (whichAverage == LINAVG)  			{  				int avgWidth = (int) spectrum.Length / averages.Length;  				for (int i = 0; i < averages.Length; i++)  				{  					float avg = 0;  					int j;  					for (j = 0; j < avgWidth; j++)  					{  						int offset = j + i * avgWidth;  						if (offset < spectrum.Length)  						{  							avg += spectrum[offset];  						}  						else  						{  							break;  						}  					}  					avg /= j + 1;  					averages[i] = avg;  				}  			}  			else if (whichAverage == LOGAVG)  			{  				for (int i = 0; i < octaves; i++)  				{  					float lowFreq' hiFreq' freqStep;  					if (i == 0)  					{  						lowFreq = 0;  					}  					else  					{  						lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - i);  					}  					hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - i - 1);  					freqStep = (hiFreq - lowFreq) / avgPerOctave;  					float f = lowFreq;  					for (int j = 0; j < avgPerOctave; j++)  					{  						int offset = j + i * avgPerOctave;  						averages[offset] = CalcAvg(f' f + freqStep);  						f += freqStep;  					}  				}  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,FillSpectrum,The following statement contains a magic number: if (whichAverage == LINAVG)  			{  				int avgWidth = (int) spectrum.Length / averages.Length;  				for (int i = 0; i < averages.Length; i++)  				{  					float avg = 0;  					int j;  					for (j = 0; j < avgWidth; j++)  					{  						int offset = j + i * avgWidth;  						if (offset < spectrum.Length)  						{  							avg += spectrum[offset];  						}  						else  						{  							break;  						}  					}  					avg /= j + 1;  					averages[i] = avg;  				}  			}  			else if (whichAverage == LOGAVG)  			{  				for (int i = 0; i < octaves; i++)  				{  					float lowFreq' hiFreq' freqStep;  					if (i == 0)  					{  						lowFreq = 0;  					}  					else  					{  						lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - i);  					}  					hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - i - 1);  					freqStep = (hiFreq - lowFreq) / avgPerOctave;  					float f = lowFreq;  					for (int j = 0; j < avgPerOctave; j++)  					{  						int offset = j + i * avgPerOctave;  						averages[offset] = CalcAvg(f' f + freqStep);  						f += freqStep;  					}  				}  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,FillSpectrum,The following statement contains a magic number: if (whichAverage == LINAVG)  			{  				int avgWidth = (int) spectrum.Length / averages.Length;  				for (int i = 0; i < averages.Length; i++)  				{  					float avg = 0;  					int j;  					for (j = 0; j < avgWidth; j++)  					{  						int offset = j + i * avgWidth;  						if (offset < spectrum.Length)  						{  							avg += spectrum[offset];  						}  						else  						{  							break;  						}  					}  					avg /= j + 1;  					averages[i] = avg;  				}  			}  			else if (whichAverage == LOGAVG)  			{  				for (int i = 0; i < octaves; i++)  				{  					float lowFreq' hiFreq' freqStep;  					if (i == 0)  					{  						lowFreq = 0;  					}  					else  					{  						lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - i);  					}  					hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - i - 1);  					freqStep = (hiFreq - lowFreq) / avgPerOctave;  					float f = lowFreq;  					for (int j = 0; j < avgPerOctave; j++)  					{  						int offset = j + i * avgPerOctave;  						averages[offset] = CalcAvg(f' f + freqStep);  						f += freqStep;  					}  				}  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,FillSpectrum,The following statement contains a magic number: if (whichAverage == LINAVG)  			{  				int avgWidth = (int) spectrum.Length / averages.Length;  				for (int i = 0; i < averages.Length; i++)  				{  					float avg = 0;  					int j;  					for (j = 0; j < avgWidth; j++)  					{  						int offset = j + i * avgWidth;  						if (offset < spectrum.Length)  						{  							avg += spectrum[offset];  						}  						else  						{  							break;  						}  					}  					avg /= j + 1;  					averages[i] = avg;  				}  			}  			else if (whichAverage == LOGAVG)  			{  				for (int i = 0; i < octaves; i++)  				{  					float lowFreq' hiFreq' freqStep;  					if (i == 0)  					{  						lowFreq = 0;  					}  					else  					{  						lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - i);  					}  					hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - i - 1);  					freqStep = (hiFreq - lowFreq) / avgPerOctave;  					float f = lowFreq;  					for (int j = 0; j < avgPerOctave; j++)  					{  						int offset = j + i * avgPerOctave;  						averages[offset] = CalcAvg(f' f + freqStep);  						f += freqStep;  					}  				}  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,LinAverages,The following statement contains a magic number: if (numAvg > spectrum.Length / 2)  			{  				throw new ArgumentException("The number of averages for this transform can be at most " + spectrum.Length / 2 + ".");  			}  			else  			{  				averages = new float[numAvg];  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,LinAverages,The following statement contains a magic number: if (numAvg > spectrum.Length / 2)  			{  				throw new ArgumentException("The number of averages for this transform can be at most " + spectrum.Length / 2 + ".");  			}  			else  			{  				averages = new float[numAvg];  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,LogAverages,The following statement contains a magic number: while ((nyq /= 2) > minBandwidth)  			{  				octaves++;  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,FreqToIndex,The following statement contains a magic number: if (freq < GetBandWidth() / 2)  				return 0;
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,FreqToIndex,The following statement contains a magic number: if (freq > sampleRate / 2 - GetBandWidth() / 2)  				return spectrum.Length - 1;
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,FreqToIndex,The following statement contains a magic number: if (freq > sampleRate / 2 - GetBandWidth() / 2)  				return spectrum.Length - 1;
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,IndexToFreq,The following statement contains a magic number: if (i == spectrum.Length - 1)  			{  				float lastBinBeginFreq = (sampleRate / 2) - (bw / 2);  				float binHalfWidth = bw * 0.25f;  				return lastBinBeginFreq + binHalfWidth;  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,IndexToFreq,The following statement contains a magic number: if (i == spectrum.Length - 1)  			{  				float lastBinBeginFreq = (sampleRate / 2) - (bw / 2);  				float binHalfWidth = bw * 0.25f;  				return lastBinBeginFreq + binHalfWidth;  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,GetAverageCenterFrequency,The following statement contains a magic number: if (whichAverage == LINAVG) {  				// an average represents a certain number of bands in the spectrum  				int avgWidth = (int) spectrum.Length / averages.Length;  				// the "center" bin of the average' this is fudgy.  				int centerBinIndex = i*avgWidth + avgWidth/2;  				return IndexToFreq(centerBinIndex);    			} else if (whichAverage == LOGAVG) {  				// which "octave" is this index in?  				int octave = i / avgPerOctave;  				// which band within that octave is this?  				int offset = i % avgPerOctave;  				float lowFreq' hiFreq' freqStep;  				// figure out the low frequency for this octave  				if (octave == 0)  				{  					lowFreq = 0;  				}  				else  				{  					lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave);  				}  				// and the high frequency for this octave  				hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave - 1);  				// each average band within the octave will be this big  				freqStep = (hiFreq - lowFreq) / avgPerOctave;  				// figure out the low frequency of the band we care about  				float f = lowFreq + offset*freqStep;  				// the center of the band will be the low plus half the width  				return f + freqStep/2;  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,GetAverageCenterFrequency,The following statement contains a magic number: if (whichAverage == LINAVG) {  				// an average represents a certain number of bands in the spectrum  				int avgWidth = (int) spectrum.Length / averages.Length;  				// the "center" bin of the average' this is fudgy.  				int centerBinIndex = i*avgWidth + avgWidth/2;  				return IndexToFreq(centerBinIndex);    			} else if (whichAverage == LOGAVG) {  				// which "octave" is this index in?  				int octave = i / avgPerOctave;  				// which band within that octave is this?  				int offset = i % avgPerOctave;  				float lowFreq' hiFreq' freqStep;  				// figure out the low frequency for this octave  				if (octave == 0)  				{  					lowFreq = 0;  				}  				else  				{  					lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave);  				}  				// and the high frequency for this octave  				hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave - 1);  				// each average band within the octave will be this big  				freqStep = (hiFreq - lowFreq) / avgPerOctave;  				// figure out the low frequency of the band we care about  				float f = lowFreq + offset*freqStep;  				// the center of the band will be the low plus half the width  				return f + freqStep/2;  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,GetAverageCenterFrequency,The following statement contains a magic number: if (whichAverage == LINAVG) {  				// an average represents a certain number of bands in the spectrum  				int avgWidth = (int) spectrum.Length / averages.Length;  				// the "center" bin of the average' this is fudgy.  				int centerBinIndex = i*avgWidth + avgWidth/2;  				return IndexToFreq(centerBinIndex);    			} else if (whichAverage == LOGAVG) {  				// which "octave" is this index in?  				int octave = i / avgPerOctave;  				// which band within that octave is this?  				int offset = i % avgPerOctave;  				float lowFreq' hiFreq' freqStep;  				// figure out the low frequency for this octave  				if (octave == 0)  				{  					lowFreq = 0;  				}  				else  				{  					lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave);  				}  				// and the high frequency for this octave  				hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave - 1);  				// each average band within the octave will be this big  				freqStep = (hiFreq - lowFreq) / avgPerOctave;  				// figure out the low frequency of the band we care about  				float f = lowFreq + offset*freqStep;  				// the center of the band will be the low plus half the width  				return f + freqStep/2;  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,GetAverageCenterFrequency,The following statement contains a magic number: if (whichAverage == LINAVG) {  				// an average represents a certain number of bands in the spectrum  				int avgWidth = (int) spectrum.Length / averages.Length;  				// the "center" bin of the average' this is fudgy.  				int centerBinIndex = i*avgWidth + avgWidth/2;  				return IndexToFreq(centerBinIndex);    			} else if (whichAverage == LOGAVG) {  				// which "octave" is this index in?  				int octave = i / avgPerOctave;  				// which band within that octave is this?  				int offset = i % avgPerOctave;  				float lowFreq' hiFreq' freqStep;  				// figure out the low frequency for this octave  				if (octave == 0)  				{  					lowFreq = 0;  				}  				else  				{  					lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave);  				}  				// and the high frequency for this octave  				hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave - 1);  				// each average band within the octave will be this big  				freqStep = (hiFreq - lowFreq) / avgPerOctave;  				// figure out the low frequency of the band we care about  				float f = lowFreq + offset*freqStep;  				// the center of the band will be the low plus half the width  				return f + freqStep/2;  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,GetAverageCenterFrequency,The following statement contains a magic number: if (whichAverage == LINAVG) {  				// an average represents a certain number of bands in the spectrum  				int avgWidth = (int) spectrum.Length / averages.Length;  				// the "center" bin of the average' this is fudgy.  				int centerBinIndex = i*avgWidth + avgWidth/2;  				return IndexToFreq(centerBinIndex);    			} else if (whichAverage == LOGAVG) {  				// which "octave" is this index in?  				int octave = i / avgPerOctave;  				// which band within that octave is this?  				int offset = i % avgPerOctave;  				float lowFreq' hiFreq' freqStep;  				// figure out the low frequency for this octave  				if (octave == 0)  				{  					lowFreq = 0;  				}  				else  				{  					lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave);  				}  				// and the high frequency for this octave  				hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave - 1);  				// each average band within the octave will be this big  				freqStep = (hiFreq - lowFreq) / avgPerOctave;  				// figure out the low frequency of the band we care about  				float f = lowFreq + offset*freqStep;  				// the center of the band will be the low plus half the width  				return f + freqStep/2;  			}
Magic Number,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,GetAverageCenterFrequency,The following statement contains a magic number: if (whichAverage == LINAVG) {  				// an average represents a certain number of bands in the spectrum  				int avgWidth = (int) spectrum.Length / averages.Length;  				// the "center" bin of the average' this is fudgy.  				int centerBinIndex = i*avgWidth + avgWidth/2;  				return IndexToFreq(centerBinIndex);    			} else if (whichAverage == LOGAVG) {  				// which "octave" is this index in?  				int octave = i / avgPerOctave;  				// which band within that octave is this?  				int offset = i % avgPerOctave;  				float lowFreq' hiFreq' freqStep;  				// figure out the low frequency for this octave  				if (octave == 0)  				{  					lowFreq = 0;  				}  				else  				{  					lowFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave);  				}  				// and the high frequency for this octave  				hiFreq = (sampleRate / 2) / (float) Math.Pow(2' octaves - octave - 1);  				// each average band within the octave will be this big  				freqStep = (hiFreq - lowFreq) / avgPerOctave;  				// figure out the low frequency of the band we care about  				float f = lowFreq + offset*freqStep;  				// the center of the band will be the low plus half the width  				return f + freqStep/2;  			}
Magic Number,com.badlogic.audio.analysis,SpectrumProvider,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\SpectrumProvider.cs,SpectrumProvider,The following statement contains a magic number: fft = new FFT(sampleWindowSize' 44100);
Magic Number,com.badlogic.audio.analysis,ThresholdFunction,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\ThresholdFunction.cs,calculate,The following statement contains a magic number: for(int i = 0; i < spectralFlux.Count; i++)  			{  				float sum = 0;  				int Start = Math.Max(0' i - historySize / 2);  				int end = Math.Min(spectralFlux.Count-1' i + historySize / 2);  				for(int j = Start; j <= end; j++)  					sum += spectralFlux[j];  				sum /= (end-Start);  				sum *= multiplier;  				thresholds.Add(sum);  			}
Magic Number,com.badlogic.audio.analysis,ThresholdFunction,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\ThresholdFunction.cs,calculate,The following statement contains a magic number: for(int i = 0; i < spectralFlux.Count; i++)  			{  				float sum = 0;  				int Start = Math.Max(0' i - historySize / 2);  				int end = Math.Min(spectralFlux.Count-1' i + historySize / 2);  				for(int j = Start; j <= end; j++)  					sum += spectralFlux[j];  				sum /= (end-Start);  				sum *= multiplier;  				thresholds.Add(sum);  			}
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,AudioDevice,The following statement contains a magic number: bufferedWaveProvider = new BufferedWaveProvider(WaveFormat.CreateIeeeFloatWaveFormat(44100' 2));
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,AudioDevice,The following statement contains a magic number: bufferedWaveProvider = new BufferedWaveProvider(WaveFormat.CreateIeeeFloatWaveFormat(44100' 2));
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,AudioDevice,The following statement contains a magic number: bufferedWaveProvider.BufferDuration = TimeSpan.FromMinutes(10);
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,FillBuffer,The following statement contains a magic number: for(int i = 0' j = 0; i < samples.Length; i++' j+=4)  			{  				byte[] array = BitConverter.GetBytes(samples[i]);  				buffer[j] = array[0];  				buffer[j+1] = array[1];  				buffer[j+2] = array[2];  				buffer[j+3] = array[3];  			}
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,FillBuffer,The following statement contains a magic number: for(int i = 0' j = 0; i < samples.Length; i++' j+=4)  			{  				byte[] array = BitConverter.GetBytes(samples[i]);  				buffer[j] = array[0];  				buffer[j+1] = array[1];  				buffer[j+2] = array[2];  				buffer[j+3] = array[3];  			}
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,FillBuffer,The following statement contains a magic number: for(int i = 0' j = 0; i < samples.Length; i++' j+=4)  			{  				byte[] array = BitConverter.GetBytes(samples[i]);  				buffer[j] = array[0];  				buffer[j+1] = array[1];  				buffer[j+2] = array[2];  				buffer[j+3] = array[3];  			}
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,FillBuffer,The following statement contains a magic number: for(int i = 0' j = 0; i < samples.Length; i++' j+=4)  			{  				byte[] array = BitConverter.GetBytes(samples[i]);  				buffer[j] = array[0];  				buffer[j+1] = array[1];  				buffer[j+2] = array[2];  				buffer[j+3] = array[3];  			}
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,FillBuffer,The following statement contains a magic number: for(int i = 0' j = 0; i < samples.Length; i++' j+=4)  			{  				byte[] array = BitConverter.GetBytes(samples[i]);  				buffer[j] = array[0];  				buffer[j+1] = array[1];  				buffer[j+2] = array[2];  				buffer[j+3] = array[3];  			}
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.io,AudioDevice,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\io\AudioDevice.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep(10000);
Magic Number,com.badlogic.audio.samples.part2,NoteGenerator,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part2\NoteGenerator.cs,Main,The following statement contains a magic number: const float frequency = 880;
Magic Number,com.badlogic.audio.samples.part2,NoteGenerator,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part2\NoteGenerator.cs,Main,The following statement contains a magic number: float increment = (float)(2*Math.PI) * frequency / 44100;
Magic Number,com.badlogic.audio.samples.part2,NoteGenerator,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part2\NoteGenerator.cs,Main,The following statement contains a magic number: float increment = (float)(2*Math.PI) * frequency / 44100;
Magic Number,com.badlogic.audio.samples.part2,NoteGenerator,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part2\NoteGenerator.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.samples.part2,WaveOutput,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part2\WaveOutput.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.samples.part2,WaveOutput,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part2\WaveOutput.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep(10000);
Magic Number,com.badlogic.audio.samples.part3,PlotExample,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part3\PlotExample.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.samples.part3,PlotExample,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part3\PlotExample.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Wave Plot"' 512' 512);
Magic Number,com.badlogic.audio.samples.part3,PlotExample,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part3\PlotExample.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Wave Plot"' 512' 512);
Magic Number,com.badlogic.audio.samples.part3,PlotExample,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part3\PlotExample.cs,Main,The following statement contains a magic number: plot.plot(samples' 44100 / 1000' Color.Red);
Magic Number,com.badlogic.audio.samples.part3,PlotExample,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part3\PlotExample.cs,Main,The following statement contains a magic number: plot.plot(samples' 44100 / 1000' Color.Red);
Magic Number,com.badlogic.audio.samples.part4,MP3Output,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part4\MP3Output.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.samples.part4,MP3Output,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part4\MP3Output.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep(10000);
Magic Number,com.badlogic.audio.samples.part4,RealTimePlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part4\RealTimePlot.cs,Filler,The following statement contains a magic number: while(device.SampleChannel.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = device.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100/SAMPLE_WINDOW_SIZE)) * 2;  				((Plot)plot).SetMarker(position' Color.White);  				Thread.Sleep(10);  			}
Magic Number,com.badlogic.audio.samples.part4,RealTimePlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part4\RealTimePlot.cs,Filler,The following statement contains a magic number: while(device.SampleChannel.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = device.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100/SAMPLE_WINDOW_SIZE)) * 2;  				((Plot)plot).SetMarker(position' Color.White);  				Thread.Sleep(10);  			}
Magic Number,com.badlogic.audio.samples.part4,RealTimePlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part4\RealTimePlot.cs,Filler,The following statement contains a magic number: while(device.SampleChannel.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = device.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100/SAMPLE_WINDOW_SIZE)) * 2;  				((Plot)plot).SetMarker(position' Color.White);  				Thread.Sleep(10);  			}
Magic Number,com.badlogic.audio.samples.part4,RealTimePlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part4\RealTimePlot.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Wave Plot"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part4,RealTimePlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part4\RealTimePlot.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Wave Plot"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part4,RealTimePlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part4\RealTimePlot.cs,ReadInAllSamples,The following statement contains a magic number: float[] samples = new float[16384];
Magic Number,com.badlogic.audio.samples.part5,FourierTransformPlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part5\FourierTransformPlot.cs,Main,The following statement contains a magic number: const float frequency = 440;
Magic Number,com.badlogic.audio.samples.part5,FourierTransformPlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part5\FourierTransformPlot.cs,Main,The following statement contains a magic number: float increment = (float)(2*Math.PI) * frequency / 44100;
Magic Number,com.badlogic.audio.samples.part5,FourierTransformPlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part5\FourierTransformPlot.cs,Main,The following statement contains a magic number: float increment = (float)(2*Math.PI) * frequency / 44100;
Magic Number,com.badlogic.audio.samples.part5,FourierTransformPlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part5\FourierTransformPlot.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.samples.part5,FourierTransformPlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part5\FourierTransformPlot.cs,Main,The following statement contains a magic number: FFT fft = new FFT(1024' 44100);
Magic Number,com.badlogic.audio.samples.part5,FourierTransformPlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part5\FourierTransformPlot.cs,Main,The following statement contains a magic number: FFT fft = new FFT(1024' 44100);
Magic Number,com.badlogic.audio.samples.part5,FourierTransformPlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part5\FourierTransformPlot.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Note A Spectrum"' 512' 512);
Magic Number,com.badlogic.audio.samples.part5,FourierTransformPlot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part5\FourierTransformPlot.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Note A Spectrum"' 512' 512);
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: FFT fft = new FFT(1024' 44100);
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: FFT fft = new FFT(1024' 44100);
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: float[] spectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: float[] spectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: float[] lastSpectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: float[] lastSpectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Hamming Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Hamming Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part6,HammingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HammingSpectralFlux.cs,Main,The following statement contains a magic number: new PlaybackVisualizer(plot' 1024' FILE);
Magic Number,com.badlogic.audio.samples.part6,HoppingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HoppingSpectralFlux.cs,Main,The following statement contains a magic number: SpectrumProvider spectrumProvider = new SpectrumProvider(decoder' 1024' HOP_SIZE' true);
Magic Number,com.badlogic.audio.samples.part6,HoppingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HoppingSpectralFlux.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Hopping Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part6,HoppingSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\HoppingSpectralFlux.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Hopping Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: FFT fft = new FFT(1024' 44100);
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: FFT fft = new FFT(1024' 44100);
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: float[] spectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: float[] spectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: float[] lastSpectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: float[] lastSpectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Rectified Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Rectified Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part6,RectifiedSpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\RectifiedSpectralFlux.cs,Main,The following statement contains a magic number: new PlaybackVisualizer(plot' 1024' FILE);
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: FFT fft = new FFT(1024' 44100);
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: FFT fft = new FFT(1024' 44100);
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: float[] spectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: float[] spectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: float[] lastSpectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: float[] lastSpectrum = new float[1024 / 2 + 1];
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part6,SpectralFlux,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part6\SpectralFlux.cs,Main,The following statement contains a magic number: new PlaybackVisualizer(plot' 1024' FILE);
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: SpectrumProvider spectrumProvider = new SpectrumProvider(decoder' 1024' HOP_SIZE' true);
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: for(int i = 0; i < bands.Length / 2; i++) {  				spectralFlux.Add(new List<float>());  			}
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: do {  				for(int i = 0; i < bands.Length; i+=2) {  					int startFreq = spectrumProvider.getFFT().FreqToIndex(bands[i]);  					int endFreq = spectrumProvider.getFFT().FreqToIndex(bands[i+1]);  					float flux = 0;  					for(int j = startFreq; j <= endFreq; j++)  					{  						float @value = (spectrum[j] - lastSpectrum[j]);  						@value = (@value + Math.Abs(@value))/2;  						flux += @value;  					}  					spectralFlux[i/2].Add(flux);  				}    				System.Array.Copy(spectrum' 0' lastSpectrum' 0' spectrum.Length);  			} while((spectrum = spectrumProvider.nextSpectrum()) != null);
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: do {  				for(int i = 0; i < bands.Length; i+=2) {  					int startFreq = spectrumProvider.getFFT().FreqToIndex(bands[i]);  					int endFreq = spectrumProvider.getFFT().FreqToIndex(bands[i+1]);  					float flux = 0;  					for(int j = startFreq; j <= endFreq; j++)  					{  						float @value = (spectrum[j] - lastSpectrum[j]);  						@value = (@value + Math.Abs(@value))/2;  						flux += @value;  					}  					spectralFlux[i/2].Add(flux);  				}    				System.Array.Copy(spectrum' 0' lastSpectrum' 0' spectrum.Length);  			} while((spectrum = spectrumProvider.nextSpectrum()) != null);
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: do {  				for(int i = 0; i < bands.Length; i+=2) {  					int startFreq = spectrumProvider.getFFT().FreqToIndex(bands[i]);  					int endFreq = spectrumProvider.getFFT().FreqToIndex(bands[i+1]);  					float flux = 0;  					for(int j = startFreq; j <= endFreq; j++)  					{  						float @value = (spectrum[j] - lastSpectrum[j]);  						@value = (@value + Math.Abs(@value))/2;  						flux += @value;  					}  					spectralFlux[i/2].Add(flux);  				}    				System.Array.Copy(spectrum' 0' lastSpectrum' 0' spectrum.Length);  			} while((spectrum = spectrumProvider.nextSpectrum()) != null);
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: for(int i = 0; i < bands.Length / 2; i++)  			{  				List<float> threshold = new ThresholdFunction(HISTORY_SIZE' multipliers[i]).calculate(spectralFlux[i]);  				thresholds.Add(threshold);  			}
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Multiband Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: Plot plot = new Plot("Multiband Spectral Flux"' 1024' 512);
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: for(int i = 0; i < bands.Length / 2; i++)  			{  				plot.plot(spectralFlux[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' false' Color.Red);  				plot.plot(thresholds[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' true' Color.Green);  			}
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: for(int i = 0; i < bands.Length / 2; i++)  			{  				plot.plot(spectralFlux[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' false' Color.Red);  				plot.plot(thresholds[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' true' Color.Green);  			}
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: for(int i = 0; i < bands.Length / 2; i++)  			{  				plot.plot(spectralFlux[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' false' Color.Red);  				plot.plot(thresholds[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' true' Color.Green);  			}
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: for(int i = 0; i < bands.Length / 2; i++)  			{  				plot.plot(spectralFlux[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' false' Color.Red);  				plot.plot(thresholds[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' true' Color.Green);  			}
Magic Number,com.badlogic.audio.samples.part7,MultiBandThreshold,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\samples\part7\MultiBandThreshold.cs,Main,The following statement contains a magic number: for(int i = 0; i < bands.Length / 2; i++)  			{  				plot.plot(spectralFlux[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' false' Color.Red);  				plot.plot(thresholds[i]' 1' -0.6f * (bands.Length / 2 - 2) + i' true' Color.Green);  			}
Magic Number,com.badlogic.audio.visualization,PlaybackVisualizer,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\PlaybackVisualizer.cs,FillAudioDeviceUsingStopwatch,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.visualization,PlaybackVisualizer,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\PlaybackVisualizer.cs,FillAudioDeviceUsingStopwatch,The following statement contains a magic number: while(decoder.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = stopwatch.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100 / samplesPerPixel) * 2 );  				plot.SetMarker(position' Color.White);  				System.Threading.Thread.Sleep(10); // this is needed or else swing has no chance repainting the plot!  			}
Magic Number,com.badlogic.audio.visualization,PlaybackVisualizer,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\PlaybackVisualizer.cs,FillAudioDeviceUsingStopwatch,The following statement contains a magic number: while(decoder.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = stopwatch.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100 / samplesPerPixel) * 2 );  				plot.SetMarker(position' Color.White);  				System.Threading.Thread.Sleep(10); // this is needed or else swing has no chance repainting the plot!  			}
Magic Number,com.badlogic.audio.visualization,PlaybackVisualizer,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\PlaybackVisualizer.cs,FillAudioDeviceUsingStopwatch,The following statement contains a magic number: while(decoder.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = stopwatch.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100 / samplesPerPixel) * 2 );  				plot.SetMarker(position' Color.White);  				System.Threading.Thread.Sleep(10); // this is needed or else swing has no chance repainting the plot!  			}
Magic Number,com.badlogic.audio.visualization,PlaybackVisualizer,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\PlaybackVisualizer.cs,FillAudioDeviceUsingElapsed,The following statement contains a magic number: float[] samples = new float[1024];
Magic Number,com.badlogic.audio.visualization,PlaybackVisualizer,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\PlaybackVisualizer.cs,FillAudioDeviceUsingElapsed,The following statement contains a magic number: while(device.SampleChannel.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = device.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100/samplesPerPixel) * 2 );  				plot.SetMarker(position' Color.White);  				System.Threading.Thread.Sleep(10); // this is needed or else swing has no chance repainting the plot!  			}
Magic Number,com.badlogic.audio.visualization,PlaybackVisualizer,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\PlaybackVisualizer.cs,FillAudioDeviceUsingElapsed,The following statement contains a magic number: while(device.SampleChannel.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = device.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100/samplesPerPixel) * 2 );  				plot.SetMarker(position' Color.White);  				System.Threading.Thread.Sleep(10); // this is needed or else swing has no chance repainting the plot!  			}
Magic Number,com.badlogic.audio.visualization,PlaybackVisualizer,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\PlaybackVisualizer.cs,FillAudioDeviceUsingElapsed,The following statement contains a magic number: while(device.SampleChannel.Read(samples' 0' samples.Length) > 0)  			{  				device.WriteSamples(samples);  				  				double elapsedTime = device.Elapsed.TotalSeconds;  				int position = (int)(elapsedTime * (44100/samplesPerPixel) * 2 );  				plot.SetMarker(position' Color.White);  				System.Threading.Thread.Sleep(10); // this is needed or else swing has no chance repainting the plot!  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(512' 512);
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(512' 512);
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,Plot,The following statement contains a magic number: myTimer.Interval = 50;
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if( image.Width <  samples.Length / samplesPerPixel )  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}  				  				if(cleared)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  					cleared = false;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2;  				int lastx1 = -1;  				int lastx2 = -1;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2;  					  					int x1 = (int)((i-1) / samplesPerPixel);  					int y1 = image.Height - (int)lastValue;  					int x2 = (int)(i / samplesPerPixel);  					int y2 = image.Height - (int)@value;  					  					//if (x1 == lastx1) continue;  					  					//g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					g.DrawLine(new Pen(color)' x1' y1' x2' y2);  					lastValue = @value;  					lastx1 = x1;  					lastx2 = x2;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if( image.Width <  samples.Length / samplesPerPixel )  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}  				  				if(cleared)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  					cleared = false;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2;  				int lastx1 = -1;  				int lastx2 = -1;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2;  					  					int x1 = (int)((i-1) / samplesPerPixel);  					int y1 = image.Height - (int)lastValue;  					int x2 = (int)(i / samplesPerPixel);  					int y2 = image.Height - (int)@value;  					  					//if (x1 == lastx1) continue;  					  					//g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					g.DrawLine(new Pen(color)' x1' y1' x2' y2);  					lastValue = @value;  					lastx1 = x1;  					lastx2 = x2;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if( image.Width <  samples.Length / samplesPerPixel )  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}  				  				if(cleared)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  					cleared = false;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2;  				int lastx1 = -1;  				int lastx2 = -1;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2;  					  					int x1 = (int)((i-1) / samplesPerPixel);  					int y1 = image.Height - (int)lastValue;  					int x2 = (int)(i / samplesPerPixel);  					int y2 = image.Height - (int)@value;  					  					//if (x1 == lastx1) continue;  					  					//g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					g.DrawLine(new Pen(color)' x1' y1' x2' y2);  					lastValue = @value;  					lastx1 = x1;  					lastx2 = x2;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if( image.Width <  samples.Length / samplesPerPixel )  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}  				  				if(cleared)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  					cleared = false;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2;  				int lastx1 = -1;  				int lastx2 = -1;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2;  					  					int x1 = (int)((i-1) / samplesPerPixel);  					int y1 = image.Height - (int)lastValue;  					int x2 = (int)(i / samplesPerPixel);  					int y2 = image.Height - (int)@value;  					  					//if (x1 == lastx1) continue;  					  					//g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					g.DrawLine(new Pen(color)' x1' y1' x2' y2);  					lastValue = @value;  					lastx1 = x1;  					lastx2 = x2;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(cleared)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  					cleared = false;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(cleared)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  					cleared = false;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(cleared)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  					cleared = false;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(cleared)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  					cleared = false;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Length / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Length / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Length / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Length / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Length / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Length / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Length / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Length; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Length; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Magic Number,com.badlogic.audio.visualization,Plot,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\visualization\Plot.cs,plot,The following statement contains a magic number: lock (image) {  				Graphics g;  				if(image.Width < samples.Count / samplesPerPixel)  				{  					image = new Bitmap((int)(samples.Count / samplesPerPixel)' form.Height' PixelFormat.Format32bppRgb);  					form.AutoScrollMinSize = image.Size;  					g = Graphics.FromImage(image);  					g.FillRectangle(Brushes.Black' 0' 0' image.Width' image.Height);  					g.Dispose();  				}    				if(!useLastScale)  				{  					float min = 0;  					float max = 0;  					for(int i = 0; i < samples.Count; i++)  					{  						min = Math.Min(samples[i]' min);  						max = Math.Max(samples[i]' max);  					}  					scalingFactor = max - min;  				}    				g = Graphics.FromImage(image);  				float lastValue = (samples[0] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  				for(int i = 1; i < samples.Count; i++)  				{  					float @value = (samples[i] / scalingFactor) * image.Height / 3 + image.Height / 2 - offset * image.Height / 3;  					g.DrawLine(new Pen(color)' (int)((i-1) / samplesPerPixel)' image.Height - (int)lastValue' (int)(i / samplesPerPixel)' image.Height - (int)@value);  					lastValue = @value;  				}  				g.Dispose();  			}
Missing Default,com.badlogic.audio.analysis,FourierTransform,C:\repos\perivar_AudioVSTToolbox\audio-analysis\src\com\badlogic\audio\analysis\FourierTransform.cs,DoWindow,The following switch statement is missing a default case: switch (whichWindow)  			{  				case HAMMING:  					Hamming(samples);  					break;  			}
