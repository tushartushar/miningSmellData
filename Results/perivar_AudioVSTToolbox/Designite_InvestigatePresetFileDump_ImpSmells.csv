Implementation smell,Namespace,Class,File,Method,Description
Long Method,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSectionsILHarmor,The method has 626 lines of code.
Long Method,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,DumpParameterValueTables,The method has 126 lines of code.
Long Method,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The method has 130 lines of code.
Long Method,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The method has 148 lines of code.
Complex Method,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSectionsILHarmor,Cyclomatic complexity of the method is 13
Long Parameter List,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The method has 8 parameters. Parameters: tw' isPrevEnum' prevName' prevNameFormatted' numberOfBytes' prevFirstIndex' prevLastIndex' prevPrevLastIndex
Long Parameter List,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,DumpParameterValueTables,The method has 5 parameters. Parameters: xmlInputFilePath' xmlOutputFilePath' doOutputCSV' csvFolderPath' textWriter
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSectionsILHarmor,The length of the statement  "							OutputTemplateLine(tw' isPrevEnum' prevName' prevNameFormatted' numberOfBytes' prevFirstIndex' ref prevLastIndex' prevPrevLastIndex); " is 133.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSectionsILHarmor,The length of the statement  "			OutputTemplateLine(tw' isPrevEnum' prevName' prevNameFormatted' numberOfBytes' prevFirstIndex' ref prevLastIndex' prevPrevLastIndex); " is 133.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The length of the statement  "			string indexAndValueRange = String.Format("// index {0}:{1} = {2} bytes ({3})"' prevFirstIndex' prevLastIndex' numberOfBytes' prevName); " is 136.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,FindClosest,The length of the statement  "			Console.Out.WriteLine("Searching '{0}' for value {1}. Found {2} with text '{3}'. Value = {4}"' name' searchFor' foundClosest' foundClosestDisplayText' foundParameterValue); " is 172.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The length of the statement  "				//AccountExpirationDate = string.IsNullOrEmpty((string)settings.Element("AccountExpirationDate")) ? (DateTime?)null : DateTime.Parse(settings.Element("AccountExpirationDate").Value) " is 181.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The length of the statement  "					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) { " is 135.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The length of the statement  "					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) { " is 135.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The length of the statement  "				// sb.Append(String.Format("Input: \t{0:0.00}"' Input).PadRight(20)).AppendFormat(" = {0} \t({1})\n"' FindClosestDisplayText("Input"' Input)' "-20.0 dB -> 20.0 dB"); " is 165.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The length of the statement  "				//toStringMethod.AppendLine(string.Format("\tsb.Append(String.Format(\"{0}: {{0:0.00}}\"' {1}).PadRight(20)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange)); " is 229.
Long Statement,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The length of the statement  "				toStringMethod.AppendLine(string.Format("\tsb.Append(\"{0}:\".PadRight(15)).AppendFormat(String.Format(\"{{0:0.00}}\"' {1}).PadRight(5)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange)); " is 257.
Complex Conditional,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The conditional expression  "(dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4"  is complex.
Complex Conditional,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The conditional expression  "(dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4"  is complex.
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSectionsILHarmor,The following statement contains a magic number: while ((line = manualFileReader.ReadLine()) != null) {  				Match indexMatch = Regex.Match(line' @"(^\d+)'(\d+)\s+(.+)$");  				Match enumMatch = Regex.Match(line' @"(^[a-zA-Z0-9\s]+)\s+(\d+)$");  				if (indexMatch.Success) {  					// new enum  					string index = indexMatch.Groups[1].Value;  					int indexKey = int.Parse(index);  					string bytes = indexMatch.Groups[2].Value;  					int numBytes = int.Parse(bytes);  					string field = indexMatch.Groups[3].Value;  					string fieldFormatted = StringUtils.ConvertCaseString(field' StringUtils.Case.PascalCase);  					  					enumBeingProcessed = CleanInput(fieldFormatted.ToUpper());  					enumBeingProcessedPair = new KeyValuePair<string' int>(enumBeingProcessed' numBytes);  					  					if (!groupedDict.ContainsKey(indexKey)) {  						groupedDict.Add(indexKey' new TemplateEntry {  						                	ParameterName = field'  						                	ParameterNameFormatted = fieldFormatted'  						                	IndexInFile = indexKey'  						                	IsEnum = true  						                } );    					} else {  						groupedDict[indexKey].ParameterName = field;  						groupedDict[indexKey].ParameterNameFormatted = fieldFormatted;  						groupedDict[indexKey].IsEnum = true;  					}  					  					enums.Add(enumBeingProcessedPair' new List<KeyValuePair<string' int>>() );  				} else if (enumMatch.Success) {  					// new enum value element  					string enumEntry = CleanInput(enumMatch.Groups[1].Value.Trim());  					string enumValue = enumMatch.Groups[2].Value;  					  					enums[enumBeingProcessedPair].Add(new KeyValuePair<string' int>(enumEntry' int.Parse(enumValue)));  				} else {  					// shouldn't get here  				}  				lineCount++;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSectionsILHarmor,The following statement contains a magic number: while ((line = manualFileReader.ReadLine()) != null) {  				Match indexMatch = Regex.Match(line' @"(^\d+)'(\d+)\s+(.+)$");  				Match enumMatch = Regex.Match(line' @"(^[a-zA-Z0-9\s]+)\s+(\d+)$");  				if (indexMatch.Success) {  					// new enum  					string index = indexMatch.Groups[1].Value;  					int indexKey = int.Parse(index);  					string bytes = indexMatch.Groups[2].Value;  					int numBytes = int.Parse(bytes);  					string field = indexMatch.Groups[3].Value;  					string fieldFormatted = StringUtils.ConvertCaseString(field' StringUtils.Case.PascalCase);  					  					enumBeingProcessed = CleanInput(fieldFormatted.ToUpper());  					enumBeingProcessedPair = new KeyValuePair<string' int>(enumBeingProcessed' numBytes);  					  					if (!groupedDict.ContainsKey(indexKey)) {  						groupedDict.Add(indexKey' new TemplateEntry {  						                	ParameterName = field'  						                	ParameterNameFormatted = fieldFormatted'  						                	IndexInFile = indexKey'  						                	IsEnum = true  						                } );    					} else {  						groupedDict[indexKey].ParameterName = field;  						groupedDict[indexKey].ParameterNameFormatted = fieldFormatted;  						groupedDict[indexKey].IsEnum = true;  					}  					  					enums.Add(enumBeingProcessedPair' new List<KeyValuePair<string' int>>() );  				} else if (enumMatch.Success) {  					// new enum value element  					string enumEntry = CleanInput(enumMatch.Groups[1].Value.Trim());  					string enumValue = enumMatch.Groups[2].Value;  					  					enums[enumBeingProcessedPair].Add(new KeyValuePair<string' int>(enumEntry' int.Parse(enumValue)));  				} else {  					// shouldn't get here  				}  				lineCount++;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSectionsILHarmor,The following statement contains a magic number: while ((line = manualFileReader.ReadLine()) != null) {  				Match indexMatch = Regex.Match(line' @"(^\d+)'(\d+)\s+(.+)$");  				Match enumMatch = Regex.Match(line' @"(^[a-zA-Z0-9\s]+)\s+(\d+)$");  				if (indexMatch.Success) {  					// new enum  					string index = indexMatch.Groups[1].Value;  					int indexKey = int.Parse(index);  					string bytes = indexMatch.Groups[2].Value;  					int numBytes = int.Parse(bytes);  					string field = indexMatch.Groups[3].Value;  					string fieldFormatted = StringUtils.ConvertCaseString(field' StringUtils.Case.PascalCase);  					  					enumBeingProcessed = CleanInput(fieldFormatted.ToUpper());  					enumBeingProcessedPair = new KeyValuePair<string' int>(enumBeingProcessed' numBytes);  					  					if (!groupedDict.ContainsKey(indexKey)) {  						groupedDict.Add(indexKey' new TemplateEntry {  						                	ParameterName = field'  						                	ParameterNameFormatted = fieldFormatted'  						                	IndexInFile = indexKey'  						                	IsEnum = true  						                } );    					} else {  						groupedDict[indexKey].ParameterName = field;  						groupedDict[indexKey].ParameterNameFormatted = fieldFormatted;  						groupedDict[indexKey].IsEnum = true;  					}  					  					enums.Add(enumBeingProcessedPair' new List<KeyValuePair<string' int>>() );  				} else if (enumMatch.Success) {  					// new enum value element  					string enumEntry = CleanInput(enumMatch.Groups[1].Value.Trim());  					string enumValue = enumMatch.Groups[2].Value;  					  					enums[enumBeingProcessedPair].Add(new KeyValuePair<string' int>(enumEntry' int.Parse(enumValue)));  				} else {  					// shouldn't get here  				}  				lineCount++;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSectionsILHarmor,The following statement contains a magic number: foreach (var enumEntry in enums)  			{  				sb.AppendLine(String.Format("typedef enum <{0}> {{"' NumberOfBytesToDataType(enumEntry.Key.Value)));  				int count = 1;  				foreach (var enumValueEntry in enumEntry.Value) {  					sb.Append(String.Format("\t{0}_{1}"' enumEntry.Key.Key' enumValueEntry.Key).PadRight(20));  					sb.Append(String.Format("= {0}"' enumValueEntry.Value));  					if (count < enumEntry.Value.Count) {  						sb.AppendLine("'");  						count++;  					} else {  						sb.AppendLine();  					}  				}  				sb.AppendLine(String.Format("}} {0};\n"' enumEntry.Key.Key));  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The following statement contains a magic number: if (isPrevEnum) {  				// insert enum instead of datatype  				string enumName = CleanInput(prevNameFormatted.ToUpper());  				datatypeAndName = String.Format("\t{0} {1};"' enumName' prevNameFormatted).PadRight(55);  				if (numberOfBytes < 4) {  					// TODO: do we have to do something with the fact that it's not 4 bytes (int)?  				} else {  					numberOfBytes = 4;  				}  			} else {  				if (numberOfBytes > 8) {  					//datatypeAndName = String.Format("\tchar {0}[{1}];"' CleanInput(prevNameFormatted)' numberOfBytes).PadRight(55);    					// force int32 - 4 bytes  					datatypeAndName = String.Format("\tint32 {0};"' CleanInput(prevNameFormatted)).PadRight(55);  					numberOfBytes = 4;  				} else {  					dataType = NumberOfBytesToDataType(numberOfBytes);  					datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(prevNameFormatted)).PadRight(55);  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The following statement contains a magic number: if (isPrevEnum) {  				// insert enum instead of datatype  				string enumName = CleanInput(prevNameFormatted.ToUpper());  				datatypeAndName = String.Format("\t{0} {1};"' enumName' prevNameFormatted).PadRight(55);  				if (numberOfBytes < 4) {  					// TODO: do we have to do something with the fact that it's not 4 bytes (int)?  				} else {  					numberOfBytes = 4;  				}  			} else {  				if (numberOfBytes > 8) {  					//datatypeAndName = String.Format("\tchar {0}[{1}];"' CleanInput(prevNameFormatted)' numberOfBytes).PadRight(55);    					// force int32 - 4 bytes  					datatypeAndName = String.Format("\tint32 {0};"' CleanInput(prevNameFormatted)).PadRight(55);  					numberOfBytes = 4;  				} else {  					dataType = NumberOfBytesToDataType(numberOfBytes);  					datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(prevNameFormatted)).PadRight(55);  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The following statement contains a magic number: if (isPrevEnum) {  				// insert enum instead of datatype  				string enumName = CleanInput(prevNameFormatted.ToUpper());  				datatypeAndName = String.Format("\t{0} {1};"' enumName' prevNameFormatted).PadRight(55);  				if (numberOfBytes < 4) {  					// TODO: do we have to do something with the fact that it's not 4 bytes (int)?  				} else {  					numberOfBytes = 4;  				}  			} else {  				if (numberOfBytes > 8) {  					//datatypeAndName = String.Format("\tchar {0}[{1}];"' CleanInput(prevNameFormatted)' numberOfBytes).PadRight(55);    					// force int32 - 4 bytes  					datatypeAndName = String.Format("\tint32 {0};"' CleanInput(prevNameFormatted)).PadRight(55);  					numberOfBytes = 4;  				} else {  					dataType = NumberOfBytesToDataType(numberOfBytes);  					datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(prevNameFormatted)).PadRight(55);  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The following statement contains a magic number: if (isPrevEnum) {  				// insert enum instead of datatype  				string enumName = CleanInput(prevNameFormatted.ToUpper());  				datatypeAndName = String.Format("\t{0} {1};"' enumName' prevNameFormatted).PadRight(55);  				if (numberOfBytes < 4) {  					// TODO: do we have to do something with the fact that it's not 4 bytes (int)?  				} else {  					numberOfBytes = 4;  				}  			} else {  				if (numberOfBytes > 8) {  					//datatypeAndName = String.Format("\tchar {0}[{1}];"' CleanInput(prevNameFormatted)' numberOfBytes).PadRight(55);    					// force int32 - 4 bytes  					datatypeAndName = String.Format("\tint32 {0};"' CleanInput(prevNameFormatted)).PadRight(55);  					numberOfBytes = 4;  				} else {  					dataType = NumberOfBytesToDataType(numberOfBytes);  					datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(prevNameFormatted)).PadRight(55);  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The following statement contains a magic number: if (isPrevEnum) {  				// insert enum instead of datatype  				string enumName = CleanInput(prevNameFormatted.ToUpper());  				datatypeAndName = String.Format("\t{0} {1};"' enumName' prevNameFormatted).PadRight(55);  				if (numberOfBytes < 4) {  					// TODO: do we have to do something with the fact that it's not 4 bytes (int)?  				} else {  					numberOfBytes = 4;  				}  			} else {  				if (numberOfBytes > 8) {  					//datatypeAndName = String.Format("\tchar {0}[{1}];"' CleanInput(prevNameFormatted)' numberOfBytes).PadRight(55);    					// force int32 - 4 bytes  					datatypeAndName = String.Format("\tint32 {0};"' CleanInput(prevNameFormatted)).PadRight(55);  					numberOfBytes = 4;  				} else {  					dataType = NumberOfBytesToDataType(numberOfBytes);  					datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(prevNameFormatted)).PadRight(55);  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The following statement contains a magic number: if (isPrevEnum) {  				// insert enum instead of datatype  				string enumName = CleanInput(prevNameFormatted.ToUpper());  				datatypeAndName = String.Format("\t{0} {1};"' enumName' prevNameFormatted).PadRight(55);  				if (numberOfBytes < 4) {  					// TODO: do we have to do something with the fact that it's not 4 bytes (int)?  				} else {  					numberOfBytes = 4;  				}  			} else {  				if (numberOfBytes > 8) {  					//datatypeAndName = String.Format("\tchar {0}[{1}];"' CleanInput(prevNameFormatted)' numberOfBytes).PadRight(55);    					// force int32 - 4 bytes  					datatypeAndName = String.Format("\tint32 {0};"' CleanInput(prevNameFormatted)).PadRight(55);  					numberOfBytes = 4;  				} else {  					dataType = NumberOfBytesToDataType(numberOfBytes);  					datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(prevNameFormatted)).PadRight(55);  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The following statement contains a magic number: if (isPrevEnum) {  				// insert enum instead of datatype  				string enumName = CleanInput(prevNameFormatted.ToUpper());  				datatypeAndName = String.Format("\t{0} {1};"' enumName' prevNameFormatted).PadRight(55);  				if (numberOfBytes < 4) {  					// TODO: do we have to do something with the fact that it's not 4 bytes (int)?  				} else {  					numberOfBytes = 4;  				}  			} else {  				if (numberOfBytes > 8) {  					//datatypeAndName = String.Format("\tchar {0}[{1}];"' CleanInput(prevNameFormatted)' numberOfBytes).PadRight(55);    					// force int32 - 4 bytes  					datatypeAndName = String.Format("\tint32 {0};"' CleanInput(prevNameFormatted)).PadRight(55);  					numberOfBytes = 4;  				} else {  					dataType = NumberOfBytesToDataType(numberOfBytes);  					datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(prevNameFormatted)).PadRight(55);  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,OutputTemplateLine,The following statement contains a magic number: if (!prevSkipSeek && (prevPrevLastIndex + 1 != prevFirstIndex)) {  				string seekEntry = String.Format("\tFSeek( {0} );"' prevFirstIndex + FXP_OFFSET).PadRight(55);  				string seekComment = String.Format("// skipped {0} bytes"' prevFirstIndex - prevPrevLastIndex - 1);  				tw.WriteLine("{0}{1}"' seekEntry' seekComment);  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,DumpParameterValueTables,The following statement contains a magic number: using (XmlWriter xmlWriter = XmlWriter.Create(xmlOutputFilePath' settings))  			{  				xmlWriter.WriteStartDocument();  				xmlWriter.WriteStartElement("ParametersMap");  				  				foreach (var parameter in sortedParameters) {  					  					// find number of unique DisplayParameter items  					int res = (from x in parameter.Items  					           select x.ParameterDisplay).Distinct().Count();  					  					// write to csv file  					TextWriter csvWriter = null;  					if (doOutputCSV) {  						string outputfilename = csvFolderPath + Path.DirectorySeparatorChar + CleanInput(parameter.Key) + ".csv";  						csvWriter = new StreamWriter(outputfilename);  						csvWriter.WriteLine("ParameterValue;ParameterDisplayNumber;ParameterDisplay");  					}  					  					// start Parameter xml element  					xmlWriter.WriteStartElement("Parameter");  					xmlWriter.WriteAttributeString("name"' parameter.Key);  					xmlWriter.WriteAttributeString("name-formatted"' CleanInput(parameter.Key));  					xmlWriter.WriteAttributeString("unique-displaytext"' res.ToString());  					  					if (textWriter != null) {  						// output to passed text writer  						textWriter.WriteLine();  						textWriter.WriteLine("// Parameter: {0} (Unique Parameters: {1})"' parameter.Key' res);  						textWriter.WriteLine("// Value\tDisplayNumber\tDisplay");  					}  					  					// boolean ?  					if (res == 2) {  						string firstDisplay = parameter.Items.First().ParameterDisplay;  						float firstValue = parameter.Items.First().ParameterValue;  						string lastDisplay = parameter.Items.Last().ParameterDisplay;  						float lastValue = parameter.Items.Last().ParameterValue;  						  						// write to csv file  						if (doOutputCSV) csvWriter.WriteLine("{0:0.00};{1}"' firstValue' firstDisplay);  						if (doOutputCSV) csvWriter.WriteLine("{0:0.00};{1}"' lastValue' lastDisplay);    						if (textWriter != null) {  							// output to passed text writer  							textWriter.WriteLine("// {0:0.00}\t\t{1}"' firstValue' firstDisplay);  							textWriter.WriteLine("// {0:0.00}\t\t{1}"' lastValue' lastDisplay);  						}  						  						// write boolean to xml  						xmlWriter.WriteStartElement("Entry");  						xmlWriter.WriteElementString("DisplayText"' firstDisplay);  						xmlWriter.WriteElementString("DisplayNumber"' String.Format("{0:0.00}"' firstValue));  						xmlWriter.WriteElementString("Value"' String.Format("{0:0.00}"' firstValue));  						xmlWriter.WriteEndElement();  						xmlWriter.WriteStartElement("Entry");  						xmlWriter.WriteElementString("DisplayText"' lastDisplay);  						xmlWriter.WriteElementString("DisplayNumber"' String.Format("{0:0.00}"' lastValue));  						xmlWriter.WriteElementString("Value"' String.Format("{0:0.00}"' lastValue));  						xmlWriter.WriteEndElement();  					} else {  						foreach (var item in parameter.Items) {  							float parameterValue = item.ParameterValue;  							string displayText = item.ParameterDisplay;  							string displayNumber = ExtractSortableString(item.ParameterDisplay);  							  							// write to xml  							xmlWriter.WriteStartElement("Entry");    							// write to csv file  							if (doOutputCSV) csvWriter.WriteLine("{0:0.00};{1};{2}"' parameterValue' displayNumber' displayText);  							  							if (textWriter != null) {  								// output to passed text writer  								textWriter.WriteLine("// {0:0.00}\t\t{1}\t\t\t{2}"' parameterValue' displayNumber' displayText);  							}  							  							// write to xml  							xmlWriter.WriteElementString("DisplayText"' displayText);  							xmlWriter.WriteElementString("DisplayNumber"' displayNumber);  							xmlWriter.WriteElementString("Value"' String.Format("{0:0.00}"' parameterValue));  							xmlWriter.WriteEndElement();  						}  					}  					  					// end Parameter xml element  					xmlWriter.WriteEndElement();    					if (doOutputCSV) csvWriter.Close();  				}    				// end ParametersMap xml element  				xmlWriter.WriteEndElement();  				xmlWriter.WriteEndDocument();  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// use floats  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				// write seek part (i.e. move pointer to first byte) if the first byte is not  				// directly succeding the last section that was written  				if (!prevSkipSeek && (prevIndex + 1 != firstIndex)) {  					tw.WriteLine("\tFSeek( {0} );"' firstIndex + FXP_OFFSET);  				}  				  				if (curElement.LowestValue != Double.MinValue && curElement.HighestValue != Double.MinValue) {  					double lowVal = (double)curElement.LowestValue;  					double highVal = (double)curElement.HighestValue;  					string name = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(name)).PadRight(35);  					  					// find highest and lowest display value  					var highlowdisplay = from row in xmlDoc.Descendants("Row")  						where (string)row.Element("ParameterNameFormatted") == name  						orderby float.Parse(row.Element("ParameterValue").Value) ascending  						select new {  						IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  						ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  						ParameterName = (string)row.Element("ParameterName").Value'  						ParameterNameFormatted = (string)row.Element("ParameterNameFormatted").Value'  						ParameterLabel = (string)row.Element("ParameterLabel").Value'  						ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  						ParameterValue = (string)row.Element("ParameterValue").Value  					};  					string lowestDisplay = highlowdisplay.First().ParameterDisplay;  					string highestDisplay = highlowdisplay.Last().ParameterDisplay;  					  					string indexAndValueRange = String.Format("// index {0}:{1} = {4} bytes (value range {2} -> {3}) ({5} -> {6})"'  					                                          firstIndex'  					                                          originalLastIndex'  					                                          lowVal'  					                                          highVal'  					                                          numberOfBytes'  					                                          lowestDisplay'  					                                          highestDisplay);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexAndValueRange);  				} else {  					// insert enum instead of datatype  					string enumName = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' CleanInput(enumName.ToUpper())' enumName).PadRight(35);  					string indexRange = String.Format("// index {0}:{1} = {2} bytes "' firstIndex' originalLastIndex' numberOfBytes);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexRange);  					string enumsection = getEnumSectionXMLFormat(xmlfilename' enumName);  					enumSections.AppendLine(enumsection);  				}  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// use floats  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				// write seek part (i.e. move pointer to first byte) if the first byte is not  				// directly succeding the last section that was written  				if (!prevSkipSeek && (prevIndex + 1 != firstIndex)) {  					tw.WriteLine("\tFSeek( {0} );"' firstIndex + FXP_OFFSET);  				}  				  				if (curElement.LowestValue != Double.MinValue && curElement.HighestValue != Double.MinValue) {  					double lowVal = (double)curElement.LowestValue;  					double highVal = (double)curElement.HighestValue;  					string name = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(name)).PadRight(35);  					  					// find highest and lowest display value  					var highlowdisplay = from row in xmlDoc.Descendants("Row")  						where (string)row.Element("ParameterNameFormatted") == name  						orderby float.Parse(row.Element("ParameterValue").Value) ascending  						select new {  						IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  						ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  						ParameterName = (string)row.Element("ParameterName").Value'  						ParameterNameFormatted = (string)row.Element("ParameterNameFormatted").Value'  						ParameterLabel = (string)row.Element("ParameterLabel").Value'  						ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  						ParameterValue = (string)row.Element("ParameterValue").Value  					};  					string lowestDisplay = highlowdisplay.First().ParameterDisplay;  					string highestDisplay = highlowdisplay.Last().ParameterDisplay;  					  					string indexAndValueRange = String.Format("// index {0}:{1} = {4} bytes (value range {2} -> {3}) ({5} -> {6})"'  					                                          firstIndex'  					                                          originalLastIndex'  					                                          lowVal'  					                                          highVal'  					                                          numberOfBytes'  					                                          lowestDisplay'  					                                          highestDisplay);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexAndValueRange);  				} else {  					// insert enum instead of datatype  					string enumName = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' CleanInput(enumName.ToUpper())' enumName).PadRight(35);  					string indexRange = String.Format("// index {0}:{1} = {2} bytes "' firstIndex' originalLastIndex' numberOfBytes);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexRange);  					string enumsection = getEnumSectionXMLFormat(xmlfilename' enumName);  					enumSections.AppendLine(enumsection);  				}  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// use floats  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				// write seek part (i.e. move pointer to first byte) if the first byte is not  				// directly succeding the last section that was written  				if (!prevSkipSeek && (prevIndex + 1 != firstIndex)) {  					tw.WriteLine("\tFSeek( {0} );"' firstIndex + FXP_OFFSET);  				}  				  				if (curElement.LowestValue != Double.MinValue && curElement.HighestValue != Double.MinValue) {  					double lowVal = (double)curElement.LowestValue;  					double highVal = (double)curElement.HighestValue;  					string name = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(name)).PadRight(35);  					  					// find highest and lowest display value  					var highlowdisplay = from row in xmlDoc.Descendants("Row")  						where (string)row.Element("ParameterNameFormatted") == name  						orderby float.Parse(row.Element("ParameterValue").Value) ascending  						select new {  						IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  						ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  						ParameterName = (string)row.Element("ParameterName").Value'  						ParameterNameFormatted = (string)row.Element("ParameterNameFormatted").Value'  						ParameterLabel = (string)row.Element("ParameterLabel").Value'  						ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  						ParameterValue = (string)row.Element("ParameterValue").Value  					};  					string lowestDisplay = highlowdisplay.First().ParameterDisplay;  					string highestDisplay = highlowdisplay.Last().ParameterDisplay;  					  					string indexAndValueRange = String.Format("// index {0}:{1} = {4} bytes (value range {2} -> {3}) ({5} -> {6})"'  					                                          firstIndex'  					                                          originalLastIndex'  					                                          lowVal'  					                                          highVal'  					                                          numberOfBytes'  					                                          lowestDisplay'  					                                          highestDisplay);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexAndValueRange);  				} else {  					// insert enum instead of datatype  					string enumName = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' CleanInput(enumName.ToUpper())' enumName).PadRight(35);  					string indexRange = String.Format("// index {0}:{1} = {2} bytes "' firstIndex' originalLastIndex' numberOfBytes);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexRange);  					string enumsection = getEnumSectionXMLFormat(xmlfilename' enumName);  					enumSections.AppendLine(enumsection);  				}  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// use floats  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				// write seek part (i.e. move pointer to first byte) if the first byte is not  				// directly succeding the last section that was written  				if (!prevSkipSeek && (prevIndex + 1 != firstIndex)) {  					tw.WriteLine("\tFSeek( {0} );"' firstIndex + FXP_OFFSET);  				}  				  				if (curElement.LowestValue != Double.MinValue && curElement.HighestValue != Double.MinValue) {  					double lowVal = (double)curElement.LowestValue;  					double highVal = (double)curElement.HighestValue;  					string name = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(name)).PadRight(35);  					  					// find highest and lowest display value  					var highlowdisplay = from row in xmlDoc.Descendants("Row")  						where (string)row.Element("ParameterNameFormatted") == name  						orderby float.Parse(row.Element("ParameterValue").Value) ascending  						select new {  						IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  						ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  						ParameterName = (string)row.Element("ParameterName").Value'  						ParameterNameFormatted = (string)row.Element("ParameterNameFormatted").Value'  						ParameterLabel = (string)row.Element("ParameterLabel").Value'  						ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  						ParameterValue = (string)row.Element("ParameterValue").Value  					};  					string lowestDisplay = highlowdisplay.First().ParameterDisplay;  					string highestDisplay = highlowdisplay.Last().ParameterDisplay;  					  					string indexAndValueRange = String.Format("// index {0}:{1} = {4} bytes (value range {2} -> {3}) ({5} -> {6})"'  					                                          firstIndex'  					                                          originalLastIndex'  					                                          lowVal'  					                                          highVal'  					                                          numberOfBytes'  					                                          lowestDisplay'  					                                          highestDisplay);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexAndValueRange);  				} else {  					// insert enum instead of datatype  					string enumName = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' CleanInput(enumName.ToUpper())' enumName).PadRight(35);  					string indexRange = String.Format("// index {0}:{1} = {2} bytes "' firstIndex' originalLastIndex' numberOfBytes);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexRange);  					string enumsection = getEnumSectionXMLFormat(xmlfilename' enumName);  					enumSections.AppendLine(enumsection);  				}  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileReturnEnumSections,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// use floats  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				// write seek part (i.e. move pointer to first byte) if the first byte is not  				// directly succeding the last section that was written  				if (!prevSkipSeek && (prevIndex + 1 != firstIndex)) {  					tw.WriteLine("\tFSeek( {0} );"' firstIndex + FXP_OFFSET);  				}  				  				if (curElement.LowestValue != Double.MinValue && curElement.HighestValue != Double.MinValue) {  					double lowVal = (double)curElement.LowestValue;  					double highVal = (double)curElement.HighestValue;  					string name = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' dataType' CleanInput(name)).PadRight(35);  					  					// find highest and lowest display value  					var highlowdisplay = from row in xmlDoc.Descendants("Row")  						where (string)row.Element("ParameterNameFormatted") == name  						orderby float.Parse(row.Element("ParameterValue").Value) ascending  						select new {  						IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  						ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  						ParameterName = (string)row.Element("ParameterName").Value'  						ParameterNameFormatted = (string)row.Element("ParameterNameFormatted").Value'  						ParameterLabel = (string)row.Element("ParameterLabel").Value'  						ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  						ParameterValue = (string)row.Element("ParameterValue").Value  					};  					string lowestDisplay = highlowdisplay.First().ParameterDisplay;  					string highestDisplay = highlowdisplay.Last().ParameterDisplay;  					  					string indexAndValueRange = String.Format("// index {0}:{1} = {4} bytes (value range {2} -> {3}) ({5} -> {6})"'  					                                          firstIndex'  					                                          originalLastIndex'  					                                          lowVal'  					                                          highVal'  					                                          numberOfBytes'  					                                          lowestDisplay'  					                                          highestDisplay);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexAndValueRange);  				} else {  					// insert enum instead of datatype  					string enumName = curElement.Keys.ParameterNameFormatted.ToString();  					string datatypeAndName = String.Format("\t{0} {1};"' CleanInput(enumName.ToUpper())' enumName).PadRight(35);  					string indexRange = String.Format("// index {0}:{1} = {2} bytes "' firstIndex' originalLastIndex' numberOfBytes);  					tw.Write(datatypeAndName);  					tw.WriteLine(indexRange);  					string enumsection = getEnumSectionXMLFormat(xmlfilename' enumName);  					enumSections.AppendLine(enumsection);  				}  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// 4 bytes is float' not int  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				double lowVal = (double)curElement.LowestValue;  				double highVal = (double)curElement.HighestValue;  				string name = curElement.Keys.ParameterName.ToString();  				string variableName = CleanInput(name.ToPascalCase());  				string datatypeAndName = String.Format("public {0} {1};"' dataType' variableName).PadRight(25);  				  				// find highest and lowest display value  				var highlowdisplay = from row in xmlDoc.Descendants("Row")  					where (string)row.Element("ParameterName") == name  					orderby float.Parse(row.Element("ParameterValue").Value) ascending  					select new {  					IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  					ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  					ParameterName = (string)row.Element("ParameterName").Value'  					ParameterLabel = (string)row.Element("ParameterLabel").Value'  					ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  					ParameterValue = (string)row.Element("ParameterValue").Value  				};  				string lowestDisplay = highlowdisplay.First().ParameterDisplay;  				string highestDisplay = highlowdisplay.Last().ParameterDisplay;  				  				string commentedValueRange = String.Format("// ({0} -> {1})"'  				                                           lowestDisplay'  				                                           highestDisplay);  				string valueRange = String.Format("{0} -> {1}"'  				                                  lowestDisplay'  				                                  highestDisplay);  				  				variables.Append(datatypeAndName).AppendLine(commentedValueRange);    				// Read: input = bFile.ReadSingle();  				// Write: bFile.Write((float) 0); // float output_pan; -1 to 1 (0 = middle)  				switch(dataType) {  					case "byte":	// 1 byte  						readMethod.AppendLine(string.Format("{0} = bFile.ReadByte();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((byte) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "ushort":	// 2 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt16();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((ushort) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "uint32": 	// 4 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt32();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((uint32) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "float": 	// 4 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadSingle();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((float) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "uint64": 	// 8 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt64();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((uint64) {0}); {1}"' variableName' commentedValueRange));  						break;  					default:  						readMethod.AppendLine(string.Format("{0} = bFile.ReadString({1});"' variableName' numberOfBytes));  						writeMethod.AppendLine(string.Format("bFile.Write({0}' {1}); {2}"' variableName' numberOfBytes' commentedValueRange));  						break;  				}    				// sb.Append(String.Format("Input: \t{0:0.00}"' Input).PadRight(20)).AppendFormat(" = {0} \t({1})\n"' FindClosestDisplayText("Input"' Input)' "-20.0 dB -> 20.0 dB");  				//toStringMethod.AppendLine(string.Format("\tsb.Append(String.Format(\"{0}: {{0:0.00}}\"' {1}).PadRight(20)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange));  				toStringMethod.AppendLine(string.Format("\tsb.Append(\"{0}:\".PadRight(15)).AppendFormat(String.Format(\"{{0:0.00}}\"' {1}).PadRight(5)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange));  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// 4 bytes is float' not int  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				double lowVal = (double)curElement.LowestValue;  				double highVal = (double)curElement.HighestValue;  				string name = curElement.Keys.ParameterName.ToString();  				string variableName = CleanInput(name.ToPascalCase());  				string datatypeAndName = String.Format("public {0} {1};"' dataType' variableName).PadRight(25);  				  				// find highest and lowest display value  				var highlowdisplay = from row in xmlDoc.Descendants("Row")  					where (string)row.Element("ParameterName") == name  					orderby float.Parse(row.Element("ParameterValue").Value) ascending  					select new {  					IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  					ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  					ParameterName = (string)row.Element("ParameterName").Value'  					ParameterLabel = (string)row.Element("ParameterLabel").Value'  					ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  					ParameterValue = (string)row.Element("ParameterValue").Value  				};  				string lowestDisplay = highlowdisplay.First().ParameterDisplay;  				string highestDisplay = highlowdisplay.Last().ParameterDisplay;  				  				string commentedValueRange = String.Format("// ({0} -> {1})"'  				                                           lowestDisplay'  				                                           highestDisplay);  				string valueRange = String.Format("{0} -> {1}"'  				                                  lowestDisplay'  				                                  highestDisplay);  				  				variables.Append(datatypeAndName).AppendLine(commentedValueRange);    				// Read: input = bFile.ReadSingle();  				// Write: bFile.Write((float) 0); // float output_pan; -1 to 1 (0 = middle)  				switch(dataType) {  					case "byte":	// 1 byte  						readMethod.AppendLine(string.Format("{0} = bFile.ReadByte();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((byte) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "ushort":	// 2 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt16();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((ushort) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "uint32": 	// 4 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt32();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((uint32) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "float": 	// 4 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadSingle();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((float) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "uint64": 	// 8 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt64();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((uint64) {0}); {1}"' variableName' commentedValueRange));  						break;  					default:  						readMethod.AppendLine(string.Format("{0} = bFile.ReadString({1});"' variableName' numberOfBytes));  						writeMethod.AppendLine(string.Format("bFile.Write({0}' {1}); {2}"' variableName' numberOfBytes' commentedValueRange));  						break;  				}    				// sb.Append(String.Format("Input: \t{0:0.00}"' Input).PadRight(20)).AppendFormat(" = {0} \t({1})\n"' FindClosestDisplayText("Input"' Input)' "-20.0 dB -> 20.0 dB");  				//toStringMethod.AppendLine(string.Format("\tsb.Append(String.Format(\"{0}: {{0:0.00}}\"' {1}).PadRight(20)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange));  				toStringMethod.AppendLine(string.Format("\tsb.Append(\"{0}:\".PadRight(15)).AppendFormat(String.Format(\"{{0:0.00}}\"' {1}).PadRight(5)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange));  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// 4 bytes is float' not int  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				double lowVal = (double)curElement.LowestValue;  				double highVal = (double)curElement.HighestValue;  				string name = curElement.Keys.ParameterName.ToString();  				string variableName = CleanInput(name.ToPascalCase());  				string datatypeAndName = String.Format("public {0} {1};"' dataType' variableName).PadRight(25);  				  				// find highest and lowest display value  				var highlowdisplay = from row in xmlDoc.Descendants("Row")  					where (string)row.Element("ParameterName") == name  					orderby float.Parse(row.Element("ParameterValue").Value) ascending  					select new {  					IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  					ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  					ParameterName = (string)row.Element("ParameterName").Value'  					ParameterLabel = (string)row.Element("ParameterLabel").Value'  					ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  					ParameterValue = (string)row.Element("ParameterValue").Value  				};  				string lowestDisplay = highlowdisplay.First().ParameterDisplay;  				string highestDisplay = highlowdisplay.Last().ParameterDisplay;  				  				string commentedValueRange = String.Format("// ({0} -> {1})"'  				                                           lowestDisplay'  				                                           highestDisplay);  				string valueRange = String.Format("{0} -> {1}"'  				                                  lowestDisplay'  				                                  highestDisplay);  				  				variables.Append(datatypeAndName).AppendLine(commentedValueRange);    				// Read: input = bFile.ReadSingle();  				// Write: bFile.Write((float) 0); // float output_pan; -1 to 1 (0 = middle)  				switch(dataType) {  					case "byte":	// 1 byte  						readMethod.AppendLine(string.Format("{0} = bFile.ReadByte();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((byte) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "ushort":	// 2 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt16();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((ushort) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "uint32": 	// 4 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt32();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((uint32) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "float": 	// 4 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadSingle();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((float) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "uint64": 	// 8 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt64();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((uint64) {0}); {1}"' variableName' commentedValueRange));  						break;  					default:  						readMethod.AppendLine(string.Format("{0} = bFile.ReadString({1});"' variableName' numberOfBytes));  						writeMethod.AppendLine(string.Format("bFile.Write({0}' {1}); {2}"' variableName' numberOfBytes' commentedValueRange));  						break;  				}    				// sb.Append(String.Format("Input: \t{0:0.00}"' Input).PadRight(20)).AppendFormat(" = {0} \t({1})\n"' FindClosestDisplayText("Input"' Input)' "-20.0 dB -> 20.0 dB");  				//toStringMethod.AppendLine(string.Format("\tsb.Append(String.Format(\"{0}: {{0:0.00}}\"' {1}).PadRight(20)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange));  				toStringMethod.AppendLine(string.Format("\tsb.Append(\"{0}:\".PadRight(15)).AppendFormat(String.Format(\"{{0:0.00}}\"' {1}).PadRight(5)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange));  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ImportXMLFileDumpReadWriteMethods,The following statement contains a magic number: for (int i = 0; i < groupedList.Count; i++) {  				var curElement = groupedList.ElementAt(i);    				int firstIndex = curElement.FirstIndex;  				int lastIndex = curElement.LastIndex;  				originalLastIndex = lastIndex;  				int numberOfBytes = (lastIndex-firstIndex+1);  				  				// 4 bytes is float' not int  				string dataType = NumberOfBytesToDataType(ref numberOfBytes' false' true );  				if (numberOfBytes != (lastIndex-firstIndex+1)) {  					// the number of bytes was changed.  					lastIndex = firstIndex + numberOfBytes - 1;  				}  				  				// check if we should convert ushorts to ints and skip the Seek next time around?  				bool skipSeek = false;  				if (i + 1 < groupedList.Count) {  					var nextElement = groupedList.ElementAt(i + 1);  					if ((dataType.Equals("ushort") || dataType.Equals("byte") || dataType.Equals("unknown")) && nextElement.FirstIndex == firstIndex + 4) {  						dataType = "int";  						skipSeek = true;  						lastIndex = firstIndex + 3;  						numberOfBytes = 4;  					}  				}  				  				double lowVal = (double)curElement.LowestValue;  				double highVal = (double)curElement.HighestValue;  				string name = curElement.Keys.ParameterName.ToString();  				string variableName = CleanInput(name.ToPascalCase());  				string datatypeAndName = String.Format("public {0} {1};"' dataType' variableName).PadRight(25);  				  				// find highest and lowest display value  				var highlowdisplay = from row in xmlDoc.Descendants("Row")  					where (string)row.Element("ParameterName") == name  					orderby float.Parse(row.Element("ParameterValue").Value) ascending  					select new {  					IndexInFile = Convert.ToInt32(row.Element("IndexInFile").Value)'  					ByteValue = Convert.ToByte(row.Element("ByteValue").Value)'  					ParameterName = (string)row.Element("ParameterName").Value'  					ParameterLabel = (string)row.Element("ParameterLabel").Value'  					ParameterDisplay = (string)row.Element("ParameterDisplay").Value'  					ParameterValue = (string)row.Element("ParameterValue").Value  				};  				string lowestDisplay = highlowdisplay.First().ParameterDisplay;  				string highestDisplay = highlowdisplay.Last().ParameterDisplay;  				  				string commentedValueRange = String.Format("// ({0} -> {1})"'  				                                           lowestDisplay'  				                                           highestDisplay);  				string valueRange = String.Format("{0} -> {1}"'  				                                  lowestDisplay'  				                                  highestDisplay);  				  				variables.Append(datatypeAndName).AppendLine(commentedValueRange);    				// Read: input = bFile.ReadSingle();  				// Write: bFile.Write((float) 0); // float output_pan; -1 to 1 (0 = middle)  				switch(dataType) {  					case "byte":	// 1 byte  						readMethod.AppendLine(string.Format("{0} = bFile.ReadByte();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((byte) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "ushort":	// 2 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt16();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((ushort) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "uint32": 	// 4 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt32();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((uint32) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "float": 	// 4 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadSingle();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((float) {0}); {1}"' variableName' commentedValueRange));  						break;  					case "uint64": 	// 8 bytes  						readMethod.AppendLine(string.Format("{0} = bFile.ReadUInt64();"' variableName));  						writeMethod.AppendLine(string.Format("bFile.Write((uint64) {0}); {1}"' variableName' commentedValueRange));  						break;  					default:  						readMethod.AppendLine(string.Format("{0} = bFile.ReadString({1});"' variableName' numberOfBytes));  						writeMethod.AppendLine(string.Format("bFile.Write({0}' {1}); {2}"' variableName' numberOfBytes' commentedValueRange));  						break;  				}    				// sb.Append(String.Format("Input: \t{0:0.00}"' Input).PadRight(20)).AppendFormat(" = {0} \t({1})\n"' FindClosestDisplayText("Input"' Input)' "-20.0 dB -> 20.0 dB");  				//toStringMethod.AppendLine(string.Format("\tsb.Append(String.Format(\"{0}: {{0:0.00}}\"' {1}).PadRight(20)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange));  				toStringMethod.AppendLine(string.Format("\tsb.Append(\"{0}:\".PadRight(15)).AppendFormat(String.Format(\"{{0:0.00}}\"' {1}).PadRight(5)).AppendFormat(\"= {{0}} ({{1}})\\n\"' FindClosestDisplayText(\"{0}\"' {1})' \"{2}\");"' name' variableName' valueRange));  				  				prevIndex = lastIndex;  				prevSkipSeek = skipSeek;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,getEnumSectionXMLFormat,The following statement contains a magic number: foreach (var pair in dictionary)  			{  				string key = FixEnumEntries(CleanInput(pair.Key)' CleanInput(NameFormattedValue.ToUpper()));  				sb.Append(String.Format("\t{0}"' key).PadRight(20));  				sb.Append("= 0x");  				  				byte[] bArray = pair.Value.ToArray();  				Array.Reverse( bArray );  				sb.Append(String.Format("{0}"' ByteArrayToString(bArray' numberOfBytes)));  				if (count < dictionary.Count) {  					sb.AppendLine("'");  					count++;  				} else {  					sb.AppendLine();  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ExtractSortableString,The following statement contains a magic number: if (m1.Success) {  				//string match1 = m1.Groups[0].Value; 	// contains the whole regexp  				string match2 = m1.Groups[1].Value; 	// contains first group  				string match3 = m1.Groups[2].Value;  				  				rootNumber = double.Parse(match2' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture);  				  				// did it find a metric value like k or m?  				if (!"".Equals(match3)) {  					if ("k".Equals(match3)) {  						result = rootNumber * 1e3;  					} else if ("m".Equals(match3)) {  						result = rootNumber * 1e6;  					}  				} else {  					result = rootNumber;  				}  				returnValue = String.Format("{0:0.00}"' result);  			} else {  				returnValue = value;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ExtractSortableString,The following statement contains a magic number: if (m1.Success) {  				//string match1 = m1.Groups[0].Value; 	// contains the whole regexp  				string match2 = m1.Groups[1].Value; 	// contains first group  				string match3 = m1.Groups[2].Value;  				  				rootNumber = double.Parse(match2' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture);  				  				// did it find a metric value like k or m?  				if (!"".Equals(match3)) {  					if ("k".Equals(match3)) {  						result = rootNumber * 1e3;  					} else if ("m".Equals(match3)) {  						result = rootNumber * 1e6;  					}  				} else {  					result = rootNumber;  				}  				returnValue = String.Format("{0:0.00}"' result);  			} else {  				returnValue = value;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ExtractSortableString,The following statement contains a magic number: if (m1.Success) {  				//string match1 = m1.Groups[0].Value; 	// contains the whole regexp  				string match2 = m1.Groups[1].Value; 	// contains first group  				string match3 = m1.Groups[2].Value;  				  				rootNumber = double.Parse(match2' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture);  				  				// did it find a metric value like k or m?  				if (!"".Equals(match3)) {  					if ("k".Equals(match3)) {  						result = rootNumber * 1e3;  					} else if ("m".Equals(match3)) {  						result = rootNumber * 1e6;  					}  				} else {  					result = rootNumber;  				}  				returnValue = String.Format("{0:0.00}"' result);  			} else {  				returnValue = value;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ExtractDouble,The following statement contains a magic number: if (m1.Success) {  				//string match1 = m1.Groups[0].Value;  				string match2 = m1.Groups[1].Value;  				string match3 = m1.Groups[2].Value;  				  				rootNumber = double.Parse(match2' NumberStyles.Any' CultureInfo.InvariantCulture);  				  				// did it find a metric value like k or m?  				if (!"".Equals(match3)) {  					if ("k".Equals(match3)) {  						result = rootNumber * 1e3;  					} else if ("m".Equals(match3)) {  						result = rootNumber * 1e6;  					}  				} else {  					result = rootNumber;  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ExtractDouble,The following statement contains a magic number: if (m1.Success) {  				//string match1 = m1.Groups[0].Value;  				string match2 = m1.Groups[1].Value;  				string match3 = m1.Groups[2].Value;  				  				rootNumber = double.Parse(match2' NumberStyles.Any' CultureInfo.InvariantCulture);  				  				// did it find a metric value like k or m?  				if (!"".Equals(match3)) {  					if ("k".Equals(match3)) {  						result = rootNumber * 1e3;  					} else if ("m".Equals(match3)) {  						result = rootNumber * 1e6;  					}  				} else {  					result = rootNumber;  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ExtractDouble,The following statement contains a magic number: if (m1.Success) {  				//string match1 = m1.Groups[0].Value;  				string match2 = m1.Groups[1].Value;  				string match3 = m1.Groups[2].Value;  				  				rootNumber = double.Parse(match2' NumberStyles.Any' CultureInfo.InvariantCulture);  				  				// did it find a metric value like k or m?  				if (!"".Equals(match3)) {  					if ("k".Equals(match3)) {  						result = rootNumber * 1e3;  					} else if ("m".Equals(match3)) {  						result = rootNumber * 1e6;  					}  				} else {  					result = rootNumber;  				}  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,GetDouble,The following statement contains a magic number: if (result == 3.911555E-07) result = 0;
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					dataType = "byte";  					break;  				case 2:  					dataType = "int16";  					break;  				case 4:  					dataType = "int32";  					break;  				case 8:  					dataType = "int64";  					break;  				default:  					//dataType = numberOfBytes + "bytes";  					dataType = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					dataType = "byte";  					break;  				case 2:  					dataType = "int16";  					break;  				case 4:  					dataType = "int32";  					break;  				case 8:  					dataType = "int64";  					break;  				default:  					//dataType = numberOfBytes + "bytes";  					dataType = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					dataType = "byte";  					break;  				case 2:  					dataType = "int16";  					break;  				case 4:  					dataType = "int32";  					break;  				case 8:  					dataType = "int64";  					break;  				default:  					//dataType = numberOfBytes + "bytes";  					dataType = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					datatype = "byte";  					break;  				case 2:  					datatype = "ushort";  					break;  				case 4:  					if (use4BytesAsInt) {  						datatype = "int";  					} else {  						datatype = "float";  					}  					break;  				case 5:  				case 6:  				case 7:  				case 8:  					if (update) numberOfBytes = 8;  					datatype = "uint64";  					break;  					//case 16:  					//	numberOfBytes = 16;  					//	datatype = "16bytes";  					//	break;  				default:  					if (update) numberOfBytes = 4;  					datatype = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					datatype = "byte";  					break;  				case 2:  					datatype = "ushort";  					break;  				case 4:  					if (use4BytesAsInt) {  						datatype = "int";  					} else {  						datatype = "float";  					}  					break;  				case 5:  				case 6:  				case 7:  				case 8:  					if (update) numberOfBytes = 8;  					datatype = "uint64";  					break;  					//case 16:  					//	numberOfBytes = 16;  					//	datatype = "16bytes";  					//	break;  				default:  					if (update) numberOfBytes = 4;  					datatype = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					datatype = "byte";  					break;  				case 2:  					datatype = "ushort";  					break;  				case 4:  					if (use4BytesAsInt) {  						datatype = "int";  					} else {  						datatype = "float";  					}  					break;  				case 5:  				case 6:  				case 7:  				case 8:  					if (update) numberOfBytes = 8;  					datatype = "uint64";  					break;  					//case 16:  					//	numberOfBytes = 16;  					//	datatype = "16bytes";  					//	break;  				default:  					if (update) numberOfBytes = 4;  					datatype = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					datatype = "byte";  					break;  				case 2:  					datatype = "ushort";  					break;  				case 4:  					if (use4BytesAsInt) {  						datatype = "int";  					} else {  						datatype = "float";  					}  					break;  				case 5:  				case 6:  				case 7:  				case 8:  					if (update) numberOfBytes = 8;  					datatype = "uint64";  					break;  					//case 16:  					//	numberOfBytes = 16;  					//	datatype = "16bytes";  					//	break;  				default:  					if (update) numberOfBytes = 4;  					datatype = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					datatype = "byte";  					break;  				case 2:  					datatype = "ushort";  					break;  				case 4:  					if (use4BytesAsInt) {  						datatype = "int";  					} else {  						datatype = "float";  					}  					break;  				case 5:  				case 6:  				case 7:  				case 8:  					if (update) numberOfBytes = 8;  					datatype = "uint64";  					break;  					//case 16:  					//	numberOfBytes = 16;  					//	datatype = "16bytes";  					//	break;  				default:  					if (update) numberOfBytes = 4;  					datatype = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					datatype = "byte";  					break;  				case 2:  					datatype = "ushort";  					break;  				case 4:  					if (use4BytesAsInt) {  						datatype = "int";  					} else {  						datatype = "float";  					}  					break;  				case 5:  				case 6:  				case 7:  				case 8:  					if (update) numberOfBytes = 8;  					datatype = "uint64";  					break;  					//case 16:  					//	numberOfBytes = 16;  					//	datatype = "16bytes";  					//	break;  				default:  					if (update) numberOfBytes = 4;  					datatype = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					datatype = "byte";  					break;  				case 2:  					datatype = "ushort";  					break;  				case 4:  					if (use4BytesAsInt) {  						datatype = "int";  					} else {  						datatype = "float";  					}  					break;  				case 5:  				case 6:  				case 7:  				case 8:  					if (update) numberOfBytes = 8;  					datatype = "uint64";  					break;  					//case 16:  					//	numberOfBytes = 16;  					//	datatype = "16bytes";  					//	break;  				default:  					if (update) numberOfBytes = 4;  					datatype = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,NumberOfBytesToDataType,The following statement contains a magic number: switch (numberOfBytes) {  				case 1:  					datatype = "byte";  					break;  				case 2:  					datatype = "ushort";  					break;  				case 4:  					if (use4BytesAsInt) {  						datatype = "int";  					} else {  						datatype = "float";  					}  					break;  				case 5:  				case 6:  				case 7:  				case 8:  					if (update) numberOfBytes = 8;  					datatype = "uint64";  					break;  					//case 16:  					//	numberOfBytes = 16;  					//	datatype = "16bytes";  					//	break;  				default:  					if (update) numberOfBytes = 4;  					datatype = "uint32";  					break;  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ByteArrayToString,The following statement contains a magic number: var hex = new StringBuilder(ba.Length * 2);
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,ByteArrayToString,The following statement contains a magic number: for (int i = 0; i < numberOfBytes && i < ba.Length && i < 8; i++) {  				byte b = ba[i];  				hex.AppendFormat("{0:X2}"' b);  			}
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,StringToByteArray,The following statement contains a magic number: var bytes = new byte[NumberChars / 2];
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < NumberChars; i += 2)  				bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < NumberChars; i += 2)  				bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < NumberChars; i += 2)  				bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,InvestigatePresetFileDump,Program,C:\repos\perivar_AudioVSTToolbox\InvestigatePresetFileDump\Program.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < NumberChars; i += 2)  				bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
