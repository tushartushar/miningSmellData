Implementation smell,Namespace,Class,File,Method,Description
Long Method,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The method has 113 lines of code.
Long Method,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The method has 112 lines of code.
Long Identifier,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,,The length of the parameter previousStartZoomSamplePosition is 31.
Long Statement,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateSpectrumShapes,The length of the statement  "				AudioAnalyzer.PrepareSpectrumAnalysis(channelData' sampleRate' fftWindowsSize' out mag' out freq' out foundMaxFreq' out foundMaxDecibel); " is 137.
Long Statement,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateSpectrumShapes,The length of the statement  "				this.offlineBitmap = AudioAnalyzer.GetSpectrumImage(ref mag' ref freq' new Size(this.Width' this.Height)' MinimumFrequency' MaximumFrequency' foundMaxDecibel' foundMaxFreq); " is 173.
Long Statement,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateSpectrumShapes,The length of the statement  "							channelPeakData[barIndex] = (float)(peakYPos + (PeakFallDelay * channelPeakData[barIndex])) / ((float)(PeakFallDelay + 1)); " is 123.
Long Statement,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateBarLayout,The length of the statement  "				int logIndex = (int)((maxLog - Math.Log((actualBarCount + 1) - i' (actualBarCount + 1))) * indexCount) + minimumFrequencyIndex; " is 127.
Long Statement,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The length of the statement  "			this.btnBrowse.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The length of the statement  "			this.txtFilePath.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 149.
Long Statement,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The length of the statement  "			this.btnPlay.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The length of the statement  "			this.btnPause.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The length of the statement  "			this.btnStop.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The length of the statement  "			this.customWaveViewer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 153.
Long Statement,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The length of the statement  "			this.customSpectrumAnalyzer1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 156.
Long Statement,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,inputStream_Sample,The length of the statement  "			long repeatStartPosition = (long)((SelectionBegin.TotalSeconds / ActiveStream.TotalTime.TotalSeconds) * ActiveStream.Length); " is 125.
Long Statement,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,inputStream_Sample,The length of the statement  "			long repeatStopPosition = (long)((SelectionEnd.TotalSeconds / ActiveStream.TotalTime.TotalSeconds) * ActiveStream.Length); " is 122.
Long Statement,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,inputStream_Sample,The length of the statement  "			if (((SelectionEnd - SelectionBegin) >= TimeSpan.FromMilliseconds(repeatThreshold)) && ActiveStream.Position >= repeatStopPosition) { " is 133.
Long Statement,NAudio_Visualizing,SampleAggregator,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\SampleAggregator.cs,doWindow,The length of the statement  "			double[] windowArray = CommonUtils.MathLib.FFT.FFTWindow.GetWindowFunction(CommonUtils.MathLib.FFT.FFTWindowType.HAMMING' complex.Length); " is 138.
Long Statement,NAudio_Visualizing,SampleAggregator,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\SampleAggregator.cs,GetFFTResults,The length of the statement  "				fftBuffer[i] = (float)Math.Sqrt(channelDataClone[i].X * channelDataClone[i].X + channelDataClone[i].Y * channelDataClone[i].Y); " is 127.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,UpdateWaveform,The length of the statement  "				this.offlineBitmap = AudioAnalyzer.DrawWaveformMono(soundPlayer.WaveformData' new Size(this.Width' this.Height)' amplitude' startZoomSamplePosition' endZoomSamplePosition' soundPlayer.SampleRate' true); " is 202.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,UpdateProgressIndicator,The length of the statement  "				progressSample = SecondsToSamplePosition(soundPlayer.ChannelPosition' soundPlayer.ChannelLength' soundPlayer.WaveformData.Length); " is 130.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseUp,The length of the statement  "				endZoomSamplePosition = Math.Min((int)(previousStartZoomSamplePosition + samplesPerPixel * endSelectXPosition)' soundPlayer.WaveformData.Length); " is 145.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseUp,The length of the statement  "					soundPlayer.ChannelPosition = SamplePositionToSeconds(curSamplePosition' soundPlayer.WaveformData.Length' soundPlayer.ChannelLength); " is 133.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseUp,The length of the statement  "					soundPlayer.ChannelPosition = SamplePositionToSeconds(curSamplePosition' soundPlayer.WaveformData.Length' soundPlayer.ChannelLength); " is 133.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseUp,The length of the statement  "				endLoopSamplePosition = Math.Min((int)(previousStartZoomSamplePosition + samplesPerPixel * endSelectXPosition)' soundPlayer.WaveformData.Length); " is 145.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseUp,The length of the statement  "				soundPlayer.SelectionBegin = TimeSpan.FromSeconds(SamplePositionToSeconds(startLoopSamplePosition' soundPlayer.WaveformData.Length' soundPlayer.ChannelLength)); " is 160.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseUp,The length of the statement  "				soundPlayer.SelectionEnd = TimeSpan.FromSeconds(SamplePositionToSeconds(endLoopSamplePosition' soundPlayer.WaveformData.Length' soundPlayer.ChannelLength)); " is 156.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseUp,The length of the statement  "				soundPlayer.ChannelPosition = SamplePositionToSeconds(startLoopSamplePosition' soundPlayer.WaveformData.Length' soundPlayer.ChannelLength); " is 139.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,PointInLoopRegion,The length of the statement  "			double loopStartSamples = (soundPlayer.SelectionBegin.TotalSeconds / soundPlayer.ChannelLength) * soundPlayer.WaveformData.Length; " is 130.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,PointInLoopRegion,The length of the statement  "			double loopEndSamples = (soundPlayer.SelectionEnd.TotalSeconds / soundPlayer.ChannelLength) * soundPlayer.WaveformData.Length; " is 126.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,soundPlayer_PropertyChanged,The length of the statement  "					startLoopSamplePosition = SecondsToSamplePosition(soundPlayer.SelectionBegin.TotalSeconds' soundPlayer.ChannelLength' soundPlayer.WaveformData.Length); " is 151.
Long Statement,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,soundPlayer_PropertyChanged,The length of the statement  "					endLoopSamplePosition = SecondsToSamplePosition(soundPlayer.SelectionEnd.TotalSeconds' soundPlayer.ChannelLength' soundPlayer.WaveformData.Length); " is 147.
Complex Conditional,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,UpdateProgressIndicator,The conditional expression  "soundPlayer != null && soundPlayer.ChannelLength != 0  			    && soundPlayer.WaveformData != null && soundPlayer.WaveformData.Length != 0"  is complex.
Magic Number,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateSpectrumShapes,The following statement contains a magic number: if (DoSpectrumGraph) {  				#region Draw Spectrum Analysis Graph  				float[] mag;  				float[] freq;  				float foundMaxFreq' foundMaxDecibel;  				double sampleRate = soundPlayer.SampleRate;  				int fftWindowsSize = soundPlayer.FftDataSize;  				AudioAnalyzer.PrepareSpectrumAnalysis(channelData' sampleRate' fftWindowsSize' out mag' out freq' out foundMaxFreq' out foundMaxDecibel);  				this.offlineBitmap = AudioAnalyzer.GetSpectrumImage(ref mag' ref freq' new Size(this.Width' this.Height)' MinimumFrequency' MaximumFrequency' foundMaxDecibel' foundMaxFreq);  				#endregion  			} else {  				#region Draw Bars  				double fftBucketHeight = 0f;  				double barHeight = 0f;  				double lastPeakHeight = 0f;  				double peakYPos = 0f;  				double height = this.Height;  				int barIndex = 0;  				double peakDotHeight = Math.Max(barWidth / 2.0f' 1);  				double barHeightScale = (height - peakDotHeight);    				for (int i = minimumFrequencyIndex; i <= maximumFrequencyIndex; i++)  				{  					// If we're paused' keep drawing' but set the current height to 0 so the peaks fall.  					if (!soundPlayer.IsPlaying)  					{  						barHeight = 0f;  					}  					else // Draw the maximum value for the bar's band  					{  						switch (BarHeightScaling)  						{  							case BarHeightScalingStyles.Decibel:  								double dbValue = 20 * Math.Log10((double)channelData[i]);  								fftBucketHeight = ((dbValue - minDBValue) / dbScale) * barHeightScale;  								break;  							case BarHeightScalingStyles.Linear:  								fftBucketHeight = (channelData[i] * scaleFactorLinear) * barHeightScale;  								break;  							case BarHeightScalingStyles.Sqrt:  								fftBucketHeight = (((Math.Sqrt((double)channelData[i])) * scaleFactorSqr) * barHeightScale);  								break;  						}    						if (barHeight < fftBucketHeight)  							barHeight = fftBucketHeight;  						if (barHeight < 0f)  							barHeight = 0f;  					}    					// If this is the last FFT bucket in the bar's group' draw the bar.  					int currentIndexMax = IsFrequencyScaleLinear ? barIndexMax[barIndex] : barLogScaleIndexMax[barIndex];  					if (i == currentIndexMax)  					{  						// Peaks can't surpass the height of the control.  						if (barHeight > height)  							barHeight = height;    						if (AveragePeaks && barIndex > 0)  							barHeight = (lastPeakHeight + barHeight) / 2;    						peakYPos = barHeight;    						if (channelPeakData[barIndex] < peakYPos) {  							channelPeakData[barIndex] = (float)peakYPos;  						} else {  							channelPeakData[barIndex] = (float)(peakYPos + (PeakFallDelay * channelPeakData[barIndex])) / ((float)(PeakFallDelay + 1));  						}    						double xCoord = BarSpacing + (barWidth * barIndex) + (BarSpacing * barIndex) + 1;    						Rectangle barRect = barShapes[barIndex];  						barRect.Y = (int)((height - 1) - barHeight);  						barRect.Height = (int)barHeight;  						barShapes[barIndex] = barRect;  						  						Rectangle peakRect = peakShapes[barIndex];  						peakRect.Y = (int)((height - 1) - channelPeakData[barIndex] - peakDotHeight);  						peakShapes[barIndex] = peakRect;    						if (channelPeakData[barIndex] > 0.05)  							allZero = false;    						lastPeakHeight = barHeight;  						barHeight = 0f;  						barIndex++;  					}  				}  				#endregion  			}
Magic Number,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateSpectrumShapes,The following statement contains a magic number: if (DoSpectrumGraph) {  				#region Draw Spectrum Analysis Graph  				float[] mag;  				float[] freq;  				float foundMaxFreq' foundMaxDecibel;  				double sampleRate = soundPlayer.SampleRate;  				int fftWindowsSize = soundPlayer.FftDataSize;  				AudioAnalyzer.PrepareSpectrumAnalysis(channelData' sampleRate' fftWindowsSize' out mag' out freq' out foundMaxFreq' out foundMaxDecibel);  				this.offlineBitmap = AudioAnalyzer.GetSpectrumImage(ref mag' ref freq' new Size(this.Width' this.Height)' MinimumFrequency' MaximumFrequency' foundMaxDecibel' foundMaxFreq);  				#endregion  			} else {  				#region Draw Bars  				double fftBucketHeight = 0f;  				double barHeight = 0f;  				double lastPeakHeight = 0f;  				double peakYPos = 0f;  				double height = this.Height;  				int barIndex = 0;  				double peakDotHeight = Math.Max(barWidth / 2.0f' 1);  				double barHeightScale = (height - peakDotHeight);    				for (int i = minimumFrequencyIndex; i <= maximumFrequencyIndex; i++)  				{  					// If we're paused' keep drawing' but set the current height to 0 so the peaks fall.  					if (!soundPlayer.IsPlaying)  					{  						barHeight = 0f;  					}  					else // Draw the maximum value for the bar's band  					{  						switch (BarHeightScaling)  						{  							case BarHeightScalingStyles.Decibel:  								double dbValue = 20 * Math.Log10((double)channelData[i]);  								fftBucketHeight = ((dbValue - minDBValue) / dbScale) * barHeightScale;  								break;  							case BarHeightScalingStyles.Linear:  								fftBucketHeight = (channelData[i] * scaleFactorLinear) * barHeightScale;  								break;  							case BarHeightScalingStyles.Sqrt:  								fftBucketHeight = (((Math.Sqrt((double)channelData[i])) * scaleFactorSqr) * barHeightScale);  								break;  						}    						if (barHeight < fftBucketHeight)  							barHeight = fftBucketHeight;  						if (barHeight < 0f)  							barHeight = 0f;  					}    					// If this is the last FFT bucket in the bar's group' draw the bar.  					int currentIndexMax = IsFrequencyScaleLinear ? barIndexMax[barIndex] : barLogScaleIndexMax[barIndex];  					if (i == currentIndexMax)  					{  						// Peaks can't surpass the height of the control.  						if (barHeight > height)  							barHeight = height;    						if (AveragePeaks && barIndex > 0)  							barHeight = (lastPeakHeight + barHeight) / 2;    						peakYPos = barHeight;    						if (channelPeakData[barIndex] < peakYPos) {  							channelPeakData[barIndex] = (float)peakYPos;  						} else {  							channelPeakData[barIndex] = (float)(peakYPos + (PeakFallDelay * channelPeakData[barIndex])) / ((float)(PeakFallDelay + 1));  						}    						double xCoord = BarSpacing + (barWidth * barIndex) + (BarSpacing * barIndex) + 1;    						Rectangle barRect = barShapes[barIndex];  						barRect.Y = (int)((height - 1) - barHeight);  						barRect.Height = (int)barHeight;  						barShapes[barIndex] = barRect;  						  						Rectangle peakRect = peakShapes[barIndex];  						peakRect.Y = (int)((height - 1) - channelPeakData[barIndex] - peakDotHeight);  						peakShapes[barIndex] = peakRect;    						if (channelPeakData[barIndex] > 0.05)  							allZero = false;    						lastPeakHeight = barHeight;  						barHeight = 0f;  						barIndex++;  					}  				}  				#endregion  			}
Magic Number,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateSpectrumShapes,The following statement contains a magic number: if (DoSpectrumGraph) {  				#region Draw Spectrum Analysis Graph  				float[] mag;  				float[] freq;  				float foundMaxFreq' foundMaxDecibel;  				double sampleRate = soundPlayer.SampleRate;  				int fftWindowsSize = soundPlayer.FftDataSize;  				AudioAnalyzer.PrepareSpectrumAnalysis(channelData' sampleRate' fftWindowsSize' out mag' out freq' out foundMaxFreq' out foundMaxDecibel);  				this.offlineBitmap = AudioAnalyzer.GetSpectrumImage(ref mag' ref freq' new Size(this.Width' this.Height)' MinimumFrequency' MaximumFrequency' foundMaxDecibel' foundMaxFreq);  				#endregion  			} else {  				#region Draw Bars  				double fftBucketHeight = 0f;  				double barHeight = 0f;  				double lastPeakHeight = 0f;  				double peakYPos = 0f;  				double height = this.Height;  				int barIndex = 0;  				double peakDotHeight = Math.Max(barWidth / 2.0f' 1);  				double barHeightScale = (height - peakDotHeight);    				for (int i = minimumFrequencyIndex; i <= maximumFrequencyIndex; i++)  				{  					// If we're paused' keep drawing' but set the current height to 0 so the peaks fall.  					if (!soundPlayer.IsPlaying)  					{  						barHeight = 0f;  					}  					else // Draw the maximum value for the bar's band  					{  						switch (BarHeightScaling)  						{  							case BarHeightScalingStyles.Decibel:  								double dbValue = 20 * Math.Log10((double)channelData[i]);  								fftBucketHeight = ((dbValue - minDBValue) / dbScale) * barHeightScale;  								break;  							case BarHeightScalingStyles.Linear:  								fftBucketHeight = (channelData[i] * scaleFactorLinear) * barHeightScale;  								break;  							case BarHeightScalingStyles.Sqrt:  								fftBucketHeight = (((Math.Sqrt((double)channelData[i])) * scaleFactorSqr) * barHeightScale);  								break;  						}    						if (barHeight < fftBucketHeight)  							barHeight = fftBucketHeight;  						if (barHeight < 0f)  							barHeight = 0f;  					}    					// If this is the last FFT bucket in the bar's group' draw the bar.  					int currentIndexMax = IsFrequencyScaleLinear ? barIndexMax[barIndex] : barLogScaleIndexMax[barIndex];  					if (i == currentIndexMax)  					{  						// Peaks can't surpass the height of the control.  						if (barHeight > height)  							barHeight = height;    						if (AveragePeaks && barIndex > 0)  							barHeight = (lastPeakHeight + barHeight) / 2;    						peakYPos = barHeight;    						if (channelPeakData[barIndex] < peakYPos) {  							channelPeakData[barIndex] = (float)peakYPos;  						} else {  							channelPeakData[barIndex] = (float)(peakYPos + (PeakFallDelay * channelPeakData[barIndex])) / ((float)(PeakFallDelay + 1));  						}    						double xCoord = BarSpacing + (barWidth * barIndex) + (BarSpacing * barIndex) + 1;    						Rectangle barRect = barShapes[barIndex];  						barRect.Y = (int)((height - 1) - barHeight);  						barRect.Height = (int)barHeight;  						barShapes[barIndex] = barRect;  						  						Rectangle peakRect = peakShapes[barIndex];  						peakRect.Y = (int)((height - 1) - channelPeakData[barIndex] - peakDotHeight);  						peakShapes[barIndex] = peakRect;    						if (channelPeakData[barIndex] > 0.05)  							allZero = false;    						lastPeakHeight = barHeight;  						barHeight = 0f;  						barIndex++;  					}  				}  				#endregion  			}
Magic Number,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateBarLayout,The following statement contains a magic number: maximumFrequencyIndex = Math.Min(soundPlayer.GetFFTFrequencyIndex(MaximumFrequency) + 1' 8191);
Magic Number,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateBarLayout,The following statement contains a magic number: minimumFrequencyIndex = Math.Min(soundPlayer.GetFFTFrequencyIndex(MinimumFrequency)' 8191);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Location = new System.Drawing.Point(282' 372);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Location = new System.Drawing.Point(282' 372);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Size = new System.Drawing.Size(75' 23);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Size = new System.Drawing.Size(75' 23);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtFilePath.Location = new System.Drawing.Point(12' 374);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtFilePath.Location = new System.Drawing.Point(12' 374);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtFilePath.Size = new System.Drawing.Size(264' 20);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtFilePath.Size = new System.Drawing.Size(264' 20);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Location = new System.Drawing.Point(363' 371);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Location = new System.Drawing.Point(363' 371);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Size = new System.Drawing.Size(75' 23);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Size = new System.Drawing.Size(75' 23);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.TabIndex = 2;
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.Location = new System.Drawing.Point(444' 372);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.Location = new System.Drawing.Point(444' 372);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.Size = new System.Drawing.Size(75' 23);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.Size = new System.Drawing.Size(75' 23);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.TabIndex = 3;
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Location = new System.Drawing.Point(525' 371);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Location = new System.Drawing.Point(525' 371);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Size = new System.Drawing.Size(75' 23);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Size = new System.Drawing.Size(75' 23);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.TabIndex = 4;
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtTime.Location = new System.Drawing.Point(12' 12);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtTime.Location = new System.Drawing.Point(12' 12);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtTime.Size = new System.Drawing.Size(100' 20);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtTime.Size = new System.Drawing.Size(100' 20);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtTime.TabIndex = 5;
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customWaveViewer1.Location = new System.Drawing.Point(12' 187);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customWaveViewer1.Location = new System.Drawing.Point(12' 187);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customWaveViewer1.Size = new System.Drawing.Size(757' 178);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customWaveViewer1.Size = new System.Drawing.Size(757' 178);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customWaveViewer1.TabIndex = 6;
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customSpectrumAnalyzer1.Location = new System.Drawing.Point(12' 40);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customSpectrumAnalyzer1.Location = new System.Drawing.Point(12' 40);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customSpectrumAnalyzer1.Size = new System.Drawing.Size(757' 141);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customSpectrumAnalyzer1.Size = new System.Drawing.Size(757' 141);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customSpectrumAnalyzer1.TabIndex = 7;
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(781' 406);
Magic Number,NAudio_Visualizing,MainForm,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(781' 406);
Magic Number,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,NAudioEngine,The following statement contains a magic number: positionTimer.Interval = 50;
Magic Number,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,GetFFTFrequencyIndex,The following statement contains a magic number: if (ActiveStream != null) {  				sampleRate = ActiveStream.WaveFormat.SampleRate;  			} else {  				sampleRate = 44100; // Assume a default 44.1 kHz sample rate.  			}
Magic Number,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,waveformGenerateWorker_DoWork,The following statement contains a magic number: int waveformLength = frameCount * 2;
Magic Number,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,waveformGenerateWorker_DoWork,The following statement contains a magic number: while(sampleProvider.Read(samples' 0' samples.Length) > 0) {  				if (waveformInputStream.WaveFormat.Channels == 1) {  					floatList.AddRange(samples);  				} else if (waveformInputStream.WaveFormat.Channels == 2) {  					switch(stereoProcessing) {  						case StereoProcessingType.CHANNEL_STEREO_LEFT:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								floatList.Add(left);  							}  							break;  						case StereoProcessingType.CHANNEL_STEREO_RIGHT:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								floatList.Add(right);  							}  							break;  						case StereoProcessingType.CHANNEL_MONOMIX:  						default:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								// Make stored channel data stereo by averaging left and right values.  								floatList.Add(( (left + right) / 2.0f));  							}  							break;  					}  				}    				if (waveformGenerateWorker.CancellationPending) {  					e.Cancel = true;  					break;  				}  			}
Magic Number,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,waveformGenerateWorker_DoWork,The following statement contains a magic number: while(sampleProvider.Read(samples' 0' samples.Length) > 0) {  				if (waveformInputStream.WaveFormat.Channels == 1) {  					floatList.AddRange(samples);  				} else if (waveformInputStream.WaveFormat.Channels == 2) {  					switch(stereoProcessing) {  						case StereoProcessingType.CHANNEL_STEREO_LEFT:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								floatList.Add(left);  							}  							break;  						case StereoProcessingType.CHANNEL_STEREO_RIGHT:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								floatList.Add(right);  							}  							break;  						case StereoProcessingType.CHANNEL_MONOMIX:  						default:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								// Make stored channel data stereo by averaging left and right values.  								floatList.Add(( (left + right) / 2.0f));  							}  							break;  					}  				}    				if (waveformGenerateWorker.CancellationPending) {  					e.Cancel = true;  					break;  				}  			}
Magic Number,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,waveformGenerateWorker_DoWork,The following statement contains a magic number: while(sampleProvider.Read(samples' 0' samples.Length) > 0) {  				if (waveformInputStream.WaveFormat.Channels == 1) {  					floatList.AddRange(samples);  				} else if (waveformInputStream.WaveFormat.Channels == 2) {  					switch(stereoProcessing) {  						case StereoProcessingType.CHANNEL_STEREO_LEFT:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								floatList.Add(left);  							}  							break;  						case StereoProcessingType.CHANNEL_STEREO_RIGHT:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								floatList.Add(right);  							}  							break;  						case StereoProcessingType.CHANNEL_MONOMIX:  						default:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								// Make stored channel data stereo by averaging left and right values.  								floatList.Add(( (left + right) / 2.0f));  							}  							break;  					}  				}    				if (waveformGenerateWorker.CancellationPending) {  					e.Cancel = true;  					break;  				}  			}
Magic Number,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,waveformGenerateWorker_DoWork,The following statement contains a magic number: while(sampleProvider.Read(samples' 0' samples.Length) > 0) {  				if (waveformInputStream.WaveFormat.Channels == 1) {  					floatList.AddRange(samples);  				} else if (waveformInputStream.WaveFormat.Channels == 2) {  					switch(stereoProcessing) {  						case StereoProcessingType.CHANNEL_STEREO_LEFT:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								floatList.Add(left);  							}  							break;  						case StereoProcessingType.CHANNEL_STEREO_RIGHT:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								floatList.Add(right);  							}  							break;  						case StereoProcessingType.CHANNEL_MONOMIX:  						default:  							for (int i = 0; i < samples.Length; i+=2) {  								float left = samples[i];  								float right = samples[i+1];  								// Make stored channel data stereo by averaging left and right values.  								floatList.Add(( (left + right) / 2.0f));  							}  							break;  					}  				}    				if (waveformGenerateWorker.CancellationPending) {  					e.Cancel = true;  					break;  				}  			}
Magic Number,NAudio_Visualizing,NAudioEngine,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\NAudioEngine.cs,OpenFile,The following statement contains a magic number: if (File.Exists(path)) {  				try {  					waveOutDevice = new WaveOut()  					{  						DesiredLatency = 100  					};  					  					ActiveStream = (WaveStream) new AudioFileReader(path);  					inputStream = new WaveChannel32(ActiveStream);  					sampleAggregator = new SampleAggregator(fftDataSize);  					inputStream.Sample += inputStream_Sample;  					waveOutDevice.Init(inputStream);  					ChannelLength = inputStream.TotalTime.TotalSeconds;  					FileTag = TagLib.File.Create(path);  					GenerateWaveformData(path);  					CanPlay = true;  				}  				catch  				{  					ActiveStream = null;  					CanPlay = false;  				}  			}
Magic Number,NAudio_Visualizing,SampleAggregator,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\SampleAggregator.cs,SampleAggregator,The following statement contains a magic number: binaryExponentitation = (int)Math.Log(bufferSize' 2);
Magic Number,NAudio_Visualizing,SampleAggregator,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\SampleAggregator.cs,GetFFTResults,The following statement contains a magic number: for (int i = 0; i < channelDataClone.Length / 2; i++)  			{  				// Calculate actual intensities for the FFT results.  				fftBuffer[i] = (float)Math.Sqrt(channelDataClone[i].X * channelDataClone[i].X + channelDataClone[i].Y * channelDataClone[i].Y);  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,OnPaint,The following statement contains a magic number: using (Pen loopPen = new Pen(Color.Red' 2))  			{  				if (selectRegion.Height > 0 && selectRegion.Width > 0)  {  					e.Graphics.DrawRectangle(loopPen' startSelectXPosition' 0' selectRegion.Width' selectRegion.Height);  				}  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseWheel,The following statement contains a magic number: if ((Control.ModifierKeys & Keys.Control) == Keys.Control) {  				delta = range / 20;  				  				// If scrolling right (forward in time on the waveform)  				if (e.Delta > 0)  				{  					delta = MathUtils.LimitInt(delta' 0' (soundPlayer.WaveformData.Length) - endZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition + delta;  					newendZoomSamplePosition = endZoomSamplePosition + delta;  				}  				  				// If scrolling left (backward in time on the waveform)  				else  				{  					delta = MathUtils.LimitInt(delta' 0' startZoomSamplePosition);  					newstartZoomSamplePosition = startZoomSamplePosition - delta;  					newendZoomSamplePosition = endZoomSamplePosition - delta;  				}  			}    			// change the amplitude up or down  			else if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  				  				// If right (increase the amplitude)  				if (e.Delta > 0)  				{  					// increase the amplitude  					if (amplitude * 2 < 5000) {  						amplitude*=2;  						UpdateWaveform();  					}  				}  				  				// If left (decrease the amplitude)  				else  				{  					amplitude/=2;  					if (amplitude < 1) amplitude = 1;  				}  				  				UpdateWaveform();  				return;  			}  			  			// Zoom the display in/out  			else  			{  				midpoint = startZoomSamplePosition + (range / 2);  				hitpointFraction = (float)e.X / (float)this.Width;  				if (hitpointFraction < 0.0f)  					hitpointFraction = 0.0f;  				if (hitpointFraction > 1.0f)  					hitpointFraction = 1.0f;  				  				if (e.Delta > 0)  				{  					// Zoom in  					delta = range / 4;  					newstartZoomSamplePosition = (int) (startZoomSamplePosition + (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition - (delta * (1.0 - hitpointFraction)));  					  					// only allow zooming if samples are more than 10  					int samplesSelected = newendZoomSamplePosition - newstartZoomSamplePosition;  					if (samplesSelected <= 10) {  						return;  					}  				}  				else  				{  					// Zoom out  					delta = range / 3; // must use a higher delta than zoom in to make sure we can zoom out again  					newstartZoomSamplePosition = (int) (startZoomSamplePosition - (delta * hitpointFraction));  					newendZoomSamplePosition = (int) (endZoomSamplePosition + (delta * (1.0 - hitpointFraction)));  				}  				  				// Limit the view  				if (newstartZoomSamplePosition < 0)  					newstartZoomSamplePosition = 0;  				if (newstartZoomSamplePosition > midpoint)  					newstartZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition < midpoint)  					newendZoomSamplePosition = midpoint;  				if (newendZoomSamplePosition > (soundPlayer.WaveformData.Length))  					newendZoomSamplePosition = soundPlayer.WaveformData.Length;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,CustomWaveViewerMouseUp,The following statement contains a magic number: if (isZooming) {  				startZoomSamplePosition = Math.Max((int)(previousStartZoomSamplePosition + samplesPerPixel * startSelectXPosition)' 0);  				endZoomSamplePosition = Math.Min((int)(previousStartZoomSamplePosition + samplesPerPixel * endSelectXPosition)' soundPlayer.WaveformData.Length);  				  				// only allow zooming if samples are more than 10  				int samplesSelected = endZoomSamplePosition - startZoomSamplePosition;  				if (samplesSelected > 10) {  					Zoom(startZoomSamplePosition' endZoomSamplePosition);  				}  				return;  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,OnKeyDown,The following statement contains a magic number: if (e.KeyCode == Keys.Up) {  				// increase the amplitude  				if (amplitude * 2 < 5000) {  					amplitude*=2;  					UpdateWaveform();  				}  			} else if (e.KeyCode == Keys.Down) {  				// decrease the amplitude  				amplitude/=2;  				if (amplitude < 1) amplitude = 1;  				UpdateWaveform();  			} else if (e.KeyCode == Keys.Right) {  				ScrollTime(true);  			} else if (e.KeyCode == Keys.Left) {  				ScrollTime(false);  			} else if (e.KeyCode == Keys.Oemcomma || e.KeyCode == Keys.Home) {  				soundPlayer.ChannelPosition = 0;  				FitToScreen();  			} else if (e.KeyCode == Keys.OemPeriod || e.KeyCode == Keys.End) {  				soundPlayer.ChannelPosition = soundPlayer.ChannelLength;  				FitToScreen();  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,OnKeyDown,The following statement contains a magic number: if (e.KeyCode == Keys.Up) {  				// increase the amplitude  				if (amplitude * 2 < 5000) {  					amplitude*=2;  					UpdateWaveform();  				}  			} else if (e.KeyCode == Keys.Down) {  				// decrease the amplitude  				amplitude/=2;  				if (amplitude < 1) amplitude = 1;  				UpdateWaveform();  			} else if (e.KeyCode == Keys.Right) {  				ScrollTime(true);  			} else if (e.KeyCode == Keys.Left) {  				ScrollTime(false);  			} else if (e.KeyCode == Keys.Oemcomma || e.KeyCode == Keys.Home) {  				soundPlayer.ChannelPosition = 0;  				FitToScreen();  			} else if (e.KeyCode == Keys.OemPeriod || e.KeyCode == Keys.End) {  				soundPlayer.ChannelPosition = soundPlayer.ChannelLength;  				FitToScreen();  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,OnKeyDown,The following statement contains a magic number: if (e.KeyCode == Keys.Up) {  				// increase the amplitude  				if (amplitude * 2 < 5000) {  					amplitude*=2;  					UpdateWaveform();  				}  			} else if (e.KeyCode == Keys.Down) {  				// decrease the amplitude  				amplitude/=2;  				if (amplitude < 1) amplitude = 1;  				UpdateWaveform();  			} else if (e.KeyCode == Keys.Right) {  				ScrollTime(true);  			} else if (e.KeyCode == Keys.Left) {  				ScrollTime(false);  			} else if (e.KeyCode == Keys.Oemcomma || e.KeyCode == Keys.Home) {  				soundPlayer.ChannelPosition = 0;  				FitToScreen();  			} else if (e.KeyCode == Keys.OemPeriod || e.KeyCode == Keys.End) {  				soundPlayer.ChannelPosition = soundPlayer.ChannelLength;  				FitToScreen();  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,OnKeyDown,The following statement contains a magic number: if (e.KeyCode == Keys.Up) {  				// increase the amplitude  				if (amplitude * 2 < 5000) {  					amplitude*=2;  					UpdateWaveform();  				}  			} else if (e.KeyCode == Keys.Down) {  				// decrease the amplitude  				amplitude/=2;  				if (amplitude < 1) amplitude = 1;  				UpdateWaveform();  			} else if (e.KeyCode == Keys.Right) {  				ScrollTime(true);  			} else if (e.KeyCode == Keys.Left) {  				ScrollTime(false);  			} else if (e.KeyCode == Keys.Oemcomma || e.KeyCode == Keys.Home) {  				soundPlayer.ChannelPosition = 0;  				FitToScreen();  			} else if (e.KeyCode == Keys.OemPeriod || e.KeyCode == Keys.End) {  				soundPlayer.ChannelPosition = soundPlayer.ChannelLength;  				FitToScreen();  			}
Magic Number,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,ScrollTime,The following statement contains a magic number: delta = range / 20;
Missing Default,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,UpdateSpectrumShapes,The following switch statement is missing a default case: switch (BarHeightScaling)  						{  							case BarHeightScalingStyles.Decibel:  								double dbValue = 20 * Math.Log10((double)channelData[i]);  								fftBucketHeight = ((dbValue - minDBValue) / dbScale) * barHeightScale;  								break;  							case BarHeightScalingStyles.Linear:  								fftBucketHeight = (channelData[i] * scaleFactorLinear) * barHeightScale;  								break;  							case BarHeightScalingStyles.Sqrt:  								fftBucketHeight = (((Math.Sqrt((double)channelData[i])) * scaleFactorSqr) * barHeightScale);  								break;  						}
Missing Default,NAudio_Visualizing,CustomSpectrumAnalyzer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomSpectrumAnalyzer.cs,soundPlayer_PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)  			{  				case "IsPlaying":  					if (soundPlayer.IsPlaying && !animationTimer.Enabled) {  						animationTimer.Start();  					}  					break;  			}
Missing Default,CommonUtils.GUI,CustomWaveViewer,C:\repos\perivar_AudioVSTToolbox\NAudio-Visualizing\CustomWaveViewer.cs,soundPlayer_PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)  			{  				case "SelectionBegin":  					startLoopSamplePosition = SecondsToSamplePosition(soundPlayer.SelectionBegin.TotalSeconds' soundPlayer.ChannelLength' soundPlayer.WaveformData.Length);  					break;  				case "SelectionEnd":  					endLoopSamplePosition = SecondsToSamplePosition(soundPlayer.SelectionEnd.TotalSeconds' soundPlayer.ChannelLength' soundPlayer.WaveformData.Length);  					break;  				case "WaveformData":  					FitToScreen();  					break;  				case "ChannelPosition":  					UpdateProgressIndicator();  					break;  				case "ChannelLength":  					startLoopSamplePosition = -1;  					endLoopSamplePosition = -1;  					break;  			}
