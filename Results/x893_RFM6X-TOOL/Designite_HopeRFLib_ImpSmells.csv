Implementation smell,Namespace,Class,File,Method,Description
Long Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The method has 168 lines of code.
Long Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The method has 122 lines of code.
Complex Method,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,Cyclomatic complexity of the method is 29
Complex Method,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,Cyclomatic complexity of the method is 63
Complex Method,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OffsetColor,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,WriteByte,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,ApplyChanges,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,_vScrollBar_Scroll,Cyclomatic complexity of the method is 21
Complex Method,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,OnPaintBackground,Cyclomatic complexity of the method is 10
Complex Method,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,Cyclomatic complexity of the method is 12
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,checkBoxZoom_CheckedChanged,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_MouseDown,Cyclomatic complexity of the method is 16
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_MouseMove,Cyclomatic complexity of the method is 16
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_MouseUp,Cyclomatic complexity of the method is 10
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,Cyclomatic complexity of the method is 47
Complex Method,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,Cyclomatic complexity of the method is 12
Long Parameter List,Fusionbird.FusionToolkit,NativeMethods,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\NativeMethods.cs,DrawThemeBackground,The method has 6 parameters.
Long Parameter List,Fusionbird.FusionToolkit,NativeMethods,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\NativeMethods.cs,GetThemeColor,The method has 5 parameters.
Long Parameter List,SemtechLib.General,Register,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\Register.cs,Register,The method has 5 parameters.
Long Parameter List,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHexStringSelected,The method has 5 parameters.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,TrackDrawModeEditor,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\TrackDrawModeEditor.cs,EditValue,The length of the statement  "	IWindowsFormsEditorService formsEditorService = (IWindowsFormsEditorService)provider.GetService (typeof(IWindowsFormsEditorService)); " is 133.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,TrackDrawModeEditor,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\TrackDrawModeEditor.cs,EditValue,The length of the statement  "	checkedListBox.Items.Add ((object)"Ticks"' (((FusionTrackBar)context.Instance).OwnerDrawParts & TrackBarOwnerDrawParts.Ticks) == TrackBarOwnerDrawParts.Ticks); " is 159.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,TrackDrawModeEditor,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\TrackDrawModeEditor.cs,EditValue,The length of the statement  "	checkedListBox.Items.Add ((object)"Thumb"' (((FusionTrackBar)context.Instance).OwnerDrawParts & TrackBarOwnerDrawParts.Thumb) == TrackBarOwnerDrawParts.Thumb); " is 159.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,TrackDrawModeEditor,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\TrackDrawModeEditor.cs,EditValue,The length of the statement  "	checkedListBox.Items.Add ((object)"Channel"' (((FusionTrackBar)context.Instance).OwnerDrawParts & TrackBarOwnerDrawParts.Channel) == TrackBarOwnerDrawParts.Channel); " is 165.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The length of the statement  "		Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR)); " is 187.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The length of the statement  "		Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)); " is 215.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The length of the statement  "				ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3); " is 138.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawHorizontalTicks,The length of the statement  "	RectangleF rectangleF1 = new RectangleF ((float)(ChannelBounds.Left + ThumbBounds.Width / 2)' (float)(ThumbBounds.Top - 5)' 0.0f' 3f); " is 134.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawHorizontalTicks,The length of the statement  "	RectangleF rectangleF2 = new RectangleF ((float)(ChannelBounds.Right - ThumbBounds.Width / 2 - 1)' (float)(ThumbBounds.Top - 5)' 0.0f' 3f); " is 139.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawVerticalTicks,The length of the statement  "	RectangleF rectangleF1 = new RectangleF ((float)(ThumbBounds.Left - 5)' (float)(ChannelBounds.Bottom - ThumbBounds.Height / 2 - 1)' 3f' 0.0f); " is 142.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawVerticalTicks,The length of the statement  "	RectangleF rectangleF2 = new RectangleF ((float)(ThumbBounds.Left - 5)' (float)(ChannelBounds.Top + ThumbBounds.Height / 2)' 3f' 0.0f); " is 135.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "		Fusionbird.FusionToolkit.NativeMethods.TrackBarParts trackBarParts = Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB; " is 132.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "			trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM; " is 195.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "			trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP; " is 191.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "			trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBVERT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB; " is 188.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "			new VisualStyleRenderer ("TRACKBAR"' (int)trackBarParts' ThumbState).DrawBackground ((IDeviceContext)graphics' ThumbBounds); " is 124.
Long Statement,SemtechLib.General,ApplicationSettings,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\ApplicationSettings.cs,SaveDocument,The length of the statement  "	IsolatedStorageFileStream storageFileStream = new IsolatedStorageFileStream (filename' FileMode.OpenOrCreate' FileAccess.Write); " is 128.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 126.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle); " is 174.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "				e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 177.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "				e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 176.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle); " is 183.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle); " is 246.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100); " is 235.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawValue,The length of the statement  "		RectangleF ctrl = new RectangleF (this.rectCylinder.Left' this.rectCylinder.Bottom - height' this.rectCylinder.Width' height); " is 126.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawValue,The length of the statement  "	g.DrawString (this.Celsius2Fahrenheit (this.value).ToString ("0 [癋]")' this.fntText' (Brush)this.blackBrush' layoutRectangle' this.strfmtText); " is 143.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.Transparent)' new RectangleF (0.0f' 0.0f' (float)this.Width' (float)this.Height)); " is 137.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "		this.pointCenter = new PointF (this.rectBackgroundImg.Left + this.rectBackgroundImg.Width / 2f' this.rectBackgroundImg.Top + this.rectBackgroundImg.Height / 2f); " is 161.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "		this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f); " is 189.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "		this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0))); " is 256.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "		this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal); " is 181.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 175.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height); " is 239.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height); " is 239.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height); " is 245.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5)); " is 169.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5)); " is 202.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 173.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height); " is 242.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height); " is 242.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height); " is 248.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 186.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10); " is 192.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16); " is 186.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16); " is 187.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 175.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10); " is 192.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16); " is 192.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16); " is 193.
Long Statement,SemtechLib.Controls,NumericUpDownEx,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\NumericUpDownEx.cs,GetPrivateField,The length of the statement  "	return (Control)this.GetType ().GetField (name' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy).GetValue ((object)this); " is 152.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The length of the statement  "		Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4); " is 146.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The length of the statement  "		Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1); " is 165.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawRecess,The length of the statement  "	LinearGradientBrush linearGradientBrush = new LinearGradientBrush (recessRect' ControlPaint.Dark (this.backgroudColor)' ControlPaint.LightLight (this.backgroudColor)' this.GetLightAngle (50f)); " is 193.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawEdges,The length of the statement  "	this.edgeBrush = new LinearGradientBrush (rect' this.edgeColor1' this.edgeColor2' this.GetLightAngle (this.lightAngle)); " is 120.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The length of the statement  "		pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset)); " is 187.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The length of the statement  "		pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset)); " is 187.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,BuildGraphicsPath,The length of the statement  "	this.AddShape (this.bpath' new Rectangle (buttonRect.X - 1' buttonRect.Y - 1' buttonRect.Width + 2' buttonRect.Height + 2)); " is 124.
Long Statement,SemtechLib.Controls.HexBoxCtrl,BuiltInContextMenu,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\BuiltInContextMenu.cs,CheckBuiltInContextMenu,The length of the statement  "		this._cutToolStripMenuItem = new ToolStripMenuItem (this.CutMenuItemTextInternal' this.CutMenuItemImage' new EventHandler (this.CutMenuItem_Click)); " is 148.
Long Statement,SemtechLib.Controls.HexBoxCtrl,BuiltInContextMenu,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\BuiltInContextMenu.cs,CheckBuiltInContextMenu,The length of the statement  "		this._copyToolStripMenuItem = new ToolStripMenuItem (this.CopyMenuItemTextInternal' this.CopyMenuItemImage' new EventHandler (this.CopyMenuItem_Click)); " is 152.
Long Statement,SemtechLib.Controls.HexBoxCtrl,BuiltInContextMenu,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\BuiltInContextMenu.cs,CheckBuiltInContextMenu,The length of the statement  "		this._pasteToolStripMenuItem = new ToolStripMenuItem (this.PasteMenuItemTextInternal' this.PasteMenuItemImage' new EventHandler (this.PasteMenuItem_Click)); " is 156.
Long Statement,SemtechLib.Controls.HexBoxCtrl,BuiltInContextMenu,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\BuiltInContextMenu.cs,CheckBuiltInContextMenu,The length of the statement  "		this._selectAllToolStripMenuItem = new ToolStripMenuItem (this.SelectAllMenuItemTextInternal' this.SelectAllMenuItemImage' new EventHandler (this.SelectAllMenuItem_Click)); " is 172.
Long Statement,SemtechLib.Controls.HexBoxCtrl,MemoryDataBlock,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\MemoryDataBlock.cs,InsertBytes,The length of the statement  "		Array.Copy ((Array)this._data' position' (Array)numArray' position + data.LongLength' this._data.LongLength - position); " is 120.
Long Statement,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,WriteByte,The length of the statement  "				fileDataBlock3 = new FileDataBlock (fileDataBlock1.FileOffset + index - blockOffset + 1L' fileDataBlock1.Length - (index - blockOffset + 1L)); " is 142.
Long Statement,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,InsertBytes,The length of the statement  "				fileDataBlock3 = new FileDataBlock (fileDataBlock1.FileOffset + index - blockOffset' fileDataBlock1.Length - (index - blockOffset)); " is 132.
Long Statement,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,DeleteBytes,The length of the statement  "		for (DataBlock block = this.GetDataBlock (index' out num2); (num > 0L) && (block != null); block = (num > 0L) ? nextBlock : null) { " is 131.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateScrollSize,The length of the statement  "	if (this.VScrollBarVisible && this._byteProvider != null && (this._byteProvider.Length > 0L && this._iHexMaxHBytes != 0)) { " is 123.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateScrollSize,The length of the statement  "		long val2 = Math.Max (0L' (long)Math.Ceiling ((double)(this._byteProvider.Length + 1L) / (double)this._iHexMaxHBytes - (double)this._iHexMaxVBytes)); " is 149.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,ToScrollPos,The length of the statement  "	return (int)Math.Min (this._scrollVmax' (long)(int)Math.Max (this._scrollVmin' (long)(int)Math.Floor ((double)num1 / 100.0 * num2))); " is 133.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,ScrollByteIntoView,The length of the statement  "		this.PerformScrollThumpPosition ((long)Math.Floor ((double)index / (double)this._iHexMaxHBytes) - (long)(this._iHexMaxVBytes - 1)); " is 131.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,GetHexBytePositionInfo,The length of the statement  "	long index = Math.Min (this._byteProvider.Length' this._startByte + (long)(this._iHexMaxHBytes * ((int)num2 + 1) - this._iHexMaxHBytes) + (long)(num3 / 3 + 1) - 1L); " is 165.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,GetStringBytePositionInfo,The length of the statement  "	long index = Math.Min (this._byteProvider.Length' this._startByte + (long)(this._iHexMaxHBytes * ((int)((float)(p.Y - this._recStringView.Y) / this._charSize.Height) + 1) - this._iHexMaxHBytes) + (long)((int)num + 1) - 1L); " is 223.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,CanCut,The length of the statement  "	return !this.ReadOnly && this.Enabled && (this._byteProvider != null && this._selectionLength >= 1L) && this._byteProvider.SupportsDeleteBytes (); " is 146.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,CanPaste,The length of the statement  "	if (this.ReadOnly || !this.Enabled || (this._byteProvider == null || !this._byteProvider.SupportsInsertBytes ()) || !this._byteProvider.SupportsDeleteBytes () && this._selectionLength > 0L) " is 189.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,OnPaintBackground,The length of the statement  "			Rectangle contentRectangle = visualStyleRenderer.GetBackgroundContentRectangle ((IDeviceContext)e.Graphics' this.ClientRectangle); " is 130.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintLineInfo,The length of the statement  "		string s = 8 - str.Length <= -1 ? new string ('~'' (int)this.lineInfoDigits) : new string ('0'' (int)this.lineInfoDigits - str.Length) + str; " is 141.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHex,The length of the statement  "		if (index >= this._bytePos && index <= this._bytePos + this._selectionLength - 1L && this._selectionLength != 0L && flag) " is 121.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHexAndStringView,The length of the statement  "		bool flag3 = index >= this._bytePos && index <= this._bytePos + this._selectionLength - 1L && this._selectionLength != 0L; " is 122.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "				Rectangle rec = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)byteStringPointF2.X - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height); " is 208.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "				Rectangle rec1 = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)(this._recStringView.X + num1) - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height); " is 220.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle rec2 = new Rectangle (this._recStringView.X' (int)((double)byteStringPointF1.Y + (double)this._charSize.Height)' this._recStringView.Width' (int)((double)this._charSize.Height * (double)(num2 - 1))); " is 209.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "				Rectangle rec3 = new Rectangle (this._recStringView.X' (int)byteStringPointF2.Y' (int)((double)byteStringPointF2.X - (double)this._recStringView.X + (double)this._charSize.Width)' (int)this._charSize.Height); " is 208.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "			Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height); " is 190.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "			Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height); " is 201.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "				Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1))); " is 227.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "			Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height); " is 188.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentByteSign,The length of the statement  "	Graphics.FromImage ((Image)bitmap).FillRectangle ((Brush)new SolidBrush (this._shadowSelectionColor)' 0' 0' rec.Width' rec.Height); " is 131.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		this._recLineInfo = new Rectangle (this._recContent.X + num1' this._recContent.Y' (int)((double)this._charSize.Width * (double)((int)this.lineInfoDigits + 2))' this._recContent.Height); " is 185.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "	this._recHex = new Rectangle (this._recLineInfo.X + this._recLineInfo.Width' this._recLineInfo.Y' this._recContent.Width - this._recLineInfo.Width' this._recContent.Height); " is 173.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		this._recHex.Width = (int)Math.Floor ((double)this._iHexMaxHBytes * (double)this._charSize.Width * 3.0 + 2.0 * (double)this._charSize.Width); " is 141.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "	this._recStringView = !this._stringViewVisible ? Rectangle.Empty : new Rectangle (this._recHex.X + this._recHex.Width' this._recHex.Y' (int)((double)this._charSize.Width * (double)this._iHexMaxHBytes)' this._recHex.Height); " is 223.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,GetBytePointF,The length of the statement  "	return new PointF (3f * this._charSize.Width * (float)gp.X + (float)this._recHex.X' (float)(gp.Y + 1) * this._charSize.Height - this._charSize.Height + (float)this._recHex.Y); " is 175.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,GetByteStringPointF,The length of the statement  "	return new PointF (this._charSize.Width * (float)gp.X + (float)this._recStringView.X' (float)(gp.Y + 1) * this._charSize.Height - this._charSize.Height + (float)this._recStringView.Y); " is 184.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "			leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2)); " is 121.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y)); " is 170.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' num7' workingArea.Width / num4' point13.Y - num7)); " is 166.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "			e.Graphics.DrawRectangle (penLine' (float)(workingArea.Location.X + (num5 * (workingArea.Width / num4)))' (float)num7' (float)(workingArea.Width / num4)' 0.1f); " is 160.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "	if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) { " is 163.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "		Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50)); " is 129.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "					e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height)); " is 198.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The length of the statement  "	grphToolTip.SetToolTip (checkBoxHand' "Move:\r\n\r\n-Left Mouse Button Click on the zone you want to move and move the mouse."); " is 128.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The length of the statement  "	grphToolTip.SetToolTip (checkBoxZoomOut' "ZoomOut:\r\n\r\nSelect the button and then each time the graphic is clicked it will zoom out."); " is 138.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The length of the statement  "	grphToolTip.SetToolTip (checkBoxZoomIn' "ZoomIn:\r\n\r\nDraw a rectangle with the Left Mouse button on the graphic zone to zoom"); " is 130.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateScrollSize,The conditional expression  "this.VScrollBarVisible && this._byteProvider != null && (this._byteProvider.Length > 0L && this._iHexMaxHBytes != 0)"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,CreateCaret,The conditional expression  "this._byteProvider == null || this._keyInterpreter == null || (this._caretVisible || !this.Focused)"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,CanPaste,The conditional expression  "this.ReadOnly || !this.Enabled || (this._byteProvider == null || !this._byteProvider.SupportsInsertBytes ()) || !this._byteProvider.SupportsDeleteBytes () && this._selectionLength > 0L"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHex,The conditional expression  "index >= this._bytePos && index <= this._bytePos + this._selectionLength - 1L && this._selectionLength != 0L && flag"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The conditional expression  "this._keyInterpreter == null || !this.Focused || (this._bytePos == -1L || !this.Enabled)"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentByteSign,The conditional expression  "rec.Top < 0 || rec.Left < 0 || (rec.Width <= 0 || rec.Height <= 0)"  is complex.
Complex Conditional,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The conditional expression  "((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))"  is complex.
Empty Catch Block,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The method has an empty catch block.
Empty Catch Block,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The method has an empty catch block.
Empty Catch Block,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The method has an empty catch block.
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20) {  	m.Result = IntPtr.Zero;  }  else {  	base.WndProc (ref m);  	if (m.Msg != 8270)  		return;  	Fusionbird.FusionToolkit.NativeMethods.NMHDR nmhdr = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (nmhdr.code != -12)  		return;  	Marshal.StructureToPtr ((object)nmhdr' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  		e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  		InvokePaintBackground (Parent' e);  		InvokePaint (Parent' e);  		SolidBrush solidBrush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  		solidBrush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		IntPtr num = new IntPtr (48);  		m.Result = num;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else {  		if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  			return;  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  			OnDrawTicks (nmcustomdraw.hdc);  		IntPtr num = new IntPtr (4);  		m.Result = num;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg != 8270)  	return;  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmhdr.code != -12)  	return;  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  	e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  	InvokePaintBackground (Parent' e);  	InvokePaint (Parent' e);  	SolidBrush solidBrush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  	solidBrush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	IntPtr num = new IntPtr (48);  	m.Result = num;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  	e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  	InvokePaintBackground (Parent' e);  	InvokePaint (Parent' e);  	SolidBrush solidBrush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  	solidBrush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	IntPtr num = new IntPtr (48);  	m.Result = num;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  	e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  	InvokePaintBackground (Parent' e);  	InvokePaint (Parent' e);  	SolidBrush solidBrush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  	solidBrush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	IntPtr num = new IntPtr (48);  	m.Result = num;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  	e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  	InvokePaintBackground (Parent' e);  	InvokePaint (Parent' e);  	SolidBrush solidBrush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  	solidBrush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	IntPtr num = new IntPtr (48);  	m.Result = num;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  	e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  	InvokePaintBackground (Parent' e);  	InvokePaint (Parent' e);  	SolidBrush solidBrush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  	solidBrush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	IntPtr num = new IntPtr (48);  	m.Result = num;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' Bounds);  	e.Graphics.TranslateTransform ((float)-Left' (float)-Top);  	InvokePaintBackground (Parent' e);  	InvokePaint (Parent' e);  	SolidBrush solidBrush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle ((Brush)solidBrush' Bounds);  	solidBrush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	IntPtr num = new IntPtr (48);  	m.Result = num;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else {  	if (nmcustomdraw.dwDrawStage != Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT)  		return;  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  		OnDrawTicks (nmcustomdraw.hdc);  	IntPtr num = new IntPtr (4);  	m.Result = num;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  	ThumbBounds = nmcustomdraw.rc.ToRectangle ();  	ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  	OnDrawTicks (nmcustomdraw.hdc);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  	ThumbBounds = nmcustomdraw.rc.ToRectangle ();  	ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  	OnDrawTicks (nmcustomdraw.hdc);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  	ThumbBounds = nmcustomdraw.rc.ToRectangle ();  	ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  	OnDrawTicks (nmcustomdraw.hdc);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  	ThumbBounds = nmcustomdraw.rc.ToRectangle ();  	ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  	OnDrawTicks (nmcustomdraw.hdc);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: ThumbState = !Enabled ? 5 : (nmcustomdraw.uItemState != Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED ? 1 : 3);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1)  	OnDrawTicks (nmcustomdraw.hdc);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawHorizontalTicks,The following statement contains a magic number: rectangleF1.Offset (0.0f' (float)(ThumbBounds.Height + 6));  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawHorizontalTicks,The following statement contains a magic number: rectangleF2.Offset (0.0f' (float)(ThumbBounds.Height + 6));  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawVerticalTicks,The following statement contains a magic number: rectangleF1.Offset ((float)(ThumbBounds.Width + 6)' 0.0f);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawVerticalTicks,The following statement contains a magic number: rectangleF2.Offset ((float)(ThumbBounds.Width + 6)' 0.0f);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: if (ThumbState == 3 || !Enabled)  	ControlPaint.DrawButton (g' ThumbBounds' ButtonState.All);  else  	g.Clear (SystemColors.Control);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: points1 [2].Offset (1' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: points1 [3].Offset (-1' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: points1 [4].Offset (-1' 0);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: points1 [5] = points1 [0];  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: if (ThumbState == 3 || !Enabled)  	ControlPaint.DrawButton (g' ThumbBounds' ButtonState.All);  else  	g.Clear (SystemColors.Control);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: points1 [2].Offset (-1' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: points1 [3].Offset (-1' -1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: points1 [4].Offset (0' -1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: points1 [5] = points1 [0];  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: if (ThumbState == 3 || !Enabled)  	ControlPaint.DrawButton (g' ThumbBounds' ButtonState.All);  else  	g.Clear (SystemColors.Control);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: points1 [2].Offset (0' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: points1 [3].Offset (-1' 0);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: points1 [4].Offset (0' -1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: points1 [5] = points1 [0];  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: if (ThumbState == 3 || !Enabled)  	ControlPaint.DrawButton (g' ThumbBounds' ButtonState.All);  else  	g.Clear (SystemColors.Control);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: points1 [2].Offset (0' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: points1 [3].Offset (-1' 0);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: points1 [4].Offset (-1' -1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: points1 [5] = points1 [0];  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawTicks,The following statement contains a magic number: if ((OwnerDrawParts & TrackBarOwnerDrawParts.Ticks) == TrackBarOwnerDrawParts.Ticks && !DesignMode) {  	TrackBarDrawItemEventArgs e = new TrackBarDrawItemEventArgs (graphics' ClientRectangle' (TrackBarItemState)ThumbState);  	if (DrawTicks != null)  		DrawTicks ((object)this' e);  }  else {  	if (TickStyle == TickStyle.None || ThumbBounds.Equals ((object)Rectangle.Empty))  		return;  	Color color = Color.Black;  	if (VisualStyleRenderer.IsSupported)  		color = new VisualStyleRenderer ("TRACKBAR"' 9' ThumbState).GetColor (ColorProperty.TextColor);  	if (Orientation == Orientation.Horizontal)  		DrawHorizontalTicks (graphics' color);  	else  		DrawVerticalTicks (graphics' color);  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawTicks,The following statement contains a magic number: if (VisualStyleRenderer.IsSupported)  	color = new VisualStyleRenderer ("TRACKBAR"' 9' ThumbState).GetColor (ColorProperty.TextColor);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawTicks,The following statement contains a magic number: color = new VisualStyleRenderer ("TRACKBAR"' 9' ThumbState).GetColor (ColorProperty.TextColor);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following statement contains a magic number: if ((OwnerDrawParts & TrackBarOwnerDrawParts.Thumb) == TrackBarOwnerDrawParts.Thumb && !DesignMode) {  	TrackBarDrawItemEventArgs e = new TrackBarDrawItemEventArgs (graphics' ThumbBounds' (TrackBarItemState)ThumbState);  	if (DrawThumb != null)  		DrawThumb ((object)this' e);  }  else {  	Fusionbird.FusionToolkit.NativeMethods.TrackBarParts trackBarParts = Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB;  	if (ThumbBounds.Equals ((object)Rectangle.Empty))  		return;  	switch (TickStyle) {  	case TickStyle.None:  	case TickStyle.BottomRight:  		trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM;  		break;  	case TickStyle.TopLeft:  		trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP;  		break;  	case TickStyle.Both:  		trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBVERT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB;  		break;  	}  	if (VisualStyleRenderer.IsSupported) {  		new VisualStyleRenderer ("TRACKBAR"' (int)trackBarParts' ThumbState).DrawBackground ((IDeviceContext)graphics' ThumbBounds);  		graphics.ResetClip ();  		graphics.Dispose ();  		return;  	}  	else {  		switch (trackBarParts) {  		case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM:  			DrawPointerDown (graphics);  			break;  		case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP:  			DrawPointerUp (graphics);  			break;  		case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT:  			DrawPointerLeft (graphics);  			break;  		case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT:  			DrawPointerRight (graphics);  			break;  		default:  			if (ThumbState == 3 || !Enabled)  				ControlPaint.DrawButton (graphics' ThumbBounds' ButtonState.All);  			else  				graphics.FillRectangle (SystemBrushes.Control' ThumbBounds);  			ControlPaint.DrawBorder3D (graphics' ThumbBounds' Border3DStyle.Raised);  			break;  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following statement contains a magic number: if (VisualStyleRenderer.IsSupported) {  	new VisualStyleRenderer ("TRACKBAR"' (int)trackBarParts' ThumbState).DrawBackground ((IDeviceContext)graphics' ThumbBounds);  	graphics.ResetClip ();  	graphics.Dispose ();  	return;  }  else {  	switch (trackBarParts) {  	case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM:  		DrawPointerDown (graphics);  		break;  	case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP:  		DrawPointerUp (graphics);  		break;  	case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT:  		DrawPointerLeft (graphics);  		break;  	case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT:  		DrawPointerRight (graphics);  		break;  	default:  		if (ThumbState == 3 || !Enabled)  			ControlPaint.DrawButton (graphics' ThumbBounds' ButtonState.All);  		else  			graphics.FillRectangle (SystemBrushes.Control' ThumbBounds);  		ControlPaint.DrawBorder3D (graphics' ThumbBounds' Border3DStyle.Raised);  		break;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following statement contains a magic number: switch (trackBarParts) {  case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM:  	DrawPointerDown (graphics);  	break;  case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP:  	DrawPointerUp (graphics);  	break;  case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT:  	DrawPointerLeft (graphics);  	break;  case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT:  	DrawPointerRight (graphics);  	break;  default:  	if (ThumbState == 3 || !Enabled)  		ControlPaint.DrawButton (graphics' ThumbBounds' ButtonState.All);  	else  		graphics.FillRectangle (SystemBrushes.Control' ThumbBounds);  	ControlPaint.DrawBorder3D (graphics' ThumbBounds' Border3DStyle.Raised);  	break;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following statement contains a magic number: if (ThumbState == 3 || !Enabled)  	ControlPaint.DrawButton (graphics' ThumbBounds' ButtonState.All);  else  	graphics.FillRectangle (SystemBrushes.Control' ThumbBounds);  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: if (Math.Abs (d) >= 1.0) {  	switch ((int)Math.Floor (d1)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ("F3");  	case 3:  	case 4:  	case 5:  		unit = "k" + unit;  		return (d / 1000.0).ToString ("F3");  	case 6:  	case 7:  	case 8:  		unit = "M" + unit;  		return (d / 1000000.0).ToString ("F3");  	case 9:  	case 10:  	case 11:  		unit = "G" + unit;  		return (d / 1000000000.0).ToString ("F3");  	case 12:  	case 13:  	case 14:  		unit = "T" + unit;  		return (d / 1000000000000.0).ToString ("F3");  	case 15:  	case 16:  	case 17:  		unit = "P" + unit;  		return (d / 1E+15).ToString ("F3");  	case 18:  	case 19:  	case 20:  		unit = "E" + unit;  		return (d / 1E+18).ToString ("F3");  	case 21:  	case 22:  	case 23:  		unit = "Z" + unit;  		return (d / 1E+21).ToString ("F3");  	default:  		unit = "Y" + unit;  		return (d / 1E+24).ToString ("F3");  	}  }  else {  	if (Math.Abs (d) <= 0.0)  		return "0.000";  	switch ((int)Math.Floor (d1)) {  	case -21:  	case -20:  	case -19:  		unit = "z" + unit;  		return (d * 1E+15).ToString ("F3");  	case -18:  	case -17:  	case -16:  		unit = "a" + unit;  		return (d * 1E+15).ToString ("F3");  	case -15:  	case -14:  	case -13:  		unit = "f" + unit;  		return (d * 1E+15).ToString ("F3");  	case -12:  	case -11:  	case -10:  		unit = "p" + unit;  		return (d * 1000000000000.0).ToString ("F3");  	case -9:  	case -8:  	case -7:  		unit = "n" + unit;  		return (d * 1000000000.0).ToString ("F3");  	case -6:  	case -5:  	case -4:  		unit = "μ" + unit;  		return (d * 1000000.0).ToString ("F3");  	case -3:  	case -2:  	case -1:  		unit = "m" + unit;  		return (d * 1000.0).ToString ("F3");  	default:  		unit = "y" + unit;  		return (d * 1E+15).ToString ("F3");  	}  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case 0:  case 1:  case 2:  	return d.ToString ("F3");  case 3:  case 4:  case 5:  	unit = "k" + unit;  	return (d / 1000.0).ToString ("F3");  case 6:  case 7:  case 8:  	unit = "M" + unit;  	return (d / 1000000.0).ToString ("F3");  case 9:  case 10:  case 11:  	unit = "G" + unit;  	return (d / 1000000000.0).ToString ("F3");  case 12:  case 13:  case 14:  	unit = "T" + unit;  	return (d / 1000000000000.0).ToString ("F3");  case 15:  case 16:  case 17:  	unit = "P" + unit;  	return (d / 1E+15).ToString ("F3");  case 18:  case 19:  case 20:  	unit = "E" + unit;  	return (d / 1E+18).ToString ("F3");  case 21:  case 22:  case 23:  	unit = "Z" + unit;  	return (d / 1E+21).ToString ("F3");  default:  	unit = "Y" + unit;  	return (d / 1E+24).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d / 1000.0).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d / 1000000.0).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d / 1000000000.0).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d / 1000000000000.0).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d / 1E+15).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d / 1E+18).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d / 1E+21).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d / 1E+24).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: switch ((int)Math.Floor (d1)) {  case -21:  case -20:  case -19:  	unit = "z" + unit;  	return (d * 1E+15).ToString ("F3");  case -18:  case -17:  case -16:  	unit = "a" + unit;  	return (d * 1E+15).ToString ("F3");  case -15:  case -14:  case -13:  	unit = "f" + unit;  	return (d * 1E+15).ToString ("F3");  case -12:  case -11:  case -10:  	unit = "p" + unit;  	return (d * 1000000000000.0).ToString ("F3");  case -9:  case -8:  case -7:  	unit = "n" + unit;  	return (d * 1000000000.0).ToString ("F3");  case -6:  case -5:  case -4:  	unit = "μ" + unit;  	return (d * 1000000.0).ToString ("F3");  case -3:  case -2:  case -1:  	unit = "m" + unit;  	return (d * 1000.0).ToString ("F3");  default:  	unit = "y" + unit;  	return (d * 1E+15).ToString ("F3");  }  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d * 1E+15).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d * 1E+15).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d * 1E+15).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d * 1000000000000.0).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d * 1000000000.0).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d * 1000000.0).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d * 1000.0).ToString ("F3");  
Magic Number,SemtechLib.General,EngineeringNotation,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\EngineeringNotation.cs,ToString,The following statement contains a magic number: return (d * 1E+15).ToString ("F3");  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 6) {  		if (str.Length > 4)  			goto label_5;  	}  	return (object)Convert.ToUInt16 (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 6) {  		if (str.Length > 4)  			goto label_5;  	}  	return (object)Convert.ToUInt16 (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 6) {  		if (str.Length > 4)  			goto label_5;  	}  	return (object)Convert.ToUInt16 (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: if (!str.StartsWith ("0x"' true' info) || str.Length > 6) {  	if (str.Length > 4)  		goto label_5;  }  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: if (!str.StartsWith ("0x"' true' info) || str.Length > 6) {  	if (str.Length > 4)  		goto label_5;  }  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: if (str.Length > 4)  	goto label_5;  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: return (object)Convert.ToUInt16 (str' 16);  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 10) {  		if (str.Length > 8)  			goto label_5;  	}  	return (object)Convert.ToUInt32 (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 10) {  		if (str.Length > 8)  			goto label_5;  	}  	return (object)Convert.ToUInt32 (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 10) {  		if (str.Length > 8)  			goto label_5;  	}  	return (object)Convert.ToUInt32 (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: if (!str.StartsWith ("0x"' true' info) || str.Length > 10) {  	if (str.Length > 8)  		goto label_5;  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: if (!str.StartsWith ("0x"' true' info) || str.Length > 10) {  	if (str.Length > 8)  		goto label_5;  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: if (str.Length > 8)  	goto label_5;  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: return (object)Convert.ToUInt32 (str' 16);  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 4) {  		if (str.Length > 2)  			goto label_5;  	}  	return (object)Convert.ToByte (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 4) {  		if (str.Length > 2)  			goto label_5;  	}  	return (object)Convert.ToByte (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if (!str.StartsWith ("0x"' true' info) || str.Length > 4) {  		if (str.Length > 2)  			goto label_5;  	}  	return (object)Convert.ToByte (str' 16);  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: if (!str.StartsWith ("0x"' true' info) || str.Length > 4) {  	if (str.Length > 2)  		goto label_5;  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: if (!str.StartsWith ("0x"' true' info) || str.Length > 4) {  	if (str.Length > 2)  		goto label_5;  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: if (str.Length > 2)  	goto label_5;  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: return (object)Convert.ToByte (str' 16);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,Led,The following statement contains a magic number: this.Size = new Size (15' 15);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,Led,The following statement contains a magic number: this.Size = new Size (15' 15);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	float angle = (float)(50.0 - 15.0 * (1.0 - (double)this.Width / (double)this.Height));  	Rectangle rect1 = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush linearGradientBrush1 = new LinearGradientBrush (rect1' ControlPaint.Dark (this.Parent.BackColor)' ControlPaint.LightLight (this.Parent.BackColor)' angle);  	linearGradientBrush1.Blend = new Blend () {  		Positions = new float[6] {  			0.0f'  			0.2f'  			0.4f'  			0.6f'  			0.8f'  			1f  		}'  		Factors = new float[6] {  			0.2f'  			0.2f'  			0.4f'  			0.4f'  			1f'  			1f  		}  	};  	Rectangle rect2 = rect1;  	rect2.Inflate (1' 1);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush1' rect2);  	if (this.Enabled) {  		if (this.Checked)  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		else  			e.Graphics.FillEllipse ((Brush)new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	}  	LinearGradientBrush linearGradientBrush2 = new LinearGradientBrush (rect1' Color.FromArgb (150' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.Transparent' angle);  	LinearGradientBrush linearGradientBrush3 = new LinearGradientBrush (rect1' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' Color.FromArgb (100' (int)byte.MaxValue' (int)byte.MaxValue' (int)byte.MaxValue)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	linearGradientBrush2.Blend = blend;  	linearGradientBrush3.Blend = blend;  	e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  	e.Graphics.FillEllipse ((Brush)linearGradientBrush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: linearGradientBrush1.Blend = new Blend () {  	Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	}'  	Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	}  };  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: linearGradientBrush1.Blend = new Blend () {  	Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	}'  	Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	}  };  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: blend.Positions = new float[6] {  	0.0f'  	0.2f'  	0.4f'  	0.6f'  	0.8f'  	1f  };  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: blend.Factors = new float[6] {  	0.2f'  	0.2f'  	0.4f'  	0.4f'  	1f'  	1f  };  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse ((Brush)linearGradientBrush3' this.PosFromAlignment.X + this.itemSize.Width * 13 / 100' this.PosFromAlignment.Y + this.itemSize.Height * 13 / 100' this.itemSize.Width * 40 / 100' this.itemSize.Height * 40 / 100);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,TempCtrl,The following statement contains a magic number: this.Size = new Size (75' 253);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,TempCtrl,The following statement contains a magic number: this.Size = new Size (75' 253);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,TempCtrl,The following statement contains a magic number: this.colorOutline = Color.FromArgb (64' 0' 0);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((int)offset < -255 || (int)offset > (int)byte.MaxValue)  	return color;  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,Fahrenheit2Celsius,The following statement contains a magic number: return (fahrenheit - 32.0) / 1.8;  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,Fahrenheit2Celsius,The following statement contains a magic number: return (fahrenheit - 32.0) / 1.8;  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,Celsius2Fahrenheit,The following statement contains a magic number: return celsius * 1.8 + 32.0;  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,Celsius2Fahrenheit,The following statement contains a magic number: return celsius * 1.8 + 32.0;  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawValue,The following statement contains a magic number: if ((double)num > 0.0) {  	float height = this.rectCylinder.Height / 100f * (float)((double)num / (double)this.fRange * 100.0);  	RectangleF ctrl = new RectangleF (this.rectCylinder.Left' this.rectCylinder.Bottom - height' this.rectCylinder.Width' height);  	this.FillCylinder (g' ctrl' (Brush)this.bulbBrush' this.colorOutline);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: while ((double)top1 <= (double)this.rectCylinder.Bottom) {  	pt1 = new Point ((int)this.rectCylinder.Right + 3' (int)top1);  	pt2 = new Point ((int)this.rectCylinder.Right + 10' (int)top1);  	g.DrawLine (this.scalePen' pt1' pt2);  	point = new PointF (this.rectCylinder.Right + 30f' top1);  	g.DrawString (num3.ToString ()' font' (Brush)this.blackBrush' point' format);  	num3 -= (long)this.largeTicFreq;  	top1 += num2;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: while ((double)top1 <= (double)this.rectCylinder.Bottom) {  	pt1 = new Point ((int)this.rectCylinder.Right + 3' (int)top1);  	pt2 = new Point ((int)this.rectCylinder.Right + 10' (int)top1);  	g.DrawLine (this.scalePen' pt1' pt2);  	point = new PointF (this.rectCylinder.Right + 30f' top1);  	g.DrawString (num3.ToString ()' font' (Brush)this.blackBrush' point' format);  	num3 -= (long)this.largeTicFreq;  	top1 += num2;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: pt1 = new Point ((int)this.rectCylinder.Right + 3' (int)top1);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: pt2 = new Point ((int)this.rectCylinder.Right + 10' (int)top1);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: while ((double)top2 <= (double)this.rectCylinder.Bottom) {  	pt1 = new Point ((int)this.rectCylinder.Right + 3' (int)top2);  	pt2 = new Point ((int)this.rectCylinder.Right + 8' (int)top2);  	g.DrawLine (this.scalePen' pt1' pt2);  	top2 += num4;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: while ((double)top2 <= (double)this.rectCylinder.Bottom) {  	pt1 = new Point ((int)this.rectCylinder.Right + 3' (int)top2);  	pt2 = new Point ((int)this.rectCylinder.Right + 8' (int)top2);  	g.DrawLine (this.scalePen' pt1' pt2);  	top2 += num4;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: pt1 = new Point ((int)this.rectCylinder.Right + 3' (int)top2);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: pt2 = new Point ((int)this.rectCylinder.Right + 8' (int)top2);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (num6 != 0)  	num6 = 10 - num6;  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: num6 = 10 - num6;  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: while ((double)bottom1 >= (double)this.rectCylinder.Top) {  	pt1 = new Point ((int)this.rectCylinder.Left - 10' (int)bottom1);  	pt2 = new Point ((int)this.rectCylinder.Left - 3' (int)bottom1);  	g.DrawLine (this.scalePen' pt1' pt2);  	point = new PointF (this.rectCylinder.Left - 15f' bottom1);  	g.DrawString (num3.ToString ()' font' (Brush)this.blackBrush' point' format);  	num3 += (long)this.largeTicFreq;  	bottom1 -= num9;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: while ((double)bottom1 >= (double)this.rectCylinder.Top) {  	pt1 = new Point ((int)this.rectCylinder.Left - 10' (int)bottom1);  	pt2 = new Point ((int)this.rectCylinder.Left - 3' (int)bottom1);  	g.DrawLine (this.scalePen' pt1' pt2);  	point = new PointF (this.rectCylinder.Left - 15f' bottom1);  	g.DrawString (num3.ToString ()' font' (Brush)this.blackBrush' point' format);  	num3 += (long)this.largeTicFreq;  	bottom1 -= num9;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: pt1 = new Point ((int)this.rectCylinder.Left - 10' (int)bottom1);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: pt2 = new Point ((int)this.rectCylinder.Left - 3' (int)bottom1);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: while ((double)bottom2 >= (double)this.rectCylinder.Top) {  	pt1 = new Point ((int)this.rectCylinder.Left - 8' (int)bottom2);  	pt2 = new Point ((int)this.rectCylinder.Left - 3' (int)bottom2);  	g.DrawLine (this.scalePen' pt1' pt2);  	bottom2 -= num10;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: while ((double)bottom2 >= (double)this.rectCylinder.Top) {  	pt1 = new Point ((int)this.rectCylinder.Left - 8' (int)bottom2);  	pt2 = new Point ((int)this.rectCylinder.Left - 3' (int)bottom2);  	g.DrawLine (this.scalePen' pt1' pt2);  	bottom2 -= num10;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: pt1 = new Point ((int)this.rectCylinder.Left - 8' (int)bottom2);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: pt2 = new Point ((int)this.rectCylinder.Left - 3' (int)bottom2);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if (this.backgroundImg == null || this.requiresRedraw) {  	this.backgroundImg = (Image)new Bitmap (this.Width' this.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0.0f' 0.0f' (float)this.Width' (float)this.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + this.rectBackgroundImg.Width / 2f' this.rectBackgroundImg.Top + this.rectBackgroundImg.Height / 2f);  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  	if (!this.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (64' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' this.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' this.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' this.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if (this.backgroundImg == null || this.requiresRedraw) {  	this.backgroundImg = (Image)new Bitmap (this.Width' this.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0.0f' 0.0f' (float)this.Width' (float)this.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + this.rectBackgroundImg.Width / 2f' this.rectBackgroundImg.Top + this.rectBackgroundImg.Height / 2f);  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  	if (!this.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (64' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' this.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' this.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' this.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if (this.backgroundImg == null || this.requiresRedraw) {  	this.backgroundImg = (Image)new Bitmap (this.Width' this.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0.0f' 0.0f' (float)this.Width' (float)this.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + this.rectBackgroundImg.Width / 2f' this.rectBackgroundImg.Top + this.rectBackgroundImg.Height / 2f);  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  	if (!this.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (64' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' this.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' this.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' this.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if (this.backgroundImg == null || this.requiresRedraw) {  	this.backgroundImg = (Image)new Bitmap (this.Width' this.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0.0f' 0.0f' (float)this.Width' (float)this.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + this.rectBackgroundImg.Width / 2f' this.rectBackgroundImg.Top + this.rectBackgroundImg.Height / 2f);  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  	if (!this.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (64' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' this.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' this.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' this.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if (this.backgroundImg == null || this.requiresRedraw) {  	this.backgroundImg = (Image)new Bitmap (this.Width' this.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0.0f' 0.0f' (float)this.Width' (float)this.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + this.rectBackgroundImg.Width / 2f' this.rectBackgroundImg.Top + this.rectBackgroundImg.Height / 2f);  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  	if (!this.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (64' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' this.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' this.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' this.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if (this.backgroundImg == null || this.requiresRedraw) {  	this.backgroundImg = (Image)new Bitmap (this.Width' this.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0.0f' 0.0f' (float)this.Width' (float)this.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + this.rectBackgroundImg.Width / 2f' this.rectBackgroundImg.Top + this.rectBackgroundImg.Height / 2f);  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  	if (!this.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (64' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' this.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' this.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' this.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if (this.backgroundImg == null || this.requiresRedraw) {  	this.backgroundImg = (Image)new Bitmap (this.Width' this.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0.0f' 0.0f' (float)this.Width' (float)this.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + this.rectBackgroundImg.Width / 2f' this.rectBackgroundImg.Top + this.rectBackgroundImg.Height / 2f);  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  	if (!this.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (64' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' this.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' this.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' this.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - (float)((double)this.fTmpWidth * 2.0 + 25.0)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.rectCylinder = new RectangleF (this.pointCenter.X - this.fTmpWidth / 2f' this.rectBackgroundImg.Top + (this.drawTics ? 25f : 10f)' this.fTmpWidth' (float)((double)this.rectBulb.Top - (double)this.rectBackgroundImg.Top - (this.drawTics ? 20.0 : 5.0)));  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if (!this.Enabled) {  	this.colorFore = SystemColors.ControlDark;  	this.colorScale = SystemColors.GrayText;  	this.colorScaleText = SystemColors.GrayText;  	this.colorOutline = SystemColors.ControlDark;  }  else {  	this.colorFore = this.ForeColor;  	this.colorScale = Color.FromArgb (0' 0' 0);  	this.colorScaleText = Color.FromArgb (0' 0' 0);  	this.colorOutline = Color.FromArgb (64' 0' 0);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.colorOutline = Color.FromArgb (64' 0' 0);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' (short)55)' this.OffsetColor (this.colorFore' (short)-55)' LinearGradientMode.Horizontal);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,Jumper,The following statement contains a magic number: this.Size = new Size (19' 35);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,Jumper,The following statement contains a magic number: this.Size = new Size (19' 35);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	this.itemSize.Width = this.Size.Width * 66 / 100;  	this.itemSize.Height = this.Size.Height * 92 / 100;  	if (this.Enabled) {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	}  	else {  		Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: this.itemSize.Width = this.Size.Width * 66 / 100;  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: this.itemSize.Width = this.Size.Width * 66 / 100;  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: this.itemSize.Height = this.Size.Height * 92 / 100;  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: this.itemSize.Height = this.Size.Height * 92 / 100;  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  }  else {  	Size size = new Size (this.itemSize.Width * 40 / 100' this.itemSize.Width * 40 / 100);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveCaption)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (this.ForeColor)' this.PosFromAlignment.X' this.PosFromAlignment.Y + 2 * (this.itemSize.Height / 5)' this.itemSize.Width' 3 * (this.itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 4 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + this.itemSize.Height / 2 - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (SystemColors.InactiveBorder)' this.PosFromAlignment.X + this.itemSize.Width / 2 - size.Width / 2' this.PosFromAlignment.Y + 3 * (this.itemSize.Height / 4) - size.Height / 2' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,SwitchBtn,The following statement contains a magic number: this.Width = 15;  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,SwitchBtn,The following statement contains a magic number: this.Height = 25;  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,SwitchBtn,The following statement contains a magic number: this.itemSize.Width = 10;  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,SwitchBtn,The following statement contains a magic number: this.itemSize.Height = 23;  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (this.Enabled) {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  		if (this.Checked)  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  		else  			e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Enabled) {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb ((int)byte.MaxValue' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  else {  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  	if (this.Checked)  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  	else  		e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (0' 0' 0))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (150' 150' 150))' this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 5' this.itemSize.Width - 4' this.itemSize.Height - 10);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked)  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  else  	e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 6' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle ((Brush)new SolidBrush (Color.FromArgb (100' 100' 100))' this.PosFromAlignment.X + 3' this.PosFromAlignment.Y + 10' this.itemSize.Width - 6' this.itemSize.Height - 16);  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,PushBtn,The following statement contains a magic number: this.Size = new Size (23' 23);  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,PushBtn,The following statement contains a magic number: this.Size = new Size (23' 23);  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint ((object)this' e);  }  else {  	base.OnPaint (e);  	if (!this.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics graphics = e.Graphics;  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = this.Size.Width * 80 / 100;  	this.itemSize.Height = this.Size.Height * 80 / 100;  	int num = this.Size.Width * 10 / 100;  	Rectangle rectangle = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' this.itemSize.Width + num * 2 - 1' this.itemSize.Height + num * 2 - 1);  	this.edgeWidth = this.GetEdgeWidth (rectangle);  	this.FillBackground (graphics' rect);  	graphics.DrawRectangle (new Pen ((Brush)new SolidBrush (this.borderColor))' rect);  	if (this.RecessDepth > 0)  		this.DrawRecess (ref graphics' ref rectangle);  	this.DrawEdges (graphics' ref rectangle);  	this.ShrinkShape (ref graphics' ref rectangle' this.edgeWidth);  	this.DrawButton (graphics' rectangle);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: this.itemSize.Width = this.Size.Width * 80 / 100;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: this.itemSize.Width = this.Size.Width * 80 / 100;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: this.itemSize.Height = this.Size.Height * 80 / 100;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: this.itemSize.Height = this.Size.Height * 80 / 100;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawRecess,The following statement contains a magic number: linearGradientBrush.Blend = new Blend () {  	Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	}'  	Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	}  };  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawRecess,The following statement contains a magic number: linearGradientBrush.Blend = new Blend () {  	Positions = new float[6] {  		0.0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	}'  	Factors = new float[6] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	}  };  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawEdges,The following statement contains a magic number: this.edgeBlend.Positions = new float[6] {  	0.0f'  	0.2f'  	0.4f'  	0.6f'  	0.8f'  	1f  };  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawEdges,The following statement contains a magic number: this.edgeBlend.Factors = new float[6] {  	0.0f'  	0.0f'  	0.2f'  	0.4f'  	1f'  	1f  };  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: if (this.bevelHeight > 0) {  	buttonRect.Inflate (1' 1);  	pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset));  	pathGradientBrush.CenterColor = this.cColor;  	this.FillShape (g' (object)pathGradientBrush' buttonRect);  	this.ShrinkShape (ref g' ref buttonRect' this.bevelHeight);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: if (this.bevelHeight > 0) {  	buttonRect.Inflate (1' 1);  	pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset));  	pathGradientBrush.CenterColor = this.cColor;  	this.FillShape (g' (object)pathGradientBrush' buttonRect);  	this.ShrinkShape (ref g' ref buttonRect' this.bevelHeight);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: if (this.dome) {  	pathGradientBrush.CenterColor = this.cColor;  	pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset));  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: if (this.dome) {  	pathGradientBrush.CenterColor = this.cColor;  	pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset));  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: pathGradientBrush.CenterPoint = new PointF ((float)(buttonRect.X + buttonRect.Width / 8 + this.buttonPressOffset)' (float)(buttonRect.Y + buttonRect.Height / 8 + this.buttonPressOffset));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,BuildGraphicsPath,The following statement contains a magic number: this.AddShape (this.bpath' new Rectangle (buttonRect.X - 1' buttonRect.Y - 1' buttonRect.Width + 2' buttonRect.Height + 2));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,BuildGraphicsPath,The following statement contains a magic number: this.AddShape (this.bpath' new Rectangle (buttonRect.X - 1' buttonRect.Y - 1' buttonRect.Width + 2' buttonRect.Height + 2));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawFocus,The following statement contains a magic number: rect.Inflate (-2' -2);  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawFocus,The following statement contains a magic number: rect.Inflate (-2' -2);  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawInnerBevel,The following statement contains a magic number: blend.Positions = new float[6] {  	0.0f'  	0.2f'  	0.4f'  	0.6f'  	0.8f'  	1f  };  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,DrawInnerBevel,The following statement contains a magic number: blend.Factors = new float[6] {  	0.2f'  	0.4f'  	0.6f'  	0.6f'  	1f'  	1f  };  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,GetEdgeWidth,The following statement contains a magic number: return rect.Width < 50 | rect.Height < 50 ? 1 : 2;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,GetEdgeWidth,The following statement contains a magic number: return rect.Width < 50 | rect.Height < 50 ? 1 : 2;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\PushBtn.cs,GetEdgeWidth,The following statement contains a magic number: return rect.Width < 50 | rect.Height < 50 ? 1 : 2;  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DefaultByteCharConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DefaultByteCharConverter.cs,ToChar,The following statement contains a magic number: if ((int)b <= 31 || (int)b > 126 && (int)b < 160)  	return '.';  else  	return (char)b;  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DefaultByteCharConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DefaultByteCharConverter.cs,ToChar,The following statement contains a magic number: if ((int)b <= 31 || (int)b > 126 && (int)b < 160)  	return '.';  else  	return (char)b;  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DefaultByteCharConverter,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DefaultByteCharConverter.cs,ToChar,The following statement contains a magic number: if ((int)b <= 31 || (int)b > 126 && (int)b < 160)  	return '.';  else  	return (char)b;  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,ApplyChanges,The following statement contains a magic number: for (DataBlock dataBlock = this._dataMap.FirstBlock; dataBlock != null; dataBlock = dataBlock.NextBlock) {  	MemoryDataBlock memoryDataBlock = dataBlock as MemoryDataBlock;  	if (memoryDataBlock != null) {  		this._stream.Position = num;  		int offset = 0;  		while ((long)offset < memoryDataBlock.Length) {  			this._stream.Write (memoryDataBlock.Data' offset' (int)Math.Min (4096L' memoryDataBlock.Length - (long)offset));  			offset += 4096;  		}  	}  	num += dataBlock.Length;  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,ApplyChanges,The following statement contains a magic number: if (memoryDataBlock != null) {  	this._stream.Position = num;  	int offset = 0;  	while ((long)offset < memoryDataBlock.Length) {  		this._stream.Write (memoryDataBlock.Data' offset' (int)Math.Min (4096L' memoryDataBlock.Length - (long)offset));  		offset += 4096;  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,ApplyChanges,The following statement contains a magic number: while ((long)offset < memoryDataBlock.Length) {  	this._stream.Write (memoryDataBlock.Data' offset' (int)Math.Min (4096L' memoryDataBlock.Length - (long)offset));  	offset += 4096;  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,ApplyChanges,The following statement contains a magic number: offset += 4096;  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,MoveFileBlock,The following statement contains a magic number: if (fileBlock.FileOffset > dataOffset) {  	byte[] buffer = new byte[4096];  	long num1 = 0L;  	while (num1 < fileBlock.Length) {  		long num2 = fileBlock.FileOffset + num1;  		int count = (int)Math.Min ((long)buffer.Length' fileBlock.Length - num1);  		this._stream.Position = num2;  		this._stream.Read (buffer' 0' count);  		this._stream.Position = dataOffset + num1;  		this._stream.Write (buffer' 0' count);  		num1 += (long)buffer.Length;  	}  }  else {  	byte[] buffer = new byte[4096];  	long num = 0L;  	while (num < fileBlock.Length) {  		int count = (int)Math.Min ((long)buffer.Length' fileBlock.Length - num);  		this._stream.Position = fileBlock.FileOffset + fileBlock.Length - num - (long)count;  		this._stream.Read (buffer' 0' count);  		this._stream.Position = dataOffset + fileBlock.Length - num - (long)count;  		this._stream.Write (buffer' 0' count);  		num += (long)buffer.Length;  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,MoveFileBlock,The following statement contains a magic number: if (fileBlock.FileOffset > dataOffset) {  	byte[] buffer = new byte[4096];  	long num1 = 0L;  	while (num1 < fileBlock.Length) {  		long num2 = fileBlock.FileOffset + num1;  		int count = (int)Math.Min ((long)buffer.Length' fileBlock.Length - num1);  		this._stream.Position = num2;  		this._stream.Read (buffer' 0' count);  		this._stream.Position = dataOffset + num1;  		this._stream.Write (buffer' 0' count);  		num1 += (long)buffer.Length;  	}  }  else {  	byte[] buffer = new byte[4096];  	long num = 0L;  	while (num < fileBlock.Length) {  		int count = (int)Math.Min ((long)buffer.Length' fileBlock.Length - num);  		this._stream.Position = fileBlock.FileOffset + fileBlock.Length - num - (long)count;  		this._stream.Read (buffer' 0' count);  		this._stream.Position = dataOffset + fileBlock.Length - num - (long)count;  		this._stream.Write (buffer' 0' count);  		num += (long)buffer.Length;  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,HexBox,The following statement contains a magic number: this._thumbTrackTimer.Interval = 50;  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,_vScrollBar_Scroll,The following statement contains a magic number: switch (e.Type) {  case ScrollEventType.SmallDecrement:  	this.PerformScrollLineUp ();  	break;  case ScrollEventType.SmallIncrement:  	this.PerformScrollLineDown ();  	break;  case ScrollEventType.LargeDecrement:  	this.PerformScrollPageUp ();  	break;  case ScrollEventType.LargeIncrement:  	this.PerformScrollPageDown ();  	break;  case ScrollEventType.ThumbPosition:  	this.PerformScrollThumpPosition (this.FromScrollPos (e.NewValue));  	break;  case ScrollEventType.ThumbTrack:  	if (this._thumbTrackTimer.Enabled)  		this._thumbTrackTimer.Enabled = false;  	int tickCount = Environment.TickCount;  	if (tickCount - this._lastThumbtrack > 50) {  		this.PerformScrollThumbTrack ((object)null' (EventArgs)null);  		this._lastThumbtrack = tickCount;  		break;  	}  	else {  		this._thumbTrackPosition = this.FromScrollPos (e.NewValue);  		this._thumbTrackTimer.Enabled = true;  		break;  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,_vScrollBar_Scroll,The following statement contains a magic number: if (tickCount - this._lastThumbtrack > 50) {  	this.PerformScrollThumbTrack ((object)null' (EventArgs)null);  	this._lastThumbtrack = tickCount;  	break;  }  else {  	this._thumbTrackPosition = this.FromScrollPos (e.NewValue);  	this._thumbTrackTimer.Enabled = true;  	break;  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,ToScrollPos,The following statement contains a magic number: return (int)Math.Min (this._scrollVmax' (long)(int)Math.Max (this._scrollVmin' (long)(int)Math.Floor ((double)num1 / 100.0 * num2)));  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,FromScrollPos,The following statement contains a magic number: if (this._scrollVmax < (long)num)  	return (long)value;  else  	return (long)(int)Math.Floor ((double)this._scrollVmax / 100.0 * ((double)value / (double)num * 100.0));  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,FromScrollPos,The following statement contains a magic number: if (this._scrollVmax < (long)num)  	return (long)value;  else  	return (long)(int)Math.Floor ((double)this._scrollVmax / 100.0 * ((double)value / (double)num * 100.0));  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,FromScrollPos,The following statement contains a magic number: return (long)(int)Math.Floor ((double)this._scrollVmax / 100.0 * ((double)value / (double)num * 100.0));  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,FromScrollPos,The following statement contains a magic number: return (long)(int)Math.Floor ((double)this._scrollVmax / 100.0 * ((double)value / (double)num * 100.0));  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PreProcessMessage,The following statement contains a magic number: switch (m.Msg) {  case 256:  	return this._keyInterpreter.PreProcessWmKeyDown (ref m);  case 257:  	return this._keyInterpreter.PreProcessWmKeyUp (ref m);  case 258:  	return this._keyInterpreter.PreProcessWmChar (ref m);  default:  	return base.PreProcessMessage (ref m);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PreProcessMessage,The following statement contains a magic number: switch (m.Msg) {  case 256:  	return this._keyInterpreter.PreProcessWmKeyDown (ref m);  case 257:  	return this._keyInterpreter.PreProcessWmKeyUp (ref m);  case 258:  	return this._keyInterpreter.PreProcessWmChar (ref m);  default:  	return base.PreProcessMessage (ref m);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PreProcessMessage,The following statement contains a magic number: switch (m.Msg) {  case 256:  	return this._keyInterpreter.PreProcessWmKeyDown (ref m);  case 257:  	return this._keyInterpreter.PreProcessWmKeyUp (ref m);  case 258:  	return this._keyInterpreter.PreProcessWmChar (ref m);  default:  	return base.PreProcessMessage (ref m);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (int y = 0; y < num1; ++y) {  	long num2 = startByte + (long)(this._iHexMaxHBytes * y) + this._lineInfoOffset;  	PointF bytePointF = this.GetBytePointF (new Point (0' y));  	string str = num2.ToString (this._hexStringFormat' (IFormatProvider)Thread.CurrentThread.CurrentCulture);  	string s = 8 - str.Length <= -1 ? new string ('~'' (int)this.lineInfoDigits) : new string ('0'' (int)this.lineInfoDigits - str.Length) + str;  	g.DrawString (s' this.Font' brush' new PointF ((float)this._recLineInfo.X' bytePointF.Y)' this._stringFormat);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._keyInterpreter.GetType () == typeof(HexBox.KeyInterpreter)) {  	if (this._selectionLength == 0L) {  		PointF byteStringPointF = this.GetByteStringPointF (this.GetGridBytePoint (this._bytePos - this._startByte));  		Size size = new Size ((int)this._charSize.Width' (int)this._charSize.Height);  		Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' size.Width' size.Height);  		if (!rec.IntersectsWith (this._recStringView))  			return;  		rec.Intersect (this._recStringView);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		int num1 = (int)((double)this._recStringView.Width - (double)this._charSize.Width);  		Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF byteStringPointF1 = this.GetByteStringPointF (gridBytePoint1);  		Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  		PointF byteStringPointF2 = this.GetByteStringPointF (gridBytePoint2);  		int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  		if (num2 == 0) {  			Rectangle rec = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)byteStringPointF2.X - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec.IntersectsWith (this._recStringView))  				return;  			rec.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec);  		}  		else {  			Rectangle rec1 = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)(this._recStringView.X + num1) - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (rec1.IntersectsWith (this._recStringView)) {  				rec1.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rec1);  			}  			if (num2 > 1) {  				Rectangle rec2 = new Rectangle (this._recStringView.X' (int)((double)byteStringPointF1.Y + (double)this._charSize.Height)' this._recStringView.Width' (int)((double)this._charSize.Height * (double)(num2 - 1)));  				if (rec2.IntersectsWith (this._recStringView)) {  					rec2.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rec2);  				}  			}  			Rectangle rec3 = new Rectangle (this._recStringView.X' (int)byteStringPointF2.Y' (int)((double)byteStringPointF2.X - (double)this._recStringView.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec3.IntersectsWith (this._recStringView))  				return;  			rec3.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec3);  		}  	}  }  else if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._keyInterpreter.GetType () == typeof(HexBox.KeyInterpreter)) {  	if (this._selectionLength == 0L) {  		PointF byteStringPointF = this.GetByteStringPointF (this.GetGridBytePoint (this._bytePos - this._startByte));  		Size size = new Size ((int)this._charSize.Width' (int)this._charSize.Height);  		Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' size.Width' size.Height);  		if (!rec.IntersectsWith (this._recStringView))  			return;  		rec.Intersect (this._recStringView);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		int num1 = (int)((double)this._recStringView.Width - (double)this._charSize.Width);  		Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF byteStringPointF1 = this.GetByteStringPointF (gridBytePoint1);  		Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  		PointF byteStringPointF2 = this.GetByteStringPointF (gridBytePoint2);  		int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  		if (num2 == 0) {  			Rectangle rec = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)byteStringPointF2.X - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec.IntersectsWith (this._recStringView))  				return;  			rec.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec);  		}  		else {  			Rectangle rec1 = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)(this._recStringView.X + num1) - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (rec1.IntersectsWith (this._recStringView)) {  				rec1.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rec1);  			}  			if (num2 > 1) {  				Rectangle rec2 = new Rectangle (this._recStringView.X' (int)((double)byteStringPointF1.Y + (double)this._charSize.Height)' this._recStringView.Width' (int)((double)this._charSize.Height * (double)(num2 - 1)));  				if (rec2.IntersectsWith (this._recStringView)) {  					rec2.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rec2);  				}  			}  			Rectangle rec3 = new Rectangle (this._recStringView.X' (int)byteStringPointF2.Y' (int)((double)byteStringPointF2.X - (double)this._recStringView.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec3.IntersectsWith (this._recStringView))  				return;  			rec3.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec3);  		}  	}  }  else if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._keyInterpreter.GetType () == typeof(HexBox.KeyInterpreter)) {  	if (this._selectionLength == 0L) {  		PointF byteStringPointF = this.GetByteStringPointF (this.GetGridBytePoint (this._bytePos - this._startByte));  		Size size = new Size ((int)this._charSize.Width' (int)this._charSize.Height);  		Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' size.Width' size.Height);  		if (!rec.IntersectsWith (this._recStringView))  			return;  		rec.Intersect (this._recStringView);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		int num1 = (int)((double)this._recStringView.Width - (double)this._charSize.Width);  		Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF byteStringPointF1 = this.GetByteStringPointF (gridBytePoint1);  		Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  		PointF byteStringPointF2 = this.GetByteStringPointF (gridBytePoint2);  		int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  		if (num2 == 0) {  			Rectangle rec = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)byteStringPointF2.X - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec.IntersectsWith (this._recStringView))  				return;  			rec.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec);  		}  		else {  			Rectangle rec1 = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)(this._recStringView.X + num1) - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (rec1.IntersectsWith (this._recStringView)) {  				rec1.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rec1);  			}  			if (num2 > 1) {  				Rectangle rec2 = new Rectangle (this._recStringView.X' (int)((double)byteStringPointF1.Y + (double)this._charSize.Height)' this._recStringView.Width' (int)((double)this._charSize.Height * (double)(num2 - 1)));  				if (rec2.IntersectsWith (this._recStringView)) {  					rec2.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rec2);  				}  			}  			Rectangle rec3 = new Rectangle (this._recStringView.X' (int)byteStringPointF2.Y' (int)((double)byteStringPointF2.X - (double)this._recStringView.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec3.IntersectsWith (this._recStringView))  				return;  			rec3.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec3);  		}  	}  }  else if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._keyInterpreter.GetType () == typeof(HexBox.KeyInterpreter)) {  	if (this._selectionLength == 0L) {  		PointF byteStringPointF = this.GetByteStringPointF (this.GetGridBytePoint (this._bytePos - this._startByte));  		Size size = new Size ((int)this._charSize.Width' (int)this._charSize.Height);  		Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' size.Width' size.Height);  		if (!rec.IntersectsWith (this._recStringView))  			return;  		rec.Intersect (this._recStringView);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		int num1 = (int)((double)this._recStringView.Width - (double)this._charSize.Width);  		Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF byteStringPointF1 = this.GetByteStringPointF (gridBytePoint1);  		Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  		PointF byteStringPointF2 = this.GetByteStringPointF (gridBytePoint2);  		int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  		if (num2 == 0) {  			Rectangle rec = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)byteStringPointF2.X - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec.IntersectsWith (this._recStringView))  				return;  			rec.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec);  		}  		else {  			Rectangle rec1 = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)(this._recStringView.X + num1) - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (rec1.IntersectsWith (this._recStringView)) {  				rec1.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rec1);  			}  			if (num2 > 1) {  				Rectangle rec2 = new Rectangle (this._recStringView.X' (int)((double)byteStringPointF1.Y + (double)this._charSize.Height)' this._recStringView.Width' (int)((double)this._charSize.Height * (double)(num2 - 1)));  				if (rec2.IntersectsWith (this._recStringView)) {  					rec2.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rec2);  				}  			}  			Rectangle rec3 = new Rectangle (this._recStringView.X' (int)byteStringPointF2.Y' (int)((double)byteStringPointF2.X - (double)this._recStringView.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec3.IntersectsWith (this._recStringView))  				return;  			rec3.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec3);  		}  	}  }  else if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._keyInterpreter.GetType () == typeof(HexBox.KeyInterpreter)) {  	if (this._selectionLength == 0L) {  		PointF byteStringPointF = this.GetByteStringPointF (this.GetGridBytePoint (this._bytePos - this._startByte));  		Size size = new Size ((int)this._charSize.Width' (int)this._charSize.Height);  		Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' size.Width' size.Height);  		if (!rec.IntersectsWith (this._recStringView))  			return;  		rec.Intersect (this._recStringView);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		int num1 = (int)((double)this._recStringView.Width - (double)this._charSize.Width);  		Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF byteStringPointF1 = this.GetByteStringPointF (gridBytePoint1);  		Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  		PointF byteStringPointF2 = this.GetByteStringPointF (gridBytePoint2);  		int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  		if (num2 == 0) {  			Rectangle rec = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)byteStringPointF2.X - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec.IntersectsWith (this._recStringView))  				return;  			rec.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec);  		}  		else {  			Rectangle rec1 = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)(this._recStringView.X + num1) - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (rec1.IntersectsWith (this._recStringView)) {  				rec1.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rec1);  			}  			if (num2 > 1) {  				Rectangle rec2 = new Rectangle (this._recStringView.X' (int)((double)byteStringPointF1.Y + (double)this._charSize.Height)' this._recStringView.Width' (int)((double)this._charSize.Height * (double)(num2 - 1)));  				if (rec2.IntersectsWith (this._recStringView)) {  					rec2.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rec2);  				}  			}  			Rectangle rec3 = new Rectangle (this._recStringView.X' (int)byteStringPointF2.Y' (int)((double)byteStringPointF2.X - (double)this._recStringView.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec3.IntersectsWith (this._recStringView))  				return;  			rec3.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec3);  		}  	}  }  else if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._keyInterpreter.GetType () == typeof(HexBox.KeyInterpreter)) {  	if (this._selectionLength == 0L) {  		PointF byteStringPointF = this.GetByteStringPointF (this.GetGridBytePoint (this._bytePos - this._startByte));  		Size size = new Size ((int)this._charSize.Width' (int)this._charSize.Height);  		Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' size.Width' size.Height);  		if (!rec.IntersectsWith (this._recStringView))  			return;  		rec.Intersect (this._recStringView);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		int num1 = (int)((double)this._recStringView.Width - (double)this._charSize.Width);  		Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF byteStringPointF1 = this.GetByteStringPointF (gridBytePoint1);  		Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  		PointF byteStringPointF2 = this.GetByteStringPointF (gridBytePoint2);  		int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  		if (num2 == 0) {  			Rectangle rec = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)byteStringPointF2.X - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec.IntersectsWith (this._recStringView))  				return;  			rec.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec);  		}  		else {  			Rectangle rec1 = new Rectangle ((int)byteStringPointF1.X' (int)byteStringPointF1.Y' (int)((double)(this._recStringView.X + num1) - (double)byteStringPointF1.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (rec1.IntersectsWith (this._recStringView)) {  				rec1.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rec1);  			}  			if (num2 > 1) {  				Rectangle rec2 = new Rectangle (this._recStringView.X' (int)((double)byteStringPointF1.Y + (double)this._charSize.Height)' this._recStringView.Width' (int)((double)this._charSize.Height * (double)(num2 - 1)));  				if (rec2.IntersectsWith (this._recStringView)) {  					rec2.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rec2);  				}  			}  			Rectangle rec3 = new Rectangle (this._recStringView.X' (int)byteStringPointF2.Y' (int)((double)byteStringPointF2.X - (double)this._recStringView.X + (double)this._charSize.Width)' (int)this._charSize.Height);  			if (!rec3.IntersectsWith (this._recStringView))  				return;  			rec3.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rec3);  		}  	}  }  else if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._selectionLength == 0L) {  	PointF bytePointF = this.GetBytePointF (this.GetGridBytePoint (this._bytePos - this._startByte));  	Size size = new Size ((int)this._charSize.Width * 2' (int)this._charSize.Height);  	Rectangle rec = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size.Width' size.Height);  	this.PaintCurrentByteSign (g' rec);  }  else {  	int num1 = (int)((double)this._recHex.Width - (double)this._charSize.Width * 5.0);  	Point gridBytePoint1 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF1 = this.GetBytePointF (gridBytePoint1);  	Point gridBytePoint2 = this.GetGridBytePoint (this._bytePos - this._startByte + this._selectionLength - 1L);  	PointF bytePointF2 = this.GetBytePointF (gridBytePoint2);  	int num2 = gridBytePoint2.Y - gridBytePoint1.Y;  	if (num2 == 0) {  		Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec.IntersectsWith (this._recHex))  			return;  		rec.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec);  	}  	else {  		Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (rec1.IntersectsWith (this._recHex)) {  			rec1.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec1);  		}  		if (num2 > 1) {  			Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  			if (rec2.IntersectsWith (this._recHex)) {  				rec2.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rec2);  			}  		}  		Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  		if (!rec3.IntersectsWith (this._recHex))  			return;  		rec3.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec3);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (num2 == 0) {  	Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (!rec.IntersectsWith (this._recHex))  		return;  	rec.Intersect (this._recHex);  	this.PaintCurrentByteSign (g' rec);  }  else {  	Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (rec1.IntersectsWith (this._recHex)) {  		rec1.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec1);  	}  	if (num2 > 1) {  		Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  		if (rec2.IntersectsWith (this._recHex)) {  			rec2.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec2);  		}  	}  	Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (!rec3.IntersectsWith (this._recHex))  		return;  	rec3.Intersect (this._recHex);  	this.PaintCurrentByteSign (g' rec3);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (num2 == 0) {  	Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (!rec.IntersectsWith (this._recHex))  		return;  	rec.Intersect (this._recHex);  	this.PaintCurrentByteSign (g' rec);  }  else {  	Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (rec1.IntersectsWith (this._recHex)) {  		rec1.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec1);  	}  	if (num2 > 1) {  		Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  		if (rec2.IntersectsWith (this._recHex)) {  			rec2.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec2);  		}  	}  	Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (!rec3.IntersectsWith (this._recHex))  		return;  	rec3.Intersect (this._recHex);  	this.PaintCurrentByteSign (g' rec3);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (num2 == 0) {  	Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (!rec.IntersectsWith (this._recHex))  		return;  	rec.Intersect (this._recHex);  	this.PaintCurrentByteSign (g' rec);  }  else {  	Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (rec1.IntersectsWith (this._recHex)) {  		rec1.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec1);  	}  	if (num2 > 1) {  		Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  		if (rec2.IntersectsWith (this._recHex)) {  			rec2.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec2);  		}  	}  	Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (!rec3.IntersectsWith (this._recHex))  		return;  	rec3.Intersect (this._recHex);  	this.PaintCurrentByteSign (g' rec3);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (num2 == 0) {  	Rectangle rec = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)bytePointF2.X - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (!rec.IntersectsWith (this._recHex))  		return;  	rec.Intersect (this._recHex);  	this.PaintCurrentByteSign (g' rec);  }  else {  	Rectangle rec1 = new Rectangle ((int)bytePointF1.X' (int)bytePointF1.Y' (int)((double)(this._recHex.X + num1) - (double)bytePointF1.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (rec1.IntersectsWith (this._recHex)) {  		rec1.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec1);  	}  	if (num2 > 1) {  		Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  		if (rec2.IntersectsWith (this._recHex)) {  			rec2.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rec2);  		}  	}  	Rectangle rec3 = new Rectangle (this._recHex.X' (int)bytePointF2.Y' (int)((double)bytePointF2.X - (double)this._recHex.X + (double)this._charSize.Width * 2.0)' (int)this._charSize.Height);  	if (!rec3.IntersectsWith (this._recHex))  		return;  	rec3.Intersect (this._recHex);  	this.PaintCurrentByteSign (g' rec3);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (num2 > 1) {  	Rectangle rec2 = new Rectangle (this._recHex.X' (int)((double)bytePointF1.Y + (double)this._charSize.Height)' (int)((double)num1 + (double)this._charSize.Width * 2.0)' (int)((double)this._charSize.Height * (double)(num2 - 1)));  	if (rec2.IntersectsWith (this._recHex)) {  		rec2.Intersect (this._recHex);  		this.PaintCurrentByteSign (g' rec2);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (this._lineInfoVisible) {  	this._recLineInfo = new Rectangle (this._recContent.X + num1' this._recContent.Y' (int)((double)this._charSize.Width * (double)((int)this.lineInfoDigits + 2))' this._recContent.Height);  }  else {  	this._recLineInfo = Rectangle.Empty;  	this._recLineInfo.X = num1;  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: this._recLineInfo = new Rectangle (this._recContent.X + num1' this._recContent.Y' (int)((double)this._charSize.Width * (double)((int)this.lineInfoDigits + 2))' this._recContent.Height);  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (this.UseFixedBytesPerLine) {  	this.SetHorizontalByteCount (this._bytesPerLine);  	this._recHex.Width = (int)Math.Floor ((double)this._iHexMaxHBytes * (double)this._charSize.Width * 3.0 + 2.0 * (double)this._charSize.Width);  }  else {  	int num2 = (int)Math.Floor ((double)this._recHex.Width / (double)this._charSize.Width);  	if (num2 > 1)  		this.SetHorizontalByteCount ((int)Math.Floor ((double)num2 / 3.0));  	else  		this.SetHorizontalByteCount (num2);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (this.UseFixedBytesPerLine) {  	this.SetHorizontalByteCount (this._bytesPerLine);  	this._recHex.Width = (int)Math.Floor ((double)this._iHexMaxHBytes * (double)this._charSize.Width * 3.0 + 2.0 * (double)this._charSize.Width);  }  else {  	int num2 = (int)Math.Floor ((double)this._recHex.Width / (double)this._charSize.Width);  	if (num2 > 1)  		this.SetHorizontalByteCount ((int)Math.Floor ((double)num2 / 3.0));  	else  		this.SetHorizontalByteCount (num2);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (this.UseFixedBytesPerLine) {  	this.SetHorizontalByteCount (this._bytesPerLine);  	this._recHex.Width = (int)Math.Floor ((double)this._iHexMaxHBytes * (double)this._charSize.Width * 3.0 + 2.0 * (double)this._charSize.Width);  }  else {  	int num2 = (int)Math.Floor ((double)this._recHex.Width / (double)this._charSize.Width);  	if (num2 > 1)  		this.SetHorizontalByteCount ((int)Math.Floor ((double)num2 / 3.0));  	else  		this.SetHorizontalByteCount (num2);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: this._recHex.Width = (int)Math.Floor ((double)this._iHexMaxHBytes * (double)this._charSize.Width * 3.0 + 2.0 * (double)this._charSize.Width);  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: this._recHex.Width = (int)Math.Floor ((double)this._iHexMaxHBytes * (double)this._charSize.Width * 3.0 + 2.0 * (double)this._charSize.Width);  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (num2 > 1)  	this.SetHorizontalByteCount ((int)Math.Floor ((double)num2 / 3.0));  else  	this.SetHorizontalByteCount (num2);  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: this.SetHorizontalByteCount ((int)Math.Floor ((double)num2 / 3.0));  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,OnMouseWheel,The following statement contains a magic number: this.PerformScrollLines (-(e.Delta * SystemInformation.MouseWheelScrollLines / 120));  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: History = 100;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: UpdateRate = 100;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: ScaleX.Max = 100;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: ScaleY.Max = 100;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: GridX.Minor = 5;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: GridY.Minor = 5;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (!frameFit) {  	if (ScaleY.Show) {  		labelScaleYmax.Text = FrameZoom.Top.ToString ();  		labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  		Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  		labelScaleYmax.Location = point;  		textBoxScaleYmax.Location = point;  		point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  		labelScaleYmin.Location = point;  		textBoxScaleYmin.Location = point;  		labelScaleYmax.Visible = true;  		labelScaleYmin.Visible = true;  		leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  	}  	else {  		labelScaleYmax.Visible = false;  		labelScaleYmin.Visible = false;  		leftOffset = 0;  	}  	if (ScaleX.Show) {  	}  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (!frameFit) {  	if (ScaleY.Show) {  		labelScaleYmax.Text = FrameZoom.Top.ToString ();  		labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  		Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  		labelScaleYmax.Location = point;  		textBoxScaleYmax.Location = point;  		point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  		labelScaleYmin.Location = point;  		textBoxScaleYmin.Location = point;  		labelScaleYmax.Visible = true;  		labelScaleYmin.Visible = true;  		leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  	}  	else {  		labelScaleYmax.Visible = false;  		labelScaleYmin.Visible = false;  		leftOffset = 0;  	}  	if (ScaleX.Show) {  	}  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (!frameFit) {  	if (ScaleY.Show) {  		labelScaleYmax.Text = FrameZoom.Top.ToString ();  		labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  		Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  		labelScaleYmax.Location = point;  		textBoxScaleYmax.Location = point;  		point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  		labelScaleYmin.Location = point;  		textBoxScaleYmin.Location = point;  		labelScaleYmax.Visible = true;  		labelScaleYmin.Visible = true;  		leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  	}  	else {  		labelScaleYmax.Visible = false;  		labelScaleYmin.Visible = false;  		leftOffset = 0;  	}  	if (ScaleX.Show) {  	}  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (!frameFit) {  	if (ScaleY.Show) {  		labelScaleYmax.Text = FrameZoom.Top.ToString ();  		labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  		Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  		labelScaleYmax.Location = point;  		textBoxScaleYmax.Location = point;  		point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  		labelScaleYmin.Location = point;  		textBoxScaleYmin.Location = point;  		labelScaleYmax.Visible = true;  		labelScaleYmin.Visible = true;  		leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  	}  	else {  		labelScaleYmax.Visible = false;  		labelScaleYmin.Visible = false;  		leftOffset = 0;  	}  	if (ScaleX.Show) {  	}  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (ScaleY.Show) {  	labelScaleYmax.Text = FrameZoom.Top.ToString ();  	labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  	Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  	labelScaleYmax.Location = point;  	textBoxScaleYmax.Location = point;  	point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  	labelScaleYmin.Location = point;  	textBoxScaleYmin.Location = point;  	labelScaleYmax.Visible = true;  	labelScaleYmin.Visible = true;  	leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  	leftOffset = 0;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (ScaleY.Show) {  	labelScaleYmax.Text = FrameZoom.Top.ToString ();  	labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  	Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  	labelScaleYmax.Location = point;  	textBoxScaleYmax.Location = point;  	point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  	labelScaleYmin.Location = point;  	textBoxScaleYmin.Location = point;  	labelScaleYmax.Visible = true;  	labelScaleYmin.Visible = true;  	leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  	leftOffset = 0;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (ScaleY.Show) {  	labelScaleYmax.Text = FrameZoom.Top.ToString ();  	labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  	Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  	labelScaleYmax.Location = point;  	textBoxScaleYmax.Location = point;  	point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  	labelScaleYmin.Location = point;  	textBoxScaleYmin.Location = point;  	labelScaleYmax.Visible = true;  	labelScaleYmin.Visible = true;  	leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  	leftOffset = 0;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (ScaleY.Show) {  	labelScaleYmax.Text = FrameZoom.Top.ToString ();  	labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  	Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  	labelScaleYmax.Location = point;  	textBoxScaleYmax.Location = point;  	point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  	labelScaleYmin.Location = point;  	textBoxScaleYmin.Location = point;  	labelScaleYmax.Visible = true;  	labelScaleYmin.Visible = true;  	leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  	leftOffset = 0;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: point2.X = (workingArea.Left + (workingArea.Width / 2)) - (labelSample.ClientRectangle.Width / 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: point2.X = (workingArea.Left + (workingArea.Width / 2)) - (labelSample.ClientRectangle.Width / 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (GraphData data2 in dataCollection) {  	int num7;  	penLine.Color = data2.Color;  	brushPoint = new SolidBrush (data2.Color);  	List<Point> pointsZoom = GetPointsZoom (data2);  	switch (data2.GraphType) {  	case eGraphType.Dot:  		foreach (Point point3 in pointsZoom) {  			e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  		}  		goto Label_0806;  	case eGraphType.Line:  		for (int j = 0; j < (pointsZoom.Count - 1); j++) {  			e.Graphics.DrawLine (penLine' pointsZoom [j]' pointsZoom [j + 1]);  		}  		goto Label_0806;  	case eGraphType.Bar:  		if (pointsZoom.Count > 0) {  			num7 = workingArea.Bottom - ((workingArea.Height * -FrameZoom.Bottom) / FrameZoom.Height);  			Point point7 = pointsZoom [pointsZoom.Count - 1];  			if (point7.Y >= num7) {  				break;  			}  			Point point9 = pointsZoom [pointsZoom.Count - 1];  			Point point10 = pointsZoom [pointsZoom.Count - 1];  			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y));  		}  		goto Label_0806;  	default:  		goto Label_0806;  	}  	Point point11 = pointsZoom [pointsZoom.Count - 1];  	if (point11.Y > num7) {  		Point point13 = pointsZoom [pointsZoom.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' num7' workingArea.Width / num4' point13.Y - num7));  	}  	else {  		penLine.Color = Color.Blue;  		e.Graphics.DrawRectangle (penLine' (float)(workingArea.Location.X + (num5 * (workingArea.Width / num4)))' (float)num7' (float)(workingArea.Width / num4)' 0.1f);  	}  	Label_0806:  	num5++;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (GraphData data2 in dataCollection) {  	int num7;  	penLine.Color = data2.Color;  	brushPoint = new SolidBrush (data2.Color);  	List<Point> pointsZoom = GetPointsZoom (data2);  	switch (data2.GraphType) {  	case eGraphType.Dot:  		foreach (Point point3 in pointsZoom) {  			e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  		}  		goto Label_0806;  	case eGraphType.Line:  		for (int j = 0; j < (pointsZoom.Count - 1); j++) {  			e.Graphics.DrawLine (penLine' pointsZoom [j]' pointsZoom [j + 1]);  		}  		goto Label_0806;  	case eGraphType.Bar:  		if (pointsZoom.Count > 0) {  			num7 = workingArea.Bottom - ((workingArea.Height * -FrameZoom.Bottom) / FrameZoom.Height);  			Point point7 = pointsZoom [pointsZoom.Count - 1];  			if (point7.Y >= num7) {  				break;  			}  			Point point9 = pointsZoom [pointsZoom.Count - 1];  			Point point10 = pointsZoom [pointsZoom.Count - 1];  			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y));  		}  		goto Label_0806;  	default:  		goto Label_0806;  	}  	Point point11 = pointsZoom [pointsZoom.Count - 1];  	if (point11.Y > num7) {  		Point point13 = pointsZoom [pointsZoom.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' num7' workingArea.Width / num4' point13.Y - num7));  	}  	else {  		penLine.Color = Color.Blue;  		e.Graphics.DrawRectangle (penLine' (float)(workingArea.Location.X + (num5 * (workingArea.Width / num4)))' (float)num7' (float)(workingArea.Width / num4)' 0.1f);  	}  	Label_0806:  	num5++;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: switch (data2.GraphType) {  case eGraphType.Dot:  	foreach (Point point3 in pointsZoom) {  		e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  	}  	goto Label_0806;  case eGraphType.Line:  	for (int j = 0; j < (pointsZoom.Count - 1); j++) {  		e.Graphics.DrawLine (penLine' pointsZoom [j]' pointsZoom [j + 1]);  	}  	goto Label_0806;  case eGraphType.Bar:  	if (pointsZoom.Count > 0) {  		num7 = workingArea.Bottom - ((workingArea.Height * -FrameZoom.Bottom) / FrameZoom.Height);  		Point point7 = pointsZoom [pointsZoom.Count - 1];  		if (point7.Y >= num7) {  			break;  		}  		Point point9 = pointsZoom [pointsZoom.Count - 1];  		Point point10 = pointsZoom [pointsZoom.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y));  	}  	goto Label_0806;  default:  	goto Label_0806;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: switch (data2.GraphType) {  case eGraphType.Dot:  	foreach (Point point3 in pointsZoom) {  		e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  	}  	goto Label_0806;  case eGraphType.Line:  	for (int j = 0; j < (pointsZoom.Count - 1); j++) {  		e.Graphics.DrawLine (penLine' pointsZoom [j]' pointsZoom [j + 1]);  	}  	goto Label_0806;  case eGraphType.Bar:  	if (pointsZoom.Count > 0) {  		num7 = workingArea.Bottom - ((workingArea.Height * -FrameZoom.Bottom) / FrameZoom.Height);  		Point point7 = pointsZoom [pointsZoom.Count - 1];  		if (point7.Y >= num7) {  			break;  		}  		Point point9 = pointsZoom [pointsZoom.Count - 1];  		Point point10 = pointsZoom [pointsZoom.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y));  	}  	goto Label_0806;  default:  	goto Label_0806;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (Point point3 in pointsZoom) {  	e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (Point point3 in pointsZoom) {  	e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (GraphData data3 in dataCollection) {  	penLine.Color = data3.Color;  	brushPoint = new SolidBrush (data3.Color);  	List<Point> points = GetPoints (data3);  	switch (data3.GraphType) {  	case eGraphType.Dot:  		foreach (Point point5 in points) {  			e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  		}  		break;  	case eGraphType.Line:  		for (int k = 0; k < (points.Count - 1); k++) {  			e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  		}  		break;  	case eGraphType.Bar:  		if (points.Count > 0) {  			Point point18 = points [points.Count - 1];  			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  		}  		break;  	}  	num5++;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (GraphData data3 in dataCollection) {  	penLine.Color = data3.Color;  	brushPoint = new SolidBrush (data3.Color);  	List<Point> points = GetPoints (data3);  	switch (data3.GraphType) {  	case eGraphType.Dot:  		foreach (Point point5 in points) {  			e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  		}  		break;  	case eGraphType.Line:  		for (int k = 0; k < (points.Count - 1); k++) {  			e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  		}  		break;  	case eGraphType.Bar:  		if (points.Count > 0) {  			Point point18 = points [points.Count - 1];  			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  		}  		break;  	}  	num5++;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: switch (data3.GraphType) {  case eGraphType.Dot:  	foreach (Point point5 in points) {  		e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  	}  	break;  case eGraphType.Line:  	for (int k = 0; k < (points.Count - 1); k++) {  		e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  	}  	break;  case eGraphType.Bar:  	if (points.Count > 0) {  		Point point18 = points [points.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  	}  	break;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: switch (data3.GraphType) {  case eGraphType.Dot:  	foreach (Point point5 in points) {  		e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  	}  	break;  case eGraphType.Line:  	for (int k = 0; k < (points.Count - 1); k++) {  		e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  	}  	break;  case eGraphType.Bar:  	if (points.Count > 0) {  		Point point18 = points [points.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  	}  	break;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (Point point5 in points) {  	e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (Point point5 in points) {  	e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (Zoom) {  	int x = base.ClientRectangle.Right - (checkBoxAutoScale.Width + 3);  	int y = (base.ClientRectangle.Bottom - base.ClientRectangle.Top) / 2;  	Point point6 = new Point (x' y - (checkBoxAutoScale.Height * 2));  	checkBoxAutoScale.Location = point6;  	point6 = new Point (x' y - checkBoxAutoScale.Height);  	checkBoxZoomIn.Location = point6;  	point6 = new Point (x' y);  	checkBoxZoomOut.Location = point6;  	point6 = new Point (x' y + checkBoxAutoScale.Height);  	checkBoxHand.Location = point6;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (Zoom) {  	int x = base.ClientRectangle.Right - (checkBoxAutoScale.Width + 3);  	int y = (base.ClientRectangle.Bottom - base.ClientRectangle.Top) / 2;  	Point point6 = new Point (x' y - (checkBoxAutoScale.Height * 2));  	checkBoxAutoScale.Location = point6;  	point6 = new Point (x' y - checkBoxAutoScale.Height);  	checkBoxZoomIn.Location = point6;  	point6 = new Point (x' y);  	checkBoxZoomOut.Location = point6;  	point6 = new Point (x' y + checkBoxAutoScale.Height);  	checkBoxHand.Location = point6;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (Zoom) {  	int x = base.ClientRectangle.Right - (checkBoxAutoScale.Width + 3);  	int y = (base.ClientRectangle.Bottom - base.ClientRectangle.Top) / 2;  	Point point6 = new Point (x' y - (checkBoxAutoScale.Height * 2));  	checkBoxAutoScale.Location = point6;  	point6 = new Point (x' y - checkBoxAutoScale.Height);  	checkBoxZoomIn.Location = point6;  	point6 = new Point (x' y);  	checkBoxZoomOut.Location = point6;  	point6 = new Point (x' y + checkBoxAutoScale.Height);  	checkBoxHand.Location = point6;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelScaleYmin.Location = new Point (4' 0x2a);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelScaleYmin.Size = new Size (0x17' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelScaleYmax.Location = new Point (4' 0x1c);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelScaleYmax.Size = new Size (0x1a' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: textBoxScaleYmax.Size = new Size (0x2f' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: textBoxScaleYmax.TabIndex = 2;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: textBoxScaleYmin.Size = new Size (0x2f' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: textBoxScaleYmin.TabIndex = 2;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelSample.Location = new Point (50' 0x80);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelSample.Size = new Size (0x2a' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelSample.TabIndex = 3;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: checkBoxZoomOut.Location = new Point (0x7f' 80);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: if (frequency < 92 || frequency > 6000000)  	throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: if (frequency < 92 || frequency > 6000000)  	throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: clockDivisor = (12000000 / (2 * frequency)) - 1;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: clockDivisor = (12000000 / (2 * frequency)) - 1;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: ftStatus = SetBitMode (0' 2);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: if (Sync2Mpsse ()) {  	txBuffer.Add (0x80);  	txBuffer.Add (PortValue);  	txBuffer.Add (PortDir);  	txBuffer.Add (0x82);  	txBuffer.Add (0);  	txBuffer.Add (0);  	txBuffer.Add (0x86);  	txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  	txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  	txBuffer.Add (0x85);  	isInitialized = SendBytes ();  	readThreadContinue = true;  	readThread = new Thread (new ThreadStart (ReadThread));  	readThread.Start ();  	return isInitialized;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: lock (syncThread) {  	bool flag = false;  	uint rxQueue = 0;  	uint num2 = (bitCount / 8) + (bitCount % 8);  	List<byte> list = new List<byte> ();  	uint numBytesRead = 0;  	uint num4 = 0;  	rxQueue = 0;  	do {  		DateTime now = DateTime.Now;  		do {  			ftStatus = GetRxBytesAvailable (ref rxQueue);  			if (rxQueue == 0)  				Thread.Sleep (0);  			TimeSpan span = (TimeSpan)(DateTime.Now - now);  			flag = span.TotalMilliseconds >= 1000.0;  		}  		while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  		if (rxQueue > 0) {  			byte[] dataBuffer = new byte[rxQueue];  			Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead);  			list.AddRange (dataBuffer);  			num4 += numBytesRead;  		}  	}  	while (((num4 < num2) && (ftStatus == FTDI.FT_STATUS.FT_OK)) && !flag);  	if (!flag && ftStatus == FTDI.FT_STATUS.FT_OK) {  		rxBuffer = list.ToArray ();  		return true;  	}  	rxBuffer = null;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: lock (syncThread) {  	bool flag = false;  	uint rxQueue = 0;  	uint num2 = (bitCount / 8) + (bitCount % 8);  	List<byte> list = new List<byte> ();  	uint numBytesRead = 0;  	uint num4 = 0;  	rxQueue = 0;  	do {  		DateTime now = DateTime.Now;  		do {  			ftStatus = GetRxBytesAvailable (ref rxQueue);  			if (rxQueue == 0)  				Thread.Sleep (0);  			TimeSpan span = (TimeSpan)(DateTime.Now - now);  			flag = span.TotalMilliseconds >= 1000.0;  		}  		while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  		if (rxQueue > 0) {  			byte[] dataBuffer = new byte[rxQueue];  			Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead);  			list.AddRange (dataBuffer);  			num4 += numBytesRead;  		}  	}  	while (((num4 < num2) && (ftStatus == FTDI.FT_STATUS.FT_OK)) && !flag);  	if (!flag && ftStatus == FTDI.FT_STATUS.FT_OK) {  		rxBuffer = list.ToArray ();  		return true;  	}  	rxBuffer = null;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: lock (syncThread) {  	bool flag = false;  	uint rxQueue = 0;  	uint num2 = (bitCount / 8) + (bitCount % 8);  	List<byte> list = new List<byte> ();  	uint numBytesRead = 0;  	uint num4 = 0;  	rxQueue = 0;  	do {  		DateTime now = DateTime.Now;  		do {  			ftStatus = GetRxBytesAvailable (ref rxQueue);  			if (rxQueue == 0)  				Thread.Sleep (0);  			TimeSpan span = (TimeSpan)(DateTime.Now - now);  			flag = span.TotalMilliseconds >= 1000.0;  		}  		while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  		if (rxQueue > 0) {  			byte[] dataBuffer = new byte[rxQueue];  			Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead);  			list.AddRange (dataBuffer);  			num4 += numBytesRead;  		}  	}  	while (((num4 < num2) && (ftStatus == FTDI.FT_STATUS.FT_OK)) && !flag);  	if (!flag && ftStatus == FTDI.FT_STATUS.FT_OK) {  		rxBuffer = list.ToArray ();  		return true;  	}  	rxBuffer = null;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: do {  	DateTime now = DateTime.Now;  	do {  		ftStatus = GetRxBytesAvailable (ref rxQueue);  		if (rxQueue == 0)  			Thread.Sleep (0);  		TimeSpan span = (TimeSpan)(DateTime.Now - now);  		flag = span.TotalMilliseconds >= 1000.0;  	}  	while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  	if (rxQueue > 0) {  		byte[] dataBuffer = new byte[rxQueue];  		Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead);  		list.AddRange (dataBuffer);  		num4 += numBytesRead;  	}  }  while (((num4 < num2) && (ftStatus == FTDI.FT_STATUS.FT_OK)) && !flag);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: do {  	ftStatus = GetRxBytesAvailable (ref rxQueue);  	if (rxQueue == 0)  		Thread.Sleep (0);  	TimeSpan span = (TimeSpan)(DateTime.Now - now);  	flag = span.TotalMilliseconds >= 1000.0;  }  while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: flag = span.TotalMilliseconds >= 1000.0;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref bitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			OnIo7Changed (((bitMode & 0x80) == 0x80));  			OnIo6Changed (((bitMode & 0x40) == 0x40));  			OnIo5Changed (((bitMode & 0x20) == 0x20));  			OnIo4Changed (((bitMode & 0x10) == 0x10));  			OnIo3Changed (((bitMode & 0x08) == 0x08));  			OnIo2Changed (((bitMode & 0x04) == 0x04));  			OnIo1Changed (((bitMode & 0x02) == 0x02));  			OnIo0Changed (((bitMode & 0x01) == 0x01));  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (10);  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref bitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			OnIo7Changed (((bitMode & 0x80) == 0x80));  			OnIo6Changed (((bitMode & 0x40) == 0x40));  			OnIo5Changed (((bitMode & 0x20) == 0x20));  			OnIo4Changed (((bitMode & 0x10) == 0x10));  			OnIo3Changed (((bitMode & 0x08) == 0x08));  			OnIo2Changed (((bitMode & 0x04) == 0x04));  			OnIo1Changed (((bitMode & 0x02) == 0x02));  			OnIo0Changed (((bitMode & 0x01) == 0x01));  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (10);  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref bitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		OnIo7Changed (((bitMode & 0x80) == 0x80));  		OnIo6Changed (((bitMode & 0x40) == 0x40));  		OnIo5Changed (((bitMode & 0x20) == 0x20));  		OnIo4Changed (((bitMode & 0x10) == 0x10));  		OnIo3Changed (((bitMode & 0x08) == 0x08));  		OnIo2Changed (((bitMode & 0x04) == 0x04));  		OnIo1Changed (((bitMode & 0x02) == 0x02));  		OnIo0Changed (((bitMode & 0x01) == 0x01));  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (10);  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref bitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		OnIo7Changed (((bitMode & 0x80) == 0x80));  		OnIo6Changed (((bitMode & 0x40) == 0x40));  		OnIo5Changed (((bitMode & 0x20) == 0x20));  		OnIo4Changed (((bitMode & 0x10) == 0x10));  		OnIo3Changed (((bitMode & 0x08) == 0x08));  		OnIo2Changed (((bitMode & 0x04) == 0x04));  		OnIo1Changed (((bitMode & 0x02) == 0x02));  		OnIo0Changed (((bitMode & 0x01) == 0x01));  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (10);  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,SetFrequency,The following statement contains a magic number: lock (syncThread) {  	if ((frequency < 0x5c) || (frequency > 0x5b8d80))  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (0xb71b00 / (2 * frequency)) - 1;  	txBuffer.Add (0x86);  	txBuffer.Add ((byte)(clockDivisor & 0xff));  	txBuffer.Add ((byte)((clockDivisor >> 8) & 0xff));  	return SendBytes ();  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,SetFrequency,The following statement contains a magic number: lock (syncThread) {  	if ((frequency < 0x5c) || (frequency > 0x5b8d80))  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (0xb71b00 / (2 * frequency)) - 1;  	txBuffer.Add (0x86);  	txBuffer.Add ((byte)(clockDivisor & 0xff));  	txBuffer.Add ((byte)((clockDivisor >> 8) & 0xff));  	return SendBytes ();  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,SetFrequency,The following statement contains a magic number: clockDivisor = (0xb71b00 / (2 * frequency)) - 1;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,SetFrequency,The following statement contains a magic number: txBuffer.Add ((byte)((clockDivisor >> 8) & 0xff));  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: if (rxQueue > 0) {  	retries = 1000;  	do {  		dataBuffer = new byte[4];  		if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  			return false;  		rxQueue -= numBytesRead;  	}  	while (rxQueue > 4);  	if (rxQueue > 0) {  		dataBuffer = new byte[rxQueue];  		if (Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK)  			return false;  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: if (rxQueue > 0) {  	retries = 1000;  	do {  		dataBuffer = new byte[4];  		if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  			return false;  		rxQueue -= numBytesRead;  	}  	while (rxQueue > 4);  	if (rxQueue > 0) {  		dataBuffer = new byte[rxQueue];  		if (Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK)  			return false;  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: if (rxQueue > 0) {  	retries = 1000;  	do {  		dataBuffer = new byte[4];  		if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  			return false;  		rxQueue -= numBytesRead;  	}  	while (rxQueue > 4);  	if (rxQueue > 0) {  		dataBuffer = new byte[rxQueue];  		if (Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK)  			return false;  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: retries = 1000;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	dataBuffer = new byte[4];  	if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  	rxQueue -= numBytesRead;  }  while (rxQueue > 4);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	dataBuffer = new byte[4];  	if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  	rxQueue -= numBytesRead;  }  while (rxQueue > 4);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: dataBuffer = new byte[4];  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: retries = 1000;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	txBuffer.Add (250);  	txBuffer.Add (170);  	if (!SendBytes ())  		return false;  	Thread.Sleep (100);  	if ((GetRxBytesAvailable (ref rxQueue) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  }  while (rxQueue == 0);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	txBuffer.Add (250);  	txBuffer.Add (170);  	if (!SendBytes ())  		return false;  	Thread.Sleep (100);  	if ((GetRxBytesAvailable (ref rxQueue) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  }  while (rxQueue == 0);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	txBuffer.Add (250);  	txBuffer.Add (170);  	if (!SendBytes ())  		return false;  	Thread.Sleep (100);  	if ((GetRxBytesAvailable (ref rxQueue) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  }  while (rxQueue == 0);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: txBuffer.Add (250);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: txBuffer.Add (170);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: return (numBytesRead > 1 && dataBuffer [numBytesRead - 2] == 0xFA && dataBuffer [numBytesRead - 1] == 0xAA);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,MpsseSPI,The following statement contains a magic number: portDir = (byte)251;  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,MpsseSPI,The following statement contains a magic number: portValue = (byte)30;  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)53);  	else  		txBuffer.Add ((byte)61);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	for (int index = 0; index < num1; ++index)  		txBuffer.Add (data [index]);  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)53);  	else  		txBuffer.Add ((byte)61);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	for (int index = 0; index < num1; ++index)  		txBuffer.Add (data [index]);  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)53);  	else  		txBuffer.Add ((byte)61);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	for (int index = 0; index < num1; ++index)  		txBuffer.Add (data [index]);  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)53);  else  	txBuffer.Add ((byte)61);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)53);  else  	txBuffer.Add ((byte)61);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: txBuffer.Add ((byte)53);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: txBuffer.Add ((byte)61);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)55);  else  	txBuffer.Add ((byte)63);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)55);  else  	txBuffer.Add ((byte)63);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: txBuffer.Add ((byte)55);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: txBuffer.Add ((byte)63);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)36);  	else  		txBuffer.Add ((byte)44);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)36);  	else  		txBuffer.Add ((byte)44);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)36);  	else  		txBuffer.Add ((byte)44);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)36);  else  	txBuffer.Add ((byte)44);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)36);  else  	txBuffer.Add ((byte)44);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)36);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)44);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)38);  else  	txBuffer.Add ((byte)46);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)38);  else  	txBuffer.Add ((byte)46);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)38);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)46);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)17);  	else  		txBuffer.Add ((byte)25);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	for (int index = 0; index < num1; ++index)  		txBuffer.Add (data [index]);  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)17);  	else  		txBuffer.Add ((byte)25);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	for (int index = 0; index < num1; ++index)  		txBuffer.Add (data [index]);  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: if (num1 > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add ((byte)17);  	else  		txBuffer.Add ((byte)25);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	for (int index = 0; index < num1; ++index)  		txBuffer.Add (data [index]);  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)17);  else  	txBuffer.Add ((byte)25);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)17);  else  	txBuffer.Add ((byte)25);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)17);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)25);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)19);  else  	txBuffer.Add ((byte)27);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: if (clockOutDataBitsMSBFirst)  	txBuffer.Add ((byte)19);  else  	txBuffer.Add ((byte)27);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)19);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)27);  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (bitCount - 1 == 0) {  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)0);  }  else {  	int num1 = bitCount / 8;  	if (num1 > 0) {  		txBuffer.Add ((byte)37);  		txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  		txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	}  	int num2 = bitCount % 8;  	if (num2 <= 0)  		return;  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)(num2 - 1 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (bitCount - 1 == 0) {  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)0);  }  else {  	int num1 = bitCount / 8;  	if (num1 > 0) {  		txBuffer.Add ((byte)37);  		txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  		txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	}  	int num2 = bitCount % 8;  	if (num2 <= 0)  		return;  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)(num2 - 1 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (bitCount - 1 == 0) {  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)0);  }  else {  	int num1 = bitCount / 8;  	if (num1 > 0) {  		txBuffer.Add ((byte)37);  		txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  		txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	}  	int num2 = bitCount % 8;  	if (num2 <= 0)  		return;  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)(num2 - 1 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (bitCount - 1 == 0) {  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)0);  }  else {  	int num1 = bitCount / 8;  	if (num1 > 0) {  		txBuffer.Add ((byte)37);  		txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  		txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	}  	int num2 = bitCount % 8;  	if (num2 <= 0)  		return;  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)(num2 - 1 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (bitCount - 1 == 0) {  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)0);  }  else {  	int num1 = bitCount / 8;  	if (num1 > 0) {  		txBuffer.Add ((byte)37);  		txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  		txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	}  	int num2 = bitCount % 8;  	if (num2 <= 0)  		return;  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)(num2 - 1 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (bitCount - 1 == 0) {  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)0);  }  else {  	int num1 = bitCount / 8;  	if (num1 > 0) {  		txBuffer.Add ((byte)37);  		txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  		txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	}  	int num2 = bitCount % 8;  	if (num2 <= 0)  		return;  	txBuffer.Add ((byte)39);  	txBuffer.Add ((byte)(num2 - 1 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)39);  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (num1 > 0) {  	txBuffer.Add ((byte)37);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (num1 > 0) {  	txBuffer.Add ((byte)37);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)37);  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)39);  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanOut,The following statement contains a magic number: if (num1 > 0) {  	txBuffer.Add ((byte)17);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	for (int index = 0; index < num1; ++index)  		txBuffer.Add (data [index]);  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanOut,The following statement contains a magic number: if (num1 > 0) {  	txBuffer.Add ((byte)17);  	txBuffer.Add ((byte)(num1 - 1 & (int)byte.MaxValue));  	txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  	for (int index = 0; index < num1; ++index)  		txBuffer.Add (data [index]);  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)17);  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)(num1 - 1 >> 8 & (int)byte.MaxValue));  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\MpsseI2C.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)19);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref BitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			if (((int)BitMode & 128) == 128)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if (((int)BitMode & 64) == 64)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if (((int)BitMode & 32) == 32)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if (((int)BitMode & 16) == 16)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if (((int)BitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if (((int)BitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if (((int)BitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if (((int)BitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref BitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		if (((int)BitMode & 128) == 128)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if (((int)BitMode & 64) == 64)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if (((int)BitMode & 32) == 32)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if (((int)BitMode & 16) == 16)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if (((int)BitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if (((int)BitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if (((int)BitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if (((int)BitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (ftStatus == FTDI.FT_STATUS.FT_OK) {  	if (((int)BitMode & 128) == 128)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if (((int)BitMode & 64) == 64)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if (((int)BitMode & 32) == 32)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if (((int)BitMode & 16) == 16)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if (((int)BitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if (((int)BitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if (((int)BitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if (((int)BitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (syncThread)  		Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 128) == 128)  	OnIo7Changed (true);  else  	OnIo7Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 128) == 128)  	OnIo7Changed (true);  else  	OnIo7Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 64) == 64)  	OnIo6Changed (true);  else  	OnIo6Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 64) == 64)  	OnIo6Changed (true);  else  	OnIo6Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 32) == 32)  	OnIo5Changed (true);  else  	OnIo5Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 32) == 32)  	OnIo5Changed (true);  else  	OnIo5Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 16) == 16)  	OnIo4Changed (true);  else  	OnIo4Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 16) == 16)  	OnIo4Changed (true);  else  	OnIo4Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 8) == 8)  	OnIo3Changed (true);  else  	OnIo3Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 8) == 8)  	OnIo3Changed (true);  else  	OnIo3Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 4) == 4)  	OnIo2Changed (true);  else  	OnIo2Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 4) == 4)  	OnIo2Changed (true);  else  	OnIo2Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 2) == 2)  	OnIo1Changed (true);  else  	OnIo1Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (((int)BitMode & 2) == 2)  	OnIo1Changed (true);  else  	OnIo1Changed (false);  
Magic Number,SemtechLib.Usb,UsbDeviceEvent,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Usb\UsbDeviceEvent.cs,UsbDeviceEvent,The following statement contains a magic number: try {  	WqlEventQuery wqlEventQuery = new WqlEventQuery ();  	wqlEventQuery.EventClassName = "__InstanceCreationEvent";  	wqlEventQuery.WithinInterval = new TimeSpan (0' 0' 3);  	wqlEventQuery.Condition = "TargetInstance ISA 'Win32_USBControllerDevice'";  	Console.WriteLine (wqlEventQuery.QueryString);  	creationEventWatcher = new ManagementEventWatcher (scope' (EventQuery)wqlEventQuery);  	creationEventWatcher.EventArrived += new EventArrivedEventHandler (creationEventWatcher_EventArrived);  	creationEventWatcher.Start ();  	wqlEventQuery.EventClassName = "__InstanceDeletionEvent";  	wqlEventQuery.WithinInterval = new TimeSpan (0' 0' 3);  	wqlEventQuery.Condition = "TargetInstance ISA 'Win32_USBControllerdevice'";  	Console.WriteLine (wqlEventQuery.QueryString);  	deletionEventWatcher = new ManagementEventWatcher (scope' (EventQuery)wqlEventQuery);  	deletionEventWatcher.EventArrived += new EventArrivedEventHandler (deletionEventWatcher_EventArrived);  	deletionEventWatcher.Start ();  }  catch {  	Dispose ();  }  
Magic Number,SemtechLib.Usb,UsbDeviceEvent,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Usb\UsbDeviceEvent.cs,UsbDeviceEvent,The following statement contains a magic number: try {  	WqlEventQuery wqlEventQuery = new WqlEventQuery ();  	wqlEventQuery.EventClassName = "__InstanceCreationEvent";  	wqlEventQuery.WithinInterval = new TimeSpan (0' 0' 3);  	wqlEventQuery.Condition = "TargetInstance ISA 'Win32_USBControllerDevice'";  	Console.WriteLine (wqlEventQuery.QueryString);  	creationEventWatcher = new ManagementEventWatcher (scope' (EventQuery)wqlEventQuery);  	creationEventWatcher.EventArrived += new EventArrivedEventHandler (creationEventWatcher_EventArrived);  	creationEventWatcher.Start ();  	wqlEventQuery.EventClassName = "__InstanceDeletionEvent";  	wqlEventQuery.WithinInterval = new TimeSpan (0' 0' 3);  	wqlEventQuery.Condition = "TargetInstance ISA 'Win32_USBControllerdevice'";  	Console.WriteLine (wqlEventQuery.QueryString);  	deletionEventWatcher = new ManagementEventWatcher (scope' (EventQuery)wqlEventQuery);  	deletionEventWatcher.EventArrived += new EventArrivedEventHandler (deletionEventWatcher_EventArrived);  	deletionEventWatcher.Start ();  }  catch {  	Dispose ();  }  
Magic Number,SemtechLib.Usb,UsbDeviceEvent,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Usb\UsbDeviceEvent.cs,UsbDeviceEvent,The following statement contains a magic number: wqlEventQuery.WithinInterval = new TimeSpan (0' 0' 3);  
Magic Number,SemtechLib.Usb,UsbDeviceEvent,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Usb\UsbDeviceEvent.cs,UsbDeviceEvent,The following statement contains a magic number: wqlEventQuery.WithinInterval = new TimeSpan (0' 0' 3);  
Missing Default,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_RFM6X-TOOL\HopeRFLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following switch statement is missing a default case: switch (TickStyle) {  case TickStyle.None:  case TickStyle.BottomRight:  	trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM;  	break;  case TickStyle.TopLeft:  	trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP;  	break;  case TickStyle.Both:  	trackBarParts = Orientation != Orientation.Horizontal ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBVERT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB;  	break;  }  
Missing Default,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,_vScrollBar_Scroll,The following switch statement is missing a default case: switch (e.Type) {  case ScrollEventType.SmallDecrement:  	this.PerformScrollLineUp ();  	break;  case ScrollEventType.SmallIncrement:  	this.PerformScrollLineDown ();  	break;  case ScrollEventType.LargeDecrement:  	this.PerformScrollPageUp ();  	break;  case ScrollEventType.LargeIncrement:  	this.PerformScrollPageDown ();  	break;  case ScrollEventType.ThumbPosition:  	this.PerformScrollThumpPosition (this.FromScrollPos (e.NewValue));  	break;  case ScrollEventType.ThumbTrack:  	if (this._thumbTrackTimer.Enabled)  		this._thumbTrackTimer.Enabled = false;  	int tickCount = Environment.TickCount;  	if (tickCount - this._lastThumbtrack > 50) {  		this.PerformScrollThumbTrack ((object)null' (EventArgs)null);  		this._lastThumbtrack = tickCount;  		break;  	}  	else {  		this._thumbTrackPosition = this.FromScrollPos (e.NewValue);  		this._thumbTrackTimer.Enabled = true;  		break;  	}  }  
Missing Default,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,OnPaintBackground,The following switch statement is missing a default case: switch (this._borderStyle) {  case BorderStyle.FixedSingle:  	e.Graphics.FillRectangle ((Brush)new SolidBrush (this.BackColor)' this.ClientRectangle);  	ControlPaint.DrawBorder (e.Graphics' this.ClientRectangle' Color.Black' ButtonBorderStyle.Solid);  	break;  case BorderStyle.Fixed3D:  	if (TextBoxRenderer.IsSupported) {  		VisualStyleElement element = VisualStyleElement.TextBox.TextEdit.Normal;  		Color color = this.BackColor;  		if (this.Enabled) {  			if (this.ReadOnly)  				element = VisualStyleElement.TextBox.TextEdit.ReadOnly;  			else if (this.Focused)  				element = VisualStyleElement.TextBox.TextEdit.Focused;  		}  		else {  			element = VisualStyleElement.TextBox.TextEdit.Disabled;  			color = this.BackColorDisabled;  		}  		VisualStyleRenderer visualStyleRenderer = new VisualStyleRenderer (element);  		visualStyleRenderer.DrawBackground ((IDeviceContext)e.Graphics' this.ClientRectangle);  		Rectangle contentRectangle = visualStyleRenderer.GetBackgroundContentRectangle ((IDeviceContext)e.Graphics' this.ClientRectangle);  		e.Graphics.FillRectangle ((Brush)new SolidBrush (color)' contentRectangle);  		break;  	}  	else {  		e.Graphics.FillRectangle ((Brush)new SolidBrush (this.BackColor)' this.ClientRectangle);  		ControlPaint.DrawBorder3D (e.Graphics' this.ClientRectangle' Border3DStyle.Sunken);  		break;  	}  }  
Missing Default,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following switch statement is missing a default case: switch (data3.GraphType) {  case eGraphType.Dot:  	foreach (Point point5 in points) {  		e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  	}  	break;  case eGraphType.Line:  	for (int k = 0; k < (points.Count - 1); k++) {  		e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  	}  	break;  case eGraphType.Bar:  	if (points.Count > 0) {  		Point point18 = points [points.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  	}  	break;  }  
Missing Default,SemtechLib.Ftdi,FtdiDevice,C:\repos\x893_RFM6X-TOOL\HopeRFLib\SemtechLib\Ftdi\FtdiDevice.cs,FtdiDevice,The following switch statement is missing a default case: switch (protocol) {  case FtdiDevice.MpsseProtocol.SPI:  	portA = (Mpsse)new MpsseSPI ("A");  	break;  case FtdiDevice.MpsseProtocol.I2C:  	portA = (Mpsse)new MpsseI2C ("A");  	break;  }  
