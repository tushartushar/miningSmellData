Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NHibernate.DependencyInjection.Core,DefaultArgumentHandler,C:\repos\ranzlee_NHibernate.Extensions\NHibernate.DependencyInjection\Core\DefaultArgumentHandler.cs,PushArguments,Cyclomatic complexity of the method is 8
Long Statement,NHibernate.DependencyInjection.Core,ProxyFactory,C:\repos\ranzlee_NHibernate.Extensions\NHibernate.DependencyInjection\Core\ProxyFactory.cs,CreateProxy,The length of the statement  "                             : Activator.CreateInstance(proxyType' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' constructorParms' null); " is 138.
Long Statement,NHibernate.DependencyInjection.Core,ProxyFactory,C:\repos\ranzlee_NHibernate.Extensions\NHibernate.DependencyInjection\Core\ProxyFactory.cs,CreateProxy,The length of the statement  "                throw new InvalidOperationException(string.Format("proxy {0} was not created - verify Activator.CreateInstance call in IEntityProvider"' proxyType)); " is 149.
Long Statement,NHibernate.DependencyInjection.Core,ProxyFactory,C:\repos\ranzlee_NHibernate.Extensions\NHibernate.DependencyInjection\Core\ProxyFactory.cs,CreateUncachedProxyType,The length of the statement  "            foreach (var method in GetProxiableMethods(baseType' interfaces).Where(method => method.DeclaringType != typeof(ISerializable))) " is 128.
Long Statement,NHibernate.DependencyInjection.Core,ProxyFactory,C:\repos\ranzlee_NHibernate.Extensions\NHibernate.DependencyInjection\Core\ProxyFactory.cs,ImplementGetObjectData,The length of the statement  "                    throw new InvalidOperationException(string.Format("Could not determine assembly qualified name for {0}"' baseInterface)); " is 121.
Magic Number,NHibernate.DependencyInjection.Core,ProxyFactory,C:\repos\ranzlee_NHibernate.Extensions\NHibernate.DependencyInjection\Core\ProxyFactory.cs,DefineSerializationConstructor,The following statement contains a magic number: for (i = 0; i < baseParameterTypes.Count - 2; i++)              {                  il.Emit(OpCodes.Ldarg_S' i + 1);              }
Magic Number,NHibernate.DependencyInjection.Core,ProxyFactory,C:\repos\ranzlee_NHibernate.Extensions\NHibernate.DependencyInjection\Core\ProxyFactory.cs,DefineSerializationConstructor,The following statement contains a magic number: il.Emit(OpCodes.Ldarg_S' i + 2);
