Implementation smell,Namespace,Class,File,Method,Description
Long Method,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,Main,The method has 172 lines of code.
Complex Method,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,Main,Cyclomatic complexity of the method is 11
Empty Catch Block,ByteFloodUpdater,MoveFileAction,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,CleanUp,The method has an empty catch block.
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2)              {                  Console.WriteLine("Bad program usage");                  return;              }
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep(1500);
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,Main,The following statement contains a magic number: while (Process.GetProcessesByName("byteflood").Length > 0)              {                  if (shutdown_signal_sent)                  {                      Console.WriteLine("ByteFlood did not respond for the shutdown signal or it does not support it.");                      Console.WriteLine("Please close it manually and press any key to continue.");                      Console.ReadKey();                  }                  else                  {                      Console.WriteLine("ByteFlood is still running. Sending shutdown signal...");                      try                      {                          send_shutdown_signal();                          //wait to exit                          System.Threading.Thread.Sleep(5000);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Could not send shutdown signal for the following reason: {0}"' ex.Message);                      }                      finally                      {                          shutdown_signal_sent = true;                      }                  }              }
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,Main,The following statement contains a magic number: while (!file_downloaded)              {                  try                  {                      memIO = new MemoryStream();                      HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);                        int length = 1;                      int downloaded = 0;                      using (var response = wr.GetResponse())                      {                          length = Convert.ToInt32(response.ContentLength);                            using (var response_stream = response.GetResponseStream())                          {                              byte[] buffer = new byte[4096];                                int bs = 0;                                while ((bs = response_stream.Read(buffer' 0' 4096)) > 0)                              {                                  memIO.Write(buffer' 0' bs);                                  downloaded += bs;                                  update_progress(downloaded' length);                              }                              Console.WriteLine();                              Console.WriteLine("Download finished");                              file_downloaded = true;                              System.Threading.Thread.Sleep(500);                          }                      }                  }                  catch (Exception ex)                  {                      Console.WriteLine("Could not download the update.");                      Console.WriteLine("Error was:");                      Console.WriteLine(ex.Message);                      Console.WriteLine(ex.StackTrace);                      Console.WriteLine("Retry? Y/N");                      if (!Console.ReadLine().ToUpper().StartsWith("Y"))                      {                          Console.WriteLine("Exiting...");                          return;                      }                  }              }
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,Main,The following statement contains a magic number: while (!file_downloaded)              {                  try                  {                      memIO = new MemoryStream();                      HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);                        int length = 1;                      int downloaded = 0;                      using (var response = wr.GetResponse())                      {                          length = Convert.ToInt32(response.ContentLength);                            using (var response_stream = response.GetResponseStream())                          {                              byte[] buffer = new byte[4096];                                int bs = 0;                                while ((bs = response_stream.Read(buffer' 0' 4096)) > 0)                              {                                  memIO.Write(buffer' 0' bs);                                  downloaded += bs;                                  update_progress(downloaded' length);                              }                              Console.WriteLine();                              Console.WriteLine("Download finished");                              file_downloaded = true;                              System.Threading.Thread.Sleep(500);                          }                      }                  }                  catch (Exception ex)                  {                      Console.WriteLine("Could not download the update.");                      Console.WriteLine("Error was:");                      Console.WriteLine(ex.Message);                      Console.WriteLine(ex.StackTrace);                      Console.WriteLine("Retry? Y/N");                      if (!Console.ReadLine().ToUpper().StartsWith("Y"))                      {                          Console.WriteLine("Exiting...");                          return;                      }                  }              }
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,Main,The following statement contains a magic number: while (!file_downloaded)              {                  try                  {                      memIO = new MemoryStream();                      HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);                        int length = 1;                      int downloaded = 0;                      using (var response = wr.GetResponse())                      {                          length = Convert.ToInt32(response.ContentLength);                            using (var response_stream = response.GetResponseStream())                          {                              byte[] buffer = new byte[4096];                                int bs = 0;                                while ((bs = response_stream.Read(buffer' 0' 4096)) > 0)                              {                                  memIO.Write(buffer' 0' bs);                                  downloaded += bs;                                  update_progress(downloaded' length);                              }                              Console.WriteLine();                              Console.WriteLine("Download finished");                              file_downloaded = true;                              System.Threading.Thread.Sleep(500);                          }                      }                  }                  catch (Exception ex)                  {                      Console.WriteLine("Could not download the update.");                      Console.WriteLine("Error was:");                      Console.WriteLine(ex.Message);                      Console.WriteLine(ex.StackTrace);                      Console.WriteLine("Retry? Y/N");                      if (!Console.ReadLine().ToUpper().StartsWith("Y"))                      {                          Console.WriteLine("Exiting...");                          return;                      }                  }              }
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,update_progress,The following statement contains a magic number: for (int i = 0; i < 36; i++)              {                  if (i <= ticks)                  {                      Console.Write("*");                  }                  else                  {                      Console.Write(" ");                  }              }
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,update_progress,The following statement contains a magic number: Console.Write("] {0}%  "' (percent * 100).ToString("0.00"));
Magic Number,ByteFloodUpdater,Program,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Program.cs,send_shutdown_signal,The following statement contains a magic number: tcp.Connect("127.0.0.1"' 65432);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ReadZipEntries,The following statement contains a magic number: if (Stream.Length < 22)              {                  yield break;              }
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ReadZipEntries,The following statement contains a magic number: Stream.Seek(-22' SeekOrigin.End);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ReadZipEntries,The following statement contains a magic number: while (Reader.ReadInt32() != DirectorySignature)              {                  if (Stream.Position <= 5)                  {                      yield break;                  }                    // move 1 byte back                  Stream.Seek(-5' SeekOrigin.Current);              }
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ReadZipEntries,The following statement contains a magic number: while (Reader.ReadInt32() != DirectorySignature)              {                  if (Stream.Position <= 5)                  {                      yield break;                  }                    // move 1 byte back                  Stream.Seek(-5' SeekOrigin.Current);              }
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ReadZipEntries,The following statement contains a magic number: Stream.Seek(6' SeekOrigin.Current);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ReadZipEntries,The following statement contains a magic number: for (int i = 0; i < entries; i++)              {                  if (Reader.ReadInt32() != EntrySignature)                  {                      continue;                  }                    // read file properties                  // TODO: Replace with a proper class to make this method a lot shorter.                  Reader.ReadInt32();                  bool utf8 = (Reader.ReadInt16() & 0x0800) != 0;                  short method = Reader.ReadInt16();                  int timestamp = Reader.ReadInt32();                  uint crc32 = Reader.ReadUInt32();                  int compressedSize = Reader.ReadInt32();                  int fileSize = Reader.ReadInt32();                  short fileNameSize = Reader.ReadInt16();                  short extraSize = Reader.ReadInt16();                  short commentSize = Reader.ReadInt16();                  int headerOffset = Reader.ReadInt32();                  Reader.ReadInt32();                  int fileHeaderOffset = Reader.ReadInt32();                  var fileNameBytes = Reader.ReadBytes(fileNameSize);                  Stream.Seek(extraSize' SeekOrigin.Current);                  var fileCommentBytes = Reader.ReadBytes(commentSize);                  var fileDataOffset = CalculateFileDataOffset(fileHeaderOffset);                    // decode zip file entry                  var encoder = utf8 ? Encoding.UTF8 : Encoding.Default;                  yield return new Entry                  {                      Name = encoder.GetString(fileNameBytes)'                      Comment = encoder.GetString(fileCommentBytes)'                      Crc32 = crc32'                      CompressedSize = compressedSize'                      OriginalSize = fileSize'                      HeaderOffset = fileHeaderOffset'                      DataOffset = fileDataOffset'                      Deflated = method == 8'                      Timestamp = ConvertToDateTime(timestamp)                  };              }
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,CalculateFileDataOffset,The following statement contains a magic number: Stream.Seek(fileHeaderOffset + 26' SeekOrigin.Begin);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Unzip,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,ConvertToDateTime,The following statement contains a magic number: return new DateTime((dosTimestamp >> 25) + 1980' (dosTimestamp >> 21) & 15' (dosTimestamp >> 16) & 31'                  (dosTimestamp >> 11) & 31' (dosTimestamp >> 5) & 63' (dosTimestamp & 31) * 2);
Magic Number,ByteFloodUpdater,Crc32Calculator,C:\repos\hexafluoride_byteflood\ByteFloodUpdater\Unzip.cs,UpdateWithBlock,The following statement contains a magic number: for (var i = 0; i < numberOfBytes; i++)                  {                      crcValue = (crcValue >> 8) ^ Crc32Table[buffer[i] ^ crcValue & 0xff];                  }
