Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,get,Cyclomatic complexity of the method is 10
Complex Method,BeIT.MemCached,Serializer,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\Serializer.cs,Serialize,Cyclomatic complexity of the method is 19
Complex Method,BeIT.MemCached,Serializer,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\Serializer.cs,decompress,Cyclomatic complexity of the method is 8
Complex Method,BeIT.MemCached,Serializer,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\Serializer.cs,DeSerialize,Cyclomatic complexity of the method is 19
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,CheckAndSet,The method has 5 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,CheckAndSet,The method has 5 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,store,The method has 6 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,store,The method has 5 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,store,The method has 6 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,store,The method has 8 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,get,The method has 6 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,get,The method has 6 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,delete,The method has 5 parameters.
Long Parameter List,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,incrementDecrement,The method has 6 parameters.
Long Statement,BeIT.MemCached,LogAdapter,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\LogAdapter.cs,Debug,The length of the statement  "	Console.Out.WriteLine (DateTime.Now + " DEBUG " + loggerName + " - " + message + "\n" + e.Message + "\n" + e.StackTrace); " is 121.
Long Statement,BeIT.MemCached,LogAdapter,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\LogAdapter.cs,Info,The length of the statement  "	Console.Out.WriteLine (DateTime.Now + " INFO " + loggerName + " - " + message + "\n" + e.Message + "\n" + e.StackTrace); " is 120.
Long Statement,BeIT.MemCached,LogAdapter,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\LogAdapter.cs,Warn,The length of the statement  "	Console.Out.WriteLine (DateTime.Now + " WARN " + loggerName + " - " + message + "\n" + e.Message + "\n" + e.StackTrace); " is 120.
Long Statement,BeIT.MemCached,LogAdapter,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\LogAdapter.cs,Error,The length of the statement  "	Console.Out.WriteLine (DateTime.Now + " ERROR " + loggerName + " - " + message + "\n" + e.Message + "\n" + e.StackTrace); " is 121.
Long Statement,BeIT.MemCached,LogAdapter,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\LogAdapter.cs,Fatal,The length of the statement  "	Console.Out.WriteLine (DateTime.Now + " FATAL " + loggerName + " - " + message + "\n" + e.Message + "\n" + e.StackTrace); " is 121.
Long Statement,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,store,The length of the statement  "			commandline = command + " " + keyPrefix + key + " " + (ushort)type + " " + expiry + " " + bytes.Length + " " + unique + "\r\n"; " is 127.
Long Statement,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,get,The length of the statement  "	Dictionary<SocketPool' Dictionary<string' List<int>>> dict = new Dictionary<SocketPool' Dictionary<string' List<int>>> (); " is 122.
Long Statement,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,getCounter,The length of the statement  "	return ulong.TryParse (get ("get"' key' keyIsChecked' hash' out unique) as string' out parsedLong) ? (ulong?)parsedLong : null; " is 127.
Long Statement,BeIT.MemCached,SocketPool,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\SocketPool.cs,Return,The length of the statement  "			//If we have more than the minimum amount of sockets' but less than the max' and the socket is older than the recycle age' we destroy it. " is 137.
Empty Catch Block,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,PooledSocket,The method has an empty catch block.
Magic Number,BeIT.MemCached,FNV1_32,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\HashAlgorithms.cs,FNV1_32,The following statement contains a magic number: HashSizeValue = 32;  
Magic Number,BeIT.MemCached,FNV1a_32,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\HashAlgorithms.cs,FNV1a_32,The following statement contains a magic number: HashSizeValue = 32;  
Magic Number,BeIT.MemCached,ModifiedFNV1_32,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\HashAlgorithms.cs,HashFinal,The following statement contains a magic number: hash += hash << 13;  
Magic Number,BeIT.MemCached,ModifiedFNV1_32,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\HashAlgorithms.cs,HashFinal,The following statement contains a magic number: hash ^= hash >> 7;  
Magic Number,BeIT.MemCached,ModifiedFNV1_32,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\HashAlgorithms.cs,HashFinal,The following statement contains a magic number: hash += hash << 3;  
Magic Number,BeIT.MemCached,ModifiedFNV1_32,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\HashAlgorithms.cs,HashFinal,The following statement contains a magic number: hash ^= hash >> 17;  
Magic Number,BeIT.MemCached,ModifiedFNV1_32,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\HashAlgorithms.cs,HashFinal,The following statement contains a magic number: hash += hash << 5;  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,checkKey,The following statement contains a magic number: if (key.Length > 250) {  	throw new ArgumentException ("Key may not be longer than 250 characters.");  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,checkKey,The following statement contains a magic number: foreach (char c in key) {  	if (c <= 32) {  		throw new ArgumentException ("Key may not contain whitespace or control characters.");  	}  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,checkKey,The following statement contains a magic number: if (c <= 32) {  	throw new ArgumentException ("Key may not contain whitespace or control characters.");  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,readValue,The following statement contains a magic number: if (parts [0] == "VALUE") {  	key = parts [1];  	SerializedType type = (SerializedType)Enum.Parse (typeof(SerializedType)' parts [2]);  	byte[] bytes = new byte[Convert.ToUInt32 (parts [3]' CultureInfo.InvariantCulture)];  	if (parts.Length > 4) {  		unique = Convert.ToUInt64 (parts [4]);  	}  	else {  		unique = 0;  	}  	socket.Read (bytes);  	socket.SkipUntilEndOfLine ();  	//Skip the trailing \r\n  	try {  		value = Serializer.DeSerialize (bytes' type);  	}  	catch (Exception e) {  		//If deserialization fails' return null  		value = null;  		logger.Error ("Error deserializing object for key '" + key + "' of type " + type + "."' e);  	}  	return true;  }  else {  	key = null;  	value = null;  	unique = 0;  	return false;  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,readValue,The following statement contains a magic number: if (parts [0] == "VALUE") {  	key = parts [1];  	SerializedType type = (SerializedType)Enum.Parse (typeof(SerializedType)' parts [2]);  	byte[] bytes = new byte[Convert.ToUInt32 (parts [3]' CultureInfo.InvariantCulture)];  	if (parts.Length > 4) {  		unique = Convert.ToUInt64 (parts [4]);  	}  	else {  		unique = 0;  	}  	socket.Read (bytes);  	socket.SkipUntilEndOfLine ();  	//Skip the trailing \r\n  	try {  		value = Serializer.DeSerialize (bytes' type);  	}  	catch (Exception e) {  		//If deserialization fails' return null  		value = null;  		logger.Error ("Error deserializing object for key '" + key + "' of type " + type + "."' e);  	}  	return true;  }  else {  	key = null;  	value = null;  	unique = 0;  	return false;  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,readValue,The following statement contains a magic number: if (parts [0] == "VALUE") {  	key = parts [1];  	SerializedType type = (SerializedType)Enum.Parse (typeof(SerializedType)' parts [2]);  	byte[] bytes = new byte[Convert.ToUInt32 (parts [3]' CultureInfo.InvariantCulture)];  	if (parts.Length > 4) {  		unique = Convert.ToUInt64 (parts [4]);  	}  	else {  		unique = 0;  	}  	socket.Read (bytes);  	socket.SkipUntilEndOfLine ();  	//Skip the trailing \r\n  	try {  		value = Serializer.DeSerialize (bytes' type);  	}  	catch (Exception e) {  		//If deserialization fails' return null  		value = null;  		logger.Error ("Error deserializing object for key '" + key + "' of type " + type + "."' e);  	}  	return true;  }  else {  	key = null;  	value = null;  	unique = 0;  	return false;  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,readValue,The following statement contains a magic number: if (parts [0] == "VALUE") {  	key = parts [1];  	SerializedType type = (SerializedType)Enum.Parse (typeof(SerializedType)' parts [2]);  	byte[] bytes = new byte[Convert.ToUInt32 (parts [3]' CultureInfo.InvariantCulture)];  	if (parts.Length > 4) {  		unique = Convert.ToUInt64 (parts [4]);  	}  	else {  		unique = 0;  	}  	socket.Read (bytes);  	socket.SkipUntilEndOfLine ();  	//Skip the trailing \r\n  	try {  		value = Serializer.DeSerialize (bytes' type);  	}  	catch (Exception e) {  		//If deserialization fails' return null  		value = null;  		logger.Error ("Error deserializing object for key '" + key + "' of type " + type + "."' e);  	}  	return true;  }  else {  	key = null;  	value = null;  	unique = 0;  	return false;  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,readValue,The following statement contains a magic number: if (parts.Length > 4) {  	unique = Convert.ToUInt64 (parts [4]);  }  else {  	unique = 0;  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,readValue,The following statement contains a magic number: if (parts.Length > 4) {  	unique = Convert.ToUInt64 (parts [4]);  }  else {  	unique = 0;  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,readValue,The following statement contains a magic number: unique = Convert.ToUInt64 (parts [4]);  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,stats,The following statement contains a magic number: serverPool.Execute (pool' delegate (PooledSocket socket) {  	socket.Write ("stats\r\n");  	string line;  	while (!(line = socket.ReadResponse ().TrimEnd ('\0'' '\r'' '\n')).StartsWith ("END")) {  		string[] s = line.Split (' ');  		result.Add (s [1]' s [2]);  	}  });  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,stats,The following statement contains a magic number: while (!(line = socket.ReadResponse ().TrimEnd ('\0'' '\r'' '\n')).StartsWith ("END")) {  	string[] s = line.Split (' ');  	result.Add (s [1]' s [2]);  }  
Magic Number,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,stats,The following statement contains a magic number: result.Add (s [1]' s [2]);  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: while ((b = stream.ReadByte ()) != -1) {  	if (gotReturn) {  		if (b == 10) {  			break;  		}  		else {  			buffer.WriteByte (13);  			gotReturn = false;  		}  	}  	if (b == 13) {  		gotReturn = true;  	}  	else {  		buffer.WriteByte ((byte)b);  	}  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: while ((b = stream.ReadByte ()) != -1) {  	if (gotReturn) {  		if (b == 10) {  			break;  		}  		else {  			buffer.WriteByte (13);  			gotReturn = false;  		}  	}  	if (b == 13) {  		gotReturn = true;  	}  	else {  		buffer.WriteByte ((byte)b);  	}  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: while ((b = stream.ReadByte ()) != -1) {  	if (gotReturn) {  		if (b == 10) {  			break;  		}  		else {  			buffer.WriteByte (13);  			gotReturn = false;  		}  	}  	if (b == 13) {  		gotReturn = true;  	}  	else {  		buffer.WriteByte ((byte)b);  	}  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: if (gotReturn) {  	if (b == 10) {  		break;  	}  	else {  		buffer.WriteByte (13);  		gotReturn = false;  	}  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: if (gotReturn) {  	if (b == 10) {  		break;  	}  	else {  		buffer.WriteByte (13);  		gotReturn = false;  	}  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: if (b == 10) {  	break;  }  else {  	buffer.WriteByte (13);  	gotReturn = false;  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: if (b == 10) {  	break;  }  else {  	buffer.WriteByte (13);  	gotReturn = false;  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: buffer.WriteByte (13);  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,ReadLine,The following statement contains a magic number: if (b == 13) {  	gotReturn = true;  }  else {  	buffer.WriteByte ((byte)b);  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,SkipUntilEndOfLine,The following statement contains a magic number: while ((b = stream.ReadByte ()) != -1) {  	if (gotReturn) {  		if (b == 10) {  			break;  		}  		else {  			gotReturn = false;  		}  	}  	if (b == 13) {  		gotReturn = true;  	}  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,SkipUntilEndOfLine,The following statement contains a magic number: while ((b = stream.ReadByte ()) != -1) {  	if (gotReturn) {  		if (b == 10) {  			break;  		}  		else {  			gotReturn = false;  		}  	}  	if (b == 13) {  		gotReturn = true;  	}  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,SkipUntilEndOfLine,The following statement contains a magic number: if (gotReturn) {  	if (b == 10) {  		break;  	}  	else {  		gotReturn = false;  	}  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,SkipUntilEndOfLine,The following statement contains a magic number: if (b == 10) {  	break;  }  else {  	gotReturn = false;  }  
Magic Number,BeIT.MemCached,PooledSocket,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\PooledSocket.cs,SkipUntilEndOfLine,The following statement contains a magic number: if (b == 13) {  	gotReturn = true;  }  
Magic Number,BeIT.MemCached,ServerPool,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\ServerPool.cs,ServerPool,The following statement contains a magic number: foreach (string host in hosts) {  	//Create pool  	SocketPool pool = new SocketPool (this' host.Trim ());  	//Create 250 keys for this pool' store each key in the hostDictionary' as well as in the list of keys.  	for (int i = 0; i < 250; i++) {  		uint key = BitConverter.ToUInt32 (new ModifiedFNV1_32 ().ComputeHash (Encoding.UTF8.GetBytes (host + "-" + i))' 0);  		if (!hostDictionary.ContainsKey (key)) {  			hostDictionary [key] = pool;  			keys.Add (key);  		}  	}  	pools.Add (pool);  }  
Magic Number,BeIT.MemCached,ServerPool,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\ServerPool.cs,ServerPool,The following statement contains a magic number: for (int i = 0; i < 250; i++) {  	uint key = BitConverter.ToUInt32 (new ModifiedFNV1_32 ().ComputeHash (Encoding.UTF8.GetBytes (host + "-" + i))' 0);  	if (!hostDictionary.ContainsKey (key)) {  		hostDictionary [key] = pool;  		keys.Add (key);  	}  }  
Magic Number,BeIT.MemCached,SocketPool,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\SocketPool.cs,Acquire,The following statement contains a magic number: try {  	PooledSocket socket = new PooledSocket (this' endPoint' owner.SendReceiveTimeout' owner.ConnectTimeout);  	//Reset retry timer on success.  	deadEndPointSecondsUntilRetry = 1;  	return socket;  }  catch (Exception e) {  	Interlocked.Increment (ref failednewsockets);  	logger.Error ("Error connecting to: " + endPoint.Address' e);  	//Mark endpoint as dead  	isEndPointDead = true;  	//Retry in 2 minutes  	deadEndPointRetryTime = DateTime.Now.AddSeconds (deadEndPointSecondsUntilRetry);  	if (deadEndPointSecondsUntilRetry < maxDeadEndPointSecondsUntilRetry) {  		deadEndPointSecondsUntilRetry = deadEndPointSecondsUntilRetry * 2;  		//Double retry interval until next time  	}  	return null;  }  
Magic Number,BeIT.MemCached,SocketPool,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\SocketPool.cs,Acquire,The following statement contains a magic number: if (deadEndPointSecondsUntilRetry < maxDeadEndPointSecondsUntilRetry) {  	deadEndPointSecondsUntilRetry = deadEndPointSecondsUntilRetry * 2;  	//Double retry interval until next time  }  
Magic Number,BeIT.MemCached,SocketPool,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\SocketPool.cs,Acquire,The following statement contains a magic number: deadEndPointSecondsUntilRetry = deadEndPointSecondsUntilRetry * 2;  
Missing Default,BeIT.MemCached,MemcachedClient,C:\repos\mehfuzh_AutoBox\Libraries\BeIT.MemCached\MemcachedClient.cs,store,The following switch statement is missing a default case: switch (command) {  case "set":  case "add":  case "replace":  	commandline = command + " " + keyPrefix + key + " " + (ushort)type + " " + expiry + " " + bytes.Length + "\r\n";  	break;  case "append":  case "prepend":  	commandline = command + " " + keyPrefix + key + " 0 0 " + bytes.Length + "\r\n";  	break;  case "cas":  	commandline = command + " " + keyPrefix + key + " " + (ushort)type + " " + expiry + " " + bytes.Length + " " + unique + "\r\n";  	break;  }  
