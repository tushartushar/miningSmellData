Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AutoBox.Ast.Abstraction,ExpressionVisitor,C:\repos\mehfuzh_AutoBox\Core\Ast\Abstraction\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 40
Long Statement,AutoBox,Utility,C:\repos\mehfuzh_AutoBox\Core\Utility.cs,GetUniqueKey,The length of the statement  "	return string.Format ("{0}+{1}"' prefix' CalculateMD5Hash (handler.GetHashCode ().ToString (CultureInfo.CurrentCulture))); " is 122.
Missing Default,AutoBox.Ast.Abstraction,ExpressionVisitor,C:\repos\mehfuzh_AutoBox\Core\Ast\Abstraction\ExpressionVisitor.cs,Visit,The following switch statement is missing a default case: switch (expression.NodeType) {  case ExpressionType.Lambda:  	return this.VisitLamda ((LambdaExpression)expression);  case ExpressionType.ArrayLength:  case ExpressionType.Convert:  case ExpressionType.ConvertChecked:  case ExpressionType.Negate:  case ExpressionType.UnaryPlus:  case ExpressionType.NegateChecked:  case ExpressionType.Not:  case ExpressionType.Quote:  case ExpressionType.TypeAs:  	return this.VisitUnary ((UnaryExpression)expression);  case ExpressionType.Add:  case ExpressionType.AddChecked:  case ExpressionType.And:  case ExpressionType.AndAlso:  case ExpressionType.ArrayIndex:  case ExpressionType.Coalesce:  case ExpressionType.Divide:  case ExpressionType.ExclusiveOr:  case ExpressionType.GreaterThan:  case ExpressionType.GreaterThanOrEqual:  case ExpressionType.LeftShift:  case ExpressionType.LessThan:  case ExpressionType.LessThanOrEqual:  case ExpressionType.Modulo:  case ExpressionType.Multiply:  case ExpressionType.MultiplyChecked:  case ExpressionType.NotEqual:  case ExpressionType.Or:  case ExpressionType.OrElse:  case ExpressionType.Power:  case ExpressionType.RightShift:  case ExpressionType.Subtract:  case ExpressionType.SubtractChecked:  	return this.VisitBinary ((BinaryExpression)expression);  case ExpressionType.Call:  	return this.VisitMethodCall ((MethodCallExpression)expression);  case ExpressionType.Constant:  	return this.VisitConstant ((ConstantExpression)expression);  case ExpressionType.MemberAccess:  	return this.VisitMemberAccess ((MemberExpression)expression);  case ExpressionType.Parameter:  	return this.VisiParameter ((ParameterExpression)expression);  case ExpressionType.New:  	return this.VisitNew ((NewExpression)expression);  case ExpressionType.NewArrayInit:  	return this.VisitNewArrayInit ((NewArrayExpression)expression);  }  
