Implementation smell,Namespace,Class,File,Method,Description
Long Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The method has 238 lines of code.
Long Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,DoConfig,The method has 165 lines of code.
Long Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,engineManagerGUI,The method has 180 lines of code.
Long Method,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The method has 144 lines of code.
Complex Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnLoad,Cyclomatic complexity of the method is 13
Complex Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,TLTInfo,Cyclomatic complexity of the method is 10
Complex Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,GetConfigInfo,Cyclomatic complexity of the method is 20
Complex Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,Cyclomatic complexity of the method is 32
Complex Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,DoConfig,Cyclomatic complexity of the method is 31
Complex Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,Cyclomatic complexity of the method is 11
Complex Method,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,engineManagerGUI,Cyclomatic complexity of the method is 15
Complex Method,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,OnLoad,Cyclomatic complexity of the method is 20
Complex Method,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,UpdateSolver,Cyclomatic complexity of the method is 10
Complex Method,RealFuels,SolverRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\SolverRF.cs,CalculatePerformance,Cyclomatic complexity of the method is 8
Complex Method,RealFuels,RFUpgradeManager,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\UpgradeManager.cs,OnLoad,Cyclomatic complexity of the method is 8
Complex Method,RealFuels,RFUpgradeManager,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\UpgradeManager.cs,FillUpgrades,Cyclomatic complexity of the method is 12
Complex Method,RealFuels,RFUpgradeManager,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\UpgradeManager.cs,onPartPurchased,Cyclomatic complexity of the method is 11
Complex Method,RealFuels,RefuelingPump,C:\repos\NathanKell_ModularFuelSystem\Source\Pumps\RefuelingPump.cs,FillAttachedTanks,Cyclomatic complexity of the method is 11
Complex Method,RealFuels,MFSSettings,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\MFSSettings.cs,Initialize,Cyclomatic complexity of the method is 20
Complex Method,RealFuels.Tanks,FuelTank,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\FuelTank.cs,UpdateTank,Cyclomatic complexity of the method is 8
Complex Method,RealFuels.Tanks,FuelTank,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\FuelTank.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,UpdateTankType,Cyclomatic complexity of the method is 16
Complex Method,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,UpdateUsedBy,Cyclomatic complexity of the method is 8
Complex Method,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,Cyclomatic complexity of the method is 19
Complex Method,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,Cyclomatic complexity of the method is 9
Complex Method,RealFuels.TechLevels,TechLevel,C:\repos\NathanKell_ModularFuelSystem\Source\TechLevels\TechLevel.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,RealFuels.TechLevels,TechLevel,C:\repos\NathanKell_ModularFuelSystem\Source\TechLevels\TechLevel.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,RealFuels.TechLevels,TechLevel,C:\repos\NathanKell_ModularFuelSystem\Source\TechLevels\TechLevel.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,RealFuels.TechLevels,TechLevel,C:\repos\NathanKell_ModularFuelSystem\Source\TechLevels\TechLevel.cs,MaxTL,Cyclomatic complexity of the method is 8
Complex Method,RealFuels.TechLevels,TechLevel,C:\repos\NathanKell_ModularFuelSystem\Source\TechLevels\TechLevel.cs,MinTL,Cyclomatic complexity of the method is 8
Complex Method,RealFuels.Ullage,UllageModule,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageModule.cs,FixedUpdate,Cyclomatic complexity of the method is 8
Long Parameter List,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,GetSpecifiedModule,The method has 5 parameters. Parameters: p' eID' mIdx' eType' weakType
Long Parameter List,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,UpdateSolver,The method has 7 parameters. Parameters: ambientTherm' altitude' vel' mach' sIgnited' oxygen' underwater
Long Parameter List,RealFuels,SolverRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\SolverRF.cs,InitializeOverallEngineData,The method has 17 parameters. Parameters: nMinFlow' nMaxFlow' nAtmosphereCurve' nAtmCurve' nVelCurve' nAtmCurveIsp' nVelCurveIsp' nDisableUnderwater' nThrottleResponseRate' nChamberNominalTemp' nMachLimit' nMachMult' nFlowMultMin' nFlowMultCap' nFlowMultSharp' nVaryThrust' nSeed
Long Parameter List,RealFuels,RefuelingPump,C:\repos\NathanKell_ModularFuelSystem\Source\Pumps\RefuelingPump.cs,AnalyticInfo,The method has 9 parameters. Parameters: fi' sunAndBodyIn' backgroundRadiation' radArea' absEmissRatio' internalFlux' convCoeff' ambientTemp' maxPartTemp
Long Parameter List,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,AnalyticInfo,The method has 9 parameters. Parameters: fi' sunAndBodyIn' backgroundRadiation' radArea' absEmissRatio' internalFlux' convCoeff' ambientTemp' maxPartTemp
Long Parameter List,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The method has 5 parameters. Parameters: localAcceleration' rotation' deltaTime' ventingAcc' fuelRatio
Long Identifier,RealFuels,RFSettings,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\RFSettings.cs,,The length of the parameter techLevelScienceEntryCostFraction is 33.
Long Identifier,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,,The length of the parameter throttlePressureFedStartupMult is 30.
Long Statement,RealFuels,CompatibilityChecker,C:\repos\NathanKell_ModularFuelSystem\Source\assembly\Checkers.cs,Start,The length of the statement  "            Debug.Log(String.Format("[CompatibilityChecker] Running checker version {0} from '{1}'"' _version' Assembly.GetExecutingAssembly().GetName().Name)); " is 148.
Long Statement,RealFuels,CompatibilityChecker,C:\repos\NathanKell_ModularFuelSystem\Source\assembly\Checkers.cs,Start,The length of the statement  "                            Debug.LogWarning(String.Format("[CompatibilityChecker] Exception while invoking IsCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName().Name' e)); " is 161.
Long Statement,RealFuels,CompatibilityChecker,C:\repos\NathanKell_ModularFuelSystem\Source\assembly\Checkers.cs,Start,The length of the statement  "                            Debug.LogWarning(String.Format("[CompatibilityChecker] Exception while invoking IsUnityCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName().Name' e)); " is 166.
Long Statement,RealFuels,CompatibilityChecker,C:\repos\NathanKell_ModularFuelSystem\Source\assembly\Checkers.cs,Start,The length of the statement  "                message += ((message == String.Empty) ? "Some" : "\n\nAdditionally' some") + " installed mods may be incompatible with this version of Kerbal Space Program. Features may be broken or disabled. Please check for updates to the listed mods."; " is 239.
Long Statement,RealFuels,CompatibilityChecker,C:\repos\NathanKell_ModularFuelSystem\Source\assembly\Checkers.cs,Start,The length of the statement  "                    message += String.Format("\n\nThese mods are incompatible with KSP {0}.{1}.{2}:\n\n"' Versioning.version_major' Versioning.version_minor' Versioning.Revision); " is 159.
Long Statement,RealFuels,CompatibilityChecker,C:\repos\NathanKell_ModularFuelSystem\Source\assembly\Checkers.cs,Start,The length of the statement  "                PopupDialog.SpawnPopupDialog(new Vector2(0' 0)' new Vector2(0' 0)' "CompatibilityChecker"' "Incompatible Mods Detected"' message' "OK"' true' HighLogic.UISkin); " is 160.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,UpdateTFInterops,The length of the statement  "                    tfInterface.InvokeMember("AddInteropValue"' tfBindingFlags' null' null' new System.Object[] { this.part' isMaster ? "engineConfig" : "vernierConfig"' configuration' "RealFuels" }); " is 180.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,TLTInfo,The length of the statement  "                    retStr += "' Mass: " + part.mass.ToString("N3") + " (was " + (origMass * RFSettings.Instance.EngineMassMultiplier).ToString("N3") + ")"; " is 136.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,GetConfigInfo,The length of the statement  "                    info += "' min " + (float.Parse(config.GetValue("minThrust")) / float.Parse(config.GetValue(thrustRating)) * 100f).ToString("N0") + "%"; " is 136.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,GetConfigInfo,The length of the statement  "                info += "    (" + (scale * cst).ToString("N0") + " extra cost)\n"; // FIXME should get cost from TL' but this should be safe " is 124.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The length of the statement  "                    Debug.LogError("*RFMEC* ERROR Can't find configuration " + newConfiguration + "' falling back to first tech-available config."); " is 128.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The length of the statement  "                    Debug.LogError("*RFMEC* Could not find appropriate module of type " + type + "' with ID=" + engineID + " and index " + moduleIndex); " is 132.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The length of the statement  "                        Dictionary<Propellant' ProtoStageIconInfo> boxes = (Dictionary<Propellant' ProtoStageIconInfo>)(field.GetValue(pModule)); " is 121.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The length of the statement  "                            if (!HighLogic.LoadedSceneIsEditor && !(HighLogic.LoadedSceneIsFlight && vessel != null && vessel.situation == Vessel.Situations.PRELAUNCH)) // fix for prelaunch " is 161.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The length of the statement  "                                int remaining = (int)(part.Modules["ModuleEngineIgnitor"].GetType().GetField("ignitionsRemained").GetValue(part.Modules["ModuleEngineIgnitor"])); " is 145.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The length of the statement  "                Debug.LogError("*RFMEC* ERROR could not find configuration of name " + configuration + " and could find no fallback config.\nFor part " + part.name + "' Current nodes:" + Utilities.PrintConfigs(configs)); " is 204.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,UnlockedConfig,The length of the statement  "            if (RFUpgradeManager.Instance != null && HighLogic.CurrentGame != null && HighLogic.CurrentGame.Mode != Game.Modes.SANDBOX) " is 123.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,UnlockedConfig,The length of the statement  "                return RFUpgradeManager.Instance.ConfigUnlocked((RFSettings.Instance.usePartNameInConfigUnlock ? Utilities.GetPartName(p) : "") + config.GetValue("name")); " is 155.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,CanConfig,The length of the statement  "            if (HighLogic.CurrentGame.Mode == Game.Modes.SANDBOX || ResearchAndDevelopment.GetTechnologyState(config.GetValue("techRequired")) == RDTech.State.Available) " is 157.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,UnlockedTL,The length of the statement  "            if (RFUpgradeManager.Instance != null && HighLogic.CurrentGame != null && HighLogic.CurrentGame.Mode != Game.Modes.SANDBOX) " is 123.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,CostTL,The length of the statement  "            if (cTL.Load(cfg' techNodes' engineType' techLevel) && oTL.Load(cfg' techNodes' engineType' origTechLevel) && part.partInfo != null) " is 132.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The length of the statement  "            guiWindowRect = GUILayout.Window(part.name.GetHashCode() + 1' guiWindowRect' engineManagerGUI' "Configure " + part.partInfo.title' Styles.styleEditorPanel); " is 156.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,engineManagerGUI,The length of the statement  "                GUILayout.Label(pModule.GetInfo() + "\n" + TLTInfo() + "\n" + "Total cost: " + (part.partInfo.cost + part.GetModuleCosts(part.partInfo.cost)).ToString("0")); " is 157.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,UpdateSymmetryCounterparts,The length of the statement  "                ModuleEngineConfigs engine = GetSpecifiedModule(part.symmetryCounterparts[j]' engineID' mIdx' this.GetType().Name' false) as ModuleEngineConfigs; " is 145.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,UpdateOtherModules,The length of the statement  "                    ModuleEngineConfigs otherM = GetSpecifiedModule(part' node.values[i].name' -1' this.GetType().Name' false) as ModuleEngineConfigs; " is 130.
Long Statement,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,ConfigSaveLoad,The length of the statement  "                    /*Debug.Log("*RFMEC* ERROR: part " + partName + " already in database! Current count = " + configs.Count + "' db count = " + RFSettings.Instance.engineConfigs[partName].Count); " is 176.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,OnLoad,The length of the statement  "                    throttleResponseRate = (float)(RFSettings.Instance.throttlingRate / Math.Log(Math.Max(RFSettings.Instance.throttlingClamp' Math.Sqrt(part.mass * maxThrust * maxThrust)))); " is 171.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,Start,The length of the statement  "            Fields["ignitions"].guiActive = Fields["ignitions"].guiActiveEditor = (ignitions >= 0 && RFSettings.Instance.limitedIgnitions); " is 127.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,Start,The length of the statement  "            igniteFailIgnitions = new ScreenMessage("<color=orange>[" + part.partInfo.title + "]: no ignitions remaining!</color>"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 157.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,Start,The length of the statement  "            igniteFailResources = new ScreenMessage("<color=orange>[" + part.partInfo.title + "]: insufficient resources to ignite!</color>"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 167.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,Start,The length of the statement  "            ullageFail = new ScreenMessage("<color=orange>[" + part.partInfo.title + "]: vapor in feedlines' shut down!</color>"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 155.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,UpdateThrottle,The length of the statement  "                            thisTick *= 0.0005f + 4.05f * currentThrottle * throttleStartupMult * (pressureFed ? throttlePressureFedStartupMult : 1f); " is 122.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,Activate,The length of the statement  "                ScreenMessages.PostScreenMessage("<color=orange>[" + part.partInfo.title + "]: Cannot activate while stowed!</color>"' 6f' ScreenMessageStyle.UPPER_LEFT); " is 154.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,UpdateSolver,The length of the statement  "                    thrustCurveRatio = (float)((propellants[curveProp].totalResourceAvailable / propellants[curveProp].totalResourceCapacity)); " is 123.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,UpdateSolver,The length of the statement  "            // heatProduction = (float)(scaleRecip * extHeatkW / PhysicsGlobals.InternalHeatProductionFactor * part.thermalMassReciprocal); " is 127.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,GetThrustInfo,The length of the statement  "                    velCurve.FindMinMaxValue(out vMin' out vMax' out tMin' out tMax); // get the max mult' and thus report maximum thrust possible. " is 127.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,GetThrustInfo,The length of the statement  "                    output += (throttleLocked ? "<b>" : "<b>Max. ") + "Thrust (Vac.): </b>" + (thrustVac).ToString("0.0##") + " kN" + ThrottleString() " is 130.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,GetThrustInfo,The length of the statement  "                    output += (throttleLocked ? "<b>" : "<b>Max. ") + "Thrust: </b>" + (thrustVac).ToString("0.0##") + " kN" + ThrottleString(); " is 124.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,GetInfo,The length of the statement  "            output += "<b>Engine Isp: </b>" + (atmosphereCurve.Evaluate(1f)).ToString("0.###") + " (ASL) - " + (atmosphereCurve.Evaluate(0f)).ToString("0.###") + " (Vac.)\n"; " is 162.
Long Statement,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,IgnitionUpdate,The length of the statement  "                                            print("*RF* part " + part.partInfo.title + " requested " + req + " " + ignitionResources[i].name + " but got " + amt + ". MinResource now " + minResource); " is 155.
Long Statement,RealFuels,SolverRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\SolverRF.cs,InitializeOverallEngineData,The length of the statement  "            if (atmosphereCurve.Curve.keys.Length == 2 && atmosphereCurve.Curve.keys[0].value != atmosphereCurve.Curve.keys[1].value) " is 121.
Long Statement,RealFuels,SolverRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\SolverRF.cs,CalculatePerformance,The length of the statement  "                // removed t0 from next calculation; under some circumstances t0 can spike during staging/decoupling resulting in engine part destruction even on an unfired engine. " is 164.
Long Statement,RealFuels,RefuelingPump,C:\repos\NathanKell_ModularFuelSystem\Source\Pumps\RefuelingPump.cs,FixedUpdate,The length of the statement  "            if (HighLogic.LoadedSceneIsFlight && part.parent != null && part.vessel != null && !flightIntegrator.isAnalytical && enablePump) " is 128.
Long Statement,RealFuels,RefuelingPump,C:\repos\NathanKell_ModularFuelSystem\Source\Pumps\RefuelingPump.cs,FillAttachedTanks,The length of the statement  "                        if (tank.amount < tank.maxAmount && tank.fillable && r.flowMode != PartResource.FlowMode.None && d.resourceTransferMode == ResourceTransferMode.PUMP && r.flowState) " is 164.
Long Statement,RealFuels,RefuelingPump,C:\repos\NathanKell_ModularFuelSystem\Source\Pumps\RefuelingPump.cs,FillAttachedTanks,The length of the statement  "                            if (r.flowMode != PartResource.FlowMode.None && r.info.resourceTransferMode == ResourceTransferMode.PUMP && r.flowState) " is 120.
Long Statement,RealFuels,ConfigNodeExtensions,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\ConfigNodeExtensions.cs,TryGetValue,The length of the statement  "                    MonoBehaviour.print("Exception: Error parsing as color4: original text: " + node.GetValue("name") + " --- exception " + e.Message); " is 131.
Long Statement,RealFuels,Utilities,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Utilities.cs,PrintCurve,The length of the statement  "                Debug.Log("key = " + fc.Curve.keys[i].time + " " + fc.Curve.keys[i].value + " " + fc.Curve.keys[i].inTangent + " " + fc.Curve.keys[i].outTangent); " is 146.
Long Statement,RealFuels,Utilities,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Utilities.cs,FindResources,The length of the statement  "            if (flow == ResourceFlowMode.STACK_PRIORITY_SEARCH || flow == ResourceFlowMode.STAGE_PRIORITY_FLOW_BALANCE || flow == ResourceFlowMode.STAGE_STACK_FLOW || flow == ResourceFlowMode.STAGE_STACK_FLOW_BALANCE) " is 205.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,Update,The length of the statement  "            bool partIsSelectedInActionsScreen = inEditorActionsScreen && (EditorActionGroups.Instance?.GetSelectedParts().Contains(part) ?? false); " is 136.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The length of the statement  "            //Debug.Log("internalFlux = " + part.thermalInternalFlux.ToString() + "' thermalInternalFluxPrevious =" + part.thermalInternalFluxPrevious.ToString() + "' analytic internal flux = " + previewInternalFluxAdjust.ToString()); " is 222.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The length of the statement  "                        hotTemp = Math.Max(((hotTemp * part.thermalMass) - (tank.temperature * part.resourceThermalMass)) / (part.thermalMass - part.resourceThermalMass)' part.temperature); " is 165.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The length of the statement  "                        double wettedArea = tank.totalArea;// disabled until proper wetted vs ullage conduction can be done (tank.amount / tank.maxAmount); " is 131.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The length of the statement  "                                double retainedAmount = part.RequestResource(tank.boiloffProductResource.id' boiloffProductAmount' ResourceFlowMode.STAGE_PRIORITY_FLOW); " is 137.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The length of the statement  "                        // [RealFuels.ModuleFuelTankRF] proceduralTankRealFuels Analytic Temp = 256.679360297684' Analytic Internal = 256.679360297684' Analytic Skin = 256.679360297684 " is 160.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The length of the statement  "                        // [RealFuels.ModuleFuelTankRF] proceduralTankRealFuels deltaTime = 17306955.5092776' heat lost = 6638604.21227684' thermalMassReciprocal = 0.00444787360733243 " is 159.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The length of the statement  "                                print(part.name + " deltaTime = " + deltaTime + "' heat lost = " + heatLost + "' thermalMassReciprocal = " + part.thermalMassReciprocal); " is 137.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The length of the statement  "            // This allows a rough guess as to individual tank surface area based on ratio of tank volume to total volume but it breaks down at very small fractions " is 152.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The length of the statement  "            // if for any reason our totalTankArea is still 0 (no drag cubes available yet or analytic temp routines executed first) " is 120.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The length of the statement  "                    tank.totalArea = Math.Max(Math.Pow(Math.PI' 1.0 / 3.0) * Math.Pow((tankMaxAmount / 1000.0) * 6' 2.0 / 3.0)' tank.totalArea = totalTankArea * tank.tankRatio); " is 157.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,SetAnalyticTemperature,The length of the statement  "                print(part.name + " Analytic Temp = " + analyticTemp.ToString() + "' Analytic Internal = " + toBeInternal.ToString() + "' Analytic Skin = " + toBeSkin.ToString()); " is 163.
Long Statement,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,GetInternalTemperature,The length of the statement  "            // During analytic' pin our internal temperature. We'll figure out the difference and apply as much boiloff flux as needed for this to be valid. " is 144.
Long Statement,RealFuels.Tanks,TankDefinition,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankDefinition.cs,Load,The length of the statement  "					//Debug.LogWarning ("[MFT] Unable to initialize tank definition for resource \"" + tank.name + "\" in tank definition \"" + name + "\" as this resource is not defined."); " is 170.
Long Statement,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The length of the statement  "            guiWindowRect = GUILayout.Window (GetInstanceID ()' guiWindowRect' GUIWindow' "Fuel Tanks for " + tank_module.part.partInfo.title' Styles.styleEditorPanel); " is 156.
Long Statement,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,DisplayMass,The length of the statement  "			GUILayout.Label ("Mass: " + tank_module.massDisplay + "' Cost " + tank_module.GetModuleCost (0' ModifierStagingSituation.CURRENT).ToString ("N1")); " is 147.
Long Statement,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,UpdateTank,The length of the statement  "					//Debug.LogWarning ("[MFT] Removing tank as empty input " + tank.name + " amount: " + tank.maxAmountExpression ?? "null"); " is 122.
Long Statement,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,AddTank,The length of the statement  "			string extraData = "Max: " + maxVolStr + " (+" + ModuleFuelTanks.FormatMass ((float) (tank_module.AvailableVolume * tank.mass)) + " )"; " is 135.
Long Statement,RealFuels.TechLevels,TechLevel,C:\repos\NathanKell_ModularFuelSystem\Source\TechLevels\TechLevel.cs,CanTL,The length of the statement  "                return HighLogic.CurrentGame.Mode == Game.Modes.SANDBOX || nTL.techRequired.Equals("") || ResearchAndDevelopment.GetTechnologyState(nTL.techRequired) == RDTech.State.Available; " is 176.
Long Statement,RealFuels.Ullage,UllageSet,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSet.cs,Update,The length of the statement  "                    if(!double.IsNaN(tmp)) // Ordinarily we'd set to 0 if capacity = 0' but if so engine will flame out' so we just toss the result. " is 128.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Load,The length of the statement  "                string str = "*U* Sim for " + name + " loaded from node. H'R: " + ullageHeightMin + "/" + ullageHeightMax + "' " + ullageRadialMin + "/" + ullageRadialMax + ". UT: " + UT; " is 171.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "            //Debug.Log("Ullage: dt: " + deltaTime.ToString("F2") + " localAcc: " + localAcceleration.ToString() + " rotateRate: " + rotation.ToString()); " is 142.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "                double ventingConst = Math.Min(1d' (1d - ventingAcc / RFSettings.Instance.ventingAccThreshold) * fuelRatioFactorRecip * utTimeDelta); " is 133.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "                ullageHeightMin = UtilMath.LerpUnclamped(ullageHeightMin' 0.05d' RFSettings.Instance.naturalDiffusionRateY * ventingConst); " is 123.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "                ullageHeightMax = UtilMath.LerpUnclamped(ullageHeightMax' 0.95d' RFSettings.Instance.naturalDiffusionRateY * ventingConst); " is 123.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "                ullageRadialMin = UtilMath.LerpUnclamped(ullageRadialMin' 0.00d' RFSettings.Instance.naturalDiffusionRateX * ventingConst); " is 123.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "                ullageRadialMax = UtilMath.LerpUnclamped(ullageRadialMax' 0.95d' RFSettings.Instance.naturalDiffusionRateX * ventingConst); " is 123.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "            double radialFac = Math.Abs(localAccelerationAmount.y) * RFSettings.Instance.translateAxialCoefficientX * fuelRatioFactor; " is 122.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "            //Debug.Log("Ullage: Height: (" + ullageHeightMin.ToString("F2") + " - " + ullageHeightMax.ToString("F2") + ") Radius: (" + ullageRadialMin.ToString("F2") + " - " + ullageRadialMax.ToString("F2") + ")"); " is 203.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "            double bLevel = UtilMath.Clamp((ullageHeightMax - ullageHeightMin) * (ullageRadialMax - ullageRadialMin) * 10d * UtilMath.Clamp(8.2d - 8d * fuelRatio' 0.0d' 8.2d) - 1.0d' 0.0d' 15.0d); " is 184.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "                    + "\nUllage Height Min/Max " + ullageHeightMin + "/" + ullageHeightMax + "' Radial Min/Max " + ullageRadialMin + "/" + ullageRadialMax " is 134.
Long Statement,RealFuels.Ullage,UllageSimulator,C:\repos\NathanKell_ModularFuelSystem\Source\Ullage\UllageSimulator.cs,Update,The length of the statement  "                    + "\nInputs: Time = " + deltaTime + "' UT delta = " + utTimeDelta + "' Acc " + localAcceleration + "' Rot " + rotation + "' FR " + fuelRatio); " is 142.
Complex Conditional,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The conditional expression  "field.FieldType == typeof(FloatCurve) &&                          ((field.Name.Equals("atmosphereCurve") && delAtmo)                          || (field.Name.Equals("atmCurve") && delDens)                          || (field.Name.Equals("velCurve") && delVel))"  is complex.
Complex Conditional,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The conditional expression  "!HighLogic.LoadedSceneIsEditor && !(HighLogic.LoadedSceneIsFlight && vessel != null && vessel.situation == Vessel.Situations.PRELAUNCH)"  is complex.
Complex Conditional,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,UpdateSolver,The conditional expression  "EngineIgnited && ignited && throttledUp && rfSolver.GetRunning()"  is complex.
Complex Conditional,RealFuels,ModuleEnginesRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEnginesRF.cs,IgnitionUpdate,The conditional expression  "ignitions == 0 && RFSettings.Instance.limitedIgnitions && !CheatOptions.InfinitePropellant && !externalIgnition"  is complex.
Complex Conditional,RealFuels,RefuelingPump,C:\repos\NathanKell_ModularFuelSystem\Source\Pumps\RefuelingPump.cs,FixedUpdate,The conditional expression  "HighLogic.LoadedSceneIsFlight && part.parent != null && part.vessel != null && !flightIntegrator.isAnalytical && enablePump"  is complex.
Complex Conditional,RealFuels,RefuelingPump,C:\repos\NathanKell_ModularFuelSystem\Source\Pumps\RefuelingPump.cs,FillAttachedTanks,The conditional expression  "tank.amount < tank.maxAmount && tank.fillable && r.flowMode != PartResource.FlowMode.None && d.resourceTransferMode == ResourceTransferMode.PUMP && r.flowState"  is complex.
Complex Conditional,RealFuels,Utilities,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Utilities.cs,FindResources,The conditional expression  "flow == ResourceFlowMode.STACK_PRIORITY_SEARCH || flow == ResourceFlowMode.STAGE_PRIORITY_FLOW_BALANCE || flow == ResourceFlowMode.STAGE_STACK_FLOW || flow == ResourceFlowMode.STAGE_STACK_FLOW_BALANCE"  is complex.
Empty Catch Block,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,UpdateTFInterops,The method has an empty catch block.
Empty Catch Block,RealFuels,TestFlightWrapper,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\TestFlightWrapper.cs,AddInteropValue,The method has an empty catch block.
Magic Number,RealFuels,CompatibilityChecker,C:\repos\NathanKell_ModularFuelSystem\Source\assembly\Checkers.cs,IsCompatible,The following statement contains a magic number: return Versioning.version_major == 1 && Versioning.version_minor == 3 && Versioning.Revision == 0;
Magic Number,RealFuels,CompatibilityChecker,C:\repos\NathanKell_ModularFuelSystem\Source\assembly\Checkers.cs,IsWin64,The following statement contains a magic number: return (IntPtr.Size == 8) && (Environment.OSVersion.Platform == PlatformID.Win32NT);
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,GetInfo,The following statement contains a magic number: if (configs.Count < 2)                  return TLTInfo();
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The following statement contains a magic number: if (newConfig != null)              {                  if (configuration != newConfiguration)                  {                      if(resetTechLevels)                          techLevel = origTechLevel;                        while (techLevel > 0)                      {                          if (TechLevel.CanTL(newConfig' techNodes' engineType' techLevel))                              break;                          else                              --techLevel;                      }                  }                    // for asmi                  if (useConfigAsTitle)                      part.partInfo.title = configuration;                    configuration = newConfiguration;                  config = new ConfigNode("MODULE");                  newConfig.CopyTo(config);                  config.name = "MODULE";    #if DEBUG                  print ("replacing " + type + " with:");                  print (newConfig.ToString ());  #endif                    pModule = null;                  // get correct module                  pModule = GetSpecifiedModule(part' engineID' moduleIndex' type' useWeakType);                    if ((object)pModule == null)                  {                      Debug.LogError("*RFMEC* Could not find appropriate module of type " + type + "' with ID=" + engineID + " and index " + moduleIndex);                      return;                  }                    Type mType = pModule.GetType();                  config.SetValue("name"' mType.Name);                    // clear all FloatCurves we need to clear (i.e. if our config has one' or techlevels are enabled)                  bool delAtmo = config.HasNode("atmosphereCurve") || techLevel >= 0;                  bool delDens = config.HasNode("atmCurve") || techLevel >= 0;                  bool delVel = config.HasNode("velCurve") || techLevel >= 0;                  foreach (FieldInfo field in mType.GetFields())                  {                      if (field.FieldType == typeof(FloatCurve) &&                          ((field.Name.Equals("atmosphereCurve") && delAtmo)                          || (field.Name.Equals("atmCurve") && delDens)                          || (field.Name.Equals("velCurve") && delVel)))                      {                          field.SetValue(pModule' new FloatCurve());                      }                  }                  // clear propellant gauges                  foreach (FieldInfo field in mType.GetFields(BindingFlags.NonPublic | BindingFlags.Instance))                  {                      if (field.FieldType == typeof(Dictionary<Propellant' ProtoStageIconInfo>))                      {                          Dictionary<Propellant' ProtoStageIconInfo> boxes = (Dictionary<Propellant' ProtoStageIconInfo>)(field.GetValue(pModule));                          if (boxes == null)                              continue;                          foreach (ProtoStageIconInfo v in boxes.Values)                          {                              if (v == null) //just in case...                                  continue;                              try                              {                                  part.stackIcon.RemoveInfo(v);                              }                              catch (Exception e)                              {                                  Debug.LogError("*RFMEC* Trying to remove info box: " + e.Message);                              }                          }                          boxes.Clear();                      }                  }                  if (type.Equals("ModuleRCS") || type.Equals("ModuleRCSFX"))                  {                      ModuleRCS rcs = (ModuleRCS)pModule;                      if (rcs != null)                      {                          DoConfig(config);                          if (config.HasNode("PROPELLANT"))                          {                              rcs.propellants.Clear();                          }                          pModule.Load(config);                      }                  }                  else                  { // is an ENGINE                      ModuleEngines mE = (ModuleEngines)pModule;                      if (mE != null)                      {                          if (config.HasNode("PROPELLANT"))                          {                              mE.propellants.Clear();                          }                      }                        DoConfig(config);                        // Handle Engine Ignitor                      if (config.HasNode("ModuleEngineIgnitor"))                      {                          if (part.Modules.Contains("ModuleEngineIgnitor"))                          {                              ConfigNode eiNode = config.GetNode("ModuleEngineIgnitor");                              if (eiNode.HasValue("ignitionsAvailable"))                              {                                  int ignitions;                                  if (int.TryParse(eiNode.GetValue("ignitionsAvailable")' out ignitions))                                  {                                      ignitions = ConfigIgnitions(ignitions);                                        eiNode.SetValue("ignitionsAvailable"' ignitions.ToString());                                      if (eiNode.HasValue("ignitionsRemained"))                                          eiNode.SetValue("ignitionsRemained"' ignitions.ToString());                                      else                                          eiNode.AddValue("ignitionsRemained"' ignitions.ToString());                                  }                              }                              if (!HighLogic.LoadedSceneIsEditor && !(HighLogic.LoadedSceneIsFlight && vessel != null && vessel.situation == Vessel.Situations.PRELAUNCH)) // fix for prelaunch                              {                                  int remaining = (int)(part.Modules["ModuleEngineIgnitor"].GetType().GetField("ignitionsRemained").GetValue(part.Modules["ModuleEngineIgnitor"]));                                  if (eiNode.HasValue("ignitionsRemained"))                                      eiNode.SetValue("ignitionsRemained"' remaining.ToString());                                  else                                      eiNode.AddValue("ignitionsRemained"' remaining.ToString());                              }                              ConfigNode tNode = new ConfigNode("MODULE");                              eiNode.CopyTo(tNode);                              tNode.SetAddValue("name"' "ModuleEngineIgnitor");                              part.Modules["ModuleEngineIgnitor"].Load(tNode);                          }                          else // backwards compatible with EI nodes when using RF ullage etc.                          {                              ConfigNode eiNode = config.GetNode("ModuleEngineIgnitor");                              if (eiNode.HasValue("ignitionsAvailable") && !config.HasValue("ignitions"))                              {                                  config.AddValue("ignitions"' eiNode.GetValue("ignitionsAvailable"));                              }                              if (eiNode.HasValue("useUllageSimulation") && !config.HasValue("ullage"))                                  config.AddValue("ullage"' eiNode.GetValue("useUllageSimulation"));                              if (eiNode.HasValue("isPressureFed") && !config.HasValue("pressureFed"))                                  config.AddValue("pressureFed"' eiNode.GetValue("isPressureFed"));                              if (!config.HasNode("IGNITOR_RESOURCE"))                                  foreach (ConfigNode resNode in eiNode.GetNodes("IGNITOR_RESOURCE"))                                      config.AddNode(resNode);                          }                      }                      if (config.HasValue("ignitions"))                      {                          int ignitions;                          if ((!HighLogic.LoadedSceneIsFlight || (vessel != null && vessel.situation == Vessel.Situations.PRELAUNCH)))                          {                              if (int.TryParse(config.GetValue("ignitions")' out ignitions))                              {                                  ignitions = ConfigIgnitions(ignitions);                                  config.SetValue("ignitions"' ignitions.ToString());                              }                          }                          else                              config.RemoveValue("ignitions");                      }                        if (pModule is ModuleEnginesRF)                          (pModule as ModuleEnginesRF).SetScale(1d);                      pModule.Load(config);                  }                  // fix for editor NaN                  if (part.Resources.Contains("ElectricCharge") && part.Resources["ElectricCharge"].maxAmount < 0.1)                  { // hacking around a KSP bug here                      part.Resources["ElectricCharge"].amount = 0;                      part.Resources["ElectricCharge"].maxAmount = 0.1;                  }                    // set gimbal                  if (config.HasValue("gimbalRange"))                  {                      float newGimbal = float.Parse(config.GetValue("gimbalRange"));                      for (int m = 0; m < part.Modules.Count; ++m)                      {                          if (part.Modules[m] is ModuleGimbal)                          {                              ModuleGimbal g = part.Modules[m] as ModuleGimbal;                              if (gimbalTransform.Equals("") || g.gimbalTransformName.Equals(gimbalTransform))                              {                                  g.gimbalRange = newGimbal;                                  break;                              }                          }                      }                  }                  if (config.HasValue("cost"))                      configCost = float.Parse(config.GetValue("cost"));                  else                      configCost = 0f;                    UpdateOtherModules(config);                    // GUI disabled for now - UpdateTweakableMenu();                    // Finally' fire the modified event                  // more trouble than it is worth...                  /*if((object)(EditorLogic.fetch) != null && (object)(EditorLogic.fetch.ship) != null && HighLogic.LoadedSceneIsEditor)                      GameEvents.onEditorShipModified.Fire(EditorLogic.fetch.ship);*/                    // fire config modified event                  /*if(HighLogic.LoadedSceneIsEditor || HighLogic.LoadedSceneIsFlight)                      EngineConfigChanged();*/                  // do it manually                  List<Part> parts;                  if (HighLogic.LoadedSceneIsEditor && EditorLogic.fetch.ship != null)                      parts = EditorLogic.fetch.ship.parts;                  else if (HighLogic.LoadedSceneIsFlight && vessel != null)                      parts = vessel.parts;                  else parts = new List<Part>();                  for (int i = parts.Count - 1; i >= 0; --i)                      parts[i].SendMessage("UpdateUsedBy"' SendMessageOptions.DontRequireReceiver);                    SetupFX();                    UpdateTFInterops(); // update TestFlight if it's installed                    if (config.HasValue("description"))                      configDescription = config.GetValue("description");                  else                      configDescription = "";              }              else              {                  Debug.LogError("*RFMEC* ERROR could not find configuration of name " + configuration + " and could find no fallback config.\nFor part " + part.name + "' Current nodes:" + Utilities.PrintConfigs(configs));              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,SetConfiguration,The following statement contains a magic number: if (newConfig != null)              {                  if (configuration != newConfiguration)                  {                      if(resetTechLevels)                          techLevel = origTechLevel;                        while (techLevel > 0)                      {                          if (TechLevel.CanTL(newConfig' techNodes' engineType' techLevel))                              break;                          else                              --techLevel;                      }                  }                    // for asmi                  if (useConfigAsTitle)                      part.partInfo.title = configuration;                    configuration = newConfiguration;                  config = new ConfigNode("MODULE");                  newConfig.CopyTo(config);                  config.name = "MODULE";    #if DEBUG                  print ("replacing " + type + " with:");                  print (newConfig.ToString ());  #endif                    pModule = null;                  // get correct module                  pModule = GetSpecifiedModule(part' engineID' moduleIndex' type' useWeakType);                    if ((object)pModule == null)                  {                      Debug.LogError("*RFMEC* Could not find appropriate module of type " + type + "' with ID=" + engineID + " and index " + moduleIndex);                      return;                  }                    Type mType = pModule.GetType();                  config.SetValue("name"' mType.Name);                    // clear all FloatCurves we need to clear (i.e. if our config has one' or techlevels are enabled)                  bool delAtmo = config.HasNode("atmosphereCurve") || techLevel >= 0;                  bool delDens = config.HasNode("atmCurve") || techLevel >= 0;                  bool delVel = config.HasNode("velCurve") || techLevel >= 0;                  foreach (FieldInfo field in mType.GetFields())                  {                      if (field.FieldType == typeof(FloatCurve) &&                          ((field.Name.Equals("atmosphereCurve") && delAtmo)                          || (field.Name.Equals("atmCurve") && delDens)                          || (field.Name.Equals("velCurve") && delVel)))                      {                          field.SetValue(pModule' new FloatCurve());                      }                  }                  // clear propellant gauges                  foreach (FieldInfo field in mType.GetFields(BindingFlags.NonPublic | BindingFlags.Instance))                  {                      if (field.FieldType == typeof(Dictionary<Propellant' ProtoStageIconInfo>))                      {                          Dictionary<Propellant' ProtoStageIconInfo> boxes = (Dictionary<Propellant' ProtoStageIconInfo>)(field.GetValue(pModule));                          if (boxes == null)                              continue;                          foreach (ProtoStageIconInfo v in boxes.Values)                          {                              if (v == null) //just in case...                                  continue;                              try                              {                                  part.stackIcon.RemoveInfo(v);                              }                              catch (Exception e)                              {                                  Debug.LogError("*RFMEC* Trying to remove info box: " + e.Message);                              }                          }                          boxes.Clear();                      }                  }                  if (type.Equals("ModuleRCS") || type.Equals("ModuleRCSFX"))                  {                      ModuleRCS rcs = (ModuleRCS)pModule;                      if (rcs != null)                      {                          DoConfig(config);                          if (config.HasNode("PROPELLANT"))                          {                              rcs.propellants.Clear();                          }                          pModule.Load(config);                      }                  }                  else                  { // is an ENGINE                      ModuleEngines mE = (ModuleEngines)pModule;                      if (mE != null)                      {                          if (config.HasNode("PROPELLANT"))                          {                              mE.propellants.Clear();                          }                      }                        DoConfig(config);                        // Handle Engine Ignitor                      if (config.HasNode("ModuleEngineIgnitor"))                      {                          if (part.Modules.Contains("ModuleEngineIgnitor"))                          {                              ConfigNode eiNode = config.GetNode("ModuleEngineIgnitor");                              if (eiNode.HasValue("ignitionsAvailable"))                              {                                  int ignitions;                                  if (int.TryParse(eiNode.GetValue("ignitionsAvailable")' out ignitions))                                  {                                      ignitions = ConfigIgnitions(ignitions);                                        eiNode.SetValue("ignitionsAvailable"' ignitions.ToString());                                      if (eiNode.HasValue("ignitionsRemained"))                                          eiNode.SetValue("ignitionsRemained"' ignitions.ToString());                                      else                                          eiNode.AddValue("ignitionsRemained"' ignitions.ToString());                                  }                              }                              if (!HighLogic.LoadedSceneIsEditor && !(HighLogic.LoadedSceneIsFlight && vessel != null && vessel.situation == Vessel.Situations.PRELAUNCH)) // fix for prelaunch                              {                                  int remaining = (int)(part.Modules["ModuleEngineIgnitor"].GetType().GetField("ignitionsRemained").GetValue(part.Modules["ModuleEngineIgnitor"]));                                  if (eiNode.HasValue("ignitionsRemained"))                                      eiNode.SetValue("ignitionsRemained"' remaining.ToString());                                  else                                      eiNode.AddValue("ignitionsRemained"' remaining.ToString());                              }                              ConfigNode tNode = new ConfigNode("MODULE");                              eiNode.CopyTo(tNode);                              tNode.SetAddValue("name"' "ModuleEngineIgnitor");                              part.Modules["ModuleEngineIgnitor"].Load(tNode);                          }                          else // backwards compatible with EI nodes when using RF ullage etc.                          {                              ConfigNode eiNode = config.GetNode("ModuleEngineIgnitor");                              if (eiNode.HasValue("ignitionsAvailable") && !config.HasValue("ignitions"))                              {                                  config.AddValue("ignitions"' eiNode.GetValue("ignitionsAvailable"));                              }                              if (eiNode.HasValue("useUllageSimulation") && !config.HasValue("ullage"))                                  config.AddValue("ullage"' eiNode.GetValue("useUllageSimulation"));                              if (eiNode.HasValue("isPressureFed") && !config.HasValue("pressureFed"))                                  config.AddValue("pressureFed"' eiNode.GetValue("isPressureFed"));                              if (!config.HasNode("IGNITOR_RESOURCE"))                                  foreach (ConfigNode resNode in eiNode.GetNodes("IGNITOR_RESOURCE"))                                      config.AddNode(resNode);                          }                      }                      if (config.HasValue("ignitions"))                      {                          int ignitions;                          if ((!HighLogic.LoadedSceneIsFlight || (vessel != null && vessel.situation == Vessel.Situations.PRELAUNCH)))                          {                              if (int.TryParse(config.GetValue("ignitions")' out ignitions))                              {                                  ignitions = ConfigIgnitions(ignitions);                                  config.SetValue("ignitions"' ignitions.ToString());                              }                          }                          else                              config.RemoveValue("ignitions");                      }                        if (pModule is ModuleEnginesRF)                          (pModule as ModuleEnginesRF).SetScale(1d);                      pModule.Load(config);                  }                  // fix for editor NaN                  if (part.Resources.Contains("ElectricCharge") && part.Resources["ElectricCharge"].maxAmount < 0.1)                  { // hacking around a KSP bug here                      part.Resources["ElectricCharge"].amount = 0;                      part.Resources["ElectricCharge"].maxAmount = 0.1;                  }                    // set gimbal                  if (config.HasValue("gimbalRange"))                  {                      float newGimbal = float.Parse(config.GetValue("gimbalRange"));                      for (int m = 0; m < part.Modules.Count; ++m)                      {                          if (part.Modules[m] is ModuleGimbal)                          {                              ModuleGimbal g = part.Modules[m] as ModuleGimbal;                              if (gimbalTransform.Equals("") || g.gimbalTransformName.Equals(gimbalTransform))                              {                                  g.gimbalRange = newGimbal;                                  break;                              }                          }                      }                  }                  if (config.HasValue("cost"))                      configCost = float.Parse(config.GetValue("cost"));                  else                      configCost = 0f;                    UpdateOtherModules(config);                    // GUI disabled for now - UpdateTweakableMenu();                    // Finally' fire the modified event                  // more trouble than it is worth...                  /*if((object)(EditorLogic.fetch) != null && (object)(EditorLogic.fetch.ship) != null && HighLogic.LoadedSceneIsEditor)                      GameEvents.onEditorShipModified.Fire(EditorLogic.fetch.ship);*/                    // fire config modified event                  /*if(HighLogic.LoadedSceneIsEditor || HighLogic.LoadedSceneIsFlight)                      EngineConfigChanged();*/                  // do it manually                  List<Part> parts;                  if (HighLogic.LoadedSceneIsEditor && EditorLogic.fetch.ship != null)                      parts = EditorLogic.fetch.ship.parts;                  else if (HighLogic.LoadedSceneIsFlight && vessel != null)                      parts = vessel.parts;                  else parts = new List<Part>();                  for (int i = parts.Count - 1; i >= 0; --i)                      parts[i].SendMessage("UpdateUsedBy"' SendMessageOptions.DontRequireReceiver);                    SetupFX();                    UpdateTFInterops(); // update TestFlight if it's installed                    if (config.HasValue("description"))                      configDescription = config.GetValue("description");                  else                      configDescription = "";              }              else              {                  Debug.LogError("*RFMEC* ERROR could not find configuration of name " + configuration + " and could find no fallback config.\nFor part " + part.name + "' Current nodes:" + Utilities.PrintConfigs(configs));              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,ThrustTL,The following statement contains a magic number: return (float)Math.Round((double)thrust * ThrustTL(cfg)' 6);
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,MassTL,The following statement contains a magic number: return (float)Math.Round((double)mass * MassTL()' 6);
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,OnGUI,The following statement contains a magic number: if (editor.editorScreen == EditorScreen.Actions && EditorActionGroups.Instance.GetSelectedParts().Contains(part))              {                  if (offsetGUIPos == -1 && part.Modules.Contains("ModuleFuelTanks"))                      posMult = 1;                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin + 440' mousePos.y - 5' 300' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else if (showRFGUI && editor.editorScreen == EditorScreen.Parts)              {                  if (guiWindowRect.width == 0)                      guiWindowRect = new Rect(256 + 430 * posMult' 365' 430' (Screen.height - 365));                    tooltipRect = new Rect(guiWindowRect.xMin - (230 - 8)' mousePos.y - 5' 220' 200);                    cursorInGUI = guiWindowRect.Contains(mousePos);                  if (cursorInGUI)                  {                      editor.Lock(false' false' false' "RFGUILock");                      if (KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance != null)                          KSP.UI.Screens.Editor.PartListTooltipMasterController.Instance.HideTooltip();                  }                  else                  {                      editor.Unlock("RFGUILock");                  }              }              else              {                  showRFGUI = false;                  editor.Unlock("RFGUILock");                  return;              }
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,engineManagerGUI,The following statement contains a magic number: GUILayout.Space (20);
Magic Number,RealFuels,ModuleEngineConfigs,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\ModuleEngineConfigs.cs,engineManagerGUI,The following statement contains a magic number: if (!(myToolTip.Equals("")) && GUI.tooltip.Equals(""))              {                  if (counterTT > 4)                  {                      myToolTip = GUI.tooltip;                      counterTT = 0;                  }                  else                  {                      counterTT++;                  }              }              else              {                  myToolTip = GUI.tooltip;                  counterTT = 0;              }
Magic Number,RealFuels,SolverRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\SolverRF.cs,InitializeOverallEngineData,The following statement contains a magic number: if (atmosphereCurve.Curve.keys.Length == 2 && atmosphereCurve.Curve.keys[0].value != atmosphereCurve.Curve.keys[1].value)              {                  Keyframe k0 = atmosphereCurve.Curve.keys[0];                  Keyframe k1 = atmosphereCurve.Curve.keys[1];                  if(k0.time > k1.time)                  {                      Keyframe t = k0;                      k0 = k1;                      k1 = t;                  }                  float minIsp = 0.0001f;                  float invSlope = (k1.time - k0.time) / (k0.value - k1.value);                  float maxP = k1.time + (k1.value - minIsp) * invSlope;                    atmosphereCurve = new FloatCurve();                  atmosphereCurve.Add(k0.time' k0.value' k0.inTangent' k0.outTangent);                  atmosphereCurve.Add(k1.time' k1.value' k1.inTangent' k1.outTangent);                  atmosphereCurve.Add(maxP' minIsp);              }
Magic Number,RealFuels,SolverRF,C:\repos\NathanKell_ModularFuelSystem\Source\Engines\SolverRF.cs,FlowMult,The following statement contains a magic number: return Math.Max(flowMult' 1e-5);
Magic Number,RealFuels,RefuelingPump,C:\repos\NathanKell_ModularFuelSystem\Source\Pumps\RefuelingPump.cs,AnalyticInfo,The following statement contains a magic number: if (enablePump && fi.timeSinceLastUpdate < double.MaxValue * 0.99)                  FillAttachedTanks(fi.timeSinceLastUpdate);
Magic Number,RealFuels,Utilities,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Utilities.cs,FormatFlux,The following statement contains a magic number: return KSPUtil.PrintSI(flux * 1e3' unit' 4);
Magic Number,RealFuels,Utilities,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Utilities.cs,FormatFlux,The following statement contains a magic number: return KSPUtil.PrintSI(flux * 1e3' unit' 4);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.fontSize = 12;
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.normal.textColor = new Color32(207'207'207'255);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.normal.textColor = new Color32(207'207'207'255);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.normal.textColor = new Color32(207'207'207'255);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.normal.textColor = new Color32(207'207'207'255);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.normal.background = CreateColorPixel(new Color32(7'54'66'200));
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.normal.background = CreateColorPixel(new Color32(7'54'66'200));
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.normal.background = CreateColorPixel(new Color32(7'54'66'200));
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.normal.background = CreateColorPixel(new Color32(7'54'66'200));
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.border = new RectOffset(3' 3' 3' 3);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.border = new RectOffset(3' 3' 3' 3);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.border = new RectOffset(3' 3' 3' 3);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.border = new RectOffset(3' 3' 3' 3);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.padding = new RectOffset(4' 4' 6' 4);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.padding = new RectOffset(4' 4' 6' 4);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.padding = new RectOffset(4' 4' 6' 4);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorTooltip.padding = new RectOffset(4' 4' 6' 4);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.normal.background = CreateColorPixel(new Color32(7'54'66'200));
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.normal.background = CreateColorPixel(new Color32(7'54'66'200));
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.normal.background = CreateColorPixel(new Color32(7'54'66'200));
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.normal.background = CreateColorPixel(new Color32(7'54'66'200));
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.border = new RectOffset(27' 27' 27' 27);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.border = new RectOffset(27' 27' 27' 27);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.border = new RectOffset(27' 27' 27' 27);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.border = new RectOffset(27' 27' 27' 27);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.padding = new RectOffset(10' 10' 10' 10);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.padding = new RectOffset(10' 10' 10' 10);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.padding = new RectOffset(10' 10' 10' 10);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.padding = new RectOffset(10' 10' 10' 10);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.normal.textColor = new Color32(147'161'161'255);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.normal.textColor = new Color32(147'161'161'255);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.normal.textColor = new Color32(147'161'161'255);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.normal.textColor = new Color32(147'161'161'255);
Magic Number,RealFuels,Styles,C:\repos\NathanKell_ModularFuelSystem\Source\Utilities\Styles.cs,InitStyles,The following statement contains a magic number: styleEditorPanel.fontSize = 12;
Magic Number,RealFuels.Tanks,FuelTank,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\FuelTank.cs,InitializeAmounts,The following statement contains a magic number: if (maxAmountExpression.Contains ("%") && double.TryParse (maxAmountExpression.Replace ("%"' "").Trim ()' out v)) {  				maxAmount = v * utilization * module.volume * 0.01; // NK  			} else if (double.TryParse (maxAmountExpression' out v)) {  				maxAmount = v;  			} else {  				Debug.LogError ("Unable to parse max amount expression: " + maxAmountExpression + " for tank " + name);  				maxAmount = 0;  				amount = 0;  				maxAmountExpression = null;  				return;  			}
Magic Number,RealFuels.Tanks,FuelTank,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\FuelTank.cs,InitializeAmounts,The following statement contains a magic number: if (amountExpression.ToLowerInvariant().Equals ("full")) {  				amount = maxAmount;  			} else if (amountExpression.Contains ("%") && double.TryParse (amountExpression.Replace ("%"' "").Trim ()' out v)) {  				amount = v * maxAmount * 0.01;  			} else if (double.TryParse (amountExpression' out v)) {  				amount = v;  			} else {  				amount = maxAmount;  				Debug.LogError ("Unable to parse amount expression: " + amountExpression + " for tank " + name);  			}
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,ChangeVolume,The following statement contains a magic number: ChangeTotalVolume (newVolume * 100 / utilization);
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,ChangeTotalVolume,The following statement contains a magic number: double newVolume = Math.Round (newTotalVolume * utilization * 0.01d' 4);
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,FormatMass,The following statement contains a magic number: if (mass < 1.0f) {  				return KSPUtil.PrintSI (mass * 1e6' "g"' 4);  			}
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,FormatMass,The following statement contains a magic number: if (mass < 1.0f) {  				return KSPUtil.PrintSI (mass * 1e6' "g"' 4);  			}
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,FormatMass,The following statement contains a magic number: return KSPUtil.PrintSI (mass' "t"' 4);
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,UpdateTweakableMenu,The following statement contains a magic number: activeEditor = (AvailableVolume >= 0.001);
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,UpdateUsedBy,The following statement contains a magic number: if (HighLogic.LoadedSceneIsEditor) {  				Events.RemoveAll (button => button.name.StartsWith ("MFT"));    				bool activeEditor = (AvailableVolume >= 0.001);    				int idx = 0;  				foreach (FuelInfo info in usedBy.Values) {  					KSPEvent kspEvent = new KSPEvent {  						name = "MFT" + idx++'  						guiActive = false'  						guiActiveEditor = activeEditor'  						guiName = info.Label  					};  					FuelInfo info1 = info;  					BaseEvent button = new BaseEvent (Events' kspEvent.name' () => ConfigureFor (info1)' kspEvent) {  						guiActiveEditor = activeEditor  					};  					Events.Add (button);  				}  				//MarkWindowDirty ();  			}
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The following statement contains a magic number: for (int i = tankList.Count - 1; i >= 0; --i)              {                  FuelTank tank = tankList[i];                  if (tank.amount <= 0) continue;                    if (tank.vsp > 0.0 && tank.totalArea > 0)                  {                      // Opposite of original boil off code. Finds massLost first.                      double massLost = 0.0;                      double deltaTemp;                      // should cache the insulation check as long as it's not liable to change between updates.                      bool hasMLI = part.heatConductivity < part.partInfo.partPrefab.heatConductivity;                      double hotTemp = (hasMLI ? part.temperature : part.skinTemperature) - (cooling * part.thermalMassReciprocal);                      double tankRatio = tank.maxAmount / volume;                        if (RFSettings.Instance.ferociousBoilOff)                          hotTemp = Math.Max(((hotTemp * part.thermalMass) - (tank.temperature * part.resourceThermalMass)) / (part.thermalMass - part.resourceThermalMass)' part.temperature);                        deltaTemp = hotTemp - tank.temperature;                        if (RFSettings.Instance.debugBoilOff)                      {                          if (debug2Display != "")                              debug2Display += " / ";                            if (debug1Display != "")                              debug1Display += " / ";                            if (debug0Display != "")                              debug0Display += " / ";                      }                        if (RFSettings.Instance.debugBoilOff)                          debug0Display += hotTemp.ToString("F6");                        if (deltaTemp > 0)                      {  #if DEBUG                          if (analyticalMode)                              print("Tank " + tank.name + " surface area = " + tank.totalArea);  #endif                            double wettedArea = tank.totalArea;// disabled until proper wetted vs ullage conduction can be done (tank.amount / tank.maxAmount);                            double Q = deltaTemp /                              ((tank.wallThickness / (tank.wallConduction * wettedArea))                               + (tank.insulationThickness / (tank.insulationConduction * wettedArea))                               + (tank.resourceConductivity > 0 ? (0.01 / (tank.resourceConductivity * wettedArea)) : 0));                            Q *= 0.001d; // convert to kilowatts                            massLost = Q / tank.vsp;                            if (RFSettings.Instance.debugBoilOff)                          {                              // Only do debugging displays if debugging enabled in RFSettings                                debug1Display += Utilities.FormatFlux(Q);                              debug2Display += (massLost * 1000 * 3600).ToString("F4") + "kg/hr";                          }                          massLost *= deltaTime; // Frame scaling                      }                        double lossAmount = massLost / tank.density;                        if (double.IsNaN(lossAmount))                          print("[RF] " + tank.name + " lossAmount is NaN!");                      else                      {                          double heatLost = 0d;                          if (lossAmount > tank.amount)                          {                              tank.amount = 0d;                          }                          else                          {                              tank.amount -= lossAmount;                                heatLost = -massLost * tank.vsp;                                // See if there is boiloff byproduct and see if any other parts want to accept it.                              if (tank.boiloffProductResource != null)                              {                                  double boiloffProductAmount = -(massLost / tank.boiloffProductResource.density);                                  double retainedAmount = part.RequestResource(tank.boiloffProductResource.id' boiloffProductAmount' ResourceFlowMode.STAGE_PRIORITY_FLOW);                                  massLost -= retainedAmount * tank.boiloffProductResource.density;                              }                                boiloffMass += massLost;                            }                          // subtract heat from boiloff                          // subtracting heat in analytic mode is tricky: Analytic flux handling is 'cheaty' and tricky to predict.                           // scratch sheet: example                          // [RealFuels.ModuleFuelTankRF] proceduralTankRealFuels Analytic Temp = 256.679360297684' Analytic Internal = 256.679360297684' Analytic Skin = 256.679360297684                          // [RealFuels.ModuleFuelTankRF] proceduralTankRealFuels deltaTime = 17306955.5092776' heat lost = 6638604.21227684' thermalMassReciprocal = 0.00444787360733243                            if (!analyticalMode)                          {                              heatLost *= ConductionFactors;                                if (hasMLI)                                  part.AddThermalFlux(heatLost * deltaTimeRecip);                              else                                  part.AddSkinThermalFlux(heatLost * deltaTimeRecip);                            }                          else                          {                              analyticInternalTemp = analyticInternalTemp + (heatLost * part.thermalMassReciprocal);                              previewInternalFluxAdjust += heatLost * deltaTimeRecip;  #if DEBUG                              if (deltaTime > 0)                                  print(part.name + " deltaTime = " + deltaTime + "' heat lost = " + heatLost + "' thermalMassReciprocal = " + part.thermalMassReciprocal);  #endif                          }                      }                  }                  else if (tank.loss_rate > 0 && tank.amount > 0)                  {                      double deltaTemp = part.temperature - tank.temperature;                      if (deltaTemp > 0)                      {                          double lossAmount = tank.maxAmount * tank.loss_rate * deltaTemp * deltaTime;                          if (lossAmount > tank.amount)                          {                              lossAmount = -tank.amount;                              tank.amount = 0d;                          }                          else                          {                              lossAmount = -lossAmount;                              tank.amount += lossAmount;                          }                          double massLost = tank.density * lossAmount;                          boiloffMass += massLost;                      }                  }              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The following statement contains a magic number: for (int i = tankList.Count - 1; i >= 0; --i)              {                  FuelTank tank = tankList[i];                  if (tank.amount <= 0) continue;                    if (tank.vsp > 0.0 && tank.totalArea > 0)                  {                      // Opposite of original boil off code. Finds massLost first.                      double massLost = 0.0;                      double deltaTemp;                      // should cache the insulation check as long as it's not liable to change between updates.                      bool hasMLI = part.heatConductivity < part.partInfo.partPrefab.heatConductivity;                      double hotTemp = (hasMLI ? part.temperature : part.skinTemperature) - (cooling * part.thermalMassReciprocal);                      double tankRatio = tank.maxAmount / volume;                        if (RFSettings.Instance.ferociousBoilOff)                          hotTemp = Math.Max(((hotTemp * part.thermalMass) - (tank.temperature * part.resourceThermalMass)) / (part.thermalMass - part.resourceThermalMass)' part.temperature);                        deltaTemp = hotTemp - tank.temperature;                        if (RFSettings.Instance.debugBoilOff)                      {                          if (debug2Display != "")                              debug2Display += " / ";                            if (debug1Display != "")                              debug1Display += " / ";                            if (debug0Display != "")                              debug0Display += " / ";                      }                        if (RFSettings.Instance.debugBoilOff)                          debug0Display += hotTemp.ToString("F6");                        if (deltaTemp > 0)                      {  #if DEBUG                          if (analyticalMode)                              print("Tank " + tank.name + " surface area = " + tank.totalArea);  #endif                            double wettedArea = tank.totalArea;// disabled until proper wetted vs ullage conduction can be done (tank.amount / tank.maxAmount);                            double Q = deltaTemp /                              ((tank.wallThickness / (tank.wallConduction * wettedArea))                               + (tank.insulationThickness / (tank.insulationConduction * wettedArea))                               + (tank.resourceConductivity > 0 ? (0.01 / (tank.resourceConductivity * wettedArea)) : 0));                            Q *= 0.001d; // convert to kilowatts                            massLost = Q / tank.vsp;                            if (RFSettings.Instance.debugBoilOff)                          {                              // Only do debugging displays if debugging enabled in RFSettings                                debug1Display += Utilities.FormatFlux(Q);                              debug2Display += (massLost * 1000 * 3600).ToString("F4") + "kg/hr";                          }                          massLost *= deltaTime; // Frame scaling                      }                        double lossAmount = massLost / tank.density;                        if (double.IsNaN(lossAmount))                          print("[RF] " + tank.name + " lossAmount is NaN!");                      else                      {                          double heatLost = 0d;                          if (lossAmount > tank.amount)                          {                              tank.amount = 0d;                          }                          else                          {                              tank.amount -= lossAmount;                                heatLost = -massLost * tank.vsp;                                // See if there is boiloff byproduct and see if any other parts want to accept it.                              if (tank.boiloffProductResource != null)                              {                                  double boiloffProductAmount = -(massLost / tank.boiloffProductResource.density);                                  double retainedAmount = part.RequestResource(tank.boiloffProductResource.id' boiloffProductAmount' ResourceFlowMode.STAGE_PRIORITY_FLOW);                                  massLost -= retainedAmount * tank.boiloffProductResource.density;                              }                                boiloffMass += massLost;                            }                          // subtract heat from boiloff                          // subtracting heat in analytic mode is tricky: Analytic flux handling is 'cheaty' and tricky to predict.                           // scratch sheet: example                          // [RealFuels.ModuleFuelTankRF] proceduralTankRealFuels Analytic Temp = 256.679360297684' Analytic Internal = 256.679360297684' Analytic Skin = 256.679360297684                          // [RealFuels.ModuleFuelTankRF] proceduralTankRealFuels deltaTime = 17306955.5092776' heat lost = 6638604.21227684' thermalMassReciprocal = 0.00444787360733243                            if (!analyticalMode)                          {                              heatLost *= ConductionFactors;                                if (hasMLI)                                  part.AddThermalFlux(heatLost * deltaTimeRecip);                              else                                  part.AddSkinThermalFlux(heatLost * deltaTimeRecip);                            }                          else                          {                              analyticInternalTemp = analyticInternalTemp + (heatLost * part.thermalMassReciprocal);                              previewInternalFluxAdjust += heatLost * deltaTimeRecip;  #if DEBUG                              if (deltaTime > 0)                                  print(part.name + " deltaTime = " + deltaTime + "' heat lost = " + heatLost + "' thermalMassReciprocal = " + part.thermalMassReciprocal);  #endif                          }                      }                  }                  else if (tank.loss_rate > 0 && tank.amount > 0)                  {                      double deltaTemp = part.temperature - tank.temperature;                      if (deltaTemp > 0)                      {                          double lossAmount = tank.maxAmount * tank.loss_rate * deltaTemp * deltaTime;                          if (lossAmount > tank.amount)                          {                              lossAmount = -tank.amount;                              tank.amount = 0d;                          }                          else                          {                              lossAmount = -lossAmount;                              tank.amount += lossAmount;                          }                          double massLost = tank.density * lossAmount;                          boiloffMass += massLost;                      }                  }              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankLossFunction,The following statement contains a magic number: for (int i = tankList.Count - 1; i >= 0; --i)              {                  FuelTank tank = tankList[i];                  if (tank.amount <= 0) continue;                    if (tank.vsp > 0.0 && tank.totalArea > 0)                  {                      // Opposite of original boil off code. Finds massLost first.                      double massLost = 0.0;                      double deltaTemp;                      // should cache the insulation check as long as it's not liable to change between updates.                      bool hasMLI = part.heatConductivity < part.partInfo.partPrefab.heatConductivity;                      double hotTemp = (hasMLI ? part.temperature : part.skinTemperature) - (cooling * part.thermalMassReciprocal);                      double tankRatio = tank.maxAmount / volume;                        if (RFSettings.Instance.ferociousBoilOff)                          hotTemp = Math.Max(((hotTemp * part.thermalMass) - (tank.temperature * part.resourceThermalMass)) / (part.thermalMass - part.resourceThermalMass)' part.temperature);                        deltaTemp = hotTemp - tank.temperature;                        if (RFSettings.Instance.debugBoilOff)                      {                          if (debug2Display != "")                              debug2Display += " / ";                            if (debug1Display != "")                              debug1Display += " / ";                            if (debug0Display != "")                              debug0Display += " / ";                      }                        if (RFSettings.Instance.debugBoilOff)                          debug0Display += hotTemp.ToString("F6");                        if (deltaTemp > 0)                      {  #if DEBUG                          if (analyticalMode)                              print("Tank " + tank.name + " surface area = " + tank.totalArea);  #endif                            double wettedArea = tank.totalArea;// disabled until proper wetted vs ullage conduction can be done (tank.amount / tank.maxAmount);                            double Q = deltaTemp /                              ((tank.wallThickness / (tank.wallConduction * wettedArea))                               + (tank.insulationThickness / (tank.insulationConduction * wettedArea))                               + (tank.resourceConductivity > 0 ? (0.01 / (tank.resourceConductivity * wettedArea)) : 0));                            Q *= 0.001d; // convert to kilowatts                            massLost = Q / tank.vsp;                            if (RFSettings.Instance.debugBoilOff)                          {                              // Only do debugging displays if debugging enabled in RFSettings                                debug1Display += Utilities.FormatFlux(Q);                              debug2Display += (massLost * 1000 * 3600).ToString("F4") + "kg/hr";                          }                          massLost *= deltaTime; // Frame scaling                      }                        double lossAmount = massLost / tank.density;                        if (double.IsNaN(lossAmount))                          print("[RF] " + tank.name + " lossAmount is NaN!");                      else                      {                          double heatLost = 0d;                          if (lossAmount > tank.amount)                          {                              tank.amount = 0d;                          }                          else                          {                              tank.amount -= lossAmount;                                heatLost = -massLost * tank.vsp;                                // See if there is boiloff byproduct and see if any other parts want to accept it.                              if (tank.boiloffProductResource != null)                              {                                  double boiloffProductAmount = -(massLost / tank.boiloffProductResource.density);                                  double retainedAmount = part.RequestResource(tank.boiloffProductResource.id' boiloffProductAmount' ResourceFlowMode.STAGE_PRIORITY_FLOW);                                  massLost -= retainedAmount * tank.boiloffProductResource.density;                              }                                boiloffMass += massLost;                            }                          // subtract heat from boiloff                          // subtracting heat in analytic mode is tricky: Analytic flux handling is 'cheaty' and tricky to predict.                           // scratch sheet: example                          // [RealFuels.ModuleFuelTankRF] proceduralTankRealFuels Analytic Temp = 256.679360297684' Analytic Internal = 256.679360297684' Analytic Skin = 256.679360297684                          // [RealFuels.ModuleFuelTankRF] proceduralTankRealFuels deltaTime = 17306955.5092776' heat lost = 6638604.21227684' thermalMassReciprocal = 0.00444787360733243                            if (!analyticalMode)                          {                              heatLost *= ConductionFactors;                                if (hasMLI)                                  part.AddThermalFlux(heatLost * deltaTimeRecip);                              else                                  part.AddSkinThermalFlux(heatLost * deltaTimeRecip);                            }                          else                          {                              analyticInternalTemp = analyticInternalTemp + (heatLost * part.thermalMassReciprocal);                              previewInternalFluxAdjust += heatLost * deltaTimeRecip;  #if DEBUG                              if (deltaTime > 0)                                  print(part.name + " deltaTime = " + deltaTime + "' heat lost = " + heatLost + "' thermalMassReciprocal = " + part.thermalMassReciprocal);  #endif                          }                      }                  }                  else if (tank.loss_rate > 0 && tank.amount > 0)                  {                      double deltaTemp = part.temperature - tank.temperature;                      if (deltaTemp > 0)                      {                          double lossAmount = tank.maxAmount * tank.loss_rate * deltaTemp * deltaTime;                          if (lossAmount > tank.amount)                          {                              lossAmount = -tank.amount;                              tank.amount = 0d;                          }                          else                          {                              lossAmount = -lossAmount;                              tank.amount += lossAmount;                          }                          double massLost = tank.density * lossAmount;                          boiloffMass += massLost;                      }                  }              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The following statement contains a magic number: for (int i = 0; i< 6; ++i)              {                  totalTankArea += part.DragCubes.WeightedArea[i];              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The following statement contains a magic number: for (int i = tankList.Count - 1; i >= 0; --i)              {                  FuelTank tank = tankList[i];                  if (tank.maxAmount > 0.0)                  {                      tankMaxAmount = tank.maxAmount;                        if (tank.utilization > 1.0)                          tankMaxAmount /= tank.utilization;                        tank.tankRatio = tankMaxAmount / volume;                        tank.totalArea = Math.Max(Math.Pow(Math.PI' 1.0 / 3.0) * Math.Pow((tankMaxAmount / 1000.0) * 6' 2.0 / 3.0)' tank.totalArea = totalTankArea * tank.tankRatio);                        if (RFSettings.Instance.debugBoilOff)                      {                          Debug.Log("[RF] " + tank.name + ".tankRatio = " + tank.tankRatio.ToString());                          Debug.Log("[RF] " + tank.name + ".maxAmount = " + tankMaxAmount.ToString());                          Debug.Log("[RF] " + part.name + ".totalTankArea = " + totalTankArea.ToString());                          Debug.Log("[RF] Tank surface area = " + tank.totalArea.ToString());                      }                  }              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The following statement contains a magic number: for (int i = tankList.Count - 1; i >= 0; --i)              {                  FuelTank tank = tankList[i];                  if (tank.maxAmount > 0.0)                  {                      tankMaxAmount = tank.maxAmount;                        if (tank.utilization > 1.0)                          tankMaxAmount /= tank.utilization;                        tank.tankRatio = tankMaxAmount / volume;                        tank.totalArea = Math.Max(Math.Pow(Math.PI' 1.0 / 3.0) * Math.Pow((tankMaxAmount / 1000.0) * 6' 2.0 / 3.0)' tank.totalArea = totalTankArea * tank.tankRatio);                        if (RFSettings.Instance.debugBoilOff)                      {                          Debug.Log("[RF] " + tank.name + ".tankRatio = " + tank.tankRatio.ToString());                          Debug.Log("[RF] " + tank.name + ".maxAmount = " + tankMaxAmount.ToString());                          Debug.Log("[RF] " + part.name + ".totalTankArea = " + totalTankArea.ToString());                          Debug.Log("[RF] Tank surface area = " + tank.totalArea.ToString());                      }                  }              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The following statement contains a magic number: for (int i = tankList.Count - 1; i >= 0; --i)              {                  FuelTank tank = tankList[i];                  if (tank.maxAmount > 0.0)                  {                      tankMaxAmount = tank.maxAmount;                        if (tank.utilization > 1.0)                          tankMaxAmount /= tank.utilization;                        tank.tankRatio = tankMaxAmount / volume;                        tank.totalArea = Math.Max(Math.Pow(Math.PI' 1.0 / 3.0) * Math.Pow((tankMaxAmount / 1000.0) * 6' 2.0 / 3.0)' tank.totalArea = totalTankArea * tank.tankRatio);                        if (RFSettings.Instance.debugBoilOff)                      {                          Debug.Log("[RF] " + tank.name + ".tankRatio = " + tank.tankRatio.ToString());                          Debug.Log("[RF] " + tank.name + ".maxAmount = " + tankMaxAmount.ToString());                          Debug.Log("[RF] " + part.name + ".totalTankArea = " + totalTankArea.ToString());                          Debug.Log("[RF] Tank surface area = " + tank.totalArea.ToString());                      }                  }              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The following statement contains a magic number: for (int i = tankList.Count - 1; i >= 0; --i)              {                  FuelTank tank = tankList[i];                  if (tank.maxAmount > 0.0)                  {                      tankMaxAmount = tank.maxAmount;                        if (tank.utilization > 1.0)                          tankMaxAmount /= tank.utilization;                        tank.tankRatio = tankMaxAmount / volume;                        tank.totalArea = Math.Max(Math.Pow(Math.PI' 1.0 / 3.0) * Math.Pow((tankMaxAmount / 1000.0) * 6' 2.0 / 3.0)' tank.totalArea = totalTankArea * tank.tankRatio);                        if (RFSettings.Instance.debugBoilOff)                      {                          Debug.Log("[RF] " + tank.name + ".tankRatio = " + tank.tankRatio.ToString());                          Debug.Log("[RF] " + tank.name + ".maxAmount = " + tankMaxAmount.ToString());                          Debug.Log("[RF] " + part.name + ".totalTankArea = " + totalTankArea.ToString());                          Debug.Log("[RF] Tank surface area = " + tank.totalArea.ToString());                      }                  }              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateTankArea,The following statement contains a magic number: for (int i = tankList.Count - 1; i >= 0; --i)              {                  FuelTank tank = tankList[i];                  if (tank.maxAmount > 0.0)                  {                      tankMaxAmount = tank.maxAmount;                        if (tank.utilization > 1.0)                          tankMaxAmount /= tank.utilization;                        tank.tankRatio = tankMaxAmount / volume;                        tank.totalArea = Math.Max(Math.Pow(Math.PI' 1.0 / 3.0) * Math.Pow((tankMaxAmount / 1000.0) * 6' 2.0 / 3.0)' tank.totalArea = totalTankArea * tank.tankRatio);                        if (RFSettings.Instance.debugBoilOff)                      {                          Debug.Log("[RF] " + tank.name + ".tankRatio = " + tank.tankRatio.ToString());                          Debug.Log("[RF] " + tank.name + ".maxAmount = " + tankMaxAmount.ToString());                          Debug.Log("[RF] " + part.name + ".totalTankArea = " + totalTankArea.ToString());                          Debug.Log("[RF] Tank surface area = " + tank.totalArea.ToString());                      }                  }              }
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,CalculateLowestTankTemperature,The following statement contains a magic number: lowestTankTemperature = 300;
Magic Number,RealFuels.Tanks,ModuleFuelTanks,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\ModuleFuelTanks.cs,SetAnalyticTemperature,The following statement contains a magic number: if (this.supportsBoiloff)              {                  if (fi.timeSinceLastUpdate < double.MaxValue * 0.99)                  {                      StartCoroutine(CalculateTankLossFunction(fi.timeSinceLastUpdate' true));                  }                  else if (CalculateLowestTankTemperature())                  {                      // Vessel is freshly spawned and has cryogenic tanks' set temperatures appropriately                      analyticSkinTemp = lowestTankTemperature;                      analyticInternalTemp = lowestTankTemperature;                  }              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,OnGUI,The following statement contains a magic number: if (ActionGroupMode) {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (430 * posMult' 365' 438' (Screen.height - 365));                  }                  tooltipRect = new Rect (guiWindowRect.xMin + 440' mousePos.y-5' 300' 20);              } else {                  if (guiWindowRect.width == 0) {                      guiWindowRect = new Rect (Screen.width - 8 - 430 * (posMult+1)' 365' 438' (Screen.height - 365));  				}                  tooltipRect = new Rect (guiWindowRect.xMin - (230-8)' mousePos.y - 5' 220' 20);              }
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,GUIWindow,The following statement contains a magic number: GUILayout.Space (20);
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,GUIWindow,The following statement contains a magic number: if (CheckTankList ()) {  				GUILayout.BeginHorizontal ();  				if (Math.Round (tank_module.AvailableVolume' 4) < 0) {  					GUILayout.Label ("Volume: " + tank_module.volumeDisplay' overfull);  				} else {  					GUILayout.Label ("Volume: " + tank_module.volumeDisplay);  				}  				GUILayout.EndHorizontal ();                    DisplayMass();    				scrollPos = GUILayout.BeginScrollView (scrollPos);    				GUIEngines ();    				GUITanks ();    				GUILayout.EndScrollView ();  				GUILayout.Label (MFSSettings.GetVersion ());  			}
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,GUIWindow,The following statement contains a magic number: if (!(myToolTip.Equals ("")) && GUI.tooltip.Equals ("")) {  				if (counterTT > 4) {  					myToolTip = GUI.tooltip;  					counterTT = 0;  				} else {  					counterTT++;  				}  			} else {  				myToolTip = GUI.tooltip;  				counterTT = 0;  			}
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,UpdateTank,The following statement contains a magic number: if (GUILayout.Button ("Update"' GUILayout.Width (53))) {  				string trimmed = tank.maxAmountExpression.Trim ();    				if (trimmed == "") {  					tank.maxAmount = 0;  					//Debug.LogWarning ("[MFT] Removing tank as empty input " + tank.name + " amount: " + tank.maxAmountExpression ?? "null");  				} else {  					double tmp;  					if (double.TryParse (trimmed' out tmp)) {  						tank.maxAmount = tmp;    						if (tmp != 0) {  							tank.amount = tank.fillable ? tank.maxAmount : 0;    							// Need to round-trip the value  							tank.maxAmountExpression = tank.maxAmount.ToString ();  							//Debug.LogWarning ("[MFT] Updating maxAmount " + tank.name + " amount: " + tank.maxAmountExpression ?? "null");  						}  					}  				}  			}
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,RemoveTank,The following statement contains a magic number: if (GUILayout.Button ("Remove"' GUILayout.Width (58))) {  				tank.maxAmount = 0;  				GameEvents.onEditorShipModified.Fire (EditorLogic.fetch.ship);  				//Debug.LogWarning ("[MFT] Removing tank from button " + tank.name + " amount: " + tank.maxAmountExpression ?? "null");  			}
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,EditTank,The following statement contains a magic number: GUILayout.Label (" "' GUILayout.Width (5));
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,EditTank,The following statement contains a magic number: tank.maxAmountExpression = GUILayout.TextField (tank.maxAmountExpression' style' GUILayout.Width (127));
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,AddTank,The following statement contains a magic number: GUILayout.Label (extraData' GUILayout.Width (150));
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,AddTank,The following statement contains a magic number: if (GUILayout.Button ("Add"' GUILayout.Width (120))) {  				tank.maxAmount = tank_module.AvailableVolume * tank.utilization;  				tank.amount = tank.fillable ? tank.maxAmount : 0;    				tank.maxAmountExpression = tank.maxAmount.ToString ();  				//Debug.LogWarning ("[MFT] Adding tank " + tank.name + " maxAmount: " + tank.maxAmountExpression ?? "null");  			}
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,NoRoom,The following statement contains a magic number: GUILayout.Label ("  No room for tank."' GUILayout.Width (150));
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,TankLine,The following statement contains a magic number: GUILayout.Label (" " + tank' GUILayout.Width (115));
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,TankLine,The following statement contains a magic number: if (tank_module.part.Resources.Contains (tank.name) && tank_module.part.Resources[tank.name].maxAmount > 0) {  				EditTank (tank);  			} else if (tank_module.AvailableVolume >= 0.001) {  				AddTank (tank);  			} else {  				NoRoom ();  			}
Magic Number,RealFuels.Tanks,TankWindow,C:\repos\NathanKell_ModularFuelSystem\Source\Tanks\TankWindow.cs,GUIEngines,The following statement contains a magic number: if (tank_module.usedBy.Count > 0 && tank_module.AvailableVolume >= 0.001) {  				GUILayout.BeginHorizontal ();  				GUILayout.Label ("Configure remaining volume for detected engines:");  				GUILayout.EndHorizontal ();    				foreach (FuelInfo info in tank_module.usedBy.Values)  				{  					GUILayout.BeginHorizontal ();  					if (GUILayout.Button (new GUIContent (info.Label' info.names))) {  						tank_module.ConfigureFor (info);  					}  					GUILayout.EndHorizontal ();  				}  			}
Magic Number,RealFuels.TechLevels,TechLevel,C:\repos\NathanKell_ModularFuelSystem\Source\TechLevels\TechLevel.cs,Load,The following statement contains a magic number: if (node.HasValue("TLTWR" + level))                  TWR = double.Parse(node.GetValue("TLTWR" + level));              else                  TWR = 60;
