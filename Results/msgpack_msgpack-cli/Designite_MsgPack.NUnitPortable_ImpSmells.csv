Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NUnit.Framework,TextMessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\TextMessageWriter.cs,WriteValue,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework,TextMessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\TextMessageWriter.cs,WriteArray,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,CollectionOrderedConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\CollectionConstraints.cs,doMatch,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\MsgUtils.cs,EscapeControlChars,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,IsFixedPointNumeric,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,NUnitComparer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\NUnitComparer.cs,Compare,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,NUnitEqualityComparer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\NUnitEqualityComparer.cs,AreEqual,Cyclomatic complexity of the method is 16
Complex Method,NUnit.Framework.Constraints,NUnitEqualityComparer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\NUnitEqualityComparer.cs,StreamsEqual,Cyclomatic complexity of the method is 10
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Assert.cs,AssertDoublesAreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Assert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Assert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,TextMessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\TextMessageWriter.cs,DisplayStringDifferences,The method has 5 parameters. Parameters: expected' actual' mismatch' ignoreCase' clipping
Long Parameter List,NUnit.Framework.Constraints,EqualConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\EqualConstraint.cs,DisplayFailurePoint,The method has 5 parameters. Parameters: writer' expected' actual' failurePoint' indent
Long Parameter List,NUnit.Framework.Constraints,MessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\MessageWriter.cs,DisplayStringDifferences,The method has 5 parameters. Parameters: expected' actual' mismatch' ignoreCase' clipping
Long Statement,MsgPack.NUnitPortable,TestingPlatform,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\TestingPlatform.cs,EnsureInitialized,The length of the statement  "				throw new InvalidOperationException( "TestingPlatform.Current must be set via assembly level initialization ([AssemblyInitialize]' [SetUpFixture]' or so)." );" is 158.
Complex Conditional,NUnit.Framework.Constraints,NUnitEqualityComparer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\NUnitEqualityComparer.cs,AreEqual,The conditional expression  "x is IEnumerable && y is IEnumerable && !(x is string && y is string)"  is complex.
Magic Number,NUnit.Framework,TextMessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\TextMessageWriter.cs,DisplayStringDifferences,The following statement contains a magic number: int maxDisplayLength = MaxLineLength                 - PrefixLength   // Allow for prefix                 - 2;
Magic Number,NUnit.Framework,TextMessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\TextMessageWriter.cs,WriteCaretLine,The following statement contains a magic number: WriteLine("  {0}^"' new string('-'' PrefixLength + mismatch - 2 + 1));
Magic Number,NUnit.Framework.Constraints,Constraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Constraint.cs,Constraint,The following statement contains a magic number: argcnt = 2;
Magic Number,NUnit.Framework.Constraints,Constraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Constraint.cs,GetStringRepresentation,The following statement contains a magic number: switch (argcnt)             {                 default:                 case 0:                     return string.Format("<{0}>"' DisplayName);                 case 1:                     return string.Format("<{0} {1}>"' DisplayName' _displayable(arg1));                 case 2:                     return string.Format("<{0} {1} {2}>"' DisplayName' _displayable(arg1)' _displayable(arg2));             }
Magic Number,NUnit.Framework.Constraints,CollectionOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\ConstraintOperators.cs,CollectionOperator,The following statement contains a magic number: this.right_precedence = 10;
Magic Number,NUnit.Framework.Constraints,WithOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\ConstraintOperators.cs,WithOperator,The following statement contains a magic number: this.right_precedence = 4;
Magic Number,NUnit.Framework.Constraints,ThrowsOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\ConstraintOperators.cs,ThrowsOperator,The following statement contains a magic number: this.right_precedence = 100;
Magic Number,NUnit.Framework.Constraints,AndOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\ConstraintOperators.cs,AndOperator,The following statement contains a magic number: this.left_precedence = this.right_precedence = 2;
Magic Number,NUnit.Framework.Constraints,OrOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\ConstraintOperators.cs,OrOperator,The following statement contains a magic number: this.left_precedence = this.right_precedence = 3;
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: uint leftSignMask = (leftUnion.UInt >> 31);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: uint rightSignMask = (rightUnion.UInt >> 31);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: ulong leftSignMask = (leftUnion.ULong >> 63);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: ulong rightSignMask = (rightUnion.ULong >> 63);
Magic Number,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\MsgUtils.cs,ClipExpectedAndActual,The following statement contains a magic number: clipStart = Math.Max( 0' mismatch - clipLength / 2 );
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.None:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     return Math.Abs(expected - actual) <= Convert.ToDouble(tolerance.Value);                  case ToleranceMode.Percent:                     if (expected == 0.0)                         return expected.Equals(actual);                                          double relativeError = Math.Abs((expected - actual) / expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0); #if !NETCF_1_0                 case ToleranceMode.Ulps:                     return FloatingPointNumerics.AreAlmostEqualUlps(                         expected' actual' Convert.ToInt64(tolerance.Value)); #endif                 default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.None:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     return Math.Abs(expected - actual) <= Convert.ToDouble(tolerance.Value);                  case ToleranceMode.Percent:                     if (expected == 0.0f)                         return expected.Equals(actual);                     float relativeError = Math.Abs((expected - actual) / expected);                     return (relativeError <= Convert.ToSingle(tolerance.Value) / 100.0f); #if !NETCF_1_0                 case ToleranceMode.Ulps:                     return FloatingPointNumerics.AreAlmostEqualUlps(                         expected' actual' Convert.ToInt32(tolerance.Value)); #endif                 default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.None:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     decimal decimalTolerance = Convert.ToDecimal(tolerance.Value);                     if(decimalTolerance > 0m)                       return Math.Abs(expected - actual) <= decimalTolerance; 				 			        return expected.Equals( actual );                  case ToleranceMode.Percent:                     if(expected == 0m)                         return expected.Equals(actual);                      double relativeError = Math.Abs(                         (double)(expected - actual) / (double)expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.None:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     ulong ulongTolerance = Convert.ToUInt64(tolerance.Value);                     if(ulongTolerance > 0ul) 			        { 				        ulong diff = expected >= actual ? expected - actual : actual - expected;                         return diff <= ulongTolerance; 			        }  			        return expected.Equals( actual );                  case ToleranceMode.Percent:                     if (expected == 0ul)                         return expected.Equals(actual);                      // Can't do a simple Math.Abs() here since it's unsigned                     ulong difference = Math.Max(expected' actual) - Math.Min(expected' actual);                     double relativeError = Math.Abs( (double)difference / (double)expected );                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.None:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     long longTolerance = Convert.ToInt64(tolerance.Value);                     if(longTolerance > 0L) 				        return Math.Abs(expected - actual) <= longTolerance;  			        return expected.Equals( actual );                  case ToleranceMode.Percent:                     if(expected == 0L)                         return expected.Equals(actual);                      double relativeError = Math.Abs(                         (double)(expected - actual) / (double)expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.None:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     uint uintTolerance = Convert.ToUInt32(tolerance.Value);                     if(uintTolerance > 0) 			        { 				        uint diff = expected >= actual ? expected - actual : actual - expected;                         return diff <= uintTolerance; 			        } 				 			        return expected.Equals( actual );                  case ToleranceMode.Percent:                     if(expected == 0u)                         return expected.Equals(actual);                      // Can't do a simple Math.Abs() here since it's unsigned                     uint difference = Math.Max(expected' actual) - Math.Min(expected' actual);                     double relativeError = Math.Abs((double)difference / (double)expected );                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.None:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     int intTolerance = Convert.ToInt32(tolerance.Value);                     if (intTolerance > 0)                         return Math.Abs(expected - actual) <= intTolerance;                      return expected.Equals(actual);                  case ToleranceMode.Percent:                     if (expected == 0)                         return expected.Equals(actual);                      double relativeError = Math.Abs(                         (double)(expected - actual) / (double)expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,StartsWithConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\MsgPack.NUnitPortable\NUnit\Framework\Constraints\StringConstraints.cs,WriteDescriptionTo,The following statement contains a magic number: writer.WriteExpectedValue( MsgUtils.ClipString(expected' writer.MaxLineLength - 40' 0) );
