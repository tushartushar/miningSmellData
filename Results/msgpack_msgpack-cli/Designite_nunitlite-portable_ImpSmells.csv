Implementation smell,Namespace,Class,File,Method,Description
Long Method,NUnit.Common,CommandLineOptions,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,ConfigureOptions,The method has 144 lines of code.
Complex Method,NUnitLite,ResultSummary,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\ResultSummary.cs,Summarize,Cyclomatic complexity of the method is 11
Complex Method,NUnitLite,TextRunner,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextRunner.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,NUnitLite,TextUI,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,DisplayTestResult,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Options,Option,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Options,Option,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,AddSeparators,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetDescription,Cyclomatic complexity of the method is 12
Long Parameter List,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,NUnitLite,TeamCityEventListener,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TeamCityEventListener.cs,TC_TestFailed,The length of the statement  "            _outWriter.WriteLine("##teamcity[testFailed name='{0}' message='{1}' details='{2}']"' Escape(name)' Escape(message)' Escape(details));" is 134.
Long Statement,NUnitLite,TextUI,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,DisplaySummaryReport,The length of the statement  "            Writer.WriteLabelLine("    Duration: "' string.Format(NumberFormatInfo.InvariantInfo' "{0:0.000} seconds"' summary.Duration));" is 126.
Long Statement,NUnit.Common,CommandLineOptions,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,ConfigureOptions,The length of the statement  "            this.Add("workers="' "Specify the {NUMBER} of worker threads to be used in running tests. If not specified' defaults to 2 or the number of processors' whichever is greater."'" is 174.
Long Statement,NUnit.Common,CommandLineOptions,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,ConfigureOptions,The length of the statement  "            this.Add("work="' "{PATH} of the directory to use for output files. If not specified' defaults to the current directory."'" is 122.
Long Statement,NUnit.Common,CommandLineOptions,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,ConfigureOptions,The length of the statement  "            this.Add("explore:"' "Display or save test info rather than running tests. Optionally provide an output {SPEC} for saving the test info. This option may be repeated."' v =>" is 172.
Complex Conditional,NUnitLite,TextUI,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,TestFinished,The conditional expression  "!isSuite && labels == "ALL" || !isSuite && labels == "ON" && result.Output.Length > 0"  is complex.
Complex Conditional,NUnit.Options,Option,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&                      ((names.Length == 1 && this.type != OptionValueType.None) ||                      (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&                     Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Virtual Method Call from Constructor,NUnit.Common,CommandLineOptions,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,CommandLineOptions,The constructor "CommandLineOptions" calls a virtual method "ConfigureOptions".
Virtual Method Call from Constructor,NUnit.Common,CommandLineOptions,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,CommandLineOptions,The constructor "CommandLineOptions" calls a virtual method "ConfigureOptions".
Magic Number,NUnitLite,TeamCityEventListener,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TeamCityEventListener.cs,TC_TestFinished,The following statement contains a magic number: int milliseconds = (int)(duration * 1000d);
Magic Number,NUnitLite,TextUI,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,DisplayHeader,The following statement contains a magic number: WriteHeader(String.Format("NUnitLite {0} {1}"' version.ToString(3)' build));
Magic Number,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'                      delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: string prefix = new string (' '' OptionWidth+2);
Magic Number,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 1;
Magic Number,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;
Magic Number,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;
Missing Default,NUnitLite,ResultSummary,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\ResultSummary.cs,Summarize,The following switch statement is missing a default case: switch (status)                 {                     case TestStatus.Passed:                         PassCount++;                         break;                     case TestStatus.Skipped:                         if (label == "Ignored")                             IgnoreCount++;                         else if (label == "Explicit")                             ExplicitCount++;                         else                             SkipCount++;                         break;                     case TestStatus.Failed:                         if (label == "Invalid")                             InvalidCount++;                         else if (label == "Error")                             ErrorCount++;                         else                             FailureCount++;                         break;                     case TestStatus.Inconclusive:                         InconclusiveCount++;                         break;                 }
Missing Default,NUnitLite,TeamCityEventListener,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TeamCityEventListener.cs,TestFinished,The following switch statement is missing a default case: switch (result.ResultState.Status)                 {                     case TestStatus.Passed:                         TC_TestFinished(testName' result.Duration);                         break;                     case TestStatus.Inconclusive:                         TC_TestIgnored(testName' "Inconclusive");                         break;                     case TestStatus.Skipped:                         TC_TestIgnored(testName' result.Message);                         break;                     case TestStatus.Failed:                         TC_TestFailed(testName' result.Message' result.StackTrace);                         TC_TestFinished(testName' result.Duration);                         break;                 }
Missing Default,NUnitLite,TextUI,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,DisplayTestResult,The following switch statement is missing a default case: switch (result.ResultState.Status)             {                 case TestStatus.Failed:                     style = ColorStyle.Failure;                     break;                 case TestStatus.Skipped:                     style = status == "Ignored" ? ColorStyle.Warning : ColorStyle.Output;                     break;                 case TestStatus.Passed:                     style = ColorStyle.Pass;                     break;             }
Missing Default,NUnit.Common,TestNameParser,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TestNameParser.cs,GetSeparator,The following switch statement is missing a default case: switch (argument[index])                 {                     case ''':                         if (nest == 0)                             return index;                         break;                      case '"':                         while (++index < argument.Length && argument[index] != '"')                             ;                         break;                      case '(':                     case '<':                         nest++;                         break;                      case ')':                     case '>':                         nest--;                         break;                 }
Missing Default,NUnit.Options,OptionSet,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {                     case OptionValueType.None:                         c.OptionValues.Add (n);                         c.Option.Invoke (c);                         break;                     case OptionValueType.Optional:                     case OptionValueType.Required:                          ParseValue (v' c);                         break;                 }
