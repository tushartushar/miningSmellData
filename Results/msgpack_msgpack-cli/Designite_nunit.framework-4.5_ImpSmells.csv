Implementation smell,Namespace,Class,File,Method,Description
Long Method,NUnit.Framework,TestCaseAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseAttribute.cs,GetParametersForTestCase,The method has 102 lines of code.
Long Method,NUnit.Framework,TestCaseSourceAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseSourceAttribute.cs,GetTestCasesFor,The method has 104 lines of code.
Long Method,NUnit.Framework.Constraints,NUnitEqualityComparer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\NUnitEqualityComparer.cs,AreEqual,The method has 114 lines of code.
Long Method,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\PlatformHelper.cs,IsPlatformSupported,The method has 140 lines of code.
Long Method,NUnit.Framework.Internal,NameFragment,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,GetDisplayString,The method has 145 lines of code.
Long Method,NUnit.Framework.Internal.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\NUnitTestCaseBuilder.cs,CheckTestMethodSignature,The method has 117 lines of code.
Complex Method,NUnit.Framework,RandomAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\RandomAttribute.cs,GetData,Cyclomatic complexity of the method is 15
Complex Method,NUnit.Framework,RandomDataConverter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\RandomAttribute.cs,GetData,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework,TestCaseAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseAttribute.cs,GetParametersForTestCase,Cyclomatic complexity of the method is 14
Complex Method,NUnit.Framework,TestCaseAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseAttribute.cs,PerformSpecialConversions,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework,TestCaseSourceAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseSourceAttribute.cs,GetTestCasesFor,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Framework,ValuesAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\ValuesAttribute.cs,GetData,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework,ValueSourceAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\ValueSourceAttribute.cs,GetDataSourceValue,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,CollectionOrderedConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\CollectionOrderedConstraint.cs,Matches,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\MsgUtils.cs,FormatArray,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\MsgUtils.cs,EscapeControlChars,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,IsFixedPointNumeric,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,NUnitComparer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\NUnitComparer.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,NUnitEqualityComparer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\NUnitEqualityComparer.cs,AreEqual,Cyclomatic complexity of the method is 23
Complex Method,NUnit.Framework.Constraints,NUnitEqualityComparer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\NUnitEqualityComparer.cs,StreamsEqual,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Constraints,PathConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\PathConstraint.cs,Canonicalize,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\PlatformHelper.cs,IsPlatformSupported,Cyclomatic complexity of the method is 35
Complex Method,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\PlatformHelper.cs,IsRuntimeSupported,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Internal,TestResult,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Results\TestResult.cs,AddToXml,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromFrameworkVersion,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Internal,TestFilter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestFilter.cs,FromXml,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,Cyclomatic complexity of the method is 17
Complex Method,NUnit.Framework.Internal,NameFragment,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,GetDisplayString,Cyclomatic complexity of the method is 46
Complex Method,NUnit.Framework.Internal,NameFragment,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,EscapeControlChar,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TypeHelper.cs,GetDisplayName,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TypeHelper.cs,GetDisplayName,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TypeHelper.cs,BestCommonType,Cyclomatic complexity of the method is 31
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TypeHelper.cs,ConvertArgumentList,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TypeHelper.cs,CanDeduceTypeArgsFromArgs,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Internal,TestSuiteResult,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Results\TestSuiteResult.cs,AddResult,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Internal.Builders,DatapointProvider,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\DatapointProvider.cs,GetDataFor,Cyclomatic complexity of the method is 17
Complex Method,NUnit.Framework.Internal.Builders,DefaultSuiteBuilder,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\DefaultSuiteBuilder.cs,GetFixtureBuilderAttributes,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Internal.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\NUnitTestCaseBuilder.cs,CheckTestMethodSignature,Cyclomatic complexity of the method is 23
Complex Method,NUnit.Framework.Internal.Builders,NUnitTestFixtureBuilder,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\NUnitTestFixtureBuilder.cs,BuildFrom,Cyclomatic complexity of the method is 14
Complex Method,NUnit.Framework.Internal.Execution,CompositeWorkItem,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\CompositeWorkItem.cs,PerformWork,Cyclomatic complexity of the method is 10
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Assert.Comparisons.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Assert.Comparisons.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Assert.Comparisons.cs,AssertDoublesAreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,CollectionAssert,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\CollectionAssert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' comparer' message' args
Long Parameter List,NUnit.Framework,CollectionAssert,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\CollectionAssert.cs,AreNotEqual,The method has 5 parameters. Parameters: expected' actual' comparer' message' args
Long Parameter List,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Api\FrameworkController.cs,FrameworkController,The method has 5 parameters. Parameters: assemblyNameOrPath' idPrefix' settings' runnerType' builderType
Long Parameter List,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Api\FrameworkController.cs,FrameworkController,The method has 5 parameters. Parameters: assembly' idPrefix' settings' runnerType' builderType
Long Parameter List,NUnit.Framework.Constraints,ComparisonConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\ComparisonConstraint.cs,ComparisonConstraint,The method has 5 parameters. Parameters: value' lessComparisonResult' equalComparisonResult' greaterComparisonResult' predicate
Long Parameter List,NUnit.Framework.Constraints,MessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\MessageWriter.cs,DisplayStringDifferences,The method has 5 parameters. Parameters: expected' actual' mismatch' ignoreCase' clipping
Long Parameter List,NUnit.Framework.Constraints,EqualConstraintResult,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\EqualConstraintResult.cs,DisplayFailurePoint,The method has 5 parameters. Parameters: writer' expected' actual' failurePoint' indent
Long Parameter List,NUnit.Framework.Internal,TextMessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\TextMessageWriter.cs,DisplayStringDifferences,The method has 5 parameters. Parameters: expected' actual' mismatch' ignoreCase' clipping
Long Identifier,NUnit.Framework.Constraints,PathConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\PathConstraint.cs,,The length of the parameter NonWindowsDirectorySeparatorChar is 32.
Long Identifier,NUnit.Framework.Internal,AsyncTaskInvocationRegion,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\AsyncInvocationRegion.cs,,The length of the parameter TaskResultPropertyBindingFlags is 30.
Long Statement,NUnit.Framework,RandomAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\RandomAttribute.cs,WeConvert,The length of the statement  "            if (targetType == typeof(short) || targetType == typeof(ushort) || targetType == typeof(byte) || targetType == typeof(sbyte))" is 125.
Long Statement,NUnit.Framework,EnumDataSource,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\RandomAttribute.cs,GetData,The length of the statement  "                Guard.ArgumentValid(parameter.ParameterType.GetTypeInfo().IsEnum' "EnumDataSource requires an enum parameter"' "parameter");" is 124.
Long Statement,NUnit.Framework,TestCaseAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseAttribute.cs,PerformSpecialConversions,The length of the statement  "                    targetType == typeof(short?) || targetType == typeof(byte?) || targetType == typeof(sbyte?) || targetType == typeof(double?))" is 125.
Long Statement,NUnit.Framework,TestCaseAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseAttribute.cs,PerformSpecialConversions,The length of the statement  "                    Type convertTo = targetType.GetTypeInfo().IsGenericType && targetType.GetGenericTypeDefinition() == typeof(Nullable<>) ? " is 120.
Long Statement,NUnit.Framework,TestCaseSourceAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseSourceAttribute.cs,GetTestCaseSource,The length of the statement  "                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy);" is 124.
Long Statement,NUnit.Framework,TestFixtureSourceAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestFixtureSourceAttribute.cs,GetTestFixtureSource,The length of the statement  "                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy);" is 124.
Long Statement,NUnit.Framework,ValueSourceAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\ValueSourceAttribute.cs,GetDataSource,The length of the statement  "                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy);" is 124.
Long Statement,NUnit.Framework,ValueSourceAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\ValueSourceAttribute.cs,ThrowInvalidDataSourceException,The length of the statement  "            throw new InvalidDataSourceException("The sourceName specified on a ValueSourceAttribute must refer to a non null static field' property or method.");" is 150.
Long Statement,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Api\FrameworkController.cs,Initialize,The length of the statement  "                var traceLevel = (InternalTraceLevel)Enum.Parse(typeof(InternalTraceLevel)' (string)Settings[FrameworkPackageSettings.InternalTraceLevel]' true);" is 145.
Long Statement,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Api\FrameworkController.cs,Initialize,The length of the statement  "                    var workDirectory = Settings.ContainsKey(FrameworkPackageSettings.WorkDirectory) ? (string)Settings[FrameworkPackageSettings.WorkDirectory] : Env.DefaultWorkDirectory;" is 167.
Long Statement,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Api\FrameworkController.cs,InsertSettingsElement,The length of the statement  "                AddSetting(settingsNode' FrameworkPackageSettings.NumberOfTestWorkers' NUnitTestAssemblyRunner.DefaultLevelOfParallelism);" is 122.
Long Statement,NUnit.Framework.Api,NUnitTestAssemblyRunner,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Api\NUnitTestAssemblyRunner.cs,StartRun,The length of the statement  "            if (!Settings.ContainsKey(FrameworkPackageSettings.SynchronousEvents) || !(bool)Settings[FrameworkPackageSettings.SynchronousEvents])" is 133.
Long Statement,NUnit.Compatibility,AttributeHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Compatibility\AttributeHelper.cs,GetCustomAttributes,The length of the statement  "                throw new ArgumentException(string.Format("Actual value {0} does not implement ICustomAttributeProvider."' actual)' "actual");" is 126.
Long Statement,NUnit.Compatibility,AttributeHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Compatibility\AttributeHelper.cs,GetCustomAttributes,The length of the statement  "            throw new ArgumentException(string.Format("Actual value {0} must be a MemberInfo' ParameterInfo or Assembly."' actual)' "actual");" is 130.
Long Statement,NUnit.Framework.Constraints,AssignableToConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\AssignableToConstraint.cs,Matches,The length of the statement  "            return expectedType != null && actual != null && expectedType.GetTypeInfo().IsAssignableFrom(actual.GetType().GetTypeInfo());" is 125.
Long Statement,NUnit.Framework.Constraints,CollectionContainsConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\CollectionContainsConstraint.cs,Using,The length of the statement  "            Func<TMemberType' TCollectionType' bool> invertedComparison = (actual' expected) => comparison.Invoke(expected' actual);" is 120.
Long Statement,NUnit.Framework.Constraints,ComparisonConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\ComparisonConstraint.cs,ApplyTo,The length of the statement  "            bool hasSucceeded = icomp < 0 && greaterComparisonResult || icomp == 0 && equalComparisonResult || icomp > 0 && lessComparisonResult;" is 133.
Long Statement,NUnit.Framework.Constraints,EmptyConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\EmptyConstraint.cs,ApplyTo,The length of the statement  "                throw new System.ArgumentException("The actual value must be a string or a non-null IEnumerable or DirectoryInfo"' "actual");" is 125.
Long Statement,NUnit.Framework.Constraints,PathConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\PathConstraint.cs,GetStringRepresentation,The length of the statement  "            return string.Format("<{0} \"{1}\" {2}>"' DisplayName.ToLower()' expected' caseInsensitive ? "ignorecase" : "respectcase");" is 123.
Long Statement,NUnit.Framework.Constraints,ThrowsExceptionConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\ThrowsExceptionConstraint.cs,ApplyTo,The length of the statement  "                throw new ArgumentException(string.Format("The actual value must be a TestDelegate or AsyncTestDelegate but was {0}"' actual.GetType().Name)' "actual");" is 152.
Long Statement,NUnit.Framework.Interfaces,TNode,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Interfaces\TNode.cs,EscapeInvalidXmlCharacters,The length of the statement  "            // For detailed explanation of the regex see http://mnaoumov.wordpress.com/2014/06/15/escaping-invalid-xml-unicode-characters/" is 126.
Long Statement,NUnit.Framework.Internal,AsyncTaskInvocationRegion,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\AsyncInvocationRegion.cs,WaitForPendingOperationsToComplete,The length of the statement  "                PropertyInfo taskResultProperty = invocationResult.GetType().GetProperty(TaskResultProperty' TaskResultPropertyBindingFlags);" is 125.
Long Statement,NUnit.Framework.Internal,GenericMethodHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\GenericMethodHelper.cs,GetTypeArguments,The length of the statement  "            Guard.ArgumentValid(argList.Length == ParmTypes.Length' "Supplied arguments do not match required method parameters"' "argList");" is 129.
Long Statement,NUnit.Framework.Internal.Builders,DatapointProvider,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\DatapointProvider.cs,HasDataFor,The length of the statement  "            foreach (MemberInfo member in containingType.GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy))" is 180.
Long Statement,NUnit.Framework.Internal.Builders,DatapointProvider,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\DatapointProvider.cs,GetDataFor,The length of the statement  "            foreach (MemberInfo member in fixtureType.GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy))" is 177.
Long Statement,NUnit.Framework.Internal.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\NUnitTestCaseBuilder.cs,CheckTestMethodSignature,The length of the statement  "            ITypeInfo returnType = testMethod.Method.IsGenericMethodDefinition && (parms == null || parms.Arguments == null) ? new TypeWrapper(typeof(void)) : testMethod.Method.ReturnType;" is 176.
Long Statement,NUnit.Framework.Internal.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\NUnitTestCaseBuilder.cs,CheckTestMethodSignature,The length of the statement  "                return MarkAsNotRunnable(testMethod' string.Format("Not enough arguments provided' provide at least {0} arguments."' minArgsNeeded));" is 133.
Long Statement,NUnit.Framework.Internal.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\NUnitTestCaseBuilder.cs,CheckTestMethodSignature,The length of the statement  "                return MarkAsNotRunnable(testMethod' string.Format("Too many arguments provided' provide at most {0} arguments."' maxArgsNeeded));" is 130.
Long Statement,NUnit.Framework.Internal.Builders,PairwiseTestCaseGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,SelfTest,The length of the statement  "                                    throw new InvalidOperationException( string.Format( "PairwiseStrategy : Not all pairs are covered : {0}"' tuple.ToString() ) );" is 127.
Long Statement,NUnit.Framework.Internal.Execution,CompositeWorkItem,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\CompositeWorkItem.cs,InitializeSetUpAndTearDownCommands,The length of the statement  "                ? CommandBuilder.BuildSetUpTearDownList(_suite.TypeInfo.Type' typeof(OneTimeSetUpAttribute)' typeof(OneTimeTearDownAttribute))" is 126.
Long Statement,NUnit.Framework.Internal.Execution,EventPump,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\EventPump.cs,Start,The length of the statement  "            if ( Interlocked.CompareExchange (ref _pumpState' (int)EventPumpState.Pumping' (int)EventPumpState.Stopped) == (int)EventPumpState.Stopped)  // Ignore if already started" is 169.
Long Statement,NUnit.Framework.Internal.Execution,EventPump,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\EventPump.cs,Stop,The length of the statement  "            if (Interlocked.CompareExchange (ref _pumpState' (int)EventPumpState.Stopping' (int)EventPumpState.Pumping) == (int)EventPumpState.Pumping)" is 139.
Long Statement,NUnit.Framework.Internal.Execution,WorkItemQueue,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\WorkItemQueue.cs,Start,The length of the statement  "            if (Interlocked.CompareExchange(ref _state' (int)WorkItemQueueState.Running' (int)WorkItemQueueState.Paused) == (int)WorkItemQueueState.Paused)" is 143.
Complex Conditional,NUnit.Framework,RandomAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\RandomAttribute.cs,WeConvert,The conditional expression  "targetType == typeof(short) || targetType == typeof(ushort) || targetType == typeof(byte) || targetType == typeof(sbyte)"  is complex.
Complex Conditional,NUnit.Framework,TestCaseAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\TestCaseAttribute.cs,PerformSpecialConversions,The conditional expression  "targetType == typeof(short) || targetType == typeof(byte) || targetType == typeof(sbyte) ||                     targetType == typeof(short?) || targetType == typeof(byte?) || targetType == typeof(sbyte?) || targetType == typeof(double?)"  is complex.
Complex Conditional,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The conditional expression  "token.Length >= 5 && token[2] == ':' && (c == 'a' || char.IsDigit(c))"  is complex.
Complex Conditional,NUnit.Framework.Internal,TestSuite,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Tests\TestSuite.cs,CheckSetUpTearDownMethods,The conditional expression  "method.IsAbstract ||                      !method.IsPublic && !method.IsFamily ||                      method.GetParameters().Length > 0 ||                      method.ReturnType != typeof(void) #if NET_4_0 || NET_4_5 || PORTABLE                      &&                      method.ReturnType != typeof(Task)"  is complex.
Virtual Method Call from Constructor,NUnit.Framework.Constraints,RangeConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\RangeConstraint.cs,RangeConstraint,The constructor "RangeConstraint" calls a virtual method "Compare".
Virtual Method Call from Constructor,NUnit.Framework.Internal.Execution,WorkItem,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\WorkItem.cs,WorkItem,The constructor "WorkItem" calls a virtual method "MakeTestResult".
Empty Catch Block,NUnit.Framework.Constraints,BinarySerializableConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\BinarySerializableConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Constraints,DelayedConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\DelayedConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Constraints,DelayedConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\DelayedConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Constraints,XmlSerializableConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\XmlSerializableConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Constraints,XmlSerializableConstraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\XmlSerializableConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Internal,OSPlatform,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\OSPlatform.cs,GetWindows81PlusVersion,The method has an empty catch block.
Magic Number,NUnit.Framework,CategoryAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\CategoryAttribute.cs,CategoryAttribute,The following statement contains a magic number: categoryName = categoryName.Substring( 0' categoryName.Length - 9 );
Magic Number,NUnit.Framework,CombiningStrategyAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\CombiningStrategyAttribute.cs,ApplyToTest,The following statement contains a magic number: joinType = joinType.Substring(0' joinType.Length - 8);
Magic Number,NUnit.Framework,PropertyAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\PropertyAttribute.cs,PropertyAttribute,The following statement contains a magic number: propertyName = propertyName.Substring( 0' propertyName.Length - 9 );
Magic Number,NUnit.Framework,RangeAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\RangeAttribute.cs,RangeAttribute,The following statement contains a magic number: double tol = aStep / 1000;
Magic Number,NUnit.Framework,RangeAttribute,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Attributes\RangeAttribute.cs,RangeAttribute,The following statement contains a magic number: float tol = aStep / 1000;
Magic Number,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Api\FrameworkController.cs,GetProcessorArchitecture,The following statement contains a magic number: return IntPtr.Size == 8 ? "x64" : "x86";
Magic Number,NUnit.Framework.Constraints,Constraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Constraint.cs,Constraint,The following statement contains a magic number: _displayName = new Lazy<string>(() =>             {                 var type = this.GetType();                 var displayName = type.Name;                 if (type.GetTypeInfo().IsGenericType)                     displayName = displayName.Substring(0' displayName.Length - 2);                 if (displayName.EndsWith("Constraint"' StringComparison.Ordinal))                     displayName = displayName.Substring(0' displayName.Length - 10);                 return displayName;             });
Magic Number,NUnit.Framework.Constraints,Constraint,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Constraint.cs,Constraint,The following statement contains a magic number: _displayName = new Lazy<string>(() =>             {                 var type = this.GetType();                 var displayName = type.Name;                 if (type.GetTypeInfo().IsGenericType)                     displayName = displayName.Substring(0' displayName.Length - 2);                 if (displayName.EndsWith("Constraint"' StringComparison.Ordinal))                     displayName = displayName.Substring(0' displayName.Length - 10);                 return displayName;             });
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: uint leftSignMask = (leftUnion.UInt >> 31);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: uint rightSignMask = (rightUnion.UInt >> 31);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: ulong leftSignMask = (leftUnion.ULong >> 63);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: ulong rightSignMask = (rightUnion.ULong >> 63);
Magic Number,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\MsgUtils.cs,MsgUtils,The following statement contains a magic number: AddFormatter(next => val => val is IEnumerable ? FormatCollection((IEnumerable)val' 0' 10) : next(val));
Magic Number,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\MsgUtils.cs,ClipExpectedAndActual,The following statement contains a magic number: clipStart = Math.Max(0' mismatch - clipLength / 2);
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.Unset:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     return Math.Abs(expected - actual) <= Convert.ToDouble(tolerance.Value);                  case ToleranceMode.Percent:                     if (expected == 0.0)                         return expected.Equals(actual);                      double relativeError = Math.Abs((expected - actual) / expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  case ToleranceMode.Ulps:                     return FloatingPointNumerics.AreAlmostEqualUlps(                         expected' actual' Convert.ToInt64(tolerance.Value));                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.Unset:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     return Math.Abs(expected - actual) <= Convert.ToDouble(tolerance.Value);                  case ToleranceMode.Percent:                     if (expected == 0.0f)                         return expected.Equals(actual);                     float relativeError = Math.Abs((expected - actual) / expected);                     return (relativeError <= Convert.ToSingle(tolerance.Value) / 100.0f);                  case ToleranceMode.Ulps:                     return FloatingPointNumerics.AreAlmostEqualUlps(                         expected' actual' Convert.ToInt32(tolerance.Value));                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.Unset:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     decimal decimalTolerance = Convert.ToDecimal(tolerance.Value);                     if (decimalTolerance > 0m)                         return Math.Abs(expected - actual) <= decimalTolerance;                      return expected.Equals(actual);                  case ToleranceMode.Percent:                     if (expected == 0m)                         return expected.Equals(actual);                      double relativeError = Math.Abs(                         (double)(expected - actual) / (double)expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.Unset:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     ulong ulongTolerance = Convert.ToUInt64(tolerance.Value);                     if (ulongTolerance > 0ul)                     {                         ulong diff = expected >= actual ? expected - actual : actual - expected;                         return diff <= ulongTolerance;                     }                      return expected.Equals(actual);                  case ToleranceMode.Percent:                     if (expected == 0ul)                         return expected.Equals(actual);                      // Can't do a simple Math.Abs() here since it's unsigned                     ulong difference = Math.Max(expected' actual) - Math.Min(expected' actual);                     double relativeError = Math.Abs((double)difference / (double)expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.Unset:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     long longTolerance = Convert.ToInt64(tolerance.Value);                     if (longTolerance > 0L)                         return Math.Abs(expected - actual) <= longTolerance;                      return expected.Equals(actual);                  case ToleranceMode.Percent:                     if (expected == 0L)                         return expected.Equals(actual);                      double relativeError = Math.Abs(                         (double)(expected - actual) / (double)expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.Unset:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     uint uintTolerance = Convert.ToUInt32(tolerance.Value);                     if (uintTolerance > 0)                     {                         uint diff = expected >= actual ? expected - actual : actual - expected;                         return diff <= uintTolerance;                     }                      return expected.Equals(actual);                  case ToleranceMode.Percent:                     if (expected == 0u)                         return expected.Equals(actual);                      // Can't do a simple Math.Abs() here since it's unsigned                     uint difference = Math.Max(expected' actual) - Math.Min(expected' actual);                     double relativeError = Math.Abs((double)difference / (double)expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)             {                 case ToleranceMode.Unset:                     return expected.Equals(actual);                  case ToleranceMode.Linear:                     int intTolerance = Convert.ToInt32(tolerance.Value);                     if (intTolerance > 0)                         return Math.Abs(expected - actual) <= intTolerance;                      return expected.Equals(actual);                  case ToleranceMode.Percent:                     if (expected == 0)                         return expected.Equals(actual);                      double relativeError = Math.Abs(                         (double)(expected - actual) / (double)expected);                     return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                  default:                     throw new ArgumentException("Unknown tolerance mode specified"' "mode");             }
Magic Number,NUnit.Framework.Constraints,AndOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Operators\AndOperator.cs,AndOperator,The following statement contains a magic number: this.left_precedence = this.right_precedence = 2;
Magic Number,NUnit.Framework.Constraints,CollectionOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Operators\CollectionOperator.cs,CollectionOperator,The following statement contains a magic number: this.right_precedence = 10;
Magic Number,NUnit.Framework.Constraints,OrOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Operators\OrOperator.cs,OrOperator,The following statement contains a magic number: this.left_precedence = this.right_precedence = 3;
Magic Number,NUnit.Framework.Constraints,ThrowsOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Operators\ThrowsOperator.cs,ThrowsOperator,The following statement contains a magic number: this.right_precedence = 100;
Magic Number,NUnit.Framework.Constraints,WithOperator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Constraints\Operators\WithOperator.cs,WithOperator,The following statement contains a magic number: this.right_precedence = 4;
Magic Number,NUnit.Framework.Interfaces,ResultState,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Interfaces\ResultState.cs,GetHashCode,The following statement contains a magic number: return (int)Status << 8 + (int)Site ^ Label.GetHashCode();
Magic Number,NUnit.Framework.Interfaces,TNode,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Interfaces\TNode.cs,WriteCDataTo,The following statement contains a magic number: writer.WriteCData(text.Substring(start' illegal - start + 2));
Magic Number,NUnit.Framework.Interfaces,TNode,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Interfaces\TNode.cs,WriteCDataTo,The following statement contains a magic number: start = illegal + 2;
Magic Number,NUnit.Framework.Interfaces,NodeFilter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Interfaces\TNode.cs,NodeFilter,The following statement contains a magic number: string filter = xpath.Substring(lbrack+1' xpath.Length - lbrack - 2);
Magic Number,NUnit.Framework.Internal,AssemblyHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\AssemblyHelper.cs,GetAssemblyPathFromCodeBase,The following statement contains a magic number: codeBase[start + 2] == ':'
Magic Number,NUnit.Framework.Internal,TextMessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\TextMessageWriter.cs,DisplayStringDifferences,The following statement contains a magic number: int maxDisplayLength = MaxLineLength                 - PrefixLength   // Allow for prefix                 - 2;
Magic Number,NUnit.Framework.Internal,TextMessageWriter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\TextMessageWriter.cs,WriteCaretLine,The following statement contains a magic number: WriteLine("  {0}^"' new string('-'' PrefixLength + mismatch - 2 + 1));
Magic Number,NUnit.Framework.Internal,OSPlatform,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\OSPlatform.cs,GetWindows81PlusVersion,The following statement contains a magic number: return new Version(6' 3' build);
Magic Number,NUnit.Framework.Internal,OSPlatform,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\OSPlatform.cs,GetWindows81PlusVersion,The following statement contains a magic number: return new Version(6' 3' build);
Magic Number,NUnit.Framework.Internal,OSPlatform,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\OSPlatform.cs,CheckIfIsMacOSX,The following statement contains a magic number: IntPtr buf = Marshal.AllocHGlobal(8192);
Magic Number,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )             {                 case "WIN":                 case "WIN32":                     isSupported = _os.IsWindows;                     break;                 case "WIN32S":                     isSupported = _os.IsWin32S;                     break;                 case "WIN32WINDOWS":                     isSupported = _os.IsWin32Windows;                     break;                 case "WIN32NT":                     isSupported = _os.IsWin32NT;                     break;                 case "WINCE":                     isSupported = _os.IsWinCE;                     break;                 case "WIN95":                     isSupported = _os.IsWin95;                     break;                 case "WIN98":                     isSupported = _os.IsWin98;                     break;                 case "WINME":                     isSupported = _os.IsWinME;                     break;                 case "NT3":                     isSupported = _os.IsNT3;                     break;                 case "NT4":                     isSupported = _os.IsNT4;                     break;                 case "NT5":                     isSupported = _os.IsNT5;                     break;                 case "WIN2K":                     isSupported = _os.IsWin2K;                     break;                 case "WINXP":                     isSupported = _os.IsWinXP;                     break;                 case "WIN2003SERVER":                     isSupported = _os.IsWin2003Server;                     break;                 case "NT6":                     isSupported = _os.IsNT6;                     break;                 case "VISTA":                     isSupported = _os.IsVista;                     break;                 case "WIN2008SERVER":                     isSupported = _os.IsWin2008Server;                     break;                 case "WIN2008SERVERR2":                     isSupported = _os.IsWin2008ServerR2;                     break;                 case "WIN2012SERVER":                     isSupported = _os.IsWin2012ServerR1 || _os.IsWin2012ServerR2;                     break;                 case "WIN2012SERVERR2":                     isSupported = _os.IsWin2012ServerR2;                     break;                 case "WIN7":                 case "WINDOWS7":                     isSupported = _os.IsWindows7;                     break;                 case "WINDOWS8":                 case "WIN8":                     isSupported = _os.IsWindows8;                     break;                 case "WINDOWS8.1":                 case "WIN8.1":                     isSupported = _os.IsWindows81;                     break;                 case "WINDOWS10":                 case "WIN10":                     isSupported = _os.IsWindows10;                     break;                 case "WINDOWSSERVER10":                     isSupported = _os.IsWindowsServer10;                     break;                 case "UNIX":                 case "LINUX":                     isSupported = _os.IsUnix;                     break;                 case "XBOX":                     isSupported = _os.IsXbox;                     break;                 case "MACOSX":                     isSupported = _os.IsMacOSX;                     break;                 // These bitness tests relate to the process' not the OS.                 // We can't use Environment.Is64BitProcess because it's                 // only supported in NET 4.0 and higher.                 case "64-BIT":                 case "64-BIT-PROCESS":                     isSupported = IntPtr.Size == 8;                     break;                 case "32-BIT":                 case "32-BIT-PROCESS":                     isSupported = IntPtr.Size == 4;                     break;  #if NET_4_0 || NET_4_5                 // We only support bitness tests of the OS in .NET 4.0 and up                 case "64-BIT-OS":                     isSupported = Environment.Is64BitOperatingSystem;                     break;                 case "32-BIT-OS":                     isSupported = !Environment.Is64BitOperatingSystem;                     break; #endif                  default:                     isSupported = IsRuntimeSupported(platformName);                     break;             }
Magic Number,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )             {                 case "WIN":                 case "WIN32":                     isSupported = _os.IsWindows;                     break;                 case "WIN32S":                     isSupported = _os.IsWin32S;                     break;                 case "WIN32WINDOWS":                     isSupported = _os.IsWin32Windows;                     break;                 case "WIN32NT":                     isSupported = _os.IsWin32NT;                     break;                 case "WINCE":                     isSupported = _os.IsWinCE;                     break;                 case "WIN95":                     isSupported = _os.IsWin95;                     break;                 case "WIN98":                     isSupported = _os.IsWin98;                     break;                 case "WINME":                     isSupported = _os.IsWinME;                     break;                 case "NT3":                     isSupported = _os.IsNT3;                     break;                 case "NT4":                     isSupported = _os.IsNT4;                     break;                 case "NT5":                     isSupported = _os.IsNT5;                     break;                 case "WIN2K":                     isSupported = _os.IsWin2K;                     break;                 case "WINXP":                     isSupported = _os.IsWinXP;                     break;                 case "WIN2003SERVER":                     isSupported = _os.IsWin2003Server;                     break;                 case "NT6":                     isSupported = _os.IsNT6;                     break;                 case "VISTA":                     isSupported = _os.IsVista;                     break;                 case "WIN2008SERVER":                     isSupported = _os.IsWin2008Server;                     break;                 case "WIN2008SERVERR2":                     isSupported = _os.IsWin2008ServerR2;                     break;                 case "WIN2012SERVER":                     isSupported = _os.IsWin2012ServerR1 || _os.IsWin2012ServerR2;                     break;                 case "WIN2012SERVERR2":                     isSupported = _os.IsWin2012ServerR2;                     break;                 case "WIN7":                 case "WINDOWS7":                     isSupported = _os.IsWindows7;                     break;                 case "WINDOWS8":                 case "WIN8":                     isSupported = _os.IsWindows8;                     break;                 case "WINDOWS8.1":                 case "WIN8.1":                     isSupported = _os.IsWindows81;                     break;                 case "WINDOWS10":                 case "WIN10":                     isSupported = _os.IsWindows10;                     break;                 case "WINDOWSSERVER10":                     isSupported = _os.IsWindowsServer10;                     break;                 case "UNIX":                 case "LINUX":                     isSupported = _os.IsUnix;                     break;                 case "XBOX":                     isSupported = _os.IsXbox;                     break;                 case "MACOSX":                     isSupported = _os.IsMacOSX;                     break;                 // These bitness tests relate to the process' not the OS.                 // We can't use Environment.Is64BitProcess because it's                 // only supported in NET 4.0 and higher.                 case "64-BIT":                 case "64-BIT-PROCESS":                     isSupported = IntPtr.Size == 8;                     break;                 case "32-BIT":                 case "32-BIT-PROCESS":                     isSupported = IntPtr.Size == 4;                     break;  #if NET_4_0 || NET_4_5                 // We only support bitness tests of the OS in .NET 4.0 and up                 case "64-BIT-OS":                     isSupported = Environment.Is64BitOperatingSystem;                     break;                 case "32-BIT-OS":                     isSupported = !Environment.Is64BitOperatingSystem;                     break; #endif                  default:                     isSupported = IsRuntimeSupported(platformName);                     break;             }
Magic Number,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\PlatformHelper.cs,IsRuntimeSupported,The following statement contains a magic number: parts.Length == 2
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Randomizer.cs,NextBool,The following statement contains a magic number: return NextDouble() < 0.5;
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Randomizer.cs,RawDecimal,The following statement contains a magic number: byte scale = NextByte(29);
Magic Number,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\RuntimeFramework.cs,Parse,The following statement contains a magic number: parts.Length == 2
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                 {                     case "{m}":                         fragments.Add(new MethodNameFragment());                         break;                     case "{i}":                         fragments.Add(new TestIDFragment());                         break;                     case "{n}":                         fragments.Add(new NamespaceFragment());                         break;                     case "{c}":                         fragments.Add(new ClassNameFragment());                         break;                     case "{C}":                         fragments.Add(new ClassFullNameFragment());                         break;                     case "{M}":                         fragments.Add(new MethodFullNameFragment());                         break;                     case "{a}":                         fragments.Add(new ArgListFragment(0));                         break;                     case "{0}":                     case "{1}":                     case "{2}":                     case "{3}":                     case "{4}":                     case "{5}":                     case "{6}":                     case "{7}":                     case "{8}":                     case "{9}":                         int index = token[1] - '0';                         fragments.Add(new ArgumentFragment(index' 40));                         break;                     default:                         char c = token[1];                         if (token.Length >= 5 && token[2] == ':' && (c == 'a' || char.IsDigit(c)))                         {                             int length;                              // NOTE: The code would be much simpler using TryParse. However'                             // that method doesn't exist in the Compact Framework.                             try                             {                                 length = int.Parse(token.Substring(3' token.Length - 4));                             }                             catch                             {                                 length = -1;                             }                             if (length > 0)                             {                                 if (c == 'a')                                     fragments.Add(new ArgListFragment(length));                                 else // It's a digit                                     fragments.Add(new ArgumentFragment(c - '0'' length));                                 break;                             }                         }                          // Output the erroneous token to aid user in debugging                         fragments.Add(new FixedTextFragment(token));                         break;                 }
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                 {                     case "{m}":                         fragments.Add(new MethodNameFragment());                         break;                     case "{i}":                         fragments.Add(new TestIDFragment());                         break;                     case "{n}":                         fragments.Add(new NamespaceFragment());                         break;                     case "{c}":                         fragments.Add(new ClassNameFragment());                         break;                     case "{C}":                         fragments.Add(new ClassFullNameFragment());                         break;                     case "{M}":                         fragments.Add(new MethodFullNameFragment());                         break;                     case "{a}":                         fragments.Add(new ArgListFragment(0));                         break;                     case "{0}":                     case "{1}":                     case "{2}":                     case "{3}":                     case "{4}":                     case "{5}":                     case "{6}":                     case "{7}":                     case "{8}":                     case "{9}":                         int index = token[1] - '0';                         fragments.Add(new ArgumentFragment(index' 40));                         break;                     default:                         char c = token[1];                         if (token.Length >= 5 && token[2] == ':' && (c == 'a' || char.IsDigit(c)))                         {                             int length;                              // NOTE: The code would be much simpler using TryParse. However'                             // that method doesn't exist in the Compact Framework.                             try                             {                                 length = int.Parse(token.Substring(3' token.Length - 4));                             }                             catch                             {                                 length = -1;                             }                             if (length > 0)                             {                                 if (c == 'a')                                     fragments.Add(new ArgListFragment(length));                                 else // It's a digit                                     fragments.Add(new ArgumentFragment(c - '0'' length));                                 break;                             }                         }                          // Output the erroneous token to aid user in debugging                         fragments.Add(new FixedTextFragment(token));                         break;                 }
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                 {                     case "{m}":                         fragments.Add(new MethodNameFragment());                         break;                     case "{i}":                         fragments.Add(new TestIDFragment());                         break;                     case "{n}":                         fragments.Add(new NamespaceFragment());                         break;                     case "{c}":                         fragments.Add(new ClassNameFragment());                         break;                     case "{C}":                         fragments.Add(new ClassFullNameFragment());                         break;                     case "{M}":                         fragments.Add(new MethodFullNameFragment());                         break;                     case "{a}":                         fragments.Add(new ArgListFragment(0));                         break;                     case "{0}":                     case "{1}":                     case "{2}":                     case "{3}":                     case "{4}":                     case "{5}":                     case "{6}":                     case "{7}":                     case "{8}":                     case "{9}":                         int index = token[1] - '0';                         fragments.Add(new ArgumentFragment(index' 40));                         break;                     default:                         char c = token[1];                         if (token.Length >= 5 && token[2] == ':' && (c == 'a' || char.IsDigit(c)))                         {                             int length;                              // NOTE: The code would be much simpler using TryParse. However'                             // that method doesn't exist in the Compact Framework.                             try                             {                                 length = int.Parse(token.Substring(3' token.Length - 4));                             }                             catch                             {                                 length = -1;                             }                             if (length > 0)                             {                                 if (c == 'a')                                     fragments.Add(new ArgListFragment(length));                                 else // It's a digit                                     fragments.Add(new ArgumentFragment(c - '0'' length));                                 break;                             }                         }                          // Output the erroneous token to aid user in debugging                         fragments.Add(new FixedTextFragment(token));                         break;                 }
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                 {                     case "{m}":                         fragments.Add(new MethodNameFragment());                         break;                     case "{i}":                         fragments.Add(new TestIDFragment());                         break;                     case "{n}":                         fragments.Add(new NamespaceFragment());                         break;                     case "{c}":                         fragments.Add(new ClassNameFragment());                         break;                     case "{C}":                         fragments.Add(new ClassFullNameFragment());                         break;                     case "{M}":                         fragments.Add(new MethodFullNameFragment());                         break;                     case "{a}":                         fragments.Add(new ArgListFragment(0));                         break;                     case "{0}":                     case "{1}":                     case "{2}":                     case "{3}":                     case "{4}":                     case "{5}":                     case "{6}":                     case "{7}":                     case "{8}":                     case "{9}":                         int index = token[1] - '0';                         fragments.Add(new ArgumentFragment(index' 40));                         break;                     default:                         char c = token[1];                         if (token.Length >= 5 && token[2] == ':' && (c == 'a' || char.IsDigit(c)))                         {                             int length;                              // NOTE: The code would be much simpler using TryParse. However'                             // that method doesn't exist in the Compact Framework.                             try                             {                                 length = int.Parse(token.Substring(3' token.Length - 4));                             }                             catch                             {                                 length = -1;                             }                             if (length > 0)                             {                                 if (c == 'a')                                     fragments.Add(new ArgListFragment(length));                                 else // It's a digit                                     fragments.Add(new ArgumentFragment(c - '0'' length));                                 break;                             }                         }                          // Output the erroneous token to aid user in debugging                         fragments.Add(new FixedTextFragment(token));                         break;                 }
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                 {                     case "{m}":                         fragments.Add(new MethodNameFragment());                         break;                     case "{i}":                         fragments.Add(new TestIDFragment());                         break;                     case "{n}":                         fragments.Add(new NamespaceFragment());                         break;                     case "{c}":                         fragments.Add(new ClassNameFragment());                         break;                     case "{C}":                         fragments.Add(new ClassFullNameFragment());                         break;                     case "{M}":                         fragments.Add(new MethodFullNameFragment());                         break;                     case "{a}":                         fragments.Add(new ArgListFragment(0));                         break;                     case "{0}":                     case "{1}":                     case "{2}":                     case "{3}":                     case "{4}":                     case "{5}":                     case "{6}":                     case "{7}":                     case "{8}":                     case "{9}":                         int index = token[1] - '0';                         fragments.Add(new ArgumentFragment(index' 40));                         break;                     default:                         char c = token[1];                         if (token.Length >= 5 && token[2] == ':' && (c == 'a' || char.IsDigit(c)))                         {                             int length;                              // NOTE: The code would be much simpler using TryParse. However'                             // that method doesn't exist in the Compact Framework.                             try                             {                                 length = int.Parse(token.Substring(3' token.Length - 4));                             }                             catch                             {                                 length = -1;                             }                             if (length > 0)                             {                                 if (c == 'a')                                     fragments.Add(new ArgListFragment(length));                                 else // It's a digit                                     fragments.Add(new ArgumentFragment(c - '0'' length));                                 break;                             }                         }                          // Output the erroneous token to aid user in debugging                         fragments.Add(new FixedTextFragment(token));                         break;                 }
Magic Number,NUnit.Framework.Internal.Builders,FleaRand,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,FleaRand,The following statement contains a magic number: _m = new uint[256];
Magic Number,NUnit.Framework.Internal.Builders,FleaRand,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,FleaRand,The following statement contains a magic number: _r = new uint[256];
Magic Number,NUnit.Framework.Internal.Builders,FleaRand,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,FleaRand,The following statement contains a magic number: i < 10
Magic Number,NUnit.Framework.Internal.Builders,FleaRand,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,Batch,The following statement contains a magic number: d = ( c << 19 ) + ( c >> 13 ) + b;
Magic Number,NUnit.Framework.Internal.Builders,FleaRand,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,Batch,The following statement contains a magic number: d = ( c << 19 ) + ( c >> 13 ) + b;
Magic Number,NUnit.Framework.Internal.Builders,PairwiseTestCaseGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,GetTestCases,The following statement contains a magic number: _prng = new FleaRand( 15485863 );
Magic Number,NUnit.Framework.Internal.Builders,PairwiseTestCaseGenerator,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,CreateTestCase,The following statement contains a magic number: i < 7
Magic Number,NUnit.Framework.Internal.Commands,MaxTimeCommand,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Commands\MaxTimeCommand.cs,Execute,The following statement contains a magic number: double elapsedTime = testResult.Duration * 1000d;
Missing Default,NUnit.Framework.Internal,TestResult,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Results\TestResult.cs,AddToXml,The following switch statement is missing a default case: switch (ResultState.Status)             {                 case TestStatus.Failed:                     AddFailureElement(thisNode);                     break;                 case TestStatus.Skipped:                 case TestStatus.Passed:                 case TestStatus.Inconclusive:                     if (Message != null)                         AddReasonElement(thisNode);                     break;             }
Missing Default,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromFrameworkVersion,The following switch statement is missing a default case: switch (version.Major)                         {                             case 3:                                 switch (version.Minor)                                 {                                     case 5:                                         ClrVersion = new Version(3' 5' 7283);                                         break;                                 }                                 break;                         }
Missing Default,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromFrameworkVersion,The following switch statement is missing a default case: switch (version.Minor)                                 {                                     case 5:                                         ClrVersion = new Version(3' 5' 7283);                                         break;                                 }
Missing Default,NUnit.Framework.Internal,TestFilter,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\TestFilter.cs,FromXml,The following switch statement is missing a default case: switch (node.Name)             {                 case "filter":                 case "and":                     var andFilter = new AndFilter();                     foreach (var childNode in node.ChildNodes)                         andFilter.Add(FromXml(childNode));                     return andFilter;                  case "or":                     var orFilter = new OrFilter();                     foreach (var childNode in node.ChildNodes)                         orFilter.Add(FromXml(childNode));                     return orFilter;                  case "not":                     return new NotFilter(FromXml(node.FirstChild));                  case "id":                     return new IdFilter(node.Value);                   case "test":                     return new FullNameFilter(node.Value) { IsRegex = isRegex };                  case "name":                     return new TestNameFilter(node.Value) { IsRegex = isRegex };                  case "method":                     return new MethodNameFilter(node.Value) { IsRegex = isRegex };                  case "class":                     return new ClassNameFilter(node.Value) { IsRegex = isRegex };                  case "cat":                     return new CategoryFilter(node.Value) { IsRegex = isRegex };                  case "prop":                     string name = node.Attributes["name"];                     if (name != null)                         return new PropertyFilter(name' node.Value) { IsRegex = isRegex };                     break;             }
Missing Default,NUnit.Framework.Internal,TestSuiteResult,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Results\TestSuiteResult.cs,AddResult,The following switch statement is missing a default case: switch (result.ResultState.Status)                     {                         case TestStatus.Passed:                              if (ResultState.Status == TestStatus.Inconclusive)                                 SetResult(ResultState.Success);                              break;                          case TestStatus.Failed:                               if (ResultState.Status != TestStatus.Failed)                                 SetResult(ResultState.ChildFailure' CHILD_ERRORS_MESSAGE);                              break;                          case TestStatus.Skipped:                              if (result.ResultState.Label == "Ignored")                                 if (ResultState.Status == TestStatus.Inconclusive || ResultState.Status == TestStatus.Passed)                                     SetResult(ResultState.Ignored' CHILD_IGNORE_MESSAGE);                              break;                     }
Missing Default,NUnit.Framework.Internal.Execution,CompositeWorkItem,C:\research\architectureSmells\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\framework\Internal\Execution\CompositeWorkItem.cs,PerformWork,The following switch statement is missing a default case: switch (Result.ResultState.Status)                                     {                                         case TestStatus.Passed:                                             RunChildren();                                             return;                                         // Just return: completion event will take care                                         // of TestFixtureTearDown when all tests are done.                                          case TestStatus.Skipped:                                         case TestStatus.Inconclusive:                                         case TestStatus.Failed:                                             SkipChildren(_suite' Result.ResultState.WithSite(FailureSite.Parent)' "OneTimeSetUp: " + Result.Message);                                             break;                                     }
