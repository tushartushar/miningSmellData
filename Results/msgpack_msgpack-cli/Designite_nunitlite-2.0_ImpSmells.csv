Implementation smell,Namespace,Class,File,Method,Description
Long Method,NUnit.Common,CommandLineOptions,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,ConfigureOptions,The method has 119 lines of code.
Complex Method,NUnit.Options,Option,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,NUnitLite,TextRunner,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextRunner.cs,Execute,Cyclomatic complexity of the method is 11
Long Parameter List,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Identifier,NUnit.Common,DefaultOptionsProvider,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\DefaultOptionsProvider.cs,,The length of the parameter EnvironmentVariableTeamcityProjectName is 38.
Long Statement,NUnit.Common,CommandLineOptions,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,ConfigureOptions,The length of the statement  "            this.Add("workers="' "Specify the {NUMBER} of worker threads to be used in running tests. If not specified' defaults to 2 or the number of processors' whichever is greater."' " is 174.
Long Statement,NUnit.Common,CommandLineOptions,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,ConfigureOptions,The length of the statement  "            this.Add("work="' "{PATH} of the directory to use for output files. If not specified' defaults to the current directory."' " is 122.
Long Statement,NUnit.Common,CommandLineOptions,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,ConfigureOptions,The length of the statement  "            this.Add("explore:"' "Display or save test info rather than running tests. Optionally provide an output {SPEC} for saving the test info. This option may be repeated."' v => " is 172.
Long Statement,NUnitLite,NUnit3XmlOutputWriter,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\OutputWriters\NUnit3XmlOutputWriter.cs,MakeTestRunElement,The length of the statement  "            testRun.AddAttribute("total"' (result.PassCount + result.FailCount + result.SkipCount + result.InconclusiveCount).ToString()); " is 126.
Long Statement,NUnitLite,TeamCityEventListener,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TeamCityEventListener.cs,TC_TestFailed,The length of the statement  "            _outWriter.WriteLine("##teamcity[testFailed name='{0}' message='{1}' details='{2}']"' Escape(name)' Escape(message)' Escape(details)); " is 134.
Long Statement,NUnitLite,TextRunner,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextRunner.cs,Execute,The length of the statement  "                outWriter = new ExtendedTextWrapper(TextWriter.Synchronized(new StreamWriter(Path.Combine(options.WorkDirectory' options.OutFile)))); " is 133.
Long Statement,NUnitLite,TextRunner,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextRunner.cs,InitializeInternalTrace,The length of the statement  "            var traceLevel = (InternalTraceLevel)Enum.Parse(typeof(InternalTraceLevel)' _options.InternalTraceLevel ?? "Off"' true); " is 120.
Long Statement,NUnitLite,TextUI,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,DisplaySummaryReport,The length of the statement  "            Writer.WriteLabelLine("    Duration: "' string.Format(NumberFormatInfo.InvariantInfo' "{0:0.000} seconds"' summary.Duration)); " is 126.
Complex Conditional,NUnit.Options,Option,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&                       ((names.Length == 1 && this.type != OptionValueType.None) ||                       (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&                      Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Complex Conditional,NUnitLite,TextUI,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,TestFinished,The conditional expression  "!isSuite && labels == "ALL" || !isSuite && labels == "ON" && result.Output.Length > 0"  is complex.
Virtual Method Call from Constructor,NUnit.Common,CommandLineOptions,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,CommandLineOptions,The constructor "CommandLineOptions" calls a virtual method "ConfigureOptions".
Virtual Method Call from Constructor,NUnit.Common,CommandLineOptions,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\CommandLineOptions.cs,CommandLineOptions,The constructor "CommandLineOptions" calls a virtual method "ConfigureOptions".
Magic Number,NUnit.Common,OutputSpecification,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\OutputSpecification.cs,OutputSpecification,The following statement contains a magic number: for (int i = 1; i < parts.Length; i++)              {                  string[] opt = parts[i].Split('=');                    if (opt.Length != 2)                      throw new ArgumentException();                    switch (opt[0].Trim())                  {                      case "format":                          string fmt = opt[1].Trim();                            if (this.Format != null && this.Format != fmt)                              throw new ArgumentException(                                  string.Format("Conflicting format options: {0}"' spec));                            this.Format = fmt;                          break;                        case "transform":                          string val = opt[1].Trim();                            if (this.Transform != null && this.Transform != val)                              throw new ArgumentException(                                  string.Format("Conflicting transform options: {0}"' spec));                            if (this.Format != null && this.Format != "user")                              throw new ArgumentException(                                  string.Format("Conflicting format options: {0}"' spec));                            this.Format = "user";                          this.Transform = opt[1].Trim();                          break;                  }              }
Magic Number,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'                       delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {                  int written = 0;                  if (!WriteOptionPrototype (o' p' ref written))                      continue;                    if (written < OptionWidth)                      o.Write (new string (' '' OptionWidth - written));                  else {                      o.WriteLine ();                      o.Write (new string (' '' OptionWidth));                  }                    bool indent = false;                  string prefix = new string (' '' OptionWidth+2);                  foreach (string line in GetLines (localizer (GetDescription (p.Description)))) {                      if (indent)                           o.Write (prefix);                      o.WriteLine (line);                      indent = true;                  }              }
Magic Number,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 1;
Magic Number,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetLines,The following statement contains a magic number: do {                  end = GetLineEnd (start' length' description);                  char c = description [end-1];                  if (char.IsWhiteSpace (c))                      --end;                  bool writeContinuation = end != description.Length && !IsEolChar (c);                  string line = description.Substring (start' end - start) +                          (writeContinuation ? "-" : "");                  yield return line;                  start = end;                  if (char.IsWhiteSpace (c))                      ++start;                  length = 80 - OptionWidth - 2 - 1;              } while (end < description.Length);
Magic Number,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,GetLines,The following statement contains a magic number: do {                  end = GetLineEnd (start' length' description);                  char c = description [end-1];                  if (char.IsWhiteSpace (c))                      --end;                  bool writeContinuation = end != description.Length && !IsEolChar (c);                  string line = description.Substring (start' end - start) +                          (writeContinuation ? "-" : "");                  yield return line;                  start = end;                  if (char.IsWhiteSpace (c))                      ++start;                  length = 80 - OptionWidth - 2 - 1;              } while (end < description.Length);
Magic Number,NUnitLite,NUnit2XmlOutputWriter,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\OutputWriters\NUnit2XmlOutputWriter.cs,WriteCData,The following statement contains a magic number: while (true)              {                  int illegal = text.IndexOf("]]>"' start);                  if (illegal < 0)                      break;                  xmlWriter.WriteCData(text.Substring(start' illegal - start + 2));                  start = illegal + 2;                  if (start >= text.Length)                      return;              }
Magic Number,NUnitLite,NUnit2XmlOutputWriter,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\OutputWriters\NUnit2XmlOutputWriter.cs,WriteCData,The following statement contains a magic number: while (true)              {                  int illegal = text.IndexOf("]]>"' start);                  if (illegal < 0)                      break;                  xmlWriter.WriteCData(text.Substring(start' illegal - start + 2));                  start = illegal + 2;                  if (start >= text.Length)                      return;              }
Magic Number,NUnitLite,TextUI,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,DisplayHeader,The following statement contains a magic number: WriteHeader(String.Format("NUnitLite {0} {1}"' version.ToString(3)' build));
Magic Number,NUnitLite,TextUI,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,DisplayRunSettings,The following statement contains a magic number: Writer.WriteLabelLine(                  "    Number of Test Workers: "'                  _options.NumberOfTestWorkers >= 0                      ? _options.NumberOfTestWorkers  #if NETCF                      : 2);  #else                      : Math.Max(Environment.ProcessorCount' 2));
Missing Default,NUnit.Common,OutputSpecification,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\OutputSpecification.cs,OutputSpecification,The following switch statement is missing a default case: switch (opt[0].Trim())                  {                      case "format":                          string fmt = opt[1].Trim();                            if (this.Format != null && this.Format != fmt)                              throw new ArgumentException(                                  string.Format("Conflicting format options: {0}"' spec));                            this.Format = fmt;                          break;                        case "transform":                          string val = opt[1].Trim();                            if (this.Transform != null && this.Transform != val)                              throw new ArgumentException(                                  string.Format("Conflicting transform options: {0}"' spec));                            if (this.Format != null && this.Format != "user")                              throw new ArgumentException(                                  string.Format("Conflicting format options: {0}"' spec));                            this.Format = "user";                          this.Transform = opt[1].Trim();                          break;                  }
Missing Default,NUnit.Common,TestNameParser,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TestNameParser.cs,GetSeparator,The following switch statement is missing a default case: switch (argument[index])                  {                      case ''':                          if (nest == 0)                              return index;                          break;                        case '"':                          while (++index < argument.Length && argument[index] != '"')                              ;                          break;                        case '(':                      case '<':                          nest++;                          break;                        case ')':                      case '>':                          nest--;                          break;                  }
Missing Default,NUnit.Options,OptionSet,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {                      case OptionValueType.None:                          c.OptionValues.Add (n);                          c.Option.Invoke (c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                           ParseValue (v' c);                          break;                  }
Missing Default,NUnitLite,NUnit2XmlOutputWriter,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\OutputWriters\NUnit2XmlOutputWriter.cs,WriteResultElement,The following switch statement is missing a default case: switch (result.ResultState.Status)              {                  case TestStatus.Skipped:                      if (result.Message != null)                          WriteReasonElement(result.Message);                      break;                  case TestStatus.Failed:                      WriteFailureElement(result.Message' result.StackTrace);                      break;              }
Missing Default,NUnitLite,ResultSummary,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\ResultSummary.cs,Summarize,The following switch statement is missing a default case: switch (status)                  {                      case TestStatus.Passed:                          PassCount++;                          break;                      case TestStatus.Skipped:                          if (label == "Ignored")                              IgnoreCount++;                          else if (label == "Explicit")                              ExplicitCount++;                          else                              SkipCount++;                          break;                      case TestStatus.Failed:                          if (label == "Invalid")                              InvalidCount++;                          else if (label == "Error")                              ErrorCount++;                          else                              FailureCount++;                          break;                      case TestStatus.Inconclusive:                          InconclusiveCount++;                          break;                  }
Missing Default,NUnitLite,TeamCityEventListener,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TeamCityEventListener.cs,TestFinished,The following switch statement is missing a default case: switch (result.ResultState.Status)                  {                      case TestStatus.Passed:                          TC_TestFinished(testName' result.Duration);                          break;                      case TestStatus.Inconclusive:                          TC_TestIgnored(testName' "Inconclusive");                          break;                      case TestStatus.Skipped:                          TC_TestIgnored(testName' result.Message);                          break;                      case TestStatus.Failed:                          TC_TestFailed(testName' result.Message' result.StackTrace);                          TC_TestFinished(testName' result.Duration);                          break;                  }
Missing Default,NUnitLite,TextUI,C:\repos\msgpack_msgpack-cli\test\NUnitLite\NUnitFramework\nunitlite\TextUI.cs,DisplayTestResult,The following switch statement is missing a default case: switch (result.ResultState.Status)              {                  case TestStatus.Failed:                      style = ColorStyle.Failure;                      break;                  case TestStatus.Skipped:                      style = status == "Ignored" ? ColorStyle.Warning : ColorStyle.Output;                      break;                  case TestStatus.Passed:                      style = ColorStyle.Pass;                      break;              }
