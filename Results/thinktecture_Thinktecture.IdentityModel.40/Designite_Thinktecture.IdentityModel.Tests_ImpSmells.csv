Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Thinktecture.IdentityModel.Tests.Swt,SwtTokenTests,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Swt\SwtTokenTests.cs,GetTokenClaimsAsEncodedArrayString,The length of the statement  "            Assert.AreEqual(builderOutput' "http%3a%2f%2fschemas.microsoft.com%2fws%2f2008%2f06%2fidentity%2fclaims%2frole=Administrator%2cDomain%2bAdministrator%2cSome%252cNotVeryNice%252cEncodedClaim&"); " is 193.
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripSingleClaimTypes,The following statement contains a magic number: var signinKey = SymmetricKeyGenerator.Create(32);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripSingleClaimTypes,The following statement contains a magic number: var descriptor = new SecurityTokenDescriptor              {                  Subject = identity'                  SigningCredentials = new HmacSigningCredentials(signinKey)'                  TokenIssuerName = "dominick"'                  Lifetime = new Lifetime(DateTime.UtcNow' DateTime.UtcNow.AddHours(8))'                  AppliesToAddress = "http://foo.com"              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripSingleClaimTypes,The following statement contains a magic number: Assert.IsTrue(parts.Length == 3' "JWT should have excactly 3 parts");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripSingleClaimTypes,The following statement contains a magic number: var sig = Base64Url.Decode(parts[2]);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripSingleClaimTypes,The following statement contains a magic number: Assert.IsTrue(sig.Length == 32' "Signature is not 32 bits");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripSingleClaimTypes,The following statement contains a magic number: Assert.IsTrue(identity.Claims.Count() == 2);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripDuplicateClaimTypes,The following statement contains a magic number: var signinKey = SymmetricKeyGenerator.Create(32);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripDuplicateClaimTypes,The following statement contains a magic number: var descriptor = new SecurityTokenDescriptor              {                  Subject = identity'                  SigningCredentials = new HmacSigningCredentials(signinKey)'                  TokenIssuerName = "dominick"'                  Lifetime = new Lifetime(DateTime.UtcNow' DateTime.UtcNow.AddHours(8))'                  AppliesToAddress = "http://foo.com"              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripDuplicateClaimTypes,The following statement contains a magic number: Assert.IsTrue(parts.Length == 3' "JWT should have excactly 3 parts");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripDuplicateClaimTypes,The following statement contains a magic number: var sig = Base64Url.Decode(parts[2]);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripDuplicateClaimTypes,The following statement contains a magic number: Assert.IsTrue(sig.Length == 32' "Signature is not 32 bits");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,HandlerCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\HandlerCreate.cs,HandlerCreateRoundtripDuplicateClaimTypes,The following statement contains a magic number: Assert.IsTrue(identity.Claims.Count() == 5);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteNoSig,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.None                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteNoSig,The following statement contains a magic number: Assert.IsTrue(parts.Length == 2' "JWT should have excactly 2 parts");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha256MissingSigningCredentials,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA256                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha256ValidSigningCredentials,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA256'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(32))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha256ValidSigningCredentials,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA256'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(32))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha256ValidSigningCredentials,The following statement contains a magic number: Assert.IsTrue(parts.Length == 3' "JWT should have excactly 3 parts");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha256ValidSigningCredentials,The following statement contains a magic number: var sig = Base64Url.Decode(parts[2]);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha256ValidSigningCredentials,The following statement contains a magic number: Assert.IsTrue(sig.Length == 32' "Signature is not 32 bits");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha384ValidSigningCredentials,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA384'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(48))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha384ValidSigningCredentials,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA384'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(48))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha384ValidSigningCredentials,The following statement contains a magic number: Assert.IsTrue(parts.Length == 3' "JWT should have excactly 3 parts");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha384ValidSigningCredentials,The following statement contains a magic number: var sig = Base64Url.Decode(parts[2]);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha384ValidSigningCredentials,The following statement contains a magic number: Assert.IsTrue(sig.Length == 48' "Signature is not 48 bits");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha512ValidSigningCredentials,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA512'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(64))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha512ValidSigningCredentials,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA512'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(64))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha512ValidSigningCredentials,The following statement contains a magic number: Assert.IsTrue(parts.Length == 3' "JWT should have excactly 3 parts");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha512ValidSigningCredentials,The following statement contains a magic number: var sig = Base64Url.Decode(parts[2]);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha512ValidSigningCredentials,The following statement contains a magic number: Assert.IsTrue(sig.Length == 64' "Signature is not 64 bits");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha256KeySizeMismatch,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA256'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(48))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteHmacSha256KeySizeMismatch,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA256'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(48))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteUnsupportedSignatureAlgorithm,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = "unsupported"'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(48))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteUnsupportedSignatureAlgorithm,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = "unsupported"'                      SigningCredentials = new HmacSigningCredentials(SymmetricKeyGenerator.Create(48))                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 500000'                    Claims = new Dictionary<string' string>                  {                      { ClaimTypes.Name' "dominick" }'                      { ClaimTypes.Email' "dominick.baier@thinktecture.com" }                  }              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripSingleClaimTypes,The following statement contains a magic number: var signinKey = SymmetricKeyGenerator.Create(32);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripSingleClaimTypes,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA256'                      SigningCredentials = new HmacSigningCredentials(signinKey)                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 50000000000'              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripSingleClaimTypes,The following statement contains a magic number: Assert.IsTrue(parts.Length == 3' "JWT should have excactly 3 parts");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripSingleClaimTypes,The following statement contains a magic number: var sig = Base64Url.Decode(parts[2]);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripSingleClaimTypes,The following statement contains a magic number: Assert.IsTrue(sig.Length == 32' "Signature is not 32 bits");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripSingleClaimTypes,The following statement contains a magic number: Assert.IsTrue(identity.Claims.Count() == 2);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripDuplicateClaimTypes,The following statement contains a magic number: var signinKey = SymmetricKeyGenerator.Create(32);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripDuplicateClaimTypes,The following statement contains a magic number: var jwt = new JsonWebToken              {                  Header = new JwtHeader                  {                      SignatureAlgorithm = JwtConstants.SignatureAlgorithms.HMACSHA256'                      SigningCredentials = new HmacSigningCredentials(signinKey)                  }'                    Audience = new Uri("http://foo.com")'                  Issuer = "dominick"'                  ExpirationTime = 50000000000'              };
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripDuplicateClaimTypes,The following statement contains a magic number: Assert.IsTrue(parts.Length == 3' "JWT should have excactly 3 parts");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripDuplicateClaimTypes,The following statement contains a magic number: var sig = Base64Url.Decode(parts[2]);
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripDuplicateClaimTypes,The following statement contains a magic number: Assert.IsTrue(sig.Length == 32' "Signature is not 32 bits");
Magic Number,Thinktecture.IdentityModel.Tests.Jwt,ManualCreate,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Jwt\ManualCreate.cs,ManualWriteRoundtripDuplicateClaimTypes,The following statement contains a magic number: Assert.IsTrue(identity.Claims.Count() == 4);
Magic Number,Thinktecture.IdentityModel.Tests.Misc,PrincipalTests,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Misc\PrincipalTests.cs,CreateAuthenticatedPrincipalWithRoles,The following statement contains a magic number: Assert.AreEqual<int>(p.Identities.First().Claims.Count()' 3);
Magic Number,Thinktecture.IdentityModel.Tests.Swt,SwtTokenTests,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Swt\SwtTokenTests.cs,GetToken,The following statement contains a magic number: descripter.Lifetime = new Lifetime(DateTime.Now' DateTime.Now.AddMinutes(5));
Magic Number,Thinktecture.IdentityModel.Tests.Swt,SwtTokenTests,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Swt\SwtTokenTests.cs,CreateTokenAndParseEncodedMultipleClaims,The following statement contains a magic number: Assert.IsTrue(claims[0].Claims.Count == 3);
Magic Number,Thinktecture.IdentityModel.Tests.Swt,SwtTokenTests,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Swt\SwtTokenTests.cs,CreateTokenAndParseEncodedMultipleClaims,The following statement contains a magic number: Assert.IsTrue(claims[0].Claims[2].Value == this.Claims()[2].Value);
Magic Number,Thinktecture.IdentityModel.Tests.Swt,SwtTokenTests,D:\research\architectureSmells\repos1\thinktecture_Thinktecture.IdentityModel.40\IdentityModel\Thinktecture.IdentityModel.Tests\Swt\SwtTokenTests.cs,CreateTokenAndParseEncodedMultipleClaims,The following statement contains a magic number: Assert.IsTrue(claims[0].Claims[2].Value == this.Claims()[2].Value);
