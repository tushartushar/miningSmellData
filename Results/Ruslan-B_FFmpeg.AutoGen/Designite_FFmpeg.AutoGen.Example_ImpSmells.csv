Implementation smell,Namespace,Class,File,Method,Description
Long Method,FFmpeg.AutoGen.Example,Program,C:\repos\Ruslan-B_FFmpeg.AutoGen\FFmpeg.AutoGen.Example\Program.cs,Main,The method has 110 lines of code.
Complex Method,FFmpeg.AutoGen.Example,Program,C:\repos\Ruslan-B_FFmpeg.AutoGen\FFmpeg.AutoGen.Example\Program.cs,Main,Cyclomatic complexity of the method is 15
Long Statement,FFmpeg.AutoGen.Example,Program,C:\repos\Ruslan-B_FFmpeg.AutoGen\FFmpeg.AutoGen.Example\Program.cs,Main,The length of the statement  "            ffmpeg.av_image_fill_arrays(ref dstData' ref dstLinesize' (byte*) convertedFrameBufferPtr' destinationPixFmt' width' height' 1); " is 128.
Magic Number,FFmpeg.AutoGen.Example,Program,C:\repos\Ruslan-B_FFmpeg.AutoGen\FFmpeg.AutoGen.Example\Program.cs,Main,The following statement contains a magic number: av_log_set_callback_callback logCallback = (p0' level' format' vl) =>              {                  if (level > ffmpeg.av_log_get_level()) return;                    var lineSize = 1024;                  var lineBuffer = stackalloc byte[lineSize];                  var printPrefix = 1;                  ffmpeg.av_log_format_line(p0' level' format' vl' lineBuffer' lineSize' &printPrefix);                  var line = Marshal.PtrToStringAnsi((IntPtr) lineBuffer);                  Console.Write(line);              };
Magic Number,FFmpeg.AutoGen.Example,Program,C:\repos\Ruslan-B_FFmpeg.AutoGen\FFmpeg.AutoGen.Example\Program.cs,Main,The following statement contains a magic number: while (frameNumber < 2000)              {                  try                  {                      do                      {                          error = ffmpeg.av_read_frame(pFormatContext' pPacket);                          if (error == ffmpeg.AVERROR_EOF) break;                          if (error < 0) throw new ApplicationException(GetErrorMessage(error));                            if (pPacket->stream_index != pStream->index) continue;                            error = ffmpeg.avcodec_send_packet(pCodecContext' pPacket);                          if (error < 0) throw new ApplicationException(GetErrorMessage(error));                            error = ffmpeg.avcodec_receive_frame(pCodecContext' pDecodedFrame);                      } while (error == ffmpeg.AVERROR(ffmpeg.EAGAIN));                      if (error == ffmpeg.AVERROR_EOF) break;                      if (error < 0) throw new ApplicationException(GetErrorMessage(error));                        if (pPacket->stream_index != pStream->index) continue;                        Console.WriteLine($@"frame: {frameNumber}");                        ffmpeg.sws_scale(pConvertContext' pDecodedFrame->data' pDecodedFrame->linesize' 0' height' dstData' dstLinesize);                  }                  finally                  {                      ffmpeg.av_packet_unref(pPacket);                      ffmpeg.av_frame_unref(pDecodedFrame);                  }                    using (var bitmap = new Bitmap(width' height' dstLinesize[0]' PixelFormat.Format24bppRgb' convertedFrameBufferPtr))                      bitmap.Save(@"frame.buffer.jpg"' ImageFormat.Jpeg);                    frameNumber++;              }
Magic Number,FFmpeg.AutoGen.Example,Program,C:\repos\Ruslan-B_FFmpeg.AutoGen\FFmpeg.AutoGen.Example\Program.cs,GetErrorMessage,The following statement contains a magic number: var bufferSize = 1024;
Missing Default,FFmpeg.AutoGen.Example,FFmpegBinariesHelper,C:\repos\Ruslan-B_FFmpeg.AutoGen\FFmpeg.AutoGen.Example\FFmpegBinariesHelper.cs,RegisterFFmpegBinaries,The following switch statement is missing a default case: switch (Environment.OSVersion.Platform)              {                  case PlatformID.Win32NT:                  case PlatformID.Win32S:                  case PlatformID.Win32Windows:                      var current = Environment.CurrentDirectory;                      var probe = $"FFmpeg/bin/{(Environment.Is64BitProcess ? @"x64" : @"x86")}";                      while (current != null)                      {                          var ffmpegDirectory = Path.Combine(current' probe);                          if (Directory.Exists(ffmpegDirectory))                          {                              Console.WriteLine($"FFmpeg binaries found in: {ffmpegDirectory}");                              RegisterLibrariesSearchPath(ffmpegDirectory);                              return;                          }                          current = Directory.GetParent(current)?.FullName;                      }                      break;                  case PlatformID.Unix:                  case PlatformID.MacOSX:                      var libraryPath = Environment.GetEnvironmentVariable(LD_LIBRARY_PATH);                      RegisterLibrariesSearchPath(libraryPath);                      break;              }
Missing Default,FFmpeg.AutoGen.Example,FFmpegBinariesHelper,C:\repos\Ruslan-B_FFmpeg.AutoGen\FFmpeg.AutoGen.Example\FFmpegBinariesHelper.cs,RegisterLibrariesSearchPath,The following switch statement is missing a default case: switch (Environment.OSVersion.Platform)              {                  case PlatformID.Win32NT:                  case PlatformID.Win32S:                  case PlatformID.Win32Windows:                      SetDllDirectory(path);                      break;                  case PlatformID.Unix:                  case PlatformID.MacOSX:                      string currentValue = Environment.GetEnvironmentVariable(LD_LIBRARY_PATH);                      if (string.IsNullOrWhiteSpace(currentValue) == false && currentValue.Contains(path) == false)                      {                          string newValue = currentValue + Path.PathSeparator + path;                          Environment.SetEnvironmentVariable(LD_LIBRARY_PATH' newValue);                      }                      break;              }
