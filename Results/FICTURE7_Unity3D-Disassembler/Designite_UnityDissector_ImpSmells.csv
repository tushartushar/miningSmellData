Implementation smell,Namespace,Class,File,Method,Description
Long Method,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The method has 122 lines of code.
Long Method,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,Code,The method has 114 lines of code.
Long Method,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The method has 449 lines of code.
Long Method,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,CodeOneBlock,The method has 157 lines of code.
Long Method,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,SetCoderProperties,The method has 103 lines of code.
Complex Method,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,Cyclomatic complexity of the method is 22
Complex Method,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,Code,Cyclomatic complexity of the method is 15
Complex Method,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,Cyclomatic complexity of the method is 64
Complex Method,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,CodeOneBlock,Cyclomatic complexity of the method is 24
Complex Method,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,SetCoderProperties,Cyclomatic complexity of the method is 26
Long Parameter List,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,Code,The method has 5 parameters. Parameters: inStream' outStream' inSize' outSize' progress
Long Parameter List,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,Code,The method has 5 parameters. Parameters: inStream' outStream' inSize' outSize' progress
Long Parameter List,UnityDissector.Compression.RangeCoder,BitTreeEncoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoderBitTree.cs,ReverseEncode,The method has 5 parameters. Parameters: Models' startIndex' rangeEncoder' NumBitLevels' symbol
Long Parameter List,UnityDissector.Compression,ICoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\ICoder.cs,Code,The method has 5 parameters. Parameters: inStream' outStream' inSize' outSize' progress
Long Identifier,UnityDissector.Compression.LZMA,Base,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,,The length of the parameter kNumLitPosStatesBitsEncodingMax is 31.
Long Statement,UnityDissector.IO,ConsoleIO,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\IO\ConsoleIO.cs,Log,The length of the statement  "            OutLog = OutLog + "[" + DateTime.Now.ToString("HH:mm") + "/" + type.ToString().ToUpper() + "]" + line + System.Environment.NewLine; " is 131.
Long Statement,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The length of the statement  "                            UInt32 nextMatchPrice = curAndLenCharPrice + _isMatch[(state2.Index << Base.kNumPosStatesBitsMax) + posStateNext].GetPrice1(); " is 126.
Long Statement,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The length of the statement  "                                    UInt32 nextMatchPrice = curAndLenCharPrice + _isMatch[(state2.Index << Base.kNumPosStatesBitsMax) + posStateNext].GetPrice1(); " is 126.
Long Statement,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,FillDistancesPrices,The length of the statement  "                    _posSlotPrices[st + posSlot] += ((((posSlot >> 1) - 1) - Base.kNumAlignBits) << RangeCoder.BitEncoder.kNumBitPriceShiftBits); " is 125.
Magic Number,UnityDissector.CommandLine,CommandLineHandler,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\CommandLine\CommandLineHandler.cs,PrintOptions,The following statement contains a magic number: Console.WriteLine("\t{0}{1}"' namesAndAlias.PadRight(30)' description);
Magic Number,UnityDissector.CommandLine,OptionHandlers,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\CommandLine\OptionHandlers.cs,HandleListOption,The following statement contains a magic number: Console.WriteLine(" Name".PadRight(50) + "| Size");
Magic Number,UnityDissector.CommandLine,OptionHandlers,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\CommandLine\OptionHandlers.cs,HandleListOption,The following statement contains a magic number: Console.WriteLine("{0}{1}{0}"' new string('-'' 50)' '+'' new string('-'' 6 + 10));
Magic Number,UnityDissector.CommandLine,OptionHandlers,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\CommandLine\OptionHandlers.cs,HandleListOption,The following statement contains a magic number: Console.WriteLine("{0}{1}{0}"' new string('-'' 50)' '+'' new string('-'' 6 + 10));
Magic Number,UnityDissector.CommandLine,OptionHandlers,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\CommandLine\OptionHandlers.cs,HandleListOption,The following statement contains a magic number: Console.WriteLine("{0}{1}{0}"' new string('-'' 50)' '+'' new string('-'' 6 + 10));
Magic Number,UnityDissector.CommandLine,OptionHandlers,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\CommandLine\OptionHandlers.cs,HandleListOption,The following statement contains a magic number: Console.WriteLine(" {0} {1}"' webArchive[i].Name.PadRight(50)' webArchive[i].Size.ToString());
Magic Number,UnityDissector.Compression.Common,CRC,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\Common\CRC.cs,CRC,The following statement contains a magic number: Table = new uint[256];
Magic Number,UnityDissector.Compression.Common,CRC,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\Common\CRC.cs,CRC,The following statement contains a magic number: j < 8
Magic Number,UnityDissector.Compression.Common,CRC,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\Common\CRC.cs,CRC,The following statement contains a magic number: i < 256
Magic Number,UnityDissector.Compression.Common,CRC,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\Common\CRC.cs,UpdateByte,The following statement contains a magic number: _value = Table[(((byte)(_value)) ^ b)] ^ (_value >> 8);
Magic Number,UnityDissector.Compression.Common,CRC,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\Common\CRC.cs,Update,The following statement contains a magic number: _value = Table[(((byte)(_value)) ^ data[offset + i])] ^ (_value >> 8);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,SetType,The following statement contains a magic number: HASH_ARRAY = (numHashBytes > 2);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,SetType,The following statement contains a magic number: kMinMatchCheck = 4;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: historySize > kMaxValForNormalize - 256
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: _cutValue = 16 + (matchMaxLen >> 1);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: UInt32 windowReservSize = (historySize + keepAddBufferBefore +                      matchMaxLen + keepAddBufferAfter) / 2 + 256;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: UInt32 windowReservSize = (historySize + keepAddBufferBefore +                      matchMaxLen + keepAddBufferAfter) / 2 + 256;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: _son = new UInt32[(_cyclicBufferSize = cyclicBufferSize) * 2];
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: hs |= (hs >> 2);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: hs |= (hs >> 4);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: hs |= (hs >> 8);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Create,The following statement contains a magic number: hs > (1 << 24)
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The following statement contains a magic number: temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The following statement contains a magic number: temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The following statement contains a magic number: hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The following statement contains a magic number: hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The following statement contains a magic number: distances[offset++] = maxLen = 2;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The following statement contains a magic number: offset -= 2;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The following statement contains a magic number: distances[offset++] = maxLen = 3;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,GetMatches,The following statement contains a magic number: offset -= 2;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Skip,The following statement contains a magic number: temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Skip,The following statement contains a magic number: temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Skip,The following statement contains a magic number: hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Skip,The following statement contains a magic number: hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
Magic Number,UnityDissector.Compression.LZ,BinTree,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZ\LzBinTree.cs,Normalize,The following statement contains a magic number: NormalizeLinks(_son' _cyclicBufferSize * 2' subValue);
Magic Number,UnityDissector.IO,FileReader,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\IO\FileReader.cs,ReadInt16,The following statement contains a magic number: var bytes = ReadByteArray(2);
Magic Number,UnityDissector.IO,FileReader,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\IO\FileReader.cs,ReadUInt16,The following statement contains a magic number: var bytes = ReadByteArray(2);
Magic Number,UnityDissector.IO,FileReader,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\IO\FileReader.cs,ReadInt32,The following statement contains a magic number: var bytes = ReadByteArray(4);
Magic Number,UnityDissector.IO,FileReader,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\IO\FileReader.cs,ReadUInt32,The following statement contains a magic number: var bytes = ReadByteArray(4);
Magic Number,UnityDissector.IO,FileReader,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\IO\FileReader.cs,ReadInt64,The following statement contains a magic number: var bytes = ReadByteArray(8);
Magic Number,UnityDissector.IO,FileReader,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\IO\FileReader.cs,ReadUInt64,The following statement contains a magic number: var bytes = ReadByteArray(8);
Magic Number,UnityDissector.IO,FileReader,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\IO\FileReader.cs,ReadSingle,The following statement contains a magic number: var bytes = ReadByteArray(8);
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,OpenNew,The following statement contains a magic number: var headerSize = 5;
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,OpenNew,The following statement contains a magic number: headerSize += files[i].Name.Length + 9;
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,Open,The following statement contains a magic number: fileReader.SkipBytes(8);
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,Close,The following statement contains a magic number: var headerSize = 5;
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,Close,The following statement contains a magic number: headerSize += this[i].Name.Length + 9;
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,Close,The following statement contains a magic number: fileWriter.WriteInt32(3);
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,Close,The following statement contains a magic number: fileWriter.WriteInt32(compressedBody.Length + 60);
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,Close,The following statement contains a magic number: fileWriter.WriteInt32(60);
Magic Number,UnityDissector.Unity,WebArchive,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Unity\WebArchive.cs,Close,The following statement contains a magic number: fileWriter.WriteInt32(compressedBody.Length + 60);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateChar,The following statement contains a magic number: Index < 4
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,UnityDissector.Compression.LZMA,State,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaBase.cs,IsCharState,The following statement contains a magic number: return Index < 7;
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetDictionarySize,The following statement contains a magic number: uint blockSize = Math.Max(m_DictionarySizeCheck' (1 << 12));
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetLiteralProperties,The following statement contains a magic number: lp > 8
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetLiteralProperties,The following statement contains a magic number: lc > 8
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: properties.Length < 5
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int lc = properties[0] % 9;
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int remainder = properties[0] / 9;
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int lp = remainder % 5;
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int pb = remainder / 5;
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: dictionarySize += ((UInt32)(properties[1 + i])) << (i * 8);
Magic Number,UnityDissector.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: i < 4
Magic Number,UnityDissector.Compression.LZMA,LiteralDecoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,GetState,The following statement contains a magic number: return ((pos & m_PosMask) << m_NumPrevBits) + (uint)(prevByte >> (8 - m_NumPrevBits));
Magic Number,UnityDissector.Compression.LZMA,Decoder2,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,DecodeWithMatchByte,The following statement contains a magic number: uint matchBit = (uint)(matchByte >> 7) & 1;
Magic Number,UnityDissector.Compression.LZMA,Decoder2,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaDecoder.cs,DecodeWithMatchByte,The following statement contains a magic number: uint bit = m_Decoders[((1 + matchBit) << 8) + symbol].Decode(rangeDecoder);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,Encoder,The following statement contains a magic number: const Byte kFastSlots = 22;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,Encoder,The following statement contains a magic number: int c = 2;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: pos < (1 << 11)
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 10] + 20);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 10] + 20);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: pos < (1 << 21)
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 20] + 40);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 20] + 40);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 6] + 12);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 6] + 12);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: pos < (1 << 17)
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 16] + 32);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 16] + 32);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: pos < (1 << 27)
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 26] + 52);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 26] + 52);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,Create,The following statement contains a magic number: int numHashBytes = 4;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,Create,The following statement contains a magic number: numHashBytes = 2;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,ReadMatchDistances,The following statement contains a magic number: lenRes = _matchDistances[numDistancePairs - 2];
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: numAvailableBytes < 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenMain < 2 && currentByte != matchByte && repLens[repMaxIndex] < 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenMain < 2 && currentByte != matchByte && repLens[repMaxIndex] < 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenEnd < 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: _optimum[0].Backs2 = reps[2];
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: _optimum[0].Backs3 = reps[3];
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: repLen < 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: UInt32 curAndLenPrice = price + _repMatchLenEncoder.GetPrice(repLen - 2' posState);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: len = ((repLens[0] >= 2) ? repLens[0] + 1 : 2);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: len = ((repLens[0] >= 2) ? repLens[0] + 1 : 2);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: offs += 2;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: offs += 2;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: _optimum[cur].Backs2 = reps[2];
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: _optimum[cur].Backs3 = reps[3];
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: UInt32 curAnd1Price = curPrice +                      _isMatch[(state.Index << Base.kNumPosStatesBitsMax) + posState].GetPrice0() +                      _literalEncoder.GetSubCoder(position' _matchFinder.GetIndexByte(0 - 2)).                      GetPrice(!state.IsCharState()' matchByte' currentByte);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: numAvailableBytes < 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenTest2 >= 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: UInt32 startLen = 2;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenTest < 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenTest2 >= 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: numDistancePairs += 2;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: offs += 2;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenTest2 >= 2
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: offs += 2;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,ChangePair,The following statement contains a magic number: const int kDif = 7;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,ChangePair,The following statement contains a magic number: return (smallDist < ((UInt32)(1) << (32 - kDif)) && bigDist >= (smallDist << kDif));
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,WriteEndMarker,The following statement contains a magic number: int footerBits = 30;
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,CodeOneBlock,The following statement contains a magic number: _matchPriceCount >= (1 << 7)
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,CodeOneBlock,The following statement contains a magic number: nowPos64 - progressPosValuePrev >= (1 << 12)
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,WriteCoderProperties,The following statement contains a magic number: properties[0] = (Byte)((_posStateBits * 5 + _numLiteralPosStateBits) * 9 + _numLiteralContextBits);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,WriteCoderProperties,The following statement contains a magic number: properties[0] = (Byte)((_posStateBits * 5 + _numLiteralPosStateBits) * 9 + _numLiteralContextBits);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,WriteCoderProperties,The following statement contains a magic number: properties[1 + i] = (Byte)(_dictionarySize >> (8 * i));
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,WriteCoderProperties,The following statement contains a magic number: i < 4
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,FillDistancesPrices,The following statement contains a magic number: UInt32 baseVal = ((2 | (posSlot & 1)) << footerBits);
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,SetCoderProperties,The following statement contains a magic number: switch (propIDs[i])                  {                      case CoderPropID.NumFastBytes:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 numFastBytes = (Int32)prop;                              if (numFastBytes < 5 || numFastBytes > Base.kMatchMaxLen)                                  throw new InvalidParamException();                              _numFastBytes = (UInt32)numFastBytes;                              break;                          }                      case CoderPropID.Algorithm:                          {                              /*                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 maximize = (Int32)prop;                              _fastMode = (maximize == 0);                              _maxMode = (maximize >= 2);                              */                              break;                          }                      case CoderPropID.MatchFinder:                          {                              if (!(prop is String))                                  throw new InvalidParamException();                              EMatchFinderType matchFinderIndexPrev = _matchFinderType;                              int m = FindMatchFinder(((string)prop).ToUpper());                              if (m < 0)                                  throw new InvalidParamException();                              _matchFinderType = (EMatchFinderType)m;                              if (_matchFinder != null && matchFinderIndexPrev != _matchFinderType)                              {                                  _dictionarySizePrev = 0xFFFFFFFF;                                  _matchFinder = null;                              }                              break;                          }                      case CoderPropID.DictionarySize:                          {                              const int kDicLogSizeMaxCompress = 30;                              if (!(prop is Int32))                                  throw new InvalidParamException(); ;                              Int32 dictionarySize = (Int32)prop;                              if (dictionarySize < (UInt32)(1 << Base.kDicLogSizeMin) ||                                  dictionarySize > (UInt32)(1 << kDicLogSizeMaxCompress))                                  throw new InvalidParamException();                              _dictionarySize = (UInt32)dictionarySize;                              int dicLogSize;                              for (dicLogSize = 0; dicLogSize < (UInt32)kDicLogSizeMaxCompress; dicLogSize++)                                  if (dictionarySize <= ((UInt32)(1) << dicLogSize))                                      break;                              _distTableSize = (UInt32)dicLogSize * 2;                              break;                          }                      case CoderPropID.PosStateBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumPosStatesBitsEncodingMax)                                  throw new InvalidParamException();                              _posStateBits = (int)v;                              _posStateMask = (((UInt32)1) << (int)_posStateBits) - 1;                              break;                          }                      case CoderPropID.LitPosBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumLitPosStatesBitsEncodingMax)                                  throw new InvalidParamException();                              _numLiteralPosStateBits = (int)v;                              break;                          }                      case CoderPropID.LitContextBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumLitContextBitsMax)                                  throw new InvalidParamException(); ;                              _numLiteralContextBits = (int)v;                              break;                          }                      case CoderPropID.EndMarker:                          {                              if (!(prop is Boolean))                                  throw new InvalidParamException();                              SetWriteEndMarkerMode((Boolean)prop);                              break;                          }                      default:                          throw new InvalidParamException();                  }
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,SetCoderProperties,The following statement contains a magic number: switch (propIDs[i])                  {                      case CoderPropID.NumFastBytes:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 numFastBytes = (Int32)prop;                              if (numFastBytes < 5 || numFastBytes > Base.kMatchMaxLen)                                  throw new InvalidParamException();                              _numFastBytes = (UInt32)numFastBytes;                              break;                          }                      case CoderPropID.Algorithm:                          {                              /*                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 maximize = (Int32)prop;                              _fastMode = (maximize == 0);                              _maxMode = (maximize >= 2);                              */                              break;                          }                      case CoderPropID.MatchFinder:                          {                              if (!(prop is String))                                  throw new InvalidParamException();                              EMatchFinderType matchFinderIndexPrev = _matchFinderType;                              int m = FindMatchFinder(((string)prop).ToUpper());                              if (m < 0)                                  throw new InvalidParamException();                              _matchFinderType = (EMatchFinderType)m;                              if (_matchFinder != null && matchFinderIndexPrev != _matchFinderType)                              {                                  _dictionarySizePrev = 0xFFFFFFFF;                                  _matchFinder = null;                              }                              break;                          }                      case CoderPropID.DictionarySize:                          {                              const int kDicLogSizeMaxCompress = 30;                              if (!(prop is Int32))                                  throw new InvalidParamException(); ;                              Int32 dictionarySize = (Int32)prop;                              if (dictionarySize < (UInt32)(1 << Base.kDicLogSizeMin) ||                                  dictionarySize > (UInt32)(1 << kDicLogSizeMaxCompress))                                  throw new InvalidParamException();                              _dictionarySize = (UInt32)dictionarySize;                              int dicLogSize;                              for (dicLogSize = 0; dicLogSize < (UInt32)kDicLogSizeMaxCompress; dicLogSize++)                                  if (dictionarySize <= ((UInt32)(1) << dicLogSize))                                      break;                              _distTableSize = (UInt32)dicLogSize * 2;                              break;                          }                      case CoderPropID.PosStateBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumPosStatesBitsEncodingMax)                                  throw new InvalidParamException();                              _posStateBits = (int)v;                              _posStateMask = (((UInt32)1) << (int)_posStateBits) - 1;                              break;                          }                      case CoderPropID.LitPosBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumLitPosStatesBitsEncodingMax)                                  throw new InvalidParamException();                              _numLiteralPosStateBits = (int)v;                              break;                          }                      case CoderPropID.LitContextBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumLitContextBitsMax)                                  throw new InvalidParamException(); ;                              _numLiteralContextBits = (int)v;                              break;                          }                      case CoderPropID.EndMarker:                          {                              if (!(prop is Boolean))                                  throw new InvalidParamException();                              SetWriteEndMarkerMode((Boolean)prop);                              break;                          }                      default:                          throw new InvalidParamException();                  }
Magic Number,UnityDissector.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,SetCoderProperties,The following statement contains a magic number: switch (propIDs[i])                  {                      case CoderPropID.NumFastBytes:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 numFastBytes = (Int32)prop;                              if (numFastBytes < 5 || numFastBytes > Base.kMatchMaxLen)                                  throw new InvalidParamException();                              _numFastBytes = (UInt32)numFastBytes;                              break;                          }                      case CoderPropID.Algorithm:                          {                              /*                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 maximize = (Int32)prop;                              _fastMode = (maximize == 0);                              _maxMode = (maximize >= 2);                              */                              break;                          }                      case CoderPropID.MatchFinder:                          {                              if (!(prop is String))                                  throw new InvalidParamException();                              EMatchFinderType matchFinderIndexPrev = _matchFinderType;                              int m = FindMatchFinder(((string)prop).ToUpper());                              if (m < 0)                                  throw new InvalidParamException();                              _matchFinderType = (EMatchFinderType)m;                              if (_matchFinder != null && matchFinderIndexPrev != _matchFinderType)                              {                                  _dictionarySizePrev = 0xFFFFFFFF;                                  _matchFinder = null;                              }                              break;                          }                      case CoderPropID.DictionarySize:                          {                              const int kDicLogSizeMaxCompress = 30;                              if (!(prop is Int32))                                  throw new InvalidParamException(); ;                              Int32 dictionarySize = (Int32)prop;                              if (dictionarySize < (UInt32)(1 << Base.kDicLogSizeMin) ||                                  dictionarySize > (UInt32)(1 << kDicLogSizeMaxCompress))                                  throw new InvalidParamException();                              _dictionarySize = (UInt32)dictionarySize;                              int dicLogSize;                              for (dicLogSize = 0; dicLogSize < (UInt32)kDicLogSizeMaxCompress; dicLogSize++)                                  if (dictionarySize <= ((UInt32)(1) << dicLogSize))                                      break;                              _distTableSize = (UInt32)dicLogSize * 2;                              break;                          }                      case CoderPropID.PosStateBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumPosStatesBitsEncodingMax)                                  throw new InvalidParamException();                              _posStateBits = (int)v;                              _posStateMask = (((UInt32)1) << (int)_posStateBits) - 1;                              break;                          }                      case CoderPropID.LitPosBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumLitPosStatesBitsEncodingMax)                                  throw new InvalidParamException();                              _numLiteralPosStateBits = (int)v;                              break;                          }                      case CoderPropID.LitContextBits:                          {                              if (!(prop is Int32))                                  throw new InvalidParamException();                              Int32 v = (Int32)prop;                              if (v < 0 || v > (UInt32)Base.kNumLitContextBitsMax)                                  throw new InvalidParamException(); ;                              _numLiteralContextBits = (int)v;                              break;                          }                      case CoderPropID.EndMarker:                          {                              if (!(prop is Boolean))                                  throw new InvalidParamException();                              SetWriteEndMarkerMode((Boolean)prop);                              break;                          }                      default:                          throw new InvalidParamException();                  }
Magic Number,UnityDissector.Compression.LZMA,LiteralEncoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetSubCoder,The following statement contains a magic number: return m_Coders[((pos & m_PosMask) << m_NumPrevBits) + (uint)(prevByte >> (8 - m_NumPrevBits))];
Magic Number,UnityDissector.Compression.LZMA,Encoder2,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,EncodeMatched,The following statement contains a magic number: state += ((1 + matchBit) << 8);
Magic Number,UnityDissector.Compression.LZMA,Encoder2,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPrice,The following statement contains a magic number: int i = 7;
Magic Number,UnityDissector.Compression.LZMA,Encoder2,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaEncoder.cs,GetPrice,The following statement contains a magic number: price += m_Encoders[((1 + matchBit) << 8) + context].GetPrice(bit);
Magic Number,UnityDissector.Compression.LZMA,LzmaUtils,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaUtils.cs,Compress,The following statement contains a magic number: outStream.WriteByte((Byte)(fileSize >> (8 * i)));
Magic Number,UnityDissector.Compression.LZMA,LzmaUtils,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaUtils.cs,Compress,The following statement contains a magic number: i < 8
Magic Number,UnityDissector.Compression.LZMA,LzmaUtils,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaUtils.cs,Decompress,The following statement contains a magic number: byte[] properties2 = new byte[5];
Magic Number,UnityDissector.Compression.LZMA,LzmaUtils,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaUtils.cs,Decompress,The following statement contains a magic number: newInStream.Read(properties2' 0' 5) != 5
Magic Number,UnityDissector.Compression.LZMA,LzmaUtils,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaUtils.cs,Decompress,The following statement contains a magic number: newInStream.Read(properties2' 0' 5) != 5
Magic Number,UnityDissector.Compression.LZMA,LzmaUtils,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaUtils.cs,Decompress,The following statement contains a magic number: outSize |= ((long)(byte)v) << (8 * i);
Magic Number,UnityDissector.Compression.LZMA,LzmaUtils,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\LZMA\LzmaUtils.cs,Decompress,The following statement contains a magic number: i < 8
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,FlushData,The following statement contains a magic number: i < 5
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,Encode,The following statement contains a magic number: Range <<= 8;
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,ShiftLow,The following statement contains a magic number: Stream.WriteByte((byte)(temp + (Low >> 32)));
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,ShiftLow,The following statement contains a magic number: _cache = (byte)(((uint)Low) >> 24);
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,ShiftLow,The following statement contains a magic number: (uint)Low < (uint)0xFF000000 || (uint)(Low >> 32) == 1
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,ShiftLow,The following statement contains a magic number: Low = ((uint)Low) << 8;
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,EncodeDirectBits,The following statement contains a magic number: Range <<= 8;
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,EncodeBit,The following statement contains a magic number: Range <<= 8;
Magic Number,UnityDissector.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,GetProcessedSizeAdd,The following statement contains a magic number: return _cacheSize +                  Stream.Position - StartPosition + 4;
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,Init,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,Init,The following statement contains a magic number: i < 5
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,Normalize,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,Normalize,The following statement contains a magic number: Range <<= 8;
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,Normalize2,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,Normalize2,The following statement contains a magic number: Range <<= 8;
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: uint t = (code - range) >> 31;
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: code = (code << 8) | (byte)Stream.ReadByte();
Magic Number,UnityDissector.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: range <<= 8;
Magic Number,UnityDissector.Compression.RangeCoder,BitEncoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoderBit.cs,Encode,The following statement contains a magic number: encoder.Range <<= 8;
Magic Number,UnityDissector.Compression.RangeCoder,BitDecoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoderBit.cs,Decode,The following statement contains a magic number: rangeDecoder.Code = (rangeDecoder.Code << 8) | (byte)rangeDecoder.Stream.ReadByte();
Magic Number,UnityDissector.Compression.RangeCoder,BitDecoder,D:\research\architectureSmells\repos\FICTURE7_Unity3D-Disassembler\Source\Compression\RangeCoder\RangeCoderBit.cs,Decode,The following statement contains a magic number: rangeDecoder.Range <<= 8;
